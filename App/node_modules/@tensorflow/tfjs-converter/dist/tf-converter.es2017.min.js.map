{"version":3,"file":"tf-converter.es2017.min.js","sources":["../src/data/compiled_api.ts","../src/operations/custom_op/register.ts","../src/operations/executors/utils.ts","../src/operations/op_list/arithmetic.ts","../src/operations/op_list/basic_math.ts","../src/operations/op_list/control.ts","../src/operations/op_list/convolution.ts","../src/operations/op_list/creation.ts","../src/operations/op_list/dynamic.ts","../src/operations/op_list/evaluation.ts","../src/operations/op_list/graph.ts","../src/operations/op_list/hash_table.ts","../src/operations/op_list/image.ts","../src/operations/op_list/logical.ts","../src/operations/op_list/matrices.ts","../src/operations/op_list/normalization.ts","../src/operations/op_list/reduction.ts","../src/operations/op_list/slice_join.ts","../src/operations/op_list/spectral.ts","../src/operations/op_list/transformation.ts","../src/operations/operation_mapper.ts","../src/operations/custom_op/node_value_impl.ts","../src/executor/tensor_utils.ts","../src/executor/tensor_array.ts","../src/executor/tensor_list.ts","../src/operations/executors/control_executor.ts","../src/operations/executors/convolution_executor.ts","../src/operations/executors/dynamic_executor.ts","../src/executor/hash_table.ts","../src/operations/operation_executor.ts","../src/operations/executors/arithmetic_executor.ts","../src/operations/executors/basic_math_executor.ts","../src/operations/executors/creation_executor.ts","../src/operations/executors/evaluation_executor.ts","../src/operations/executors/image_executor.ts","../src/operations/executors/graph_executor.ts","../src/operations/executors/logical_executor.ts","../src/operations/executors/matrices_executor.ts","../src/operations/executors/normalization_executor.ts","../src/operations/executors/reduction_executor.ts","../src/operations/executors/slice_join_executor.ts","../src/operations/executors/spectral_executor.ts","../src/operations/executors/transformation_executor.ts","../src/operations/executors/hash_table_executor.ts","../src/executor/execution_context.ts","../src/executor/model_analysis.ts","../src/executor/graph_executor.ts","../src/executor/resource_manager.ts","../src/executor/graph_model.ts","../src/version.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\n/* tslint:disable */\n\n/** Properties of an Any. */\nexport declare interface IAny {\n  /** Any typeUrl */\n  typeUrl?: (string|null);\n\n  /** Any value */\n  value?: (Uint8Array|null);\n}\n\n/** DataType enum. */\nexport enum DataType {\n  'DT_INVALID' = 0,\n  'DT_FLOAT' = 1,\n  'DT_DOUBLE' = 2,\n  'DT_INT32' = 3,\n  'DT_UINT8' = 4,\n  'DT_INT16' = 5,\n  'DT_INT8' = 6,\n  'DT_STRING' = 7,\n  'DT_COMPLEX64' = 8,\n  'DT_INT64' = 9,\n  'DT_BOOL' = 10,\n  'DT_QINT8' = 11,\n  'DT_QUINT8' = 12,\n  'DT_QINT32' = 13,\n  'DT_BFLOAT16' = 14,\n  'DT_FLOAT_REF' = 101,\n  'DT_DOUBLE_REF' = 102,\n  'DT_INT32_REF' = 103,\n  'DT_UINT8_REF' = 104,\n  'DT_INT16_REF' = 105,\n  'DT_INT8_REF' = 106,\n  'DT_STRING_REF' = 107,\n  'DT_COMPLEX64_REF' = 108,\n  'DT_INT64_REF' = 109,\n  'DT_BOOL_REF' = 110,\n  'DT_QINT8_REF' = 111,\n  'DT_QUINT8_REF' = 112,\n  'DT_QINT32_REF' = 113,\n  'DT_BFLOAT16_REF' = 114\n}\n\n/** Properties of a TensorShape. */\nexport declare interface ITensorShape {\n  /** TensorShape dim */\n  dim?: (TensorShape.IDim[]|null);\n\n  /** TensorShape unknownRank */\n  unknownRank?: (boolean|null);\n}\n\nexport namespace TensorShape {\n  /** Properties of a Dim. */\n  export declare interface IDim {\n    /** Dim size */\n    size?: (number|string|null);\n\n    /** Dim name */\n    name?: (string|null);\n  }\n}\n\n/** Properties of a Tensor. */\nexport declare interface ITensor {\n  /** Tensor dtype */\n  dtype?: (DataType|null);\n\n  /** Tensor tensorShape */\n  tensorShape?: (ITensorShape|null);\n\n  /** Tensor versionNumber */\n  versionNumber?: (number|null);\n\n  /** Tensor tensorContent */\n  tensorContent?: (Uint8Array|null);\n\n  /** Tensor floatVal */\n  floatVal?: (number[]|null);\n\n  /** Tensor doubleVal */\n  doubleVal?: (number[]|null);\n\n  /** Tensor intVal */\n  intVal?: (number[]|null);\n\n  /** Tensor stringVal */\n  stringVal?: (Uint8Array[]|null);\n\n  /** Tensor scomplexVal */\n  scomplexVal?: (number[]|null);\n\n  /** Tensor int64Val */\n  int64Val?: ((number | string)[]|null);\n\n  /** Tensor boolVal */\n  boolVal?: (boolean[]|null);\n\n  /** Tensor uint32Val */\n  uint32Val?: (number[]|null);\n\n  /** Tensor uint64Val */\n  uint64Val?: ((number | string)[]|null);\n}\n\n/** Properties of an AttrValue. */\nexport declare interface IAttrValue {\n  /** AttrValue list */\n  list?: (AttrValue.IListValue|null);\n\n  /** AttrValue s */\n  s?: (string|null);\n\n  /** AttrValue i */\n  i?: (number|string|null);\n\n  /** AttrValue f */\n  f?: (number|null);\n\n  /** AttrValue b */\n  b?: (boolean|null);\n\n  /** AttrValue type */\n  type?: (DataType|null);\n\n  /** AttrValue shape */\n  shape?: (ITensorShape|null);\n\n  /** AttrValue tensor */\n  tensor?: (ITensor|null);\n\n  /** AttrValue placeholder */\n  placeholder?: (string|null);\n\n  /** AttrValue func */\n  func?: (INameAttrList|null);\n}\n\nexport namespace AttrValue {\n  /** Properties of a ListValue. */\n  export declare interface IListValue {\n    /** ListValue s */\n    s?: (string[]|null);\n\n    /** ListValue i */\n    i?: ((number | string)[]|null);\n\n    /** ListValue f */\n    f?: (number[]|null);\n\n    /** ListValue b */\n    b?: (boolean[]|null);\n\n    /** ListValue type */\n    type?: (DataType[]|null);\n\n    /** ListValue shape */\n    shape?: (ITensorShape[]|null);\n\n    /** ListValue tensor */\n    tensor?: (ITensor[]|null);\n\n    /** ListValue func */\n    func?: (INameAttrList[]|null);\n  }\n}\n\n/** Properties of a NameAttrList. */\nexport declare interface INameAttrList {\n  /** NameAttrList name */\n  name?: (string|null);\n\n  /** NameAttrList attr */\n  attr?: ({[k: string]: IAttrValue}|null);\n}\n\n/** Properties of a NodeDef. */\nexport declare interface INodeDef {\n  /** NodeDef name */\n  name?: (string|null);\n\n  /** NodeDef op */\n  op?: (string|null);\n\n  /** NodeDef input */\n  input?: (string[]|null);\n\n  /** NodeDef device */\n  device?: (string|null);\n\n  /** NodeDef attr */\n  attr?: ({[k: string]: IAttrValue}|null);\n}\n\n/** Properties of a VersionDef. */\nexport declare interface IVersionDef {\n  /** VersionDef producer */\n  producer?: (number|null);\n\n  /** VersionDef minConsumer */\n  minConsumer?: (number|null);\n\n  /** VersionDef badConsumers */\n  badConsumers?: (number[]|null);\n}\n\n/** Properties of a GraphDef. */\nexport declare interface IGraphDef {\n  /** GraphDef node */\n  node?: (INodeDef[]|null);\n\n  /** GraphDef versions */\n  versions?: (IVersionDef|null);\n\n  /** GraphDef library */\n  library?: (IFunctionDefLibrary|null);\n}\n\n/** Properties of a CollectionDef. */\nexport declare interface ICollectionDef {\n  /** CollectionDef nodeList */\n  nodeList?: (CollectionDef.INodeList|null);\n\n  /** CollectionDef bytesList */\n  bytesList?: (CollectionDef.IBytesList|null);\n\n  /** CollectionDef int64List */\n  int64List?: (CollectionDef.IInt64List|null);\n\n  /** CollectionDef floatList */\n  floatList?: (CollectionDef.IFloatList|null);\n\n  /** CollectionDef anyList */\n  anyList?: (CollectionDef.IAnyList|null);\n}\n\nexport namespace CollectionDef {\n  /** Properties of a NodeList. */\n  export declare interface INodeList {\n    /** NodeList value */\n    value?: (string[]|null);\n  }\n\n  /** Properties of a BytesList. */\n  export declare interface IBytesList {\n    /** BytesList value */\n    value?: (Uint8Array[]|null);\n  }\n\n  /** Properties of an Int64List. */\n  export declare interface IInt64List {\n    /** Int64List value */\n    value?: ((number | string)[]|null);\n  }\n\n  /** Properties of a FloatList. */\n  export declare interface IFloatList {\n    /** FloatList value */\n    value?: (number[]|null);\n  }\n\n  /** Properties of an AnyList. */\n  export declare interface IAnyList {\n    /** AnyList value */\n    value?: (IAny[]|null);\n  }\n}\n\n/** Properties of a SaverDef. */\nexport declare interface ISaverDef {\n  /** SaverDef filenameTensorName */\n  filenameTensorName?: (string|null);\n\n  /** SaverDef saveTensorName */\n  saveTensorName?: (string|null);\n\n  /** SaverDef restoreOpName */\n  restoreOpName?: (string|null);\n\n  /** SaverDef maxToKeep */\n  maxToKeep?: (number|null);\n\n  /** SaverDef sharded */\n  sharded?: (boolean|null);\n\n  /** SaverDef keepCheckpointEveryNHours */\n  keepCheckpointEveryNHours?: (number|null);\n\n  /** SaverDef version */\n  version?: (SaverDef.CheckpointFormatVersion|null);\n}\n\nexport namespace SaverDef {\n  /** CheckpointFormatVersion enum. */\n  export enum CheckpointFormatVersion {'LEGACY' = 0, 'V1' = 1, 'V2' = 2}\n}\n\n/** Properties of a TensorInfo. */\nexport declare interface ITensorInfo {\n  /** TensorInfo name */\n  name?: (string|null);\n\n  /** TensorInfo cooSparse */\n  cooSparse?: (TensorInfo.ICooSparse|null);\n\n  /** TensorInfo dtype */\n  dtype?: (DataType|null);\n\n  /** TensorInfo tensorShape */\n  tensorShape?: (ITensorShape|null);\n}\n\nexport namespace TensorInfo {\n  /** Properties of a CooSparse. */\n  export declare interface ICooSparse {\n    /** CooSparse valuesTensorName */\n    valuesTensorName?: (string|null);\n\n    /** CooSparse indicesTensorName */\n    indicesTensorName?: (string|null);\n\n    /** CooSparse denseShapeTensorName */\n    denseShapeTensorName?: (string|null);\n  }\n}\n\n/** Properties of a SignatureDef. */\nexport declare interface ISignatureDef {\n  /** SignatureDef inputs */\n  inputs?: ({[k: string]: ITensorInfo}|null);\n\n  /** SignatureDef outputs */\n  outputs?: ({[k: string]: ITensorInfo}|null);\n\n  /** SignatureDef methodName */\n  methodName?: (string|null);\n}\n\n/** Properties of an AssetFileDef. */\nexport declare interface IAssetFileDef {\n  /** AssetFileDef tensorInfo */\n  tensorInfo?: (ITensorInfo|null);\n\n  /** AssetFileDef filename */\n  filename?: (string|null);\n}\n\n/** Properties of an OpDef. */\nexport declare interface IOpDef {\n  /** OpDef name */\n  name?: (string|null);\n\n  /** OpDef inputArg */\n  inputArg?: (OpDef.IArgDef[]|null);\n\n  /** OpDef outputArg */\n  outputArg?: (OpDef.IArgDef[]|null);\n\n  /** OpDef attr */\n  attr?: (OpDef.IAttrDef[]|null);\n\n  /** OpDef deprecation */\n  deprecation?: (OpDef.IOpDeprecation|null);\n\n  /** OpDef summary */\n  summary?: (string|null);\n\n  /** OpDef description */\n  description?: (string|null);\n\n  /** OpDef isCommutative */\n  isCommutative?: (boolean|null);\n\n  /** OpDef isAggregate */\n  isAggregate?: (boolean|null);\n\n  /** OpDef isStateful */\n  isStateful?: (boolean|null);\n\n  /** OpDef allowsUninitializedInput */\n  allowsUninitializedInput?: (boolean|null);\n}\n\nexport namespace OpDef {\n  /** Properties of an ArgDef. */\n  export declare interface IArgDef {\n    /** ArgDef name */\n    name?: (string|null);\n\n    /** ArgDef description */\n    description?: (string|null);\n\n    /** ArgDef type */\n    type?: (DataType|null);\n\n    /** ArgDef typeAttr */\n    typeAttr?: (string|null);\n\n    /** ArgDef numberAttr */\n    numberAttr?: (string|null);\n\n    /** ArgDef typeListAttr */\n    typeListAttr?: (string|null);\n\n    /** ArgDef isRef */\n    isRef?: (boolean|null);\n  }\n\n  /** Properties of an AttrDef. */\n  export declare interface IAttrDef {\n    /** AttrDef name */\n    name?: (string|null);\n\n    /** AttrDef type */\n    type?: (string|null);\n\n    /** AttrDef defaultValue */\n    defaultValue?: (IAttrValue|null);\n\n    /** AttrDef description */\n    description?: (string|null);\n\n    /** AttrDef hasMinimum */\n    hasMinimum?: (boolean|null);\n\n    /** AttrDef minimum */\n    minimum?: (number|string|null);\n\n    /** AttrDef allowedValues */\n    allowedValues?: (IAttrValue|null);\n  }\n\n  /** Properties of an OpDeprecation. */\n  export declare interface IOpDeprecation {\n    /** OpDeprecation version */\n    version?: (number|null);\n\n    /** OpDeprecation explanation */\n    explanation?: (string|null);\n  }\n}\n\n/** Properties of an OpList. */\nexport declare interface IOpList {\n  /** OpList op */\n  op?: (IOpDef[]|null);\n}\n\n/** Properties of a MetaGraphDef. */\nexport declare interface IMetaGraphDef {\n  /** MetaGraphDef metaInfoDef */\n  metaInfoDef?: (MetaGraphDef.IMetaInfoDef|null);\n\n  /** MetaGraphDef graphDef */\n  graphDef?: (IGraphDef|null);\n\n  /** MetaGraphDef saverDef */\n  saverDef?: (ISaverDef|null);\n\n  /** MetaGraphDef collectionDef */\n  collectionDef?: ({[k: string]: ICollectionDef}|null);\n\n  /** MetaGraphDef signatureDef */\n  signatureDef?: ({[k: string]: ISignatureDef}|null);\n\n  /** MetaGraphDef assetFileDef */\n  assetFileDef?: (IAssetFileDef[]|null);\n}\n\nexport namespace MetaGraphDef {\n  /** Properties of a MetaInfoDef. */\n  export declare interface IMetaInfoDef {\n    /** MetaInfoDef metaGraphVersion */\n    metaGraphVersion?: (string|null);\n\n    /** MetaInfoDef strippedOpList */\n    strippedOpList?: (IOpList|null);\n\n    /** MetaInfoDef anyInfo */\n    anyInfo?: (IAny|null);\n\n    /** MetaInfoDef tags */\n    tags?: (string[]|null);\n\n    /** MetaInfoDef tensorflowVersion */\n    tensorflowVersion?: (string|null);\n\n    /** MetaInfoDef tensorflowGitVersion */\n    tensorflowGitVersion?: (string|null);\n  }\n}\n\n/** Properties of a SavedModel. */\nexport declare interface ISavedModel {\n  /** SavedModel savedModelSchemaVersion */\n  savedModelSchemaVersion?: (number|string|null);\n\n  /** SavedModel metaGraphs */\n  metaGraphs?: (IMetaGraphDef[]|null);\n}\n\n/** Properties of a FunctionDefLibrary. */\nexport declare interface IFunctionDefLibrary {\n  /** FunctionDefLibrary function */\n  'function'?: (IFunctionDef[]|null);\n\n  /** FunctionDefLibrary gradient */\n  gradient?: (IGradientDef[]|null);\n}\n\n/** Properties of a FunctionDef. */\nexport declare interface IFunctionDef {\n  /** FunctionDef signature */\n  signature?: (IOpDef|null);\n\n  /** FunctionDef attr */\n  attr?: ({[k: string]: IAttrValue}|null);\n\n  /** FunctionDef nodeDef */\n  nodeDef?: (INodeDef[]|null);\n\n  /** FunctionDef ret */\n  ret?: ({[k: string]: string}|null);\n}\n\n/** Properties of a GradientDef. */\nexport declare interface IGradientDef {\n  /** GradientDef functionName */\n  functionName?: (string|null);\n\n  /** GradientDef gradientFunc */\n  gradientFunc?: (string|null);\n}\n","\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpExecutor, OpMapper} from '../types';\n\nconst CUSTOM_OPS: {[key: string]: OpMapper} = {};\n\n/**\n * Register an Op for graph model executor. This allow you to register\n * TensorFlow custom op or override existing op.\n *\n * Here is an example of registering a new MatMul Op.\n * ```js\n * const customMatmul = (node) =>\n *    tf.matMul(\n *        node.inputs[0], node.inputs[1],\n *        node.attrs['transpose_a'], node.attrs['transpose_b']);\n *\n * tf.registerOp('MatMul', customMatmul);\n * ```\n * The inputs and attrs of the node object is based on the TensorFlow op\n * registry.\n *\n * @param name The Tensorflow Op name.\n * @param opFunc An op function which is called with the current graph node\n * during execution and needs to return a tensor or a list of tensors. The node\n * has the following attributes:\n *    - attr: A map from attribute name to its value\n *    - inputs: A list of input tensors\n *\n * @doc {heading: 'Models', subheading: 'Op Registry'}\n */\nexport function registerOp(name: string, opFunc: OpExecutor) {\n  const opMapper: OpMapper = {\n    tfOpName: name,\n    category: 'custom',\n    inputs: [],\n    attrs: [],\n    customExecutor: opFunc\n  };\n\n  CUSTOM_OPS[name] = opMapper;\n}\n\n/**\n * Retrieve the OpMapper object for the registered op.\n *\n * @param name The Tensorflow Op name.\n *\n * @doc {heading: 'Models', subheading: 'Op Registry'}\n */\nexport function getRegisteredOp(name: string): OpMapper {\n  return CUSTOM_OPS[name];\n}\n\n/**\n * Deregister the Op for graph model executor.\n *\n * @param name The Tensorflow Op name.\n *\n * @doc {heading: 'Models', subheading: 'Op Registry'}\n */\nexport function deregisterOp(name: string) {\n  delete CUSTOM_OPS[name];\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {clone, Tensor, util} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {ResourceManager} from '../../executor/resource_manager';\nimport {Node, ValueType} from '../types';\n\nexport function getParamValue(\n    paramName: string, node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext, resourceManager?: ResourceManager): ValueType {\n  const inputParam = node.inputParams[paramName];\n  if (inputParam && inputParam.inputIndexStart !== undefined) {\n    const start = inputParam.inputIndexStart;\n    const end = inputParam.inputIndexEnd === 0 ?\n        undefined :\n        (inputParam.inputIndexEnd === undefined ? start + 1 :\n                                                  inputParam.inputIndexEnd);\n    if (inputParam.type === 'tensor') {\n      return getTensor(\n          node.inputNames[inputParam.inputIndexStart], tensorMap, context,\n          resourceManager);\n    }\n    if (inputParam.type === 'tensors') {\n      const inputs = node.inputNames.slice(start, end);\n\n      return inputs.map(\n          name => getTensor(name, tensorMap, context, resourceManager));\n    }\n    const tensor = getTensor(\n        node.inputNames.slice(start)[0], tensorMap, context, resourceManager);\n    const data = tensor.dataSync();\n    return inputParam.type === 'number' ?\n        data[0] :\n        util.toNestedArray(tensor.shape, data);\n  }\n  const attrParam = node.attrParams[paramName];\n  return attrParam && attrParam.value;\n}\n\n/**\n * Retrieve the tensor from tensorsMap based on input name.\n * @param name Node input name\n * @param tensorsMap Tensors map keyed by the node\n * @param context contains tensors and information for running the current node.\n * @param resourceManager Optional. Contains global resources of the model.\n */\nexport function getTensor(\n    name: string, tensorsMap: NamedTensorsMap, context: ExecutionContext,\n    resourceManager?: ResourceManager): Tensor {\n  const [nodeName, index] = parseNodeName(name);\n\n  if (resourceManager != null) {\n    const tensor = resourceManager.getHashTableHandleByName(nodeName);\n    if (tensor != null) {\n      return tensor;\n    }\n  }\n\n  const contextId = context.currentContextIds.find(contextId => {\n    return !!tensorsMap[getNodeNameWithContextId(nodeName, contextId)];\n  });\n\n  return contextId !== undefined ?\n      tensorsMap[getNodeNameWithContextId(nodeName, contextId)][index] :\n      undefined;\n}\n\n/**\n * Retrieve the tensors based on input name for current context.\n * @param name Node input name\n * @param tensorsMap Tensors map keyed by the node\n */\nexport function getTensorsForCurrentContenxt(\n    name: string, tensorsMap: NamedTensorsMap,\n    context: ExecutionContext): Tensor[] {\n  return tensorsMap[getNodeNameWithContextId(name, context.currentContextId)];\n}\n\n/**\n * Returns the node name and index from the Node input name.\n * @param inputName The input name of the node, in format of\n * node_name:output_index, i.e. MatMul:0, if the output_index is not set, it is\n * default to 0.\n */\nexport function getNodeNameAndIndex(\n    inputName: string, context?: ExecutionContext): [string, number] {\n  const [nodeName, index] = parseNodeName(inputName);\n\n  return [\n    getNodeNameWithContextId(nodeName, context && context.currentContextId),\n    index\n  ];\n}\n\nfunction getNodeNameWithContextId(name: string, contextId?: string): string {\n  return !!contextId ? `${name}-${contextId}` : name;\n}\n\nexport function parseNodeName(name: string): [string, number] {\n  const parts = name.split(':');\n  if (parts.length === 1) {\n    return [name, 0];\n  }\n\n  const nodeName = parts[0];\n  return [nodeName, Number(parts[parts.length - 1])];\n}\n\nexport function split(arr: number[], size: number) {\n  const res = [];\n  for (let i = 0; i < arr.length; i += size) {\n    res.push(arr.slice(i, i + size));\n  }\n  return res;\n}\nexport function getPadding(\n    node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): ValueType {\n  let pad = getParamValue('pad', node, tensorMap, context);\n  if (pad === 'explicit') {\n    // This is 1d array, we need to convert it to 2d array\n    pad = getParamValue('explicitPaddings', node, tensorMap, context);\n    const explicitPadding: [\n      [number, number], [number, number], [number, number], [number, number]\n    ] = [[0, 0], [0, 0], [0, 0], [0, 0]];\n    for (let i = 0; i < 4; i++) {\n      explicitPadding[i][0] = (pad as number[])[i * 2];\n      explicitPadding[i][1] = (pad as number[])[i * 2 + 1];\n    }\n    return explicitPadding;\n  }\n  return pad;\n}\n\n/**\n *  Reuse the tensor if it is marked as keep, otherwise clone the tensor to\n *  avoid disposal. This is important for TensorArray and TensorList ops, since\n *  internally they use a tensor as the id for TensorArray and TensorList, and\n * to simplify lookup, they also use Tensor.id as the key to the internal map.\n * These id tensors have been marked as kept in the backend, we need avoid clone\n * them in order to create new Tensor.id.\n * @param tensor\n */\nexport function cloneTensor(tensor: Tensor): Tensor {\n  return tensor.kept ? tensor : clone(tensor);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Add',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'AddV2',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'AddN',\n    'category': 'arithmetic',\n    'inputs': [{'start': 0, 'end': 0, 'name': 'tensors', 'type': 'tensors'}]\n  },\n  {\n    'tfOpName': 'BiasAdd',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Sub',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'RealDiv',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Div',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'DivNoNan',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'FloorDiv',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Mul',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Maximum',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'}\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Minimum',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'}\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Pow',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'SquaredDifference',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Mod',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'FloorMod',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'T',\n      'name': 'dtype',\n      'type': 'dtype',\n      'notSupported': true\n    }]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Abs',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Acos',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Asin',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Atan',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Atan2',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'y', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Ceil',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'ClipByValue',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'clipValueMin', 'type': 'number'},\n      {'start': 2, 'name': 'clipValueMax', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Complex',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'real', 'type': 'tensor'},\n      {'start': 1, 'name': 'imag', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'ComplexAbs',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Cos',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Cosh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Elu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Exp',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Floor',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Log',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Imag',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'Tout',\n        'name': 'outputType',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Neg',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Real',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'Tout',\n        'name': 'outputType',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Prelu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'alpha', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Relu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Relu6',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Selu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sigmoid',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sin',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sinh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sqrt',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Rsqrt',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Square',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Tan',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Tanh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sign',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Round',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Expm1',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Log1p',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Reciprocal',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Softplus',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Asinh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Acosh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Atanh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Erf',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Prod',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axes', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'keep_dims',\n        'name': 'keepDims',\n        'type': 'bool',\n        'notSupported': true\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LeakyRelu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'alpha',\n        'name': 'alpha',\n        'type': 'number',\n        'defaultValue': 0.2\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'IsNan',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'T',\n      'name': 'dtype',\n      'type': 'dtype',\n      'notSupported': true\n    }]\n  }\n];\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'EmptyTensorList',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'elementShape', 'type': 'shape'},\n      {'start': 1, 'name': 'maxNumElements', 'type': 'number'},\n    ],\n    'attrs':\n        [{'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'LoopCond',\n    'category': 'control',\n    'inputs': [{'start': 0, 'name': 'pred', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'Switch',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'data', 'type': 'tensor'},\n      {'start': 1, 'name': 'pred', 'type': 'tensor'}\n    ]\n  },\n  {\n    'tfOpName': 'Merge',\n    'category': 'control',\n    'inputs': [{'start': 0, 'end': 0, 'name': 'tensors', 'type': 'tensors'}]\n  },\n  {\n    'tfOpName': 'Enter',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true},\n      {'tfName': 'frame_name', 'name': 'frameName', 'type': 'string'},\n      {'tfName': 'is_constant', 'name': 'isConstant', 'type': 'bool'}\n    ]\n  },\n  {\n    'tfOpName': 'Exit',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'NextIteration',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'size', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'element_shape', 'name': 'elementShape', 'type': 'shape'},\n      {'tfName': 'dynamic_size', 'name': 'dynamicSize', 'type': 'bool'},\n      {'tfName': 'clear_after_read', 'name': 'clearAfterRead', 'type': 'bool'},\n      {\n        'tfName': 'identical_element_shapes',\n        'name': 'identicalElementShapes',\n        'type': 'bool'\n      },\n      {'tfName': 'tensor_array_name', 'name': 'name', 'type': 'string'}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayWriteV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'tensor'},\n      {'start': 1, 'name': 'index', 'type': 'number'},\n      {'start': 2, 'name': 'tensor', 'type': 'tensor'},\n      {'start': 3, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayReadV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'tensor'},\n      {'start': 1, 'name': 'index', 'type': 'number'},\n      {'start': 2, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [{\n      'tfName': 'dtype',\n      'name': 'dtype',\n      'type': 'dtype',\n      'notSupported': true\n    }]\n  },\n  {\n    'tfOpName': 'TensorArrayGatherV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'number[]'},\n      {'start': 2, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'element_shape', 'name': 'elementShape', 'type': 'shape'}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayScatterV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'number[]'},\n      {'start': 2, 'name': 'tensor', 'type': 'tensor'},\n      {'start': 3, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorArrayConcatV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'tensor'},\n      {'start': 1, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'}, {\n        'tfName': 'element_shape_except0',\n        'name': 'elementShapeExcept0',\n        'type': 'shape',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorArraySplitV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'tensor'},\n      {'start': 1, 'name': 'tensor', 'type': 'tensor'},\n      {'start': 2, 'name': 'lengths', 'type': 'number[]'},\n      {'start': 3, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorArraySizeV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'tensor'},\n      {'start': 1, 'name': 'flowIn', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayCloseV3',\n    'category': 'control',\n    'inputs': [{'start': 0, 'name': 'tensorArrayId', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'StatelessIf',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'cond', 'type': 'tensor'},\n      {'start': 1, 'end': 0, 'name': 'args', 'type': 'tensors'}\n    ],\n    'attrs': [\n      {'tfName': 'then_branch', 'name': 'thenBranch', 'type': 'func'},\n      {'tfName': 'else_branch', 'name': 'elseBranch', 'type': 'func'}\n    ]\n  },\n  {\n    'tfOpName': 'If',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'cond', 'type': 'tensor'},\n      {'start': 1, 'end': 0, 'name': 'args', 'type': 'tensors'}\n    ],\n    'attrs': [\n      {'tfName': 'then_branch', 'name': 'thenBranch', 'type': 'func'},\n      {'tfName': 'else_branch', 'name': 'elseBranch', 'type': 'func'}\n    ]\n  },\n  {\n    'tfOpName': 'StatelessWhile',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'end': 0, 'name': 'args', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'cond', 'name': 'cond', 'type': 'func'},\n      {'tfName': 'body', 'name': 'body', 'type': 'func'}\n    ]\n  },\n  {\n    'tfOpName': 'While',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'end': 0, 'name': 'args', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'cond', 'name': 'cond', 'type': 'func'},\n      {'tfName': 'body', 'name': 'body', 'type': 'func'}\n    ]\n  },\n  {\n    'tfOpName': 'TensorListScatter',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'number[]'},\n      {'start': 2, 'name': 'elementShape', 'type': 'shape'}\n    ],\n    'attrs':\n        [{'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorListScatterV2',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'number[]'},\n      {'start': 2, 'name': 'elementShape', 'type': 'shape'},\n      {'start': 3, 'name': 'numElements', 'type': 'number'},\n    ],\n    'attrs':\n        [{'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorListGather',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorListId', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'number[]'},\n      {'start': 2, 'name': 'elementShape', 'type': 'shape'},\n    ],\n    'attrs':\n        [{'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorListGetItem',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorListId', 'type': 'tensor'},\n      {'start': 1, 'name': 'index', 'type': 'number'},\n      {'start': 2, 'name': 'elementShape', 'type': 'shape'},\n    ],\n    'attrs':\n        [{'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorListSetItem',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorListId', 'type': 'tensor'},\n      {'start': 1, 'name': 'index', 'type': 'number'},\n      {'start': 2, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs':\n        [{'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorListReserve',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'elementShape', 'type': 'shape'},\n      {'start': 1, 'name': 'numElements', 'type': 'number'},\n    ],\n    'attrs':\n        [{'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorListFromTensor',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n      {'start': 1, 'name': 'elementShape', 'type': 'shape'}\n    ],\n    'attrs':\n        [{'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorListStack',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorListId', 'type': 'tensor'},\n      {'start': 1, 'name': 'elementShape', 'type': 'shape'},\n    ],\n    'attrs': [\n      {'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'},\n      {'tfName': 'num_elements', 'name': 'numElements', 'type': 'dtype'}\n    ]\n  },\n  {\n    'tfOpName': 'TensorListSplit',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n      {'start': 1, 'name': 'elementShape', 'type': 'shape'},\n      {'start': 2, 'name': 'lengths', 'type': 'number[]'},\n    ],\n    'attrs':\n        [{'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorListConcat',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorListId', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'element_shape', 'name': 'elementShape', 'type': 'shape'},\n      {'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}\n    ]\n  },\n  {\n    'tfOpName': 'TensorListPopBack',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorListId', 'type': 'tensor'},\n      {'start': 1, 'name': 'elementShape', 'type': 'shape'},\n    ],\n    'attrs':\n        [{'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorListPushBack',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorListId', 'type': 'tensor'},\n      {'start': 1, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}\n    ]\n  }\n];\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'AvgPool',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'MaxPool',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]'}, {\n        'tfName': 'explicit_paddings',\n        'name': 'explicitPaddings',\n        'type': 'number[]',\n        'defaultValue': [],\n        'notSupported': true\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'MaxPoolWithArgmax',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'},\n      {'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]'}, {\n        'tfName': 'include_batch_in_index',\n        'name': 'includeBatchInIndex',\n        'type': 'bool'\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'AvgPool3D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'MaxPool3D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Conv1D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'stride', 'name': 'stride', 'type': 'number'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NWC'\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'dilation',\n        'name': 'dilation',\n        'type': 'number',\n        'defaultValue': 1\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Conv2D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true},\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'},\n      {'tfName': 'useCudnnOnGpu', 'name': 'useCudnnOnGpu', 'type': 'bool'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {\n        'tfName': 'explicit_paddings',\n        'name': 'explicitPaddings',\n        'type': 'number[]',\n        'defaultValue': []\n      },\n      {'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': '_FusedConv2D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n      {'start': 2, end: 0, 'name': 'args', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'num_args', 'name': 'numArgs', 'type': 'number'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true},\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'explicit_paddings',\n        'name': 'explicitPaddings',\n        'type': 'number[]',\n        'defaultValue': []\n      },\n      {\n        'tfName': 'use_cudnn_on_gpu',\n        'name': 'useCudnnOnGpu',\n        'type': 'bool',\n        'defaultValue': true\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {\n        'tfName': 'dilations',\n        'name': 'dilations',\n        'type': 'number[]',\n        'defaultValue': [1, 1, 1, 1]\n      },\n      {\n        'tfName': 'fused_ops',\n        'name': 'fusedOps',\n        'type': 'string[]',\n        'defaultValue': []\n      },\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.0001\n      },\n      {\n        'tfName': 'leakyrelu_alpha',\n        'name': 'leakyreluAlpha',\n        'type': 'number'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Conv2DBackpropInput',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 2, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n      {'start': 0, 'name': 'outputShape', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {\n        'tfName': 'explicit_paddings',\n        'name': 'explicitPaddings',\n        'type': 'number[]',\n        'defaultValue': []\n      },\n      {\n        'tfName': 'dilations',\n        'name': 'dilations',\n        'type': 'number[]',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'DepthwiseConv2d',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'input', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {\n        'tfName': 'explicit_paddings',\n        'name': 'explicitPaddings',\n        'type': 'number[]',\n        'defaultValue': []\n      },\n      {'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'DepthwiseConv2dNative',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'input', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {\n        'tfName': 'explicit_paddings',\n        'name': 'explicitPaddings',\n        'type': 'number[]',\n        'defaultValue': []\n      },\n      {'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'FusedDepthwiseConv2dNative',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n      {'start': 2, end: 0, 'name': 'args', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'num_args', 'name': 'numArgs', 'type': 'number'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true},\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {\n        'tfName': 'dilations',\n        'name': 'dilations',\n        'type': 'number[]',\n        'defaultValue': [1, 1, 1, 1]\n      },\n      {\n        'tfName': 'fused_ops',\n        'name': 'fusedOps',\n        'type': 'string[]',\n        'defaultValue': []\n      },\n      {\n        'tfName': 'explicit_paddings',\n        'name': 'explicitPaddings',\n        'type': 'number[]',\n        'defaultValue': []\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Conv3D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]'}\n    ],\n  },\n  {\n    'tfOpName': 'Dilation2D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'rates', 'name': 'dilations', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Fill',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n      {'start': 1, 'name': 'value', 'type': 'number'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'LinSpace',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'start', 'type': 'number'},\n      {'start': 1, 'name': 'stop', 'type': 'number'},\n      {'start': 2, 'name': 'num', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'OneHot',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'indices', 'type': 'tensor'},\n      {'start': 1, 'name': 'depth', 'type': 'number'},\n      {'start': 2, 'name': 'onValue', 'type': 'number', 'defaultValue': 1},\n      {'start': 3, 'name': 'offValue', 'type': 'number', 'defaultValue': 0},\n    ],\n    'attrs': [\n      {\n        'tfName': 'axis',\n        'name': 'axis',\n        'type': 'number',\n        'notSupported': true\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Ones',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'OnesLike',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [{'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'RandomUniform',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'minval',\n        'name': 'minval',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'maxval',\n        'name': 'maxval',\n        'type': 'number',\n        'defaultValue': 1\n      },\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'seed', 'name': 'seed', 'type': 'number', 'defaultValue': 0}, {\n        'tfName': 'seed2',\n        'name': 'seed2',\n        'type': 'number',\n        'defaultValue': 0,\n        'notSupported': true\n      },\n      {'tfName': 'T', 'name': 'T', 'type': 'number', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Range',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'start', 'type': 'number'},\n      {'start': 1, 'name': 'stop', 'type': 'number'},\n      {'start': 2, 'name': 'step', 'type': 'number', 'defaultValue': 0},\n    ],\n    'attrs': [{'tfName': 'Tidx', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TruncatedNormal',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'means',\n        'name': 'mean',\n        'type': 'number',\n        'defaultValue': 0.0\n      },\n      {\n        'tfName': 'stddev',\n        'name': 'stdDev',\n        'type': 'number',\n        'defaultValue': 1.0\n      },\n      {'tfName': 'seed', 'name': 'seed', 'type': 'number'}, {\n        'tfName': 'seed2',\n        'name': 'seed2',\n        'type': 'number',\n        'defaultValue': 0,\n        'notSupported': true\n      },\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'T', 'name': 'T', 'type': 'number', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Zeros',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'ZerosLike',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'Multinomial',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'logits', 'type': 'tensor'},\n      {'start': 1, 'name': 'numSamples', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'seed', 'name': 'seed', 'type': 'number'},\n      {'tfName': 'seed2', 'name': 'seed2', 'type': 'number'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'output_dtype', 'name': 'output_dtype', 'type': 'dtype'}\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'NonMaxSuppressionV2',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'boxes', 'type': 'tensor'},\n      {'start': 1, 'name': 'scores', 'type': 'tensor'},\n      {'start': 2, 'name': 'maxOutputSize', 'type': 'number'},\n      {'start': 3, 'name': 'iouThreshold', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'NonMaxSuppressionV3',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'boxes', 'type': 'tensor'},\n      {'start': 1, 'name': 'scores', 'type': 'tensor'},\n      {'start': 2, 'name': 'maxOutputSize', 'type': 'number'},\n      {'start': 3, 'name': 'iouThreshold', 'type': 'number'},\n      {'start': 4, 'name': 'scoreThreshold', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'NonMaxSuppressionV4',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'boxes', 'type': 'tensor'},\n      {'start': 1, 'name': 'scores', 'type': 'tensor'},\n      {'start': 2, 'name': 'maxOutputSize', 'type': 'number'},\n      {'start': 3, 'name': 'iouThreshold', 'type': 'number'},\n      {'start': 4, 'name': 'scoreThreshold', 'type': 'number'}\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'T_threshold',\n        'name': 'threshold',\n        'type': 'dtype',\n        'notSupported': true\n      },\n      {\n        'tfName': 'pad_to_max_output_size',\n        'name': 'padToMaxOutputSize',\n        'type': 'bool'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'NonMaxSuppressionV5',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'boxes', 'type': 'tensor'},\n      {'start': 1, 'name': 'scores', 'type': 'tensor'},\n      {'start': 2, 'name': 'maxOutputSize', 'type': 'number'},\n      {'start': 3, 'name': 'iouThreshold', 'type': 'number'},\n      {'start': 4, 'name': 'scoreThreshold', 'type': 'number'},\n      {'start': 5, 'name': 'softNmsSigma', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'Where',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'condition', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'ListDiff',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'y', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'T',\n      'name': 'dtype',\n      'type': 'dtype',\n      'notSupported': true\n    }]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'TopKV2',\n    'category': 'evaluation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'k', 'type': 'number'},\n    ],\n    'attrs': [{'tfName': 'sorted', 'name': 'sorted', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Unique',\n    'category': 'evaluation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n  },\n  {\n    'tfOpName': 'UniqueV2',\n    'category': 'evaluation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number'},\n    ],\n  },\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'PlaceholderWithDefault',\n    'category': 'graph',\n    'inputs': [\n      {'start': 0, 'name': 'default', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'shape', 'name': 'shape', 'type': 'shape'},\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'}\n    ]\n  },\n  {\n    'tfOpName': 'Placeholder',\n    'category': 'graph',\n    'attrs': [\n      {'tfName': 'shape', 'name': 'shape', 'type': 'shape'},\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'}\n    ]\n  },\n  {'tfOpName': 'Const', 'category': 'graph'}, {\n    'tfOpName': 'Identity',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'IdentityN',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'end': 0, 'name': 'x', 'type': 'tensors'}]\n  },\n  {\n    'tfOpName': 'Snapshot',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'Rank',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'Size',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'Shape',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'ShapeN',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'end': 0, 'name': 'x', 'type': 'tensors'}]\n  },\n  {\n    'tfOpName': 'Print',\n    'category': 'graph',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'data', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'message', 'name': 'message', 'type': 'string'}, {\n        'tfName': 'first_n',\n        'name': 'firstN',\n        'type': 'number',\n        'notSupported': true\n      },\n      {\n        'tfName': 'summarize',\n        'name': 'summarize',\n        'type': 'number',\n        'defaultValue': 3\n      }\n    ]\n  },\n  {'tfOpName': 'NoOp', 'category': 'graph', 'inputs': []}, {\n    'tfOpName': 'StopGradient',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'FakeQuantWithMinMaxVars',\n    'category': 'graph',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'min', 'name': 'min', 'type': 'number'},\n      {'tfName': 'max', 'name': 'max', 'type': 'number'}\n    ]\n  }\n];\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'HashTable',\n    'category': 'hash_table',\n    'inputs': [],\n    'attrs': [\n      {'tfName': 'shared_name', 'name': 'sharedName', 'type': 'string'},\n      {\n        'tfName': 'use_node_name_sharing',\n        'name': 'useNodeNameSharing',\n        'type': 'bool'\n      },\n      {'tfName': 'key_dtype', 'name': 'keyDType', 'type': 'dtype'},\n      {'tfName': 'value_dtype', 'name': 'valueDType', 'type': 'dtype'},\n    ]\n  },\n  {\n    'tfOpName': 'HashTableV2',\n    'category': 'hash_table',\n    'inputs': [],\n    'attrs': [\n      {'tfName': 'shared_name', 'name': 'sharedName', 'type': 'string'},\n      {\n        'tfName': 'use_node_name_sharing',\n        'name': 'useNodeNameSharing',\n        'type': 'bool'\n      },\n      {'tfName': 'key_dtype', 'name': 'keyDType', 'type': 'dtype'},\n      {'tfName': 'value_dtype', 'name': 'valueDType', 'type': 'dtype'},\n    ]\n  },\n  {\n    'tfOpName': 'LookupTableImport',\n    'category': 'hash_table',\n    'inputs': [\n      {'start': 0, 'name': 'tableHandle', 'type': 'tensor'},\n      {'start': 1, 'name': 'keys', 'type': 'tensor'},\n      {'start': 2, 'name': 'values', 'type': 'tensor'}\n    ],\n    'attrs': [\n      {'tfName': 'Tin', 'name': 'tIn', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'Tout',\n        'name': 'tOut',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LookupTableImportV2',\n    'category': 'hash_table',\n    'inputs': [\n      {'start': 0, 'name': 'tableHandle', 'type': 'tensor'},\n      {'start': 1, 'name': 'keys', 'type': 'tensor'},\n      {'start': 2, 'name': 'values', 'type': 'tensor'}\n    ],\n    'attrs': [\n      {'tfName': 'Tin', 'name': 'tIn', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'Tout',\n        'name': 'tOut',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LookupTableFind',\n    'category': 'hash_table',\n    'inputs': [\n      {'start': 0, 'name': 'tableHandle', 'type': 'tensor'},\n      {'start': 1, 'name': 'keys', 'type': 'tensor'},\n      {'start': 2, 'name': 'defaultValue', 'type': 'tensor'}\n    ],\n    'attrs': [\n      {'tfName': 'Tin', 'name': 'tIn', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'Tout',\n        'name': 'tOut',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LookupTableFindV2',\n    'category': 'hash_table',\n    'inputs': [\n      {'start': 0, 'name': 'tableHandle', 'type': 'tensor'},\n      {'start': 1, 'name': 'keys', 'type': 'tensor'},\n      {'start': 2, 'name': 'defaultValue', 'type': 'tensor'}\n    ],\n    'attrs': [\n      {'tfName': 'Tin', 'name': 'tIn', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'Tout',\n        'name': 'tOut',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LookupTableSize',\n    'category': 'hash_table',\n    'inputs': [\n      {'start': 0, 'name': 'tableHandle', 'type': 'tensor'}\n    ]\n  },\n  {\n    'tfOpName': 'LookupTableSizeV2',\n    'category': 'hash_table',\n    'inputs': [\n      {'start': 0, 'name': 'tableHandle', 'type': 'tensor'}\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'ResizeBilinear',\n    'category': 'image',\n    'inputs': [\n      {'start': 0, 'name': 'images', 'type': 'tensor'},\n      {'start': 1, 'name': 'size', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {'tfName': 'align_corners', 'name': 'alignCorners', 'type': 'bool'}, {\n        'tfName': 'half_pixel_centers',\n        'name': 'halfPixelCenters',\n        'type': 'bool'\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'ResizeNearestNeighbor',\n    'category': 'image',\n    'inputs': [\n      {'start': 0, 'name': 'images', 'type': 'tensor'},\n      {'start': 1, 'name': 'size', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {'tfName': 'align_corners', 'name': 'alignCorners', 'type': 'bool'}, {\n        'tfName': 'half_pixel_centers',\n        'name': 'halfPixelCenters',\n        'type': 'bool'\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'CropAndResize',\n    'category': 'image',\n    'inputs': [\n      {'start': 0, 'name': 'image', 'type': 'tensor'},\n      {'start': 1, 'name': 'boxes', 'type': 'tensor'},\n      {'start': 2, 'name': 'boxInd', 'type': 'tensor'},\n      {'start': 3, 'name': 'cropSize', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {'tfName': 'method', 'name': 'method', 'type': 'string'}, {\n        'tfName': 'extrapolation_value',\n        'name': 'extrapolationValue',\n        'type': 'number'\n      }\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Equal',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'NotEqual',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Greater',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'GreaterEqual',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Less',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LessEqual',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LogicalAnd',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LogicalNot',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LogicalOr',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Select',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'condition', 'type': 'tensor'},\n      {'start': 1, 'name': 'a', 'type': 'tensor'},\n      {'start': 2, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'SelectV2',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'condition', 'type': 'tensor'},\n      {'start': 1, 'name': 'a', 'type': 'tensor'},\n      {'start': 2, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'T',\n      'name': 'dtype',\n      'type': 'dtype',\n      'notSupported': true\n    }]\n  }\n];\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': '_FusedMatMul',\n    'category': 'matrices',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n      {'start': 2, end: 0, 'name': 'args', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'num_args', 'name': 'numArgs', 'type': 'number'}, {\n        'tfName': 'fused_ops',\n        'name': 'fusedOps',\n        'type': 'string[]',\n        'defaultValue': []\n      },\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.0001\n      },\n      {\n        'tfName': 'transpose_a',\n        'name': 'transposeA',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'transpose_b',\n        'name': 'transposeB',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'MatMul',\n    'category': 'matrices',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'transpose_a',\n        'name': 'transposeA',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'transpose_b',\n        'name': 'transposeB',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'BatchMatMul',\n    'category': 'matrices',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'adj_x',\n        'name': 'transposeA',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'adj_y',\n        'name': 'transposeB',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'BatchMatMulV2',\n    'category': 'matrices',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'adj_x',\n        'name': 'transposeA',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'adj_y',\n        'name': 'transposeB',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Transpose',\n    'category': 'matrices',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'perm', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Einsum',\n    'category': 'matrices',\n    'inputs': [{'start': 0, 'end': 0, 'name': 'tensors', 'type': 'tensors'}],\n    'attrs': [\n      {'tfName': 'equation', 'name': 'equation', 'type': 'string'},\n      {'tfName': 'N', 'name': 'n', 'type': 'number', 'defaultValue': 2},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'FusedBatchNorm',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'scale', 'type': 'tensor'},\n      {'start': 2, 'name': 'offset', 'type': 'tensor'},\n      {'start': 3, 'name': 'mean', 'type': 'tensor'},\n      {'start': 4, 'name': 'variance', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.001\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'FusedBatchNormV2',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'scale', 'type': 'tensor'},\n      {'start': 2, 'name': 'offset', 'type': 'tensor'},\n      {'start': 3, 'name': 'mean', 'type': 'tensor'},\n      {'start': 4, 'name': 'variance', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.001\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'FusedBatchNormV3',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'scale', 'type': 'tensor'},\n      {'start': 2, 'name': 'offset', 'type': 'tensor'},\n      {'start': 3, 'name': 'mean', 'type': 'tensor'},\n      {'start': 4, 'name': 'variance', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.001\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LRN',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'depth_radius',\n        'name': 'radius',\n        'type': 'number',\n        'defaultValue': 5\n      },\n      {'tfName': 'bias', 'name': 'bias', 'type': 'number', 'defaultValue': 1.0},\n      {\n        'tfName': 'alpha',\n        'name': 'alpha',\n        'type': 'number',\n        'defaultValue': 1.0\n      },\n      {\n        'tfName': 'beta',\n        'name': 'beta',\n        'type': 'number',\n        'defaultValue': 0.5\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Softmax',\n    'category': 'normalization',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'LogSoftmax',\n    'category': 'normalization',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'SparseToDense',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'sparseIndices', 'type': 'tensor'},\n      {'start': 1, 'name': 'outputShape', 'type': 'number[]'},\n      {'start': 2, 'name': 'sparseValues', 'type': 'tensor'},\n      {'start': 3, 'name': 'defaultValue', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'validate_indices',\n      'name': 'validateIndices',\n      'type': 'bool',\n      'defaultValue': true,\n      'notSupported': true\n    }]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Bincount',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'size', 'type': 'number'},\n      {'start': 2, 'name': 'weights', 'type': 'tensor'}\n    ]\n  },\n  {\n    'tfOpName': 'DenseBincount',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'size', 'type': 'number'},\n      {'start': 2, 'name': 'weights', 'type': 'tensor'}\n    ],\n    'attrs':\n        [{'tfName': 'binary_output', 'name': 'binaryOutput', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Max',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Mean',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Min',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Sum',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'All',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Any',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'ArgMax',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'ArgMin',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'Prod',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Cumsum',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'exclusive', 'name': 'exclusive', 'type': 'bool'},\n      {'tfName': 'reverse', 'name': 'reverse', 'type': 'bool'}\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'ConcatV2',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'end': -1, 'name': 'tensors', 'type': 'tensors'},\n      {'start': -1, 'name': 'axis', 'type': 'number'}\n    ],\n    'attrs':\n        [{'tfName': 'N', 'name': 'n', 'type': 'number', 'defaultValue': 2}]\n  },\n  {\n    'tfOpName': 'Concat',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 1, 'end': 0, 'name': 'tensors', 'type': 'tensors'},\n      {'start': 0, 'name': 'axis', 'type': 'number'}\n    ],\n    'attrs': [{'tfName': 'N', 'name': 'n', 'type': 'number', 'defaultValue': 2}]\n\n  },\n  {\n    'tfOpName': 'GatherV2',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'tensor'},\n      {'start': 2, 'name': 'axis', 'type': 'number', 'defaultValue': 0}\n    ],\n    'attrs': [{\n      'tfName': 'batch_dims',\n      'name': 'batchDims',\n      'type': 'number',\n      'defaultValue': 0\n    }]\n  },\n  {\n    'tfOpName': 'Gather',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'validate_indices',\n      'name': 'validateIndices',\n      'type': 'bool',\n      'notSupported': true\n    }]\n  },\n  {\n    'tfOpName': 'Reverse',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'dims', 'type': 'bool[]'}\n    ]\n  },\n  {\n    'tfOpName': 'ReverseV2',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'Slice',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'begin', 'type': 'number[]'},\n      {'start': 2, 'name': 'size', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'StridedSlice',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'begin', 'type': 'number[]'},\n      {'start': 2, 'name': 'end', 'type': 'number[]'},\n      {'start': 3, 'name': 'strides', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'begin_mask',\n        'name': 'beginMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'end_mask',\n        'name': 'endMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'new_axis_mask',\n        'name': 'newAxisMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'ellipsis_mask',\n        'name': 'ellipsisMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'shrink_axis_mask',\n        'name': 'shrinkAxisMask',\n        'type': 'number',\n        'defaultValue': 0\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Pack',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'end': 0, 'name': 'tensors', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'axis', 'name': 'axis', 'type': 'number', 'defaultValue': 0}\n    ]\n  },\n  {\n    'tfOpName': 'Unpack',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'axis', 'name': 'axis', 'type': 'number', 'defaultValue': 0}, {\n        'tfName': 'num',\n        'name': 'num',\n        'type': 'number',\n        'defaultValue': 0,\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Tile',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'reps', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'Split',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'axis', 'type': 'number', 'defaultValue': 0},\n      {'start': 1, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'num_split',\n      'name': 'numOrSizeSplits',\n      'type': 'number',\n      'defaultValue': 1\n    }]\n  },\n  {\n    'tfOpName': 'SplitV',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'numOrSizeSplits', 'type': 'number[]'},\n      {'start': 2, 'name': 'axis', 'type': 'number', 'defaultValue': 0}\n    ]\n  },\n  {\n    'tfOpName': 'ScatterNd',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'indices', 'type': 'tensor'},\n      {'start': 1, 'name': 'values', 'type': 'tensor'},\n      {'start': 2, 'name': 'shape', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'GatherNd',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'tensor'}\n    ]\n  },\n  {\n    'tfOpName': 'SparseToDense',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'sparseIndices', 'type': 'tensor'},\n      {'start': 1, 'name': 'outputShape', 'type': 'number[]'},\n      {'start': 2, 'name': 'sparseValues', 'type': 'tensor'},\n      {'start': 3, 'name': 'defaultValue', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'validate_indices',\n      'name': 'validateIndices',\n      'type': 'bool',\n      'defaultValue': false,\n      'notSupported': true\n    }]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'FFT',\n    'category': 'spectral',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'IFFT',\n    'category': 'spectral',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'RFFT',\n    'category': 'spectral',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'}, {\n        'start': 1,\n        'name': 'fft_length',\n        'type': 'number',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'IRFFT',\n    'category': 'spectral',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'}, {\n        'start': 1,\n        'name': 'fft_length',\n        'type': 'number',\n        'notSupported': true\n      }\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Cast',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'SrcT',\n        'name': 'sdtype',\n        'type': 'dtype',\n        'notSupported': true\n      },\n      {'tfName': 'DstT', 'name': 'dtype', 'type': 'dtype'}\n    ]\n  },\n  {\n    'tfOpName': 'ExpandDims',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'MirrorPad',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'padding', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'mode', 'name': 'mode', 'type': 'string'}]\n  },\n  {\n    'tfOpName': 'Pad',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'padding', 'type': 'number[]'},\n    ],\n    'attrs': [{\n      'tfName': 'constant_value',\n      'name': 'constantValue',\n      'type': 'number',\n      'defaultValue': 0\n    }]\n  },\n  {\n    'tfOpName': 'PadV2',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'padding', 'type': 'number[]'}, {\n        'start': 2,\n        'name': 'constantValue',\n        'type': 'number',\n        'defaultValue': 0\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Reshape',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'shape', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'Squeeze',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'axis',\n      'tfDeprecatedName': 'squeeze_dims',\n      'name': 'axis',\n      'type': 'number[]'\n    }]\n  },\n  {\n    'tfOpName': 'SpaceToBatchND',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'blockShape', 'type': 'number[]'},\n      {'start': 2, 'name': 'paddings', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'BatchToSpaceND',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'blockShape', 'type': 'number[]'},\n      {'start': 2, 'name': 'crops', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'DepthToSpace',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'block_size', 'name': 'blockSize', 'type': 'number'},\n      {'tfName': 'data_format', 'name': 'dataFormat', 'type': 'string'}\n    ]\n  },\n  {\n    'tfOpName': 'BroadcastTo',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'shape', 'type': 'number[]'},\n    ],\n    'attrs': []\n  }\n];\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, env} from '@tensorflow/tfjs-core';\n\nimport * as tensorflow from '../data/compiled_api';\n\nimport {getRegisteredOp} from './custom_op/register';\nimport {getNodeNameAndIndex} from './executors/utils';\nimport * as arithmetic from './op_list/arithmetic';\nimport * as basicMath from './op_list/basic_math';\nimport * as control from './op_list/control';\nimport * as convolution from './op_list/convolution';\nimport * as creation from './op_list/creation';\nimport * as dynamic from './op_list/dynamic';\nimport * as evaluation from './op_list/evaluation';\nimport * as graph from './op_list/graph';\nimport * as hashTable from './op_list/hash_table';\nimport * as image from './op_list/image';\nimport * as logical from './op_list/logical';\nimport * as matrices from './op_list/matrices';\nimport * as normalization from './op_list/normalization';\nimport * as reduction from './op_list/reduction';\nimport * as sliceJoin from './op_list/slice_join';\nimport * as spectral from './op_list/spectral';\nimport * as transformation from './op_list/transformation';\nimport {Graph, InputParamValue, Node, OpMapper, ParamValue} from './types';\n\nexport class OperationMapper {\n  private static _instance: OperationMapper;\n\n  private opMappers: {[key: string]: OpMapper};\n\n  // Singleton instance for the mapper\n  public static get Instance() {\n    return this._instance || (this._instance = new this());\n  }\n\n  // Loads the op mapping from the JSON file.\n  private constructor() {\n    const ops = [\n      arithmetic, basicMath, control, convolution, creation, dynamic,\n      evaluation, logical, image, graph, matrices, normalization, reduction,\n      sliceJoin, spectral, transformation, hashTable\n    ];\n    const mappersJson: OpMapper[] = [].concat(...ops.map(op => op.json));\n\n    this.opMappers = mappersJson.reduce<{[key: string]: OpMapper}>(\n        (map, mapper: OpMapper) => {\n          map[mapper.tfOpName] = mapper;\n          return map;\n        },\n        {});\n  }\n\n  // Converts the model inference graph from Tensorflow GraphDef to local\n  // representation for TensorFlow.js API\n  transformGraph(\n      graph: tensorflow.IGraphDef,\n      signature: tensorflow.ISignatureDef = {}): Graph {\n    const tfNodes = graph.node;\n    const placeholders: Node[] = [];\n    const weights: Node[] = [];\n    const initNodes: Node[] = [];\n    const nodes = tfNodes.reduce<{[key: string]: Node}>((map, node) => {\n      map[node.name] = this.mapNode(node);\n      if (node.op.startsWith('Placeholder')) {\n        placeholders.push(map[node.name]);\n      } else if (node.op === 'Const') {\n        weights.push(map[node.name]);\n      } else if (node.input == null || node.input.length === 0) {\n        initNodes.push(map[node.name]);\n      }\n      return map;\n    }, {});\n\n    let inputs: Node[] = [];\n    const outputs: Node[] = [];\n    let inputNodeNameToKey: {[key: string]: string} = {};\n    let outputNodeNameToKey: {[key: string]: string} = {};\n    if (signature != null) {\n      inputNodeNameToKey = this.mapSignatureEntries(signature.inputs);\n      outputNodeNameToKey = this.mapSignatureEntries(signature.outputs);\n    }\n    const allNodes = Object.keys(nodes);\n    allNodes.forEach(key => {\n      const node = nodes[key];\n      node.inputNames.forEach(name => {\n        const [nodeName, ] = getNodeNameAndIndex(name);\n        node.inputs.push(nodes[nodeName]);\n        nodes[nodeName].children.push(node);\n      });\n    });\n\n    // if signature has not outputs set, add any node that does not have\n    // outputs.\n    if (Object.keys(outputNodeNameToKey).length === 0) {\n      allNodes.forEach(key => {\n        const node = nodes[key];\n        if (node.children.length === 0) {\n          outputs.push(node);\n        }\n      });\n    } else {\n      Object.keys(outputNodeNameToKey).forEach(name => {\n        const [nodeName, ] = getNodeNameAndIndex(name);\n        const node = nodes[nodeName];\n        if (node != null) {\n          node.signatureKey = outputNodeNameToKey[name];\n          outputs.push(node);\n        }\n      });\n    }\n\n    if (Object.keys(inputNodeNameToKey).length > 0) {\n      Object.keys(inputNodeNameToKey).forEach(name => {\n        const [nodeName, ] = getNodeNameAndIndex(name);\n        const node = nodes[nodeName];\n        if (node) {\n          node.signatureKey = inputNodeNameToKey[name];\n          inputs.push(node);\n        }\n      });\n    } else {\n      inputs = placeholders;\n    }\n\n    let functions = {};\n    if (graph.library != null && graph.library.function != null) {\n      functions = graph.library.function.reduce((functions, func) => {\n        functions[func.signature.name] = this.mapFunction(func);\n        return functions;\n      }, {} as {[key: string]: Graph});\n    }\n\n    const result: Graph =\n        {nodes, inputs, outputs, weights, placeholders, signature, functions};\n\n    if (initNodes.length > 0) {\n      result.initNodes = initNodes;\n    }\n\n    return result;\n  }\n\n  private mapSignatureEntries(entries: {[k: string]: tensorflow.ITensorInfo}) {\n    return Object.keys(entries || {})\n        .reduce<{[key: string]: string}>((prev, curr) => {\n          prev[entries[curr].name] = curr;\n          return prev;\n        }, {});\n  }\n\n  private mapNode(node: tensorflow.INodeDef): Node {\n    // Unsupported ops will cause an error at run-time (not parse time), since\n    // they may not be used by the actual execution subgraph.\n    const mapper =\n        getRegisteredOp(node.op) || this.opMappers[node.op] || {} as OpMapper;\n    if (node.attr == null) {\n      node.attr = {};\n    }\n\n    const newNode: Node = {\n      name: node.name,\n      op: node.op,\n      category: mapper.category,\n      inputNames:\n          (node.input ||\n           []).map(input => input.startsWith('^') ? input.substr(1) : input),\n      inputs: [],\n      children: [],\n      inputParams: {},\n      attrParams: {},\n      rawAttrs: node.attr\n    };\n\n    if (mapper.inputs != null) {\n      newNode.inputParams =\n          mapper.inputs.reduce<{[key: string]: InputParamValue}>(\n              (map, param) => {\n                map[param.name] = {\n                  type: param.type,\n                  inputIndexStart: param.start,\n                  inputIndexEnd: param.end\n                };\n                return map;\n              },\n              {});\n    }\n    if (mapper.attrs != null) {\n      newNode.attrParams =\n          mapper.attrs.reduce<{[key: string]: ParamValue}>((map, param) => {\n            const type = param.type;\n            let value = undefined;\n            switch (param.type) {\n              case 'string':\n                value = getStringParam(\n                    node.attr, param.tfName, param.defaultValue as string);\n\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getStringParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as string);\n                }\n                break;\n              case 'string[]':\n                value = getStringArrayParam(\n                    node.attr, param.tfName, param.defaultValue as string[]);\n\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getStringArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as string[]);\n                }\n                break;\n              case 'number':\n                value = getNumberParam(\n                    node.attr, param.tfName,\n                    (param.defaultValue || 0) as number);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getNumberParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number);\n                }\n                break;\n              case 'number[]':\n                value = getNumericArrayParam(\n                    node.attr, param.tfName, param.defaultValue as number[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getNumericArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number[]);\n                }\n                break;\n              case 'bool':\n                value = getBoolParam(\n                    node.attr, param.tfName, param.defaultValue as boolean);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getBoolParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as boolean);\n                }\n                break;\n              case 'bool[]':\n                value = getBoolArrayParam(\n                    node.attr, param.tfName, param.defaultValue as boolean[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getBoolArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as boolean[]);\n                }\n                break;\n              case 'shape':\n                value = getTensorShapeParam(\n                    node.attr, param.tfName, param.defaultValue as number[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getTensorShapeParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number[]);\n                }\n                break;\n              case 'shape[]':\n                value = getTensorShapeArrayParam(\n                    node.attr, param.tfName, param.defaultValue as number[][]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getTensorShapeArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number[][]);\n                }\n                break;\n              case 'dtype':\n                value = getDtypeParam(\n                    node.attr, param.tfName, param.defaultValue as DataType);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getDtypeParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as DataType);\n                }\n                break;\n              case 'dtype[]':\n                value = getDtypeArrayParam(\n                    node.attr, param.tfName, param.defaultValue as DataType[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getDtypeArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as DataType[]);\n                }\n                break;\n              case 'func':\n                value = getFuncParam(\n                    node.attr, param.tfName, param.defaultValue as string);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getFuncParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as string);\n                }\n                break;\n              case 'tensor':\n              case 'tensors':\n                break;\n              default:\n                throw new Error(\n                    `Unsupported param type: ${param.type} for op: ${node.op}`);\n            }\n            map[param.name] = {value, type};\n            return map;\n          }, {});\n    }\n    return newNode;\n  }\n\n  // map the TFunctionDef to TFJS graph object\n  private mapFunction(functionDef: tensorflow.IFunctionDef): Graph {\n    const tfNodes = functionDef.nodeDef;\n    const placeholders: Node[] = [];\n    const weights: Node[] = [];\n    let nodes: {[key: string]: Node} = {};\n    if (tfNodes != null) {\n      nodes = tfNodes.reduce<{[key: string]: Node}>((map, node) => {\n        map[node.name] = this.mapNode(node);\n        if (node.op === 'Const') {\n          weights.push(map[node.name]);\n        }\n        return map;\n      }, {});\n    }\n    const inputs: Node[] = [];\n    const outputs: Node[] = [];\n\n    functionDef.signature.inputArg.forEach(arg => {\n      const [nodeName, ] = getNodeNameAndIndex(arg.name);\n      const node: Node = {\n        name: nodeName,\n        op: 'Placeholder',\n        inputs: [],\n        inputNames: [],\n        category: 'graph',\n        inputParams: {},\n        attrParams: {dtype: {value: parseDtypeParam(arg.type), type: 'dtype'}},\n        children: []\n      };\n      node.signatureKey = arg.name;\n      inputs.push(node);\n      nodes[nodeName] = node;\n    });\n\n    const allNodes = Object.keys(nodes);\n    allNodes.forEach(key => {\n      const node = nodes[key];\n      node.inputNames.forEach(name => {\n        const [nodeName, ] = getNodeNameAndIndex(name);\n        node.inputs.push(nodes[nodeName]);\n        nodes[nodeName].children.push(node);\n      });\n    });\n\n    const returnNodeMap = functionDef.ret;\n\n    functionDef.signature.outputArg.forEach(output => {\n      const [nodeName, index] = getNodeNameAndIndex(returnNodeMap[output.name]);\n      const node = nodes[nodeName];\n      if (node != null) {\n        node.defaultOutput = index;\n        outputs.push(node);\n      }\n    });\n\n    const signature = this.mapArgsToSignature(functionDef);\n    return {nodes, inputs, outputs, weights, placeholders, signature};\n  }\n\n  private mapArgsToSignature(functionDef: tensorflow.IFunctionDef):\n      tensorflow.ISignatureDef {\n    return {\n      methodName: functionDef.signature.name,\n      inputs: functionDef.signature.inputArg.reduce(\n          (map, arg) => {\n            map[arg.name] = this.mapArgToTensorInfo(arg);\n            return map;\n          },\n          {} as {[key: string]: tensorflow.ITensorInfo}),\n      outputs: functionDef.signature.outputArg.reduce(\n          (map, arg) => {\n            map[arg.name] = this.mapArgToTensorInfo(arg, functionDef.ret);\n            return map;\n          },\n          {} as {[key: string]: tensorflow.ITensorInfo}),\n    };\n  }\n\n  private mapArgToTensorInfo(\n      arg: tensorflow.OpDef.IArgDef,\n      nameMap?: {[key: string]: string}): tensorflow.ITensorInfo {\n    let name = arg.name;\n    if (nameMap != null) {\n      name = nameMap[name];\n    }\n    return {name, dtype: arg.type};\n  }\n}\n\nexport function decodeBase64(text: string): string {\n  const global = env().global;\n  if (typeof global.atob !== 'undefined') {\n    return global.atob(text);\n  } else if (typeof Buffer !== 'undefined') {\n    return new Buffer(text, 'base64').toString();\n  } else {\n    throw new Error(\n        'Unable to decode base64 in this environment. ' +\n        'Missing built-in atob() or Buffer()');\n  }\n}\n\nexport function parseStringParam(s: []|string, keepCase: boolean): string {\n  const value =\n      Array.isArray(s) ? String.fromCharCode.apply(null, s) : decodeBase64(s);\n  return keepCase ? value : value.toLowerCase();\n}\n\nexport function getStringParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string, def: string,\n    keepCase = false): string {\n  const param = attrs[name];\n  if (param != null) {\n    return parseStringParam(param.s, keepCase);\n  }\n  return def;\n}\n\nexport function getBoolParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: boolean): boolean {\n  const param = attrs[name];\n  return param ? param.b : def;\n}\n\nexport function getNumberParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: number): number {\n  const param = attrs[name] || {};\n  const value =\n      param['i'] != null ? param['i'] : (param['f'] != null ? param['f'] : def);\n  return (typeof value === 'number') ? value : parseInt(value, 10);\n}\n\nexport function parseDtypeParam(value: string|tensorflow.DataType): DataType {\n  if (typeof (value) === 'string') {\n    // tslint:disable-next-line:no-any\n    value = tensorflow.DataType[value as any];\n  }\n  switch (value) {\n    case tensorflow.DataType.DT_FLOAT:\n      return 'float32';\n    case tensorflow.DataType.DT_INT32:\n    case tensorflow.DataType.DT_INT64:\n    case tensorflow.DataType.DT_INT8:\n    case tensorflow.DataType.DT_UINT8:\n      return 'int32';\n    case tensorflow.DataType.DT_BOOL:\n      return 'bool';\n    case tensorflow.DataType.DT_DOUBLE:\n      return 'float32';\n    case tensorflow.DataType.DT_STRING:\n      return 'string';\n    default:\n      // Unknown dtype error will happen at runtime (instead of parse time),\n      // since these nodes might not be used by the actual subgraph execution.\n      return null;\n  }\n}\n\nexport function getFuncParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: string): string {\n  const param = attrs[name];\n  if (param && param.func) {\n    return param.func.name;\n  }\n  return def;\n}\n\nexport function getDtypeParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: DataType): DataType {\n  const param = attrs[name];\n  if (param && param.type) {\n    return parseDtypeParam(param.type);\n  }\n  return def;\n}\n\nexport function getDtypeArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: DataType[]): DataType[] {\n  const param = attrs[name];\n  if (param && param.list && param.list.type) {\n    return param.list.type.map(v => parseDtypeParam(v));\n  }\n  return def;\n}\n\nexport function parseTensorShapeParam(shape: tensorflow.ITensorShape): number[]|\n    undefined {\n  if (shape.unknownRank) {\n    return undefined;\n  }\n  if (shape.dim != null) {\n    return shape.dim.map(\n        dim =>\n            (typeof dim.size === 'number') ? dim.size : parseInt(dim.size, 10));\n  }\n  return [];\n}\n\nexport function getTensorShapeParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def?: number[]): number[]|undefined {\n  const param = attrs[name];\n  if (param && param.shape) {\n    return parseTensorShapeParam(param.shape);\n  }\n  return def;\n}\n\nexport function getNumericArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: number[]): number[] {\n  const param = attrs[name];\n  if (param) {\n    return ((param.list.f && param.list.f.length ? param.list.f :\n                                                   param.list.i) ||\n            [])\n        .map(v => (typeof v === 'number') ? v : parseInt(v, 10));\n  }\n  return def;\n}\n\nexport function getStringArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string, def: string[],\n    keepCase = false): string[] {\n  const param = attrs[name];\n  if (param && param.list && param.list.s) {\n    return param.list.s.map((v) => {\n      return parseStringParam(v, keepCase);\n    });\n  }\n  return def;\n}\n\nexport function getTensorShapeArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: number[][]): number[][] {\n  const param = attrs[name];\n  if (param && param.list && param.list.shape) {\n    return param.list.shape.map((v) => {\n      return parseTensorShapeParam(v);\n    });\n  }\n  return def;\n}\n\nexport function getBoolArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: boolean[]): boolean[] {\n  const param = attrs[name];\n  if (param && param.list && param.list.b) {\n    return param.list.b;\n  }\n  return def;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, Tensor} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {getTensor} from '../executors/utils';\nimport {getBoolArrayParam, getBoolParam, getDtypeArrayParam, getDtypeParam, getNumberParam, getNumericArrayParam, getStringArrayParam, getStringParam, getTensorShapeArrayParam, getTensorShapeParam} from '../operation_mapper';\nimport {GraphNode, Node, ValueType} from '../types';\n\n/**\n * Helper class for lookup inputs and params for nodes in the model graph.\n */\nexport class NodeValueImpl implements GraphNode {\n  public readonly inputs: Tensor[] = [];\n  public readonly attrs: {[key: string]: ValueType} = {};\n  constructor(\n      private node: Node, private tensorMap: NamedTensorsMap,\n      private context: ExecutionContext) {\n    this.inputs = node.inputNames.map(name => this.getInput(name));\n    if (node.rawAttrs != null) {\n      this.attrs = Object.keys(node.rawAttrs)\n                       .reduce((attrs: {[key: string]: ValueType}, key) => {\n                         attrs[key] = this.getAttr(key);\n                         return attrs;\n                       }, {});\n    }\n  }\n\n  /**\n   * Return the value of the attribute or input param.\n   * @param name String: name of attribute or input param.\n   */\n  private getInput(name: string): Tensor {\n    return getTensor(name, this.tensorMap, this.context);\n  }\n\n  /**\n   * Return the value of the attribute or input param.\n   * @param name String: name of attribute or input param.\n   */\n  private getAttr(name: string, defaultValue?: ValueType): ValueType {\n    const value = this.node.rawAttrs[name];\n    if (value.tensor != null) {\n      return getTensor(name, this.tensorMap, this.context);\n    }\n    if (value.i != null || value.f != null) {\n      return getNumberParam(this.node.rawAttrs, name, defaultValue as number);\n    }\n    if (value.s != null) {\n      return getStringParam(this.node.rawAttrs, name, defaultValue as string);\n    }\n    if (value.b != null) {\n      return getBoolParam(this.node.rawAttrs, name, defaultValue as boolean);\n    }\n    if (value.shape != null) {\n      return getTensorShapeParam(\n          this.node.rawAttrs, name, defaultValue as number[]);\n    }\n    if (value.type != null) {\n      return getDtypeParam(this.node.rawAttrs, name, defaultValue as DataType);\n    }\n    if (value.list != null) {\n      if (value.list.i != null || value.list.f != null) {\n        return getNumericArrayParam(\n            this.node.rawAttrs, name, defaultValue as number[]);\n      }\n      if (value.list.s != null) {\n        return getStringArrayParam(\n            this.node.rawAttrs, name, defaultValue as string[]);\n      }\n      if (value.list.shape != null) {\n        return getTensorShapeArrayParam(\n            this.node.rawAttrs, name, defaultValue as number[][]);\n      }\n      if (value.list.b != null) {\n        return getBoolArrayParam(\n            this.node.rawAttrs, name, defaultValue as boolean[]);\n      }\n      if (value.list.type != null) {\n        return getDtypeArrayParam(\n            this.node.rawAttrs, name, defaultValue as DataType[]);\n      }\n    }\n\n    return defaultValue;\n  }\n}\n","\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * This differs from util.assertShapesMatch in that it allows values of\n * negative one, an undefined size of a dimensinon, in a shape to match\n * anything.\n */\n\nimport {Tensor, util} from '@tensorflow/tfjs-core';\n\n/**\n * Used by TensorList and TensorArray to verify if elementShape matches, support\n * negative value as the dim shape.\n * @param shapeA\n * @param shapeB\n * @param errorMessagePrefix\n */\nexport function assertShapesMatchAllowUndefinedSize(\n    shapeA: number|number[], shapeB: number|number[],\n    errorMessagePrefix = ''): void {\n  // constant shape means unknown rank\n  if (typeof shapeA === 'number' || typeof shapeB === 'number') {\n    return;\n  }\n  util.assert(\n      shapeA.length === shapeB.length,\n      () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n  for (let i = 0; i < shapeA.length; i++) {\n    const dim0 = shapeA[i];\n    const dim1 = shapeB[i];\n    util.assert(\n        dim0 < 0 || dim1 < 0 || dim0 === dim1,\n        () =>\n            errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n  }\n}\n\nexport function fullDefinedShape(elementShape: number|number[]): boolean {\n  if (typeof elementShape === 'number' || elementShape.some(dim => dim < 0)) {\n    return false;\n  }\n  return true;\n}\n/**\n * Generate the output element shape from the list elementShape, list tensors\n * and input param.\n * @param listElementShape\n * @param tensors\n * @param elementShape\n */\nexport function inferElementShape(\n    listElementShape: number|number[], tensors: Tensor[],\n    elementShape: number|number[]): number[] {\n  let partialShape = mergeElementShape(listElementShape, elementShape);\n  const notfullDefinedShape = !fullDefinedShape(partialShape);\n  if (notfullDefinedShape && tensors.length === 0) {\n    throw new Error(\n        `Tried to calculate elements of an empty list` +\n        ` with non-fully-defined elementShape: ${partialShape}`);\n  }\n  if (notfullDefinedShape) {\n    tensors.forEach(tensor => {\n      partialShape = mergeElementShape(tensor.shape, partialShape);\n    });\n  }\n  if (!fullDefinedShape(partialShape)) {\n    throw new Error(`Non-fully-defined elementShape: ${partialShape}`);\n  }\n  return partialShape as number[];\n}\n\nexport function mergeElementShape(\n    elementShapeA: number|number[], elementShapeB: number|number[]): number|\n    number[] {\n  if (typeof elementShapeA === 'number') {\n    return elementShapeB;\n  }\n  if (typeof elementShapeB === 'number') {\n    return elementShapeA;\n  }\n\n  if (elementShapeA.length !== elementShapeB.length) {\n    throw new Error(`Incompatible ranks during merge: ${elementShapeA} vs. ${\n        elementShapeB}`);\n  }\n\n  const result: number[] = [];\n  for (let i = 0; i < elementShapeA.length; ++i) {\n    const dim0 = elementShapeA[i];\n    const dim1 = elementShapeB[i];\n    if (dim0 >= 0 && dim1 >= 0 && dim0 !== dim1) {\n      throw new Error(`Incompatible shape during merge: ${elementShapeA} vs. ${\n          elementShapeB}`);\n    }\n    result[i] = dim0 >= 0 ? dim0 : dim1;\n  }\n  return result;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {concat, DataType, keep, reshape, scalar, slice, stack, Tensor, tensor, tidy, unstack} from '@tensorflow/tfjs-core';\n\nimport {assertShapesMatchAllowUndefinedSize} from './tensor_utils';\n\nexport interface TensorWithState {\n  tensor?: Tensor;\n  written?: boolean;\n  read?: boolean;\n  cleared?: boolean;\n}\n/**\n * The TensorArray object keeps an array of Tensors.  It\n * allows reading from the array and writing to the array.\n */\nexport class TensorArray {\n  private tensors: TensorWithState[] = [];\n  private closed_ = false;\n  readonly idTensor: Tensor;\n  constructor(\n      readonly name: string, readonly dtype: DataType, private maxSize: number,\n      private elementShape: number[], readonly identicalElementShapes: boolean,\n      readonly dynamicSize: boolean, readonly clearAfterRead: boolean) {\n    this.idTensor = scalar(0);\n    keep(this.idTensor);\n  }\n\n  get id() {\n    return this.idTensor.id;\n  }\n\n  get closed() {\n    return this.closed_;\n  }\n\n  /**\n   * Dispose the tensors and idTensor and mark the TensoryArray as closed.\n   */\n  clearAndClose(keepIds?: Set<number>) {\n    this.tensors.forEach(tensor => {\n      if (keepIds == null || !keepIds.has(tensor.tensor.id)) {\n        tensor.tensor.dispose();\n      }\n    });\n    this.tensors = [];\n    this.closed_ = true;\n    this.idTensor.dispose();\n  }\n\n  size(): number {\n    return this.tensors.length;\n  }\n\n  /**\n   * Read the value at location index in the TensorArray.\n   * @param index Number the index to read from.\n   */\n  read(index: number): Tensor {\n    if (this.closed_) {\n      throw new Error(`TensorArray ${this.name} has already been closed.`);\n    }\n\n    if (index < 0 || index >= this.size()) {\n      throw new Error(`Tried to read from index ${index}, but array size is: ${\n          this.size()}`);\n    }\n\n    const tensorWithState = this.tensors[index];\n    if (tensorWithState.cleared) {\n      throw new Error(\n          `TensorArray ${this.name}: Could not read index ${\n              index} twice because it was cleared after a previous read ` +\n          `(perhaps try setting clear_after_read = false?).`);\n    }\n\n    if (this.clearAfterRead) {\n      tensorWithState.cleared = true;\n    }\n\n    tensorWithState.read = true;\n    return tensorWithState.tensor;\n  }\n\n  /**\n   * Helper method to read multiple tensors from the specified indices.\n   */\n  readMany(indices: number[]): Tensor[] {\n    return indices.map(index => this.read(index));\n  }\n\n  /**\n   * Write value into the index of the TensorArray.\n   * @param index number the index to write to.\n   * @param tensor\n   */\n  write(index: number, tensor: Tensor) {\n    if (this.closed_) {\n      throw new Error(`TensorArray ${this.name} has already been closed.`);\n    }\n\n    if (index < 0 || !this.dynamicSize && index >= this.maxSize) {\n      throw new Error(`Tried to write to index ${\n          index}, but array is not resizeable and size is: ${this.maxSize}`);\n    }\n\n    const t = this.tensors[index] || {};\n\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray ${\n          this.name}: Could not write to TensorArray index ${index},\n          because the value dtype is ${\n          tensor.dtype}, but TensorArray dtype is ${this.dtype}.`);\n    }\n\n    // Set the shape for the first time write to unknow shape tensor array\n    if (this.size() === 0 &&\n        (this.elementShape == null || this.elementShape.length === 0)) {\n      this.elementShape = tensor.shape;\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensor.shape,\n        `TensorArray ${this.name}: Could not write to TensorArray index ${\n            index}.`);\n\n    if (t.read) {\n      throw new Error(\n          `TensorArray ${this.name}: Could not write to TensorArray index ${\n              index}, because it has already been read.`);\n    }\n\n    if (t.written) {\n      throw new Error(\n          `TensorArray ${this.name}: Could not write to TensorArray index ${\n              index}, because it has already been written.`);\n    }\n\n    t.tensor = tensor;\n    keep(tensor);\n    t.written = true;\n\n    this.tensors[index] = t;\n  }\n\n  /**\n   * Helper method to write multiple tensors to the specified indices.\n   */\n  writeMany(indices: number[], tensors: Tensor[]) {\n    if (indices.length !== tensors.length) {\n      throw new Error(\n          `TensorArray ${this.name}: could not write multiple tensors,` +\n          `because the index size: ${\n              indices.length} is not the same as tensors size: ${\n              tensors.length}.`);\n    }\n\n    indices.forEach((i, index) => this.write(i, tensors[index]));\n  }\n\n  /**\n   * Return selected values in the TensorArray as a packed Tensor. All of\n   * selected values must have been written and their shapes must all match.\n   * @param [indices] number[] Optional. Taking values in [0, max_value). If the\n   *    TensorArray is not dynamic, max_value=size(). If not specified returns\n   *    all tensors in the original order.\n   * @param [dtype]\n   */\n  gather(indices?: number[], dtype?: DataType): Tensor {\n    if (!!dtype && dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but gather requested dtype ${dtype}`);\n    }\n\n    if (!indices) {\n      indices = [];\n      for (let i = 0; i < this.size(); i++) {\n        indices.push(i);\n      }\n    } else {\n      indices = indices.slice(0, this.size());\n    }\n\n    if (indices.length === 0) {\n      return tensor([], [0].concat(this.elementShape));\n    }\n\n    // Read all the PersistentTensors into a vector to keep track of\n    // their memory.\n    const tensors = this.readMany(indices);\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensors[0].shape, 'TensorArray shape mismatch: ');\n\n    return stack(tensors, 0);\n  }\n\n  /**\n   * Return the values in the TensorArray as a concatenated Tensor.\n   */\n  concat(dtype?: DataType): Tensor {\n    if (!!dtype && dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but concat requested dtype ${dtype}`);\n    }\n\n    if (this.size() === 0) {\n      return tensor([], [0].concat(this.elementShape));\n    }\n\n    const indices = [];\n    for (let i = 0; i < this.size(); i++) {\n      indices.push(i);\n    }\n    // Collect all the tensors from the tensors array.\n    const tensors = this.readMany(indices);\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensors[0].shape,\n        `TensorArray shape mismatch: tensor array shape (${\n            this.elementShape}) vs first tensor shape (${tensors[0].shape})`);\n\n    return concat(tensors, 0);\n  }\n\n  /**\n   * Scatter the values of a Tensor in specific indices of a TensorArray.\n   * @param indices nummber[] values in [0, max_value). If the\n   *    TensorArray is not dynamic, max_value=size().\n   * @param tensor Tensor input tensor.\n   */\n  scatter(indices: number[], tensor: Tensor) {\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but tensor has dtype ${tensor.dtype}`);\n    }\n\n    if (indices.length !== tensor.shape[0]) {\n      throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${\n          indices.length} vs. ${tensor.shape[0]}`);\n    }\n\n    const maxIndex = Math.max(...indices);\n\n    if (!this.dynamicSize && maxIndex >= this.maxSize) {\n      throw new Error(\n          `Max index must be < array size (${maxIndex}  vs. ${this.maxSize})`);\n    }\n\n    this.writeMany(indices, unstack(tensor, 0));\n  }\n\n  /**\n   * Split the values of a Tensor into the TensorArray.\n   * @param length number[] with the lengths to use when splitting value along\n   *    its first dimension.\n   * @param tensor Tensor, the tensor to split.\n   */\n  split(length: number[], tensor: Tensor) {\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but tensor has dtype ${tensor.dtype}`);\n    }\n    let totalLength = 0;\n    const cumulativeLengths = length.map(len => {\n      totalLength += len;\n      return totalLength;\n    });\n\n    if (totalLength !== tensor.shape[0]) {\n      throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${totalLength}, and tensor's shape is: ${tensor.shape}`);\n    }\n\n    if (!this.dynamicSize && length.length !== this.maxSize) {\n      throw new Error(\n          `TensorArray's size is not equal to the size of lengths (${\n              this.maxSize} vs. ${length.length}), ` +\n          'and the TensorArray is not marked as dynamically resizeable');\n    }\n\n    const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;\n    const tensors: Tensor[] = [];\n    tidy(() => {\n      tensor = reshape(tensor, [1, totalLength, elementPerRow]);\n      for (let i = 0; i < length.length; ++i) {\n        const previousLength = (i === 0) ? 0 : cumulativeLengths[i - 1];\n        const indices = [0, previousLength, 0];\n        const sizes = [1, length[i], elementPerRow];\n        tensors[i] = reshape(slice(tensor, indices, sizes), this.elementShape);\n      }\n      return tensors;\n    });\n    const indices = [];\n    for (let i = 0; i < length.length; i++) {\n      indices[i] = i;\n    }\n    this.writeMany(indices, tensors);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {concat, DataType, keep, reshape, scalar, slice, stack, Tensor, tensor, tidy, unstack} from '@tensorflow/tfjs-core';\n\nimport {assertShapesMatchAllowUndefinedSize, inferElementShape, mergeElementShape} from './tensor_utils';\n\n/**\n * TensorList stores a container of `tf.Tensor` objects, which are accessible\n * via tensors field.\n *\n * In order to get a copy of the underlying list, use the copy method:\n * ```\n *    TensorList b = a.copy();\n *    b.tensors().pushBack(t);  // This does not modify a.tensors().\n * ```\n *\n * Note that this is not a deep copy: the memory locations of the underlying\n * tensors will still point to the same locations of the corresponding tensors\n * in the original.\n */\n\nexport class TensorList {\n  readonly idTensor: Tensor;\n  maxNumElements: number;\n\n  get id() {\n    return this.idTensor.id;\n  }\n  /**\n   *\n   * @param tensors list of tensors\n   * @param elementShape shape of each tensor, this can be a single number (any\n   * shape is allowed) or partial shape (dim = -1).\n   * @param elementDtype data type of each tensor\n   * @param maxNumElements The maximum allowed size of `tensors`. Defaults to -1\n   *   meaning that the size of `tensors` is unbounded.\n   */\n  constructor(\n      readonly tensors: Tensor[], readonly elementShape: number|number[],\n      readonly elementDtype: DataType, maxNumElements = -1) {\n    if (tensors != null) {\n      tensors.forEach(tensor => {\n        if (elementDtype !== tensor.dtype) {\n          throw new Error(`Invalid data types; op elements ${\n              elementDtype}, but list elements ${tensor.dtype}`);\n        }\n        assertShapesMatchAllowUndefinedSize(\n            elementShape, tensor.shape, 'TensorList shape mismatch: ');\n\n        keep(tensor);\n      });\n    }\n    this.idTensor = scalar(0);\n    this.maxNumElements = maxNumElements;\n    keep(this.idTensor);\n  }\n\n  /**\n   * Get a new TensorList containing a copy of the underlying tensor container.\n   */\n  copy(): TensorList {\n    return new TensorList(\n        [...this.tensors], this.elementShape, this.elementDtype);\n  }\n\n  /**\n   * Dispose the tensors and idTensor and clear the tensor list.\n   */\n  clearAndClose(keepIds?: Set<number>) {\n    this.tensors.forEach(tensor => {\n      if (keepIds == null || !keepIds.has(tensor.id)) {\n        tensor.dispose();\n      }\n    });\n    this.tensors.length = 0;\n    this.idTensor.dispose();\n  }\n  /**\n   * The size of the tensors in the tensor list.\n   */\n  size() {\n    return this.tensors.length;\n  }\n\n  /**\n   * Return a tensor that stacks a list of rank-R tf.Tensors into one rank-(R+1)\n   * tf.Tensor.\n   * @param elementShape shape of each tensor\n   * @param elementDtype data type of each tensor\n   * @param numElements the number of elements to stack\n   */\n  stack(elementShape: number[], elementDtype: DataType, numElements = -1):\n      Tensor {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          elementDtype}, but list elements ${this.elementDtype}`);\n    }\n    if (numElements !== -1 && this.tensors.length !== numElements) {\n      throw new Error(`Operation expected a list with ${\n          numElements} elements but got a list with ${\n          this.tensors.length} elements.`);\n    }\n    assertShapesMatchAllowUndefinedSize(\n        elementShape, this.elementShape, 'TensorList shape mismatch: ');\n    const outputElementShape =\n        inferElementShape(this.elementShape, this.tensors, elementShape);\n    return tidy(() => {\n      const reshapedTensors =\n          this.tensors.map(tensor => reshape(tensor, outputElementShape));\n      return stack(reshapedTensors, 0);\n    });\n  }\n\n  /**\n   * Pop a tensor from the end of the list.\n   * @param elementShape shape of the tensor\n   * @param elementDtype data type of the tensor\n   */\n  popBack(elementShape: number[], elementDtype: DataType): Tensor {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          elementDtype}, but list elements ${this.elementDtype}`);\n    }\n\n    if (this.size() === 0) {\n      throw new Error('Trying to pop from an empty list.');\n    }\n    const outputElementShape =\n        inferElementShape(this.elementShape, this.tensors, elementShape);\n    const tensor = this.tensors.pop();\n\n    assertShapesMatchAllowUndefinedSize(\n        tensor.shape, elementShape, 'TensorList shape mismatch: ');\n\n    return reshape(tensor, outputElementShape);\n  }\n\n  /**\n   * Push a tensor to the end of the list.\n   * @param tensor Tensor to be pushed.\n   */\n  pushBack(tensor: Tensor) {\n    if (tensor.dtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          tensor.dtype}, but list elements ${this.elementDtype}`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        tensor.shape, this.elementShape, 'TensorList shape mismatch: ');\n\n    if (this.maxNumElements === this.size()) {\n      throw new Error(`Trying to push element into a full list.`);\n    }\n    keep(tensor);\n    this.tensors.push(tensor);\n  }\n\n  /**\n   * Update the size of the list.\n   * @param size the new size of the list.\n   */\n  resize(size: number) {\n    if (size < 0) {\n      throw new Error(\n          `TensorListResize expects size to be non-negative. Got: ${size}`);\n    }\n\n    if (this.maxNumElements !== -1 && size > this.maxNumElements) {\n      throw new Error(`TensorListResize input size ${\n          size} is greater maxNumElement ${this.maxNumElements}.`);\n    }\n    this.tensors.length = size;\n  }\n\n  /**\n   * Retrieve the element at the provided index\n   * @param elementShape shape of the tensor\n   * @param elementDtype dtype of the tensor\n   * @param elementIndex index of the tensor\n   */\n  getItem(elementIndex: number, elementShape: number[], elementDtype: DataType):\n      Tensor {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          elementDtype}, but list elements ${this.elementDtype}`);\n    }\n    if (elementIndex < 0 || elementIndex > this.tensors.length) {\n      throw new Error(`Trying to access element ${\n          elementIndex} in a list with ${this.tensors.length} elements.`);\n    }\n\n    if (this.tensors[elementIndex] == null) {\n      throw new Error(`element at index ${elementIndex} is null.`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        this.tensors[elementIndex].shape, elementShape,\n        'TensorList shape mismatch: ');\n    const outputElementShape =\n        inferElementShape(this.elementShape, this.tensors, elementShape);\n    return reshape(this.tensors[elementIndex], outputElementShape);\n  }\n\n  /**\n   * Set the tensor at the index\n   * @param elementIndex index of the tensor\n   * @param tensor the tensor to be inserted into the list\n   */\n  setItem(elementIndex: number, tensor: Tensor) {\n    if (tensor.dtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          tensor.dtype}, but list elements ${this.elementDtype}`);\n    }\n\n    if (elementIndex < 0 ||\n        this.maxNumElements !== -1 && elementIndex >= this.maxNumElements) {\n      throw new Error(`Trying to set element ${\n          elementIndex} in a list with max ${this.maxNumElements} elements.`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensor.shape, 'TensorList shape mismatch: ');\n    keep(tensor);\n    this.tensors[elementIndex] = tensor;\n  }\n\n  /**\n   * Return selected values in the TensorList as a stacked Tensor. All of\n   * selected values must have been written and their shapes must all match.\n   * @param indices indices of tensors to gather\n   * @param elementDtype output tensor dtype\n   * @param elementShape output tensor element shape\n   */\n  gather(indices: number[], elementDtype: DataType, elementShape: number[]):\n      Tensor {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          elementDtype}, but list elements ${this.elementDtype}`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, elementShape, 'TensorList shape mismatch: ');\n\n    // When indices is greater than the size of the list, indices beyond the\n    // size of the list are ignored.\n    indices = indices.slice(0, this.size());\n    const outputElementShape =\n        inferElementShape(this.elementShape, this.tensors, elementShape);\n    if (indices.length === 0) {\n      return tensor([], [0].concat(outputElementShape));\n    }\n\n    return tidy(() => {\n      const tensors =\n          indices.map(i => reshape(this.tensors[i], outputElementShape));\n      return stack(tensors, 0);\n    });\n  }\n\n  /**\n   * Return the values in the TensorList as a concatenated Tensor.\n   * @param elementDtype output tensor dtype\n   * @param elementShape output tensor element shape\n   */\n  concat(elementDtype: DataType, elementShape: number[]): Tensor {\n    if (!!elementDtype && elementDtype !== this.elementDtype) {\n      throw new Error(`TensorList dtype is ${\n          this.elementDtype} but concat requested dtype ${elementDtype}`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, elementShape, 'TensorList shape mismatch: ');\n    const outputElementShape =\n        inferElementShape(this.elementShape, this.tensors, elementShape);\n\n    if (this.size() === 0) {\n      return tensor([], [0].concat(outputElementShape));\n    }\n    return tidy(() => {\n      const tensors = this.tensors.map(t => reshape(t, outputElementShape));\n      return concat(tensors, 0);\n    });\n  }\n}\n\n/**\n * Creates a TensorList which, when stacked, has the value of tensor.\n * @param tensor from tensor\n * @param elementShape output tensor element shape\n */\nexport function fromTensor(\n    tensor: Tensor, elementShape: number[], elementDtype: DataType) {\n  const dtype = tensor.dtype;\n  if (tensor.shape.length < 1) {\n    throw new Error(\n        `Tensor must be at least a vector, but saw shape: ${tensor.shape}`);\n  }\n  if (tensor.dtype !== elementDtype) {\n    throw new Error(`Invalid data types; op elements ${\n        tensor.dtype}, but list elements ${elementDtype}`);\n  }\n  const tensorElementShape = tensor.shape.slice(1);\n  assertShapesMatchAllowUndefinedSize(\n      tensorElementShape, elementShape, 'TensorList shape mismatch: ');\n  const tensorList: Tensor[] = unstack(tensor);\n  return new TensorList(tensorList, elementShape, dtype);\n}\n\n/**\n * Return a TensorList of the given size with empty elements.\n * @param elementShape the shape of the future elements of the list\n * @param elementDtype the desired type of elements in the list\n * @param numElements the number of elements to reserve\n */\nexport function reserve(\n    elementShape: number[], elementDtype: DataType, numElements: number) {\n  return new TensorList([], elementShape, elementDtype, numElements);\n}\n\n/**\n * Put tensors at specific indices of a stacked tensor into a TensorList.\n * @param indices list of indices on how to scatter the tensor.\n * @param tensor input tensor.\n * @param elementShape the shape of the future elements of the list\n * @param numElements the number of elements to scatter\n */\nexport function scatter(\n    tensor: Tensor, indices: number[], elementShape: number[],\n    numElements?: number): TensorList {\n  if (indices.length !== tensor.shape[0]) {\n    throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${\n        indices.length} vs. ${tensor.shape[0]}`);\n  }\n\n  const maxIndex = Math.max(...indices);\n\n  if (numElements != null && numElements !== -1 && maxIndex >= numElements) {\n    throw new Error(\n        `Max index must be < array size (${maxIndex}  vs. ${numElements})`);\n  }\n\n  const list = new TensorList([], elementShape, tensor.dtype, numElements);\n  const tensors = unstack(tensor, 0);\n  indices.forEach((value, index) => {\n    list.setItem(value, tensors[index]);\n  });\n  return list;\n}\n\n/**\n * Split the values of a Tensor into a TensorList.\n * @param length the lengths to use when splitting value along\n *    its first dimension.\n * @param tensor the tensor to split.\n * @param elementShape the shape of the future elements of the list\n */\nexport function split(\n    tensor: Tensor, length: number[], elementShape: number[]) {\n  let totalLength = 0;\n  const cumulativeLengths = length.map(len => {\n    totalLength += len;\n    return totalLength;\n  });\n\n  if (totalLength !== tensor.shape[0]) {\n    throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${totalLength}, and tensor's shape is: ${tensor.shape}`);\n  }\n\n  const shapeWithoutFirstDim = tensor.shape.slice(1);\n  const outputElementShape =\n      mergeElementShape(shapeWithoutFirstDim, elementShape);\n  const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;\n  const tensors: Tensor[] = tidy(() => {\n    const tensors = [];\n    tensor = reshape(tensor, [1, totalLength, elementPerRow]);\n    for (let i = 0; i < length.length; ++i) {\n      const previousLength = (i === 0) ? 0 : cumulativeLengths[i - 1];\n      const indices = [0, previousLength, 0];\n      const sizes = [1, length[i], elementPerRow];\n      tensors[i] = reshape(\n          slice(tensor, indices, sizes), outputElementShape as number[]);\n    }\n    tensor.dispose();\n    return tensors;\n  });\n\n  const list = new TensorList([], elementShape, tensor.dtype, length.length);\n\n  for (let i = 0; i < tensors.length; i++) {\n    list.setItem(i, tensors[i]);\n  }\n  return list;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, scalar, Tensor} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {TensorArray} from '../../executor/tensor_array';\nimport {fromTensor, reserve, scatter, split} from '../../executor/tensor_list';\nimport {InternalOpAsyncExecutor, Node} from '../types';\n\nimport {cloneTensor, getParamValue, getTensor} from './utils';\n\nexport const executeOp: InternalOpAsyncExecutor = async(\n    node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): Promise<Tensor[]> => {\n  switch (node.op) {\n    case 'If':\n    case 'StatelessIf': {\n      const thenFunc =\n          getParamValue('thenBranch', node, tensorMap, context) as string;\n      const elseFunc =\n          getParamValue('elseBranch', node, tensorMap, context) as string;\n      const cond = getParamValue('cond', node, tensorMap, context) as Tensor;\n      const args = getParamValue('args', node, tensorMap, context) as Tensor[];\n      const condValue = await cond.data();\n      if (condValue[0]) {\n        return context.functionMap[thenFunc].executeFunctionAsync(\n            args, context.tensorArrayMap, context.tensorListMap);\n      } else {\n        return context.functionMap[elseFunc].executeFunctionAsync(\n            args, context.tensorArrayMap, context.tensorListMap);\n      }\n    }\n    case 'While':\n    case 'StatelessWhile': {\n      const bodyFunc =\n          getParamValue('body', node, tensorMap, context) as string;\n      const condFunc =\n          getParamValue('cond', node, tensorMap, context) as string;\n      const args = getParamValue('args', node, tensorMap, context) as Tensor[];\n\n      // Calculate the condition of the loop\n      const condResult =\n          (await context.functionMap[condFunc].executeFunctionAsync(\n              args, context.tensorArrayMap, context.tensorListMap));\n      const argIds = args.map(tensor => tensor.id);\n      let condValue = await condResult[0].data();\n      // Dispose the intermediate tensors for condition function\n      condResult.forEach(tensor => {\n        if (!tensor.kept && argIds.indexOf(tensor.id) === -1) {\n          tensor.dispose();\n        }\n      });\n\n      let result: Tensor[] = args;\n\n      while (condValue[0]) {\n        // Record the previous result for intermediate tensor tracking\n        const origResult = result;\n        // Execution the body of the loop\n        result = await context.functionMap[bodyFunc].executeFunctionAsync(\n            result, context.tensorArrayMap, context.tensorListMap);\n        const resultIds = result.map(tensor => tensor.id);\n\n        // Dispose the intermediate tensor for body function that is not global\n        // kept, not input/output of the body function\n        origResult.forEach(tensor => {\n          if (!tensor.kept && argIds.indexOf(tensor.id) === -1 &&\n              resultIds.indexOf(tensor.id) === -1) {\n            tensor.dispose();\n          }\n        });\n\n        // Recalcuate the condition of the loop using the latest results.\n        const condResult =\n            (await context.functionMap[condFunc].executeFunctionAsync(\n                result, context.tensorArrayMap, context.tensorListMap));\n        condValue = await condResult[0].data();\n        // Dispose the intermediate tensors for condition function\n        condResult.forEach(tensor => {\n          if (!tensor.kept && argIds.indexOf(tensor.id) === -1 &&\n              resultIds.indexOf(tensor.id) === -1) {\n            tensor.dispose();\n          }\n        });\n      }\n      return result;\n    }\n    case 'LoopCond': {\n      const pred = getParamValue('pred', node, tensorMap, context) as Tensor;\n      return [cloneTensor(pred)];\n    }\n    case 'Switch': {\n      const pred = getParamValue('pred', node, tensorMap, context) as Tensor;\n      let data = getParamValue('data', node, tensorMap, context) as Tensor;\n      if (!data.kept) {\n        data = cloneTensor(data);\n      }\n      // Outputs nodes :0 => false, :1 => true\n      return (await pred.data())[0] ? [undefined, data] : [data, undefined];\n    }\n    case 'Merge': {\n      const inputName = node.inputNames.find(\n          name => getTensor(name, tensorMap, context) !== undefined);\n      if (inputName) {\n        const data = getTensor(inputName, tensorMap, context);\n        return [cloneTensor(data)];\n      }\n      return undefined;\n    }\n    case 'Enter': {\n      const frameId =\n          getParamValue('frameName', node, tensorMap, context) as string;\n      const data = getParamValue('tensor', node, tensorMap, context) as Tensor;\n      context.enterFrame(frameId);\n      return [cloneTensor(data)];\n    }\n    case 'Exit': {\n      const data = getParamValue('tensor', node, tensorMap, context) as Tensor;\n      context.exitFrame();\n      return [cloneTensor(data)];\n    }\n    case 'NextIteration': {\n      const data = getParamValue('tensor', node, tensorMap, context) as Tensor;\n      context.nextIteration();\n      return [cloneTensor(data)];\n    }\n    case 'TensorArrayV3': {\n      const size = getParamValue('size', node, tensorMap, context) as number;\n      const dtype =\n          getParamValue('dtype', node, tensorMap, context) as DataType;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const dynamicSize =\n          getParamValue('dynamicSize', node, tensorMap, context) as boolean;\n      const clearAfterRead =\n          getParamValue('clearAfterRead', node, tensorMap, context) as boolean;\n      const identicalElementShapes =\n          getParamValue('identicalElementShapes', node, tensorMap, context) as\n          boolean;\n      const name = getParamValue('name', node, tensorMap, context) as string;\n      const tensorArray = new TensorArray(\n          name, dtype, size, elementShape, identicalElementShapes, dynamicSize,\n          clearAfterRead);\n      context.addTensorArray(tensorArray);\n      return [tensorArray.idTensor, scalar(1.0)];\n    }\n    case 'TensorArrayWriteV3': {\n      const id =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const index = getParamValue('index', node, tensorMap, context) as number;\n      const writeTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const writeTensorArray = context.getTensorArray(id.id);\n      writeTensorArray.write(index, writeTensor);\n      return [writeTensorArray.idTensor];\n    }\n    case 'TensorArrayReadV3': {\n      const readId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const readIndex =\n          getParamValue('index', node, tensorMap, context) as number;\n      const readTensorArray = context.getTensorArray(readId.id);\n      return [readTensorArray.read(readIndex)];\n    }\n    case 'TensorArrayGatherV3': {\n      const gatherId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const gatherIndices =\n          getParamValue('indices', node, tensorMap, context) as number[];\n      const gatherDtype =\n          getParamValue('dtype', node, tensorMap, context) as DataType;\n      const gatherTensorArray = context.getTensorArray(gatherId.id);\n      return [gatherTensorArray.gather(gatherIndices, gatherDtype)];\n    }\n    case 'TensorArrayScatterV3': {\n      const scatterId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const scatterIndices =\n          getParamValue('indices', node, tensorMap, context) as number[];\n      const scatterTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const scatterTensorArray = context.getTensorArray(scatterId.id);\n      scatterTensorArray.scatter(scatterIndices, scatterTensor);\n      return [scatterTensorArray.idTensor];\n    }\n    case 'TensorArrayConcatV3': {\n      const concatId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const concatTensorArray = context.getTensorArray(concatId.id);\n      const concatDtype =\n          getParamValue('dtype', node, tensorMap, context) as DataType;\n      return [concatTensorArray.concat(concatDtype)];\n    }\n    case 'TensorArraySplitV3': {\n      const splitId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const splitTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const lengths =\n          getParamValue('lengths', node, tensorMap, context) as number[];\n      const splitTensorArray = context.getTensorArray(splitId.id);\n      splitTensorArray.split(lengths, splitTensor);\n      return [splitTensorArray.idTensor];\n    }\n    case 'TensorArraySizeV3': {\n      const sizeId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const sizeTensorArray = context.getTensorArray(sizeId.id);\n      return [scalar(sizeTensorArray.size(), 'int32')];\n    }\n    case 'TensorArrayCloseV3': {\n      const closeId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const closeTensorArray = context.getTensorArray(closeId.id);\n      closeTensorArray.clearAndClose();\n      return [closeTensorArray.idTensor];\n    }\n    case 'TensorListSetItem': {\n      const idTensor =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const index = getParamValue('index', node, tensorMap, context) as number;\n      const writeTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const tensorList = context.getTensorList(idTensor.id);\n      tensorList.setItem(index, writeTensor);\n      return [tensorList.idTensor];\n    }\n    case 'TensorListGetItem': {\n      const idTensor =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const readIndex =\n          getParamValue('index', node, tensorMap, context) as number;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n\n      const elementDType =\n          getParamValue('elementDType', node, tensorMap, context) as DataType;\n      const tensorList = context.getTensorList(idTensor.id);\n      return [tensorList.getItem(readIndex, elementShape, elementDType)];\n    }\n    case 'TensorListScatterV2':\n    case 'TensorListScatter': {\n      const scatterIndices =\n          getParamValue('indices', node, tensorMap, context) as number[];\n      const scatterTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const numElements =\n          getParamValue('numElements', node, tensorMap, context) as number;\n      const tensorList =\n          scatter(scatterTensor, scatterIndices, elementShape, numElements);\n      context.addTensorList(tensorList);\n      return [tensorList.idTensor];\n    }\n    case 'TensorListReserve':\n    case 'EmptyTensorList': {\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const elementDtype =\n          getParamValue('elementDType', node, tensorMap, context) as DataType;\n      let numElementsParam;\n\n      if (node.op === 'TensorListReserve') {\n        numElementsParam = 'numElements';\n      } else {\n        numElementsParam = 'maxNumElements';\n      }\n\n      const numElements =\n          getParamValue(numElementsParam, node, tensorMap, context) as number;\n\n      const tensorList = reserve(elementShape, elementDtype, numElements);\n      context.addTensorList(tensorList);\n      return [tensorList.idTensor];\n    }\n    case 'TensorListGather': {\n      const gatherId =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const gatherIndices =\n          getParamValue('indices', node, tensorMap, context) as number[];\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const elementDtype =\n          getParamValue('elementDType', node, tensorMap, context) as DataType;\n      const tensorList = context.getTensorList(gatherId.id);\n      return [tensorList.gather(gatherIndices, elementDtype, elementShape)];\n    }\n    case 'TensorListStack': {\n      const idTensor =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const elementDtype =\n          getParamValue('elementDType', node, tensorMap, context) as DataType;\n      const numElements =\n          getParamValue('numElements', node, tensorMap, context) as number;\n      const tensorList = context.getTensorList(idTensor.id);\n      return [tensorList.stack(elementShape, elementDtype, numElements)];\n    }\n    case 'TensorListFromTensor': {\n      const tensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const elementDtype =\n          getParamValue('elementDType', node, tensorMap, context) as DataType;\n      const tensorList = fromTensor(tensor, elementShape, elementDtype);\n      context.addTensorList(tensorList);\n      return [tensorList.idTensor];\n    }\n    case 'TensorListConcat': {\n      const concatId =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const tensorList = context.getTensorList(concatId.id);\n      const concatDtype =\n          getParamValue('dtype', node, tensorMap, context) as DataType;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      return [tensorList.concat(concatDtype, elementShape)];\n    }\n    case 'TensorListPushBack': {\n      const idTensor =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const writeTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const tensorList = context.getTensorList(idTensor.id);\n      tensorList.pushBack(writeTensor);\n      return [tensorList.idTensor];\n    }\n    case 'TensorListPopBack': {\n      const idTensor =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const elementDType =\n          getParamValue('elementDType', node, tensorMap, context) as DataType;\n      const tensorList = context.getTensorList(idTensor.id);\n      return [tensorList.popBack(elementShape, elementDType)];\n    }\n    case 'TensorListSplit': {\n      const splitTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const lengths =\n          getParamValue('lengths', node, tensorMap, context) as number[];\n\n      const tensorList = split(splitTensor, lengths, elementShape);\n      context.addTensorList(tensorList);\n      return [tensorList.idTensor];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'control';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Rank, Tensor, Tensor3D, Tensor4D, Tensor5D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getPadding, getParamValue} from './utils';\n\nfunction fusedConvAndDepthWiseParams(\n    node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext) {\n  const [extraOp, activationFunc] =\n      (getParamValue('fusedOps', node, tensorMap, context) as string[]);\n\n  const isBiasAdd = extraOp === 'biasadd';\n  const isPrelu = activationFunc === 'prelu';\n  const isBatchNorm = extraOp === 'fusedbatchnorm';\n\n  const numArgs =\n      (getParamValue('numArgs', node, tensorMap, context) as number);\n  if (isBiasAdd) {\n    if (isPrelu && numArgs !== 2) {\n      throw new Error(\n          'FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu ' +\n          'must have two extra arguments: bias and alpha.');\n    }\n    if (!isPrelu && numArgs !== 1) {\n      throw new Error(\n          'FusedConv2d and DepthwiseConv2d with BiasAdd must have ' +\n          'one extra argument: bias.');\n    }\n  }\n  if (isBatchNorm) {\n    throw new Error(\n        'FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported');\n  }\n  const stride = getParamValue('strides', node, tensorMap, context) as number[];\n  const pad = getPadding(node, tensorMap, context);\n  const dataFormat =\n      (getParamValue('dataFormat', node, tensorMap, context) as string)\n          .toUpperCase();\n  const dilations =\n      getParamValue('dilations', node, tensorMap, context) as number[];\n  const [biasArg, preluArg] =\n      getParamValue('args', node, tensorMap, context) as Tensor[];\n  const leakyreluAlpha =\n      getParamValue('leakyreluAlpha', node, tensorMap, context) as number;\n\n  return {\n    stride,\n    pad,\n    dataFormat,\n    dilations,\n    biasArg,\n    preluArg,\n    activationFunc,\n    leakyreluAlpha\n  };\n}\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'Conv1D': {\n          const stride =\n              getParamValue('stride', node, tensorMap, context) as number;\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const dataFormat =\n              (getParamValue('dataFormat', node, tensorMap, context) as string)\n                  .toUpperCase();\n          const dilation =\n              getParamValue('dilation', node, tensorMap, context) as number;\n          return [tfOps.conv1d(\n              getParamValue('x', node, tensorMap, context) as Tensor3D,\n              getParamValue('filter', node, tensorMap, context) as Tensor3D,\n              stride, pad as 'valid' | 'same', dataFormat as 'NWC' | 'NCW',\n              dilation)];\n        }\n        case 'Conv2D': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getPadding(node, tensorMap, context);\n          const dataFormat =\n              (getParamValue('dataFormat', node, tensorMap, context) as string)\n                  .toUpperCase();\n          const dilations =\n              getParamValue('dilations', node, tensorMap, context) as number[];\n          return [tfOps.conv2d(\n              getParamValue('x', node, tensorMap, context) as Tensor3D |\n                  Tensor4D,\n              getParamValue('filter', node, tensorMap, context) as Tensor4D,\n              [stride[1], stride[2]], pad as 'valid' | 'same',\n              dataFormat as 'NHWC' | 'NCHW', [dilations[1], dilations[2]])];\n        }\n        case '_FusedConv2D': {\n          const {\n            stride,\n            pad,\n            dataFormat,\n            dilations,\n            biasArg,\n            preluArg,\n            activationFunc,\n            leakyreluAlpha\n          } = fusedConvAndDepthWiseParams(node, tensorMap, context);\n\n          return [tfOps.fused.conv2d({\n            x: getParamValue('x', node, tensorMap, context) as Tensor3D |\n                Tensor4D,\n            filter: getParamValue('filter', node, tensorMap, context) as\n                Tensor4D,\n            strides: [stride[1], stride[2]],\n            pad: pad as 'valid' | 'same',\n            dataFormat: dataFormat as 'NHWC' | 'NCHW',\n            dilations: [dilations[1], dilations[2]],\n            bias: biasArg,\n            activation: activationFunc as tfOps.fused.Activation,\n            preluActivationWeights: preluArg,\n            leakyreluAlpha\n          })];\n        }\n\n        case 'FusedDepthwiseConv2dNative': {\n          const {\n            stride,\n            pad,\n            dataFormat,\n            dilations,\n            biasArg,\n            preluArg,\n            activationFunc,\n            leakyreluAlpha,\n          } = fusedConvAndDepthWiseParams(node, tensorMap, context);\n\n          return [tfOps.fused.depthwiseConv2d({\n            x: getParamValue('x', node, tensorMap, context) as Tensor3D |\n                Tensor4D,\n            filter: getParamValue('filter', node, tensorMap, context) as\n                Tensor4D,\n            strides: [stride[1], stride[2]],\n            pad: pad as 'valid' | 'same',\n            dataFormat: dataFormat as 'NHWC' | 'NCHW',\n            dilations: [dilations[1], dilations[2]],\n            bias: biasArg,\n            activation: activationFunc as tfOps.fused.Activation,\n            preluActivationWeights: preluArg,\n            leakyreluAlpha\n          })];\n        }\n        case 'Conv2DBackpropInput':\n        case 'Conv2dTranspose': {\n          const shape = getParamValue(\n                            'outputShape', node, tensorMap,\n                            context) as [number, number, number] |\n              [number, number, number, number];\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getPadding(node, tensorMap, context);\n          return [tfOps.conv2dTranspose(\n              getParamValue('x', node, tensorMap, context) as Tensor3D |\n                  Tensor4D,\n              getParamValue('filter', node, tensorMap, context) as Tensor4D,\n              shape, [stride[1], stride[2]], pad as 'valid' | 'same')];\n        }\n        case 'DepthwiseConv2dNative':\n        case 'DepthwiseConv2d': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getPadding(node, tensorMap, context);\n          const dilations =\n              getParamValue('dilations', node, tensorMap, context) as number[];\n          const dataFormat =\n              (getParamValue('dataFormat', node, tensorMap, context) as string)\n                  .toUpperCase();\n\n          return [tfOps.depthwiseConv2d(\n              getParamValue('input', node, tensorMap, context) as Tensor3D |\n                  Tensor4D,\n              getParamValue('filter', node, tensorMap, context) as Tensor4D,\n              [stride[1], stride[2]], pad as 'valid' | 'same',\n              dataFormat as 'NHWC' | 'NCHW', [dilations[1], dilations[2]])];\n        }\n        case 'Conv3D': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const dataFormat =\n              (getParamValue('dataFormat', node, tensorMap, context) as string)\n                  .toUpperCase();\n          const dilations =\n              getParamValue('dilations', node, tensorMap, context) as number[];\n          return [tfOps.conv3d(\n              getParamValue('x', node, tensorMap, context) as Tensor4D |\n                  Tensor<Rank.R5>,\n              getParamValue('filter', node, tensorMap, context) as\n                  Tensor<Rank.R5>,\n              [stride[1], stride[2], stride[3]], pad as 'valid' | 'same',\n              dataFormat as 'NDHWC' | 'NCDHW',\n              [dilations[1], dilations[2], dilations[3]])];\n        }\n        case 'AvgPool': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const kernelSize =\n              getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n          return [tfOps.avgPool(\n              getParamValue('x', node, tensorMap, context) as Tensor3D |\n                  Tensor4D,\n              [kernelSize[1], kernelSize[2]], [stride[1], stride[2]],\n              pad as 'valid' | 'same')];\n        }\n        case 'MaxPool': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const kernelSize =\n              getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n          return [tfOps.maxPool(\n              getParamValue('x', node, tensorMap, context) as Tensor3D |\n                  Tensor4D,\n              [kernelSize[1], kernelSize[2]], [stride[1], stride[2]],\n              pad as 'valid' | 'same')];\n        }\n        case 'MaxPoolWithArgmax': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const kernelSize =\n              getParamValue('kernelSize', node, tensorMap, context) as number[];\n          const includeBatchInIndex =\n              getParamValue('includeBatchInIndex', node, tensorMap, context) as\n              boolean;\n          const {result, indexes} = tfOps.maxPoolWithArgmax(\n              getParamValue('x', node, tensorMap, context) as Tensor4D,\n              [kernelSize[1], kernelSize[2]], [stride[1], stride[2]],\n              pad as 'valid' | 'same', includeBatchInIndex);\n          return [result, indexes];\n        }\n        case 'AvgPool3D': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const kernelSize =\n              getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n          return [tfOps.avgPool3d(\n              getParamValue('x', node, tensorMap, context) as Tensor5D,\n              [kernelSize[1], kernelSize[2], kernelSize[3]],\n              [stride[1], stride[2], stride[3]], pad as 'valid' | 'same')];\n        }\n\n        case 'MaxPool3D': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const kernelSize =\n              getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n          return [tfOps.maxPool3d(\n              getParamValue('x', node, tensorMap, context) as Tensor5D,\n              [kernelSize[1], kernelSize[2], kernelSize[3]],\n              [stride[1], stride[2], stride[3]], pad as 'valid' | 'same')];\n        }\n\n        case 'Dilation2D': {\n          const strides =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const dilations =\n              getParamValue('dilations', node, tensorMap, context) as number[];\n\n          // strides: [1, stride_height, stride_width, 1].\n          const strideHeight = strides[1];\n          const strideWidth = strides[2];\n\n          // dilations: [1, dilation_height, dilation_width, 1].\n          const dilationHeight = dilations[1];\n          const dilationWidth = dilations[2];\n\n          return [tfOps.dilation2d(\n              getParamValue('x', node, tensorMap, context) as Tensor3D |\n                  Tensor4D,\n              getParamValue('filter', node, tensorMap, context) as Tensor3D,\n              [strideHeight, strideWidth], pad as 'valid' | 'same',\n              [dilationHeight, dilationWidth], 'NHWC' /* dataFormat */)];\n        }\n\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'convolution';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor, Tensor1D, Tensor2D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpAsyncExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nfunction nmsParams(\n    node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext) {\n  const boxes = getParamValue('boxes', node, tensorMap, context) as Tensor;\n  const scores = getParamValue('scores', node, tensorMap, context) as Tensor;\n  const maxOutputSize =\n      getParamValue('maxOutputSize', node, tensorMap, context) as number;\n  const iouThreshold =\n      getParamValue('iouThreshold', node, tensorMap, context) as number;\n  const scoreThreshold =\n      getParamValue('scoreThreshold', node, tensorMap, context) as number;\n  const softNmsSigma =\n      getParamValue('softNmsSigma', node, tensorMap, context) as number;\n\n  return {\n    boxes,\n    scores,\n    maxOutputSize,\n    iouThreshold,\n    scoreThreshold,\n    softNmsSigma\n  };\n}\n\nexport const executeOp: InternalOpAsyncExecutor = async(\n    node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): Promise<Tensor[]> => {\n  switch (node.op) {\n    case 'NonMaxSuppressionV5': {\n      const {\n        boxes,\n        scores,\n        maxOutputSize,\n        iouThreshold,\n        scoreThreshold,\n        softNmsSigma\n      } = nmsParams(node, tensorMap, context);\n\n      const result = await tfOps.image.nonMaxSuppressionWithScoreAsync(\n          boxes as Tensor2D, scores as Tensor1D, maxOutputSize, iouThreshold,\n          scoreThreshold, softNmsSigma);\n\n      return [result.selectedIndices, result.selectedScores];\n    }\n    case 'NonMaxSuppressionV4': {\n      const {boxes, scores, maxOutputSize, iouThreshold, scoreThreshold} =\n          nmsParams(node, tensorMap, context);\n\n      const padToMaxOutputSize =\n          getParamValue('padToMaxOutputSize', node, tensorMap, context) as\n          boolean;\n\n      const result = await tfOps.image.nonMaxSuppressionPaddedAsync(\n          boxes as Tensor2D, scores as Tensor1D, maxOutputSize, iouThreshold,\n          scoreThreshold, padToMaxOutputSize);\n\n      return [result.selectedIndices, result.validOutputs];\n    }\n    case 'NonMaxSuppressionV3':\n    case 'NonMaxSuppressionV2': {\n      const {boxes, scores, maxOutputSize, iouThreshold, scoreThreshold} =\n          nmsParams(node, tensorMap, context);\n\n      return [await tfOps.image.nonMaxSuppressionAsync(\n          boxes as Tensor2D, scores as Tensor1D, maxOutputSize, iouThreshold,\n          scoreThreshold)];\n    }\n    case 'Where': {\n      const condition = tfOps.cast(\n          (getParamValue('condition', node, tensorMap, context) as Tensor),\n          'bool');\n      const result = [await tfOps.whereAsync(condition)];\n      condition.dispose();\n      return result;\n    }\n    case 'ListDiff': {\n      return tfOps.setdiff1dAsync(\n          getParamValue('x', node, tensorMap, context) as Tensor,\n          getParamValue('y', node, tensorMap, context) as Tensor);\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'dynamic';\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {DataType, keep, scalar, stack, Tensor, tidy, unstack, util} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\n/**\n * Hashtable contains a set of tensors, which can be accessed by key.\n */\nexport class HashTable {\n  readonly handle: Tensor;\n\n  // tslint:disable-next-line: no-any\n  private tensorMap: Map<any, Tensor>;\n\n  get id() {\n    return this.handle.id;\n  }\n\n  /**\n   * Constructor of HashTable. Creates a hash table.\n   *\n   * @param keyDType `dtype` of the table keys.\n   * @param valueDType `dtype` of the table values.\n   */\n  constructor(readonly keyDType: DataType, readonly valueDType: DataType) {\n    this.handle = scalar(0);\n    // tslint:disable-next-line: no-any\n    this.tensorMap = new Map<any, Tensor>();\n\n    keep(this.handle);\n  }\n\n  /**\n   * Dispose the tensors and handle and clear the hashtable.\n   */\n  clearAndClose() {\n    this.tensorMap.forEach(value => value.dispose());\n    this.tensorMap.clear();\n    this.handle.dispose();\n  }\n\n  /**\n   * The number of items in the hash table.\n   */\n  size(): number {\n    return this.tensorMap.size;\n  }\n\n  /**\n   * The number of items in the hash table as a rank-0 tensor.\n   */\n  tensorSize(): Tensor {\n    return tfOps.scalar(this.size(), 'int32');\n  }\n\n  /**\n   * Replaces the contents of the table with the specified keys and values.\n   * @param keys Keys to store in the hashtable.\n   * @param values Values to store in the hashtable.\n   */\n  async import(keys: Tensor, values: Tensor): Promise<Tensor> {\n    this.checkKeyAndValueTensor(keys, values);\n\n    // We only store the primitive values of the keys, this allows lookup\n    // to be O(1).\n    const $keys = await keys.data();\n\n    // Clear the hashTable before inserting new values.\n    this.tensorMap.forEach(value => value.dispose());\n    this.tensorMap.clear();\n\n    return tidy(() => {\n      const $values = unstack(values);\n\n      const keysLength = $keys.length;\n      const valuesLength = $values.length;\n\n      util.assert(\n          keysLength === valuesLength,\n          () => `The number of elements doesn't match, keys has ` +\n              `${keysLength} elements, the values has ${valuesLength} ` +\n              `elements.`);\n\n      for (let i = 0; i < keysLength; i++) {\n        const key = $keys[i];\n        const value = $values[i];\n\n        keep(value);\n        this.tensorMap.set(key, value);\n      }\n\n      return this.handle;\n    });\n  }\n\n  /**\n   * Looks up keys in a hash table, outputs the corresponding values.\n   *\n   * Performs batch lookups, for every element in the key tensor, `find`\n   * stacks the corresponding value into the return tensor.\n   *\n   * If an element is not present in the table, the given `defaultValue` is\n   * used.\n   *\n   * @param keys Keys to look up. Must have the same type as the keys of the\n   *     table.\n   * @param defaultValue The scalar `defaultValue` is the value output for keys\n   *     not present in the table. It must also be of the same type as the\n   *     table values.\n   */\n  async find(keys: Tensor, defaultValue: Tensor): Promise<Tensor> {\n    this.checkKeyAndValueTensor(keys, defaultValue);\n\n    const $keys = await keys.data();\n\n    return tidy(() => {\n      const result: Tensor[] = [];\n\n      for (let i = 0; i < $keys.length; i++) {\n        const key = $keys[i];\n\n        const value = this.findWithDefault(key, defaultValue);\n        result.push(value);\n      }\n\n      return stack(result);\n    });\n  }\n\n  // tslint:disable-next-line: no-any\n  private findWithDefault(key: any, defaultValue: Tensor): Tensor {\n    const result = this.tensorMap.get(key);\n\n    return result != null ? result : defaultValue;\n  }\n\n  private checkKeyAndValueTensor(key: Tensor, value: Tensor) {\n    if (key.dtype !== this.keyDType) {\n      throw new Error(\n          `Expect key dtype ${this.keyDType}, but got ` +\n          `${key.dtype}`);\n    }\n\n    if (value.dtype !== this.valueDType) {\n      throw new Error(\n          `Expect value dtype ${this.valueDType}, but got ` +\n          `${value.dtype}`);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../data/types';\nimport {ExecutionContext} from '../executor/execution_context';\nimport {ResourceManager} from '../executor/resource_manager';\n\nimport {NodeValueImpl} from './custom_op/node_value_impl';\nimport {getRegisteredOp} from './custom_op/register';\nimport * as arithmetic from './executors/arithmetic_executor';\nimport * as basicMath from './executors/basic_math_executor';\nimport * as control from './executors/control_executor';\nimport * as convolution from './executors/convolution_executor';\nimport * as creation from './executors/creation_executor';\nimport * as dynamic from './executors/dynamic_executor';\nimport * as evaluation from './executors/evaluation_executor';\nimport * as graph from './executors/graph_executor';\nimport * as hashTable from './executors/hash_table_executor';\nimport * as image from './executors/image_executor';\nimport * as logical from './executors/logical_executor';\nimport * as matrices from './executors/matrices_executor';\nimport * as normalization from './executors/normalization_executor';\nimport * as reduction from './executors/reduction_executor';\nimport * as sliceJoin from './executors/slice_join_executor';\nimport * as spectral from './executors/spectral_executor';\nimport * as transformation from './executors/transformation_executor';\nimport {Node} from './types';\n\n/**\n * Executes the op defined by the node object.\n * @param node\n * @param tensorMap contains tensors for executed nodes and weights\n * @param context contains tensors and information for running the current node.\n * @param resourceManager Optional. Contains global resources of the model.\n */\nexport function executeOp(\n    node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext,\n    resourceManager?: ResourceManager): tfc.Tensor[]|Promise<tfc.Tensor[]> {\n  const value =\n      ((node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext) => {\n        switch (node.category) {\n          case 'arithmetic':\n            return tfc.tidy(\n                () => arithmetic.executeOp(node, tensorMap, context));\n          case 'basic_math':\n            return tfc.tidy(\n                () => basicMath.executeOp(node, tensorMap, context));\n          case 'control':\n            return control.executeOp(node, tensorMap, context);\n          case 'convolution':\n            return tfc.tidy(\n                () => convolution.executeOp(node, tensorMap, context));\n          case 'creation':\n            return tfc.tidy(() => creation.executeOp(node, tensorMap, context));\n          case 'dynamic':\n            return dynamic.executeOp(node, tensorMap, context);\n          case 'evaluation':\n            return tfc.tidy(\n                () => evaluation.executeOp(node, tensorMap, context));\n          case 'image':\n            return tfc.tidy(() => image.executeOp(node, tensorMap, context));\n          case 'graph':\n            return tfc.tidy(() => graph.executeOp(node, tensorMap, context));\n          case 'logical':\n            return tfc.tidy(() => logical.executeOp(node, tensorMap, context));\n          case 'matrices':\n            return tfc.tidy(() => matrices.executeOp(node, tensorMap, context));\n          case 'normalization':\n            return tfc.tidy(\n                () => normalization.executeOp(node, tensorMap, context));\n          case 'reduction':\n            return tfc.tidy(\n                () => reduction.executeOp(node, tensorMap, context));\n          case 'slice_join':\n            return tfc.tidy(\n                () => sliceJoin.executeOp(node, tensorMap, context));\n          case 'spectral':\n            return tfc.tidy(() => spectral.executeOp(node, tensorMap, context));\n          case 'transformation':\n            return tfc.tidy(\n                () => transformation.executeOp(node, tensorMap, context));\n          case 'hash_table':\n            return hashTable.executeOp(\n                node, tensorMap, context, resourceManager);\n          case 'custom':\n            const opMapper = getRegisteredOp(node.op);\n            if (opMapper && opMapper.customExecutor) {\n              return opMapper.customExecutor(\n                  new NodeValueImpl(node, tensorMap, context));\n            } else {\n              throw TypeError(`Custom op ${node.op} is not registered.`);\n            }\n          default:\n            throw TypeError(\n                `Unknown op '${node.op}'. File an issue at ` +\n                `https://github.com/tensorflow/tfjs/issues so we can add it` +\n                `, or register a custom execution with tf.registerOp()`);\n        }\n      })(node, tensorMap, context);\n  if (tfc.util.isPromise(value)) {\n    return (value as Promise<tfc.Tensor>).then((data) => [].concat(data));\n  }\n  return [].concat(value);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'BiasAdd':\n        case 'AddV2':\n        case 'Add': {\n          return [tfOps.add(\n              (getParamValue('a', node, tensorMap, context) as Tensor),\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'AddN': {\n          return [tfOps.addN((\n              getParamValue('tensors', node, tensorMap, context) as Tensor[]))];\n        }\n        case 'FloorMod':\n        case 'Mod':\n          return [tfOps.mod(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        case 'Mul':\n          return [tfOps.mul(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        case 'RealDiv':\n        case 'Div': {\n          return [tfOps.div(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'DivNoNan': {\n          return [tfOps.divNoNan(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'FloorDiv': {\n          return [tfOps.floorDiv(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'Sub': {\n          return [tfOps.sub(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'Minimum': {\n          return [tfOps.minimum(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'Maximum': {\n          return [tfOps.maximum(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'Pow': {\n          return [tfOps.pow(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'SquaredDifference': {\n          return [tfOps.squaredDifference(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'arithmetic';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue, getTensor} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'Abs':\n        case 'ComplexAbs':\n          return [tfOps.abs(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Acos':\n          return [tfOps.acos(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Acosh':\n          return [tfOps.acosh(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Asin':\n          return [tfOps.asin(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Asinh':\n          return [tfOps.asinh(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Atan':\n          return [tfOps.atan(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Atan2':\n          return [tfOps.atan2(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('y', node, tensorMap, context) as Tensor)];\n        case 'Atanh':\n          return [tfOps.atanh(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Ceil':\n          return [tfOps.ceil(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Complex':\n          return [tfOps.complex(\n              getParamValue('real', node, tensorMap, context) as Tensor,\n              getParamValue('imag', node, tensorMap, context) as Tensor)];\n        case 'Cos':\n          return [tfOps.cos(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Cosh':\n          return [tfOps.cosh(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Elu':\n          return [tfOps.elu(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Erf':\n          return [tfOps.erf(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Exp':\n          return [tfOps.exp(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Expm1': {\n          return [tfOps.expm1(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Floor':\n          return [tfOps.floor(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Log':\n          return [tfOps.log(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Log1p': {\n          return [tfOps.log1p(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Imag':\n          return [tfOps.imag(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n\n        case 'Neg':\n          return [tfOps.neg(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Reciprocal': {\n          return [tfOps.reciprocal(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Real':\n          return [tfOps.real(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Relu':\n          return [tfOps.relu(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Round': {\n          return [tfOps.round(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Selu':\n          return [tfOps.selu(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Sigmoid':\n          return [tfOps.sigmoid(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Sin':\n          return [tfOps.sin(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Sign': {\n          return [tfOps.sign(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Sinh': {\n          return [tfOps.sinh(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Softplus': {\n          return [tfOps.softplus(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Sqrt': {\n          return [tfOps.sqrt(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Square': {\n          return [tfOps.square(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Tanh': {\n          return [tfOps.tanh(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Tan':\n          return [tfOps.tan(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'ClipByValue':\n          return [tfOps.clipByValue(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('clipValueMin', node, tensorMap, context) as number,\n              getParamValue('clipValueMax', node, tensorMap, context) as\n                  number)];\n        case 'Relu6':\n          return [tfOps.relu6(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Rsqrt':\n          return [tfOps.rsqrt(\n              getTensor(node.inputNames[0], tensorMap, context))];\n        case 'Prod':\n          return [tfOps.prod(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('axes', node, tensorMap, context) as number[])];\n        case 'LeakyRelu':\n          return [tfOps.leakyRelu(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('alpha', node, tensorMap, context) as number)];\n        case 'Prelu':\n          return [tfOps.prelu(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('alpha', node, tensorMap, context) as Tensor)];\n        case 'IsNan':\n          return [tfOps.isNaN(\n              getTensor(node.inputNames[0], tensorMap, context))];\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'basic_math';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, Tensor, Tensor1D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'Fill': {\n          const shape =\n              getParamValue('shape', node, tensorMap, context) as number[];\n          const dtype =\n              getParamValue('dtype', node, tensorMap, context) as DataType;\n          const value =\n              getParamValue('value', node, tensorMap, context) as number;\n          return [tfOps.fill(shape, value, dtype)];\n        }\n        case 'LinSpace': {\n          const start =\n              getParamValue('start', node, tensorMap, context) as number;\n          const stop =\n              getParamValue('stop', node, tensorMap, context) as number;\n          const num = getParamValue('num', node, tensorMap, context) as number;\n          return [tfOps.linspace(start, stop, num)];\n        }\n        case 'Multinomial': {\n          const logits =\n              getParamValue('logits', node, tensorMap, context) as Tensor1D;\n          const numSamples =\n              getParamValue('numSamples', node, tensorMap, context) as number;\n          const seed =\n              getParamValue('seed', node, tensorMap, context) as number;\n          return [tfOps.multinomial(logits, numSamples, seed)];\n        }\n        case 'OneHot': {\n          const indices =\n              getParamValue('indices', node, tensorMap, context) as Tensor1D;\n          const depth =\n              getParamValue('depth', node, tensorMap, context) as number;\n          const onValue =\n              getParamValue('onValue', node, tensorMap, context) as number;\n          const offValue =\n              getParamValue('offValue', node, tensorMap, context) as number;\n          return [tfOps.oneHot(indices, depth, onValue, offValue)];\n        }\n        case 'Ones': {\n          return [tfOps.ones(\n              getParamValue('shape', node, tensorMap, context) as number[],\n              getParamValue('dtype', node, tensorMap, context) as DataType)];\n        }\n        case 'OnesLike': {\n          return [tfOps.onesLike(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'RandomUniform': {\n          return [tfOps.randomUniform(\n              // tslint:disable-next-line:no-any\n              getParamValue('shape', node, tensorMap, context) as any,\n              getParamValue('minval', node, tensorMap, context) as number,\n              getParamValue('maxval', node, tensorMap, context) as number,\n              getParamValue('dtype', node, tensorMap, context) as DataType)];\n        }\n        case 'Range': {\n          const start =\n              getParamValue('start', node, tensorMap, context) as number;\n          const stop =\n              getParamValue('stop', node, tensorMap, context) as number;\n          const step =\n              getParamValue('step', node, tensorMap, context) as number;\n          return [tfOps.range(\n              start, stop, step,\n              getParamValue('dtype', node, tensorMap, context) as 'float32' |\n                  'int32')];\n        }\n        case 'TruncatedNormal': {\n          const shape =\n              getParamValue('shape', node, tensorMap, context) as number[];\n          const mean =\n              getParamValue('mean', node, tensorMap, context) as number;\n          const stdDev =\n              getParamValue('stdDev', node, tensorMap, context) as number;\n          const seed =\n              getParamValue('seed', node, tensorMap, context) as number;\n          return [tfOps.truncatedNormal(\n              shape, mean, stdDev,\n              getParamValue('dtype', node, tensorMap, context) as 'float32' |\n                  'int32',\n              seed)];\n        }\n        case 'Zeros': {\n          return [tfOps.zeros(\n              getParamValue('shape', node, tensorMap, context) as number[],\n              getParamValue('dtype', node, tensorMap, context) as DataType)];\n        }\n        case 'ZerosLike': {\n          return [tfOps.zerosLike(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'creation';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext):\n        Tensor[] => {\n          switch (node.op) {\n            case 'TopKV2': {\n              const x = getParamValue('x', node, tensorMap, context) as Tensor;\n              const k = getParamValue('k', node, tensorMap, context) as number;\n              const sorted =\n                  getParamValue('sorted', node, tensorMap, context) as boolean;\n              const result = tfOps.topk(x, k, sorted);\n              return [result.values, result.indices];\n            }\n            case 'Unique': {\n              const x = getParamValue('x', node, tensorMap, context) as Tensor;\n              const result = tfOps.unique(x);\n              return [result.values, result.indices];\n            }\n            case 'UniqueV2': {\n              const x = getParamValue('x', node, tensorMap, context) as Tensor;\n              const axis =\n                  getParamValue('axis', node, tensorMap, context) as number;\n              const result = tfOps.unique(x, axis);\n              return [result.values, result.indices];\n            }\n            default:\n              throw TypeError(`Node type ${node.op} is not implemented`);\n          }\n        };\n\nexport const CATEGORY = 'evaluation';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor, Tensor1D, Tensor2D, Tensor3D, Tensor4D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'ResizeBilinear': {\n          const images =\n              getParamValue('images', node, tensorMap, context) as Tensor;\n          const size =\n              getParamValue('size', node, tensorMap, context) as number[];\n          const alignCorners =\n              getParamValue('alignCorners', node, tensorMap, context) as\n              boolean;\n          const halfPixelCenters =\n              getParamValue('halfPixelCenters', node, tensorMap, context) as\n              boolean;\n          return [tfOps.image.resizeBilinear(\n              images as Tensor3D | Tensor4D, [size[0], size[1]], alignCorners,\n              halfPixelCenters)];\n        }\n        case 'ResizeNearestNeighbor': {\n          const images =\n              getParamValue('images', node, tensorMap, context) as Tensor;\n          const size =\n              getParamValue('size', node, tensorMap, context) as number[];\n          const alignCorners =\n              getParamValue('alignCorners', node, tensorMap, context) as\n              boolean;\n          const halfPixelCenters =\n              getParamValue('halfPixelCenters', node, tensorMap, context) as\n              boolean;\n          return [tfOps.image.resizeNearestNeighbor(\n              images as Tensor3D | Tensor4D, [size[0], size[1]], alignCorners,\n              halfPixelCenters)];\n        }\n        case 'CropAndResize': {\n          const image =\n              getParamValue('image', node, tensorMap, context) as Tensor;\n          const boxes =\n              getParamValue('boxes', node, tensorMap, context) as Tensor;\n          const boxInd =\n              getParamValue('boxInd', node, tensorMap, context) as Tensor;\n          const cropSize =\n              getParamValue('cropSize', node, tensorMap, context) as number[];\n          const method =\n              getParamValue('method', node, tensorMap, context) as string;\n          const extrapolationValue =\n              getParamValue('extrapolationValue', node, tensorMap, context) as\n              number;\n          return [tfOps.image.cropAndResize(\n              image as Tensor4D, boxes as Tensor2D, boxInd as Tensor1D,\n              cropSize as [number, number], method as 'bilinear' | 'nearest',\n              extrapolationValue)];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'image';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {cloneTensor, getParamValue, getTensor} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'Const': {\n          return tensorMap[node.name];\n        }\n        case 'PlaceholderWithDefault':\n          const def =\n              getParamValue('default', node, tensorMap, context) as Tensor;\n          return [getTensor(node.name, tensorMap, context) || def];\n        case 'Placeholder':\n          return [getTensor(node.name, tensorMap, context)];\n        case 'Identity':\n        case 'StopGradient':\n        case 'FakeQuantWithMinMaxVars': {  // This op is currently ignored.\n          const data = getParamValue('x', node, tensorMap, context) as Tensor;\n          return [cloneTensor(data)];\n        }\n        case 'IdentityN':\n          return (getParamValue('x', node, tensorMap, context) as Tensor[])\n              .map((t: Tensor) => cloneTensor(t));\n        case 'Snapshot':\n          const snapshot =\n              (getParamValue('x', node, tensorMap, context) as Tensor);\n          return [cloneTensor(snapshot)];\n        case 'Shape':\n          return [tfOps.tensor1d(\n              (getParamValue('x', node, tensorMap, context) as Tensor).shape,\n              'int32')];\n        case 'ShapeN':\n          return (getParamValue('x', node, tensorMap, context) as Tensor[])\n              .map((t: Tensor) => tfOps.tensor1d(t.shape));\n        case 'Size':\n          return [tfOps.scalar(\n              (getParamValue('x', node, tensorMap, context) as Tensor).size,\n              'int32')];\n        case 'Rank':\n          return [tfOps.scalar(\n              (getParamValue('x', node, tensorMap, context) as Tensor).rank,\n              'int32')];\n        case 'NoOp':\n          return [tfOps.scalar(1)];\n        case 'Print':\n          const input = getParamValue('x', node, tensorMap, context) as Tensor;\n          const data =\n              getParamValue('data', node, tensorMap, context) as Tensor[];\n          const message =\n              getParamValue('message', node, tensorMap, context) as string;\n          const summarize =\n              getParamValue('summarize', node, tensorMap, context) as number;\n          console.warn(\n              'The graph has a tf.print() operation,' +\n              'usually used for debugging, which slows down performance.');\n          console.log(message);\n          for (let i = 0; i < data.length; i++) {\n            console.log(Array.prototype.slice.call(data[i].dataSync())\n                            .slice(0, summarize));\n          }\n          return [input];\n\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'graph';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'Equal': {\n          return [tfOps.equal(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'NotEqual': {\n          return [tfOps.notEqual(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'Greater': {\n          return [tfOps.greater(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'GreaterEqual': {\n          return [tfOps.greaterEqual(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'Less': {\n          return [tfOps.less(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'LessEqual': {\n          return [tfOps.lessEqual(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'LogicalAnd': {\n          return [tfOps.logicalAnd(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'LogicalNot': {\n          return [tfOps.logicalNot(\n              getParamValue('a', node, tensorMap, context) as Tensor)];\n        }\n        case 'LogicalOr': {\n          return [tfOps.logicalOr(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'Select':\n        case 'SelectV2': {\n          return [tfOps.where(\n              getParamValue('condition', node, tensorMap, context) as Tensor,\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'logical';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor, Tensor2D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'BatchMatMul':\n        case 'BatchMatMulV2':\n        case 'MatMul':\n          return [tfOps.matMul(\n              getParamValue('a', node, tensorMap, context) as Tensor2D,\n              getParamValue('b', node, tensorMap, context) as Tensor2D,\n              getParamValue('transposeA', node, tensorMap, context) as boolean,\n              getParamValue('transposeB', node, tensorMap, context) as\n                  boolean)];\n\n        case 'Einsum':\n          return [tfOps.einsum(\n              getParamValue('equation', node, tensorMap, context) as string,\n              ...getParamValue('tensors', node, tensorMap, context) as\n                  Tensor[])];\n\n        case 'Transpose':\n          return [tfOps.transpose(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('perm', node, tensorMap, context) as number[])];\n\n        case '_FusedMatMul':\n          const [extraOp, activationFunc] =\n              (getParamValue('fusedOps', node, tensorMap, context) as string[]);\n\n          const isBiasAdd = extraOp === 'biasadd';\n          const isPrelu = activationFunc === 'prelu';\n\n          const numArgs =\n              (getParamValue('numArgs', node, tensorMap, context) as number);\n          const leakyreluAlpha =\n              getParamValue('leakyreluAlpha', node, tensorMap, context) as\n              number;\n\n          if (isBiasAdd) {\n            if (isPrelu && numArgs !== 2) {\n              throw new Error(\n                  'Fused MatMul with BiasAdd and Prelu must have two ' +\n                  'extra arguments: bias and alpha.');\n            }\n            if (!isPrelu && numArgs !== 1) {\n              throw new Error(\n                  'Fused MatMul with BiasAdd must have one extra argument: bias.');\n            }\n          }\n          const [biasArg, preluArg] =\n              getParamValue('args', node, tensorMap, context) as Tensor[];\n          return [tfOps.fused.matMul({\n            a: getParamValue('a', node, tensorMap, context) as Tensor2D,\n            b: getParamValue('b', node, tensorMap, context) as Tensor2D,\n            transposeA: getParamValue('transposeA', node, tensorMap, context) as\n                boolean,\n            transposeB: getParamValue('transposeB', node, tensorMap, context) as\n                boolean,\n            bias: biasArg,\n            activation: activationFunc as tfOps.fused.Activation,\n            preluActivationWeights: preluArg,\n            leakyreluAlpha\n          })];\n\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'matrices';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Scalar, Tensor, Tensor3D, Tensor4D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'FusedBatchNorm':\n        case 'FusedBatchNormV2': {\n          return [tfOps.batchNorm(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('mean', node, tensorMap, context) as Tensor,\n              getParamValue('variance', node, tensorMap, context) as Tensor,\n              getParamValue('offset', node, tensorMap, context) as Tensor,\n              getParamValue('scale', node, tensorMap, context) as Tensor,\n              getParamValue('epsilon', node, tensorMap, context) as number)];\n        }\n        case 'FusedBatchNormV3': {\n          return [tfOps.batchNorm(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('mean', node, tensorMap, context) as Tensor,\n              getParamValue('variance', node, tensorMap, context) as Tensor,\n              getParamValue('offset', node, tensorMap, context) as Tensor,\n              getParamValue('scale', node, tensorMap, context) as Tensor,\n              getParamValue('epsilon', node, tensorMap, context) as number)];\n        }\n        case 'LRN': {\n          return [tfOps.localResponseNormalization(\n              getParamValue('x', node, tensorMap, context) as Tensor3D |\n                  Tensor4D,\n              getParamValue('radius', node, tensorMap, context) as number,\n              getParamValue('bias', node, tensorMap, context) as number,\n              getParamValue('alpha', node, tensorMap, context) as number,\n              getParamValue('beta', node, tensorMap, context) as number)];\n        }\n        case 'Softmax': {\n          return [tfOps.softmax(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'LogSoftmax': {\n          return [tfOps.logSoftmax(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'SparseToDense': {\n          return [tfOps.sparseToDense(\n              getParamValue('sparseIndices', node, tensorMap, context) as\n                  Tensor,\n              getParamValue('outputShape', node, tensorMap, context) as Tensor,\n              getParamValue('sparseValues', node, tensorMap, context) as\n                  number[],\n              getParamValue('defaultValue', node, tensorMap, context) as\n                  Scalar)];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'normalization';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor, Tensor1D, Tensor2D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'Max': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          const keepDims =\n              getParamValue('keepDims', node, tensorMap, context) as boolean;\n          return [tfOps.max(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis,\n              keepDims)];\n        }\n        case 'Mean': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          const keepDims =\n              getParamValue('keepDims', node, tensorMap, context) as boolean;\n          return [tfOps.mean(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis,\n              keepDims)];\n        }\n        case 'Min': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          const keepDims =\n              getParamValue('keepDims', node, tensorMap, context) as boolean;\n          return [tfOps.min(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis,\n              keepDims)];\n        }\n        case 'Sum': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          const keepDims =\n              getParamValue('keepDims', node, tensorMap, context) as boolean;\n          return [tfOps.sum(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis,\n              keepDims)];\n        }\n        case 'All': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          const keepDims =\n              getParamValue('keepDims', node, tensorMap, context) as boolean;\n          return [tfOps.all(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis,\n              keepDims)];\n        }\n        case 'Any': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          const keepDims =\n              getParamValue('keepDims', node, tensorMap, context) as boolean;\n          return [tfOps.any(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis,\n              keepDims)];\n        }\n        case 'ArgMax': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          return [tfOps.argMax(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis)];\n        }\n        case 'ArgMin': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          return [tfOps.argMin(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis)];\n        }\n        case 'Prod': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          const keepDims =\n              getParamValue('keepDims', node, tensorMap, context) as boolean;\n          return [tfOps.prod(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis,\n              keepDims)];\n        }\n        case 'Cumsum': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          const exclusive =\n              getParamValue('exclusive', node, tensorMap, context) as boolean;\n          const reverse =\n              getParamValue('reverse', node, tensorMap, context) as boolean;\n          return [tfOps.cumsum(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis,\n              exclusive, reverse)];\n        }\n        case 'Bincount':\n          const x = getParamValue('x', node, tensorMap, context) as Tensor1D;\n          const weights =\n              getParamValue('weights', node, tensorMap, context) as Tensor1D;\n          const size =\n              getParamValue('size', node, tensorMap, context) as number;\n\n          return [tfOps.bincount(x, weights, size)];\n        case 'DenseBincount': {\n          const x = getParamValue('x', node, tensorMap, context) as Tensor1D |\n              Tensor2D;\n          const weights =\n              getParamValue('weights', node, tensorMap, context) as Tensor1D |\n              Tensor2D;\n          const size =\n              getParamValue('size', node, tensorMap, context) as number;\n\n          const binaryOutput =\n              getParamValue('binaryOutput', node, tensorMap, context) as\n              boolean;\n\n          return [tfOps.denseBincount(x, weights, size, binaryOutput)];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'reduction';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Scalar, Tensor, Tensor1D, tidy, util} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'ConcatV2':\n        case 'Concat': {\n          const n = getParamValue('n', node, tensorMap, context) as number;\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          let inputs =\n              getParamValue('tensors', node, tensorMap, context) as Tensor[];\n          inputs = inputs.slice(0, n);\n          return [tfOps.concat(inputs, axis)];\n        }\n        case 'Gather': {\n          const input = getParamValue('x', node, tensorMap, context) as Tensor;\n          const indices =\n              getParamValue('indices', node, tensorMap, context) as Tensor1D;\n          return [tfOps.gather(input, tfOps.cast(indices, 'int32'), 0)];\n        }\n        case 'GatherV2': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          const batchDims =\n              getParamValue('batchDims', node, tensorMap, context) as number;\n          const input = getParamValue('x', node, tensorMap, context) as Tensor;\n          const indices =\n              getParamValue('indices', node, tensorMap, context) as Tensor1D;\n          return [tfOps.gather(\n              input, tfOps.cast(indices, 'int32'), axis, batchDims)];\n        }\n        case 'Reverse': {\n          const dims =\n              getParamValue('dims', node, tensorMap, context) as boolean[];\n          const axis = [];\n          for (let i = 0; i < dims.length; i++) {\n            if (dims[i]) {\n              axis.push(i);\n            }\n          }\n          const input = getParamValue('x', node, tensorMap, context) as Tensor;\n          return [tfOps.reverse(input, axis)];\n        }\n        case 'ReverseV2': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          const input = getParamValue('x', node, tensorMap, context) as Tensor;\n          return [tfOps.reverse(input, axis)];\n        }\n        case 'Slice': {\n          // tslint:disable-next-line:no-any\n          const begin = getParamValue('begin', node, tensorMap, context) as any;\n          // tslint:disable-next-line:no-any\n          const size = getParamValue('size', node, tensorMap, context) as any;\n          return [tfOps.slice(\n              getParamValue('x', node, tensorMap, context) as Tensor, begin,\n              size)];\n        }\n        case 'StridedSlice': {\n          const begin =\n              getParamValue('begin', node, tensorMap, context) as number[];\n          const end =\n              getParamValue('end', node, tensorMap, context) as number[];\n          const strides =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const beginMask =\n              getParamValue('beginMask', node, tensorMap, context) as number;\n          const endMask =\n              getParamValue('endMask', node, tensorMap, context) as number;\n          const ellipsisMask =\n              getParamValue('ellipsisMask', node, tensorMap, context) as number;\n          const newAxisMask =\n              getParamValue('newAxisMask', node, tensorMap, context) as number;\n          const shrinkAxisMask =\n              getParamValue('shrinkAxisMask', node, tensorMap, context) as\n              number;\n          const tensor = getParamValue('x', node, tensorMap, context) as Tensor;\n\n          return [tfOps.stridedSlice(\n              tensor, begin, end, strides, beginMask, endMask, ellipsisMask,\n              newAxisMask, shrinkAxisMask)];\n        }\n        case 'Pack': {\n          return tidy(() => {\n            const axis =\n                getParamValue('axis', node, tensorMap, context) as number;\n            const tensors =\n                getParamValue('tensors', node, tensorMap, context) as Tensor[];\n            // Reshape the tensors to the first tensor's shape if they don't\n            // match.\n            const shape = tensors[0].shape;\n            const squeezedShape = tfOps.squeeze(tensors[0]).shape;\n            const mapped = tensors.map(tensor => {\n              const sameShape = util.arraysEqual(tensor.shape, shape);\n              if (!sameShape &&\n                  !util.arraysEqual(\n                      tfOps.squeeze(tensor).shape, squeezedShape)) {\n                throw new Error('the input tensors shape does not match');\n              }\n              return sameShape ? tensor : tfOps.reshape(tensor, shape);\n            });\n            return [tfOps.stack(mapped, axis)];\n          });\n        }\n        case 'Unpack': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          const tensor =\n              getParamValue('tensor', node, tensorMap, context) as Tensor;\n          return tfOps.unstack(tensor, axis);\n        }\n        case 'Tile': {\n          const reps =\n              getParamValue('reps', node, tensorMap, context) as number[];\n          return [tfOps.tile(\n              getParamValue('x', node, tensorMap, context) as Tensor, reps)];\n        }\n        case 'Split':\n        case 'SplitV': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          const numOrSizeSplits =\n              getParamValue('numOrSizeSplits', node, tensorMap, context) as\n                  number |\n              number[];\n          const tensor = getParamValue('x', node, tensorMap, context) as Tensor;\n\n          return tfOps.split(tensor, numOrSizeSplits, axis);\n        }\n        case 'ScatterNd': {\n          const indices =\n              getParamValue('indices', node, tensorMap, context) as Tensor;\n          const values =\n              getParamValue('values', node, tensorMap, context) as Tensor;\n          const shape =\n              getParamValue('shape', node, tensorMap, context) as number[];\n          return [tfOps.scatterND(indices, values, shape)];\n        }\n        case 'GatherNd': {\n          const x = getParamValue('x', node, tensorMap, context) as Tensor;\n          const indices =\n              getParamValue('indices', node, tensorMap, context) as Tensor;\n          return [tfOps.gatherND(x, indices)];\n        }\n        case 'SparseToDense': {\n          const indices =\n              getParamValue('sparseIndices', node, tensorMap, context) as\n              Tensor;\n          const shape =\n              getParamValue('outputShape', node, tensorMap, context) as\n              number[];\n          const sparseValues =\n              getParamValue('sparseValues', node, tensorMap, context) as Tensor;\n          const defaultValue =\n              getParamValue('defaultValue', node, tensorMap, context) as Scalar;\n          return [tfOps.sparseToDense(\n              indices, sparseValues, shape,\n              sparseValues.dtype === defaultValue.dtype ?\n                  defaultValue :\n                  tfOps.cast(defaultValue, sparseValues.dtype))];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'slice_join';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext):\n        Tensor[] => {\n          switch (node.op) {\n            case 'FFT': {\n              return [tfOps.fft(\n                  getParamValue('x', node, tensorMap, context) as Tensor)];\n            }\n            case 'IFFT': {\n              return [tfOps.ifft(\n                  getParamValue('x', node, tensorMap, context) as Tensor)];\n            }\n            case 'RFFT': {\n              return [tfOps.rfft(\n                  getParamValue('x', node, tensorMap, context) as Tensor)];\n            }\n            case 'IRFFT': {\n              return [tfOps.irfft(\n                  getParamValue('x', node, tensorMap, context) as Tensor)];\n            }\n            default:\n              throw TypeError(`Node type ${node.op} is not implemented`);\n          }\n        };\n\nexport const CATEGORY = 'spectral';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor, Tensor4D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'Cast': {\n          return [tfOps.cast(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('dtype', node, tensorMap, context) as 'int32' |\n                  'float32' | 'bool')];\n        }\n        case 'ExpandDims': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          return [tfOps.expandDims(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis)];\n        }\n        case 'Squeeze': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          return [tfOps.squeeze(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis)];\n        }\n\n        case 'Reshape': {\n          return [tfOps.reshape(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('shape', node, tensorMap, context) as number[])];\n        }\n        case 'MirrorPad': {\n          return [tfOps.mirrorPad(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('padding', node, tensorMap, context) as\n                  Array<[number, number]>,\n              getParamValue('mode', node, tensorMap, context) as 'reflect' |\n                  'symmetric')];\n        }\n        case 'PadV2':\n        case 'Pad': {\n          return [tfOps.pad(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('padding', node, tensorMap, context) as\n                  Array<[number, number]>,\n              getParamValue('constantValue', node, tensorMap, context) as\n                  number)];\n        }\n        case 'SpaceToBatchND': {\n          const blockShape =\n              getParamValue('blockShape', node, tensorMap, context) as number[];\n          const paddings =\n              getParamValue('paddings', node, tensorMap, context) as number[][];\n          return [tfOps.spaceToBatchND(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              blockShape, paddings)];\n        }\n        case 'BatchToSpaceND': {\n          const blockShape =\n              getParamValue('blockShape', node, tensorMap, context) as number[];\n          const crops =\n              getParamValue('crops', node, tensorMap, context) as number[][];\n          return [tfOps.batchToSpaceND(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              blockShape, crops)];\n        }\n        case 'DepthToSpace': {\n          const blockSize =\n              getParamValue('blockSize', node, tensorMap, context) as number;\n          const dataFormat =\n              (getParamValue('dataFormat', node, tensorMap, context) as\n               string).toUpperCase() as 'NHWC' |\n              'NCHW';\n          return [tfOps.depthToSpace(\n              getParamValue('x', node, tensorMap, context) as Tensor4D,\n              blockSize, dataFormat)];\n        }\n        case 'BroadcastTo': {\n          return [tfOps.broadcastTo(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('shape', node, tensorMap, context) as number[])];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'transformation';\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, Tensor} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {HashTable} from '../../executor/hash_table';\nimport {ResourceManager} from '../../executor/resource_manager';\nimport {InternalOpAsyncExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpAsyncExecutor = async(\n    node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext,\n    resourceManager: ResourceManager): Promise<Tensor[]> => {\n  switch (node.op) {\n    case 'HashTable':\n    case 'HashTableV2': {\n      const keyDType =\n          getParamValue('keyDType', node, tensorMap, context) as DataType;\n      const valueDType =\n          getParamValue('valueDType', node, tensorMap, context) as DataType;\n\n      const hashTable = new HashTable(keyDType, valueDType);\n      resourceManager.addHashTable(node.name, hashTable);\n      return [hashTable.handle];\n    }\n    case 'LookupTableImport':\n    case 'LookupTableImportV2': {\n      const handle = getParamValue(\n                         'tableHandle', node, tensorMap, context,\n                         resourceManager) as Tensor;\n      const keys = getParamValue('keys', node, tensorMap, context) as Tensor;\n      const values =\n          getParamValue('values', node, tensorMap, context) as Tensor;\n\n      const hashTable = resourceManager.getHashTableById(handle.id);\n\n      return [await hashTable.import(keys, values)];\n    }\n    case 'LookupTableFind':\n    case 'LookupTableFindV2': {\n      const handle = getParamValue(\n                         'tableHandle', node, tensorMap, context,\n                         resourceManager) as Tensor;\n      const keys = getParamValue('keys', node, tensorMap, context) as Tensor;\n      const defaultValue =\n          getParamValue('defaultValue', node, tensorMap, context) as Tensor;\n\n      const hashTable = resourceManager.getHashTableById(handle.id);\n      return [await hashTable.find(keys, defaultValue)];\n    }\n    case 'LookupTableSize':\n    case 'LookupTableSizeV2': {\n      const handle = getParamValue(\n                         'tableHandle', node, tensorMap, context,\n                         resourceManager) as Tensor;\n\n      const hashTable = resourceManager.getHashTableById(handle.id);\n      return [hashTable.tensorSize()];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'hash_table';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap, TensorArrayMap, TensorListMap} from '../data/types';\n\nimport {TensorArray} from './tensor_array';\nimport {TensorList} from './tensor_list';\nimport {FunctionExecutor} from './types';\n\nexport interface ExecutionContextInfo {\n  id: number;           // the unique id of the context info\n  frameName: string;    // The frame name of the loop, this comes from\n                        // the TensorFlow NodeDef.\n  iterationId: number;  // The iteration id of the loop\n}\n\n/**\n * ExecutionContext captures the runtime environment of the node. It keeps\n * track of the current frame and iteration for the control flow ops.\n *\n * For example, typical Dynamic RNN model may contain loops, for which\n * TensorFlow will generate graphs with Enter/Exit nodes to control the\n * current execution frame, and NextIteration Nodes for iteration id increment.\n * For model with branch logic, TensorFLow will generate Switch/Merge ops.\n */\nexport class ExecutionContext {\n  private rootContext = {id: 0, frameName: '', iterationId: 0};\n  private contexts: ExecutionContextInfo[] = [this.rootContext];\n  private lastId = 0;\n  private _currentContextIds: string[];\n\n  constructor(\n      readonly weightMap: NamedTensorsMap = {},\n      readonly tensorArrayMap: TensorArrayMap = {},\n      readonly tensorListMap: TensorListMap = {},\n      readonly functionMap: {[key: string]: FunctionExecutor} = {}) {\n    this.generateCurrentContextIds();\n  }\n\n  private newFrame(id: number, frameName: string) {\n    return {id, frameName, iterationId: 0};\n  }\n\n  /**\n   * Set the current context\n   * @param contexts: ExecutionContextInfo[] the current path of execution\n   * frames\n   */\n  set currentContext(contexts: ExecutionContextInfo[]) {\n    if (this.contexts !== contexts) {\n      this.contexts = contexts;\n      this.generateCurrentContextIds();\n    }\n  }\n\n  get currentContext(): ExecutionContextInfo[] {\n    return this.contexts;\n  }\n\n  /**\n   * Returns the current context in string format.\n   */\n  get currentContextId(): string {\n    return this._currentContextIds[0];\n  }\n\n  /**\n   * Returns the current context and all parent contexts in string format.\n   * This allow access to the nodes in the current and parent frames.\n   */\n  get currentContextIds(): string[] {\n    return this._currentContextIds;\n  }\n\n  private generateCurrentContextIds() {\n    const names = [];\n    for (let i = 0; i < this.contexts.length - 1; i++) {\n      const contexts = this.contexts.slice(0, this.contexts.length - i);\n      names.push(this.contextIdforContexts(contexts));\n    }\n    names.push('');\n    this._currentContextIds = names;\n  }\n\n  private contextIdforContexts(contexts: ExecutionContextInfo[]) {\n    return contexts ?\n        contexts\n            .map(\n                context => (context.id === 0 && context.iterationId === 0) ?\n                    '' :\n                    `${context.frameName}-${context.iterationId}`)\n            .join('/') :\n        '';\n  }\n\n  /**\n   * Enter a new frame, a new context is pushed on the current context list.\n   * @param frameId new frame id\n   */\n  enterFrame(frameId: string) {\n    if (this.contexts) {\n      this.lastId++;\n      this.contexts = this.contexts.slice();\n      this.contexts.push(this.newFrame(this.lastId, frameId));\n      this._currentContextIds.unshift(this.contextIdforContexts(this.contexts));\n    }\n  }\n\n  /**\n   * Exit the current frame, the last context is removed from the current\n   * context list.\n   */\n  exitFrame() {\n    if (this.contexts && this.contexts.length > 1) {\n      this.contexts = this.contexts.slice();\n      this.contexts.splice(-1);\n      this.currentContextIds.shift();\n    } else {\n      throw new Error('Cannot exit frame, the context is empty');\n    }\n  }\n\n  /**\n   * Enter the next iteration of a loop, the iteration id of last context is\n   * increased.\n   */\n  nextIteration() {\n    if (this.contexts && this.contexts.length > 0) {\n      this.contexts = this.contexts.slice();\n      this.lastId++;\n      const context =\n          Object.assign({}, this.contexts[this.contexts.length - 1]);\n      context.iterationId += 1;\n      context.id = this.lastId;\n      this.contexts.splice(-1, 1, context);\n      this._currentContextIds.splice(\n          0, 1, this.contextIdforContexts(this.contexts));\n    } else {\n      throw new Error('Cannot increase frame iteration, the context is empty');\n    }\n  }\n\n  getWeight(name: string): Tensor[] {\n    return this.weightMap[name];\n  }\n\n  addTensorArray(tensorArray: TensorArray) {\n    this.tensorArrayMap[tensorArray.id] = tensorArray;\n  }\n\n  getTensorArray(id: number): TensorArray {\n    return this.tensorArrayMap[id];\n  }\n\n  addTensorList(tensorList: TensorList) {\n    this.tensorListMap[tensorList.id] = tensorList;\n  }\n\n  getTensorList(id: number): TensorList {\n    return this.tensorListMap[id];\n  }\n\n  dispose(keepIds: Set<number>) {\n    for (const key in this.tensorArrayMap) {\n      this.tensorArrayMap[key].clearAndClose(keepIds);\n    }\n\n    for (const key in this.tensorListMap) {\n      this.tensorListMap[key].clearAndClose(keepIds);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NamedTensorMap} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../data/types';\nimport {parseNodeName} from '../operations/executors/utils';\nimport {Graph, Node} from '../operations/types';\n\nexport interface ExecutionInfo {\n  inputs: NamedTensorMap;\n  outputs: Node[];\n  usedNodes: Set<string>;\n  missingInputs: string[];\n  dynamicNode: Node;\n  syncInputs: string[];\n}\n\n/**\n * Given graph inputs and desired outputs, find the minimal set of nodes\n * to execute in order to compute the outputs. In addition return other useful\n * info such:\n * - Missing inputs needed to compute the output.\n * - Whether the subgraph contains dynamic ops (control flow, dynamic shape).\n * - Alternative inputs in order to avoid async (dynamic op) execution.\n */\nexport function getExecutionSubgraph(\n    inputs: NamedTensorMap, outputs: Node[], weightMap: NamedTensorsMap,\n    initNodes?: Node[]): ExecutionInfo {\n  const usedNodes = new Set<string>();\n  const missingInputs: string[] = [];\n  let dynamicNode: Node = null;\n  let syncInputs: string[] = null;\n\n  // Start with the outputs, going backwards and find all the nodes that are\n  // needed to compute those outputs.\n  const seen = new Set<string>();\n  const inputNodeNames =\n      Object.keys(inputs).map(name => parseNodeName(name)[0]);\n\n  let initNodeNames: string[] = [];\n  if (initNodes != null) {\n    initNodeNames = initNodes.map(node => parseNodeName(node.name)[0]);\n  }\n\n  const frontier = [...outputs];\n  while (frontier.length > 0) {\n    const node = frontier.pop();\n    if (isControlFlow(node) || isDynamicShape(node) || isHashTable(node)) {\n      if (dynamicNode == null) {\n        dynamicNode = node;\n        syncInputs = dynamicNode.children.map(child => child.name)\n                         .filter(name => usedNodes.has(name));\n      }\n    }\n    usedNodes.add(node.name);\n\n    // Weights are dead end since we already have their values.\n    if (weightMap[node.name] != null) {\n      continue;\n    }\n    // This node is a dead end since it's one of the user-provided inputs.\n    if (inputNodeNames.indexOf(node.name) !== -1) {\n      continue;\n    }\n    // This node is a dead end since it doesn't have any inputs.\n    if (initNodeNames.indexOf(node.name) !== -1) {\n      continue;\n    }\n    if (node.inputs.length === 0) {\n      missingInputs.push(node.name);\n      continue;\n    }\n    node.inputs.forEach(input => {\n      // Don't add to the frontier if it is already there.\n      if (seen.has(input.name)) {\n        return;\n      }\n      seen.add(input.name);\n      frontier.push(input);\n    });\n  }\n  return {inputs, outputs, usedNodes, missingInputs, dynamicNode, syncInputs};\n}\n\n/**\n * Given the execution info, return a list of nodes in topological order that\n * need to be executed to compute the output.\n */\nexport function getNodesInTopologicalOrder(\n    graph: Graph, weightMap: NamedTensorsMap,\n    executionInfo: ExecutionInfo): Node[] {\n  const {usedNodes, inputs} = executionInfo;\n  const frontier: Node[] = [];\n  const inputNodes = Object.keys(inputs)\n                         .map(name => parseNodeName(name)[0])\n                         .map(name => graph.nodes[name]);\n  const initNodes = graph.initNodes;\n\n  inputNodes.forEach(input => {\n    if (usedNodes.has(input.name)) {\n      frontier.push(input);\n    }\n  });\n  graph.weights.forEach(weight => {\n    if (usedNodes.has(weight.name)) {\n      frontier.push(weight);\n    }\n  });\n  if (initNodes != null) {\n    initNodes.forEach(node => {\n      if (usedNodes.has(node.name)) {\n        frontier.push(node);\n      }\n    });\n  }\n  const seen = new Set<string>();\n  const orderedNodes: Node[] = [];\n  while (frontier.length > 0) {\n    const node = frontier.pop();\n    seen.add(node.name);\n    if (!weightMap[node.name]) {\n      orderedNodes.push(node);\n    }\n    node.children.forEach(child => {\n      if (!seen.has(child.name) && usedNodes.has(child.name) &&\n          child.inputs.every(input => seen.has(input.name))) {\n        frontier.push(child);\n      }\n    });\n  }\n  return orderedNodes;\n}\n\nconst CONTROL_FLOW_OPS = [\n  'Switch', 'Merge', 'Enter', 'Exit', 'NextIteration', 'StatelessIf',\n  'StatelessWhile', 'if', 'While'\n];\nconst DYNAMIC_SHAPE_OPS = [\n  'NonMaxSuppressionV2', 'NonMaxSuppressionV3', 'NonMaxSuppressionV5', 'Where'\n];\nconst HASH_TABLE_OPS = [\n  'HashTable', 'HashTableV2', 'LookupTableImport', 'LookupTableImportV2',\n  'LookupTableFind', 'LookupTableFindV2', 'LookupTableSize', 'LookupTableSizeV2'\n];\n\nexport function isControlFlow(node: Node) {\n  return CONTROL_FLOW_OPS.indexOf(node.op) >= 0;\n}\n\nexport function isDynamicShape(node: Node) {\n  return DYNAMIC_SHAPE_OPS.indexOf(node.op) >= 0;\n}\n\nexport function isHashTable(node: Node) {\n  return HASH_TABLE_OPS.indexOf(node.op) >= 0;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NamedTensorMap, Tensor, tidy, util} from '@tensorflow/tfjs-core';\n\nimport {ISignatureDef} from '../data/compiled_api';\nimport {NamedTensorsMap, TensorArrayMap, TensorInfo, TensorListMap} from '../data/types';\nimport {getNodeNameAndIndex, getParamValue, getTensor, getTensorsForCurrentContenxt, parseNodeName} from '../operations/executors/utils';\nimport {executeOp} from '../operations/operation_executor';\nimport {Graph, Node} from '../operations/types';\n\nimport {ExecutionContext, ExecutionContextInfo} from './execution_context';\nimport {getExecutionSubgraph, getNodesInTopologicalOrder, isControlFlow} from './model_analysis';\nimport {ResourceManager} from './resource_manager';\nimport {FunctionExecutor} from './types';\n\ninterface NodeWithContexts {\n  contexts: ExecutionContextInfo[];\n  node: Node;\n}\n\nexport class GraphExecutor implements FunctionExecutor {\n  private compiledMap: Map<string, Node[]> = new Map();\n  private _weightMap: NamedTensorsMap = {};\n  private _weightIds: number[];\n  private _signature: ISignatureDef;\n  private _inputs: Node[];\n  private _outputs: Node[];\n  private _initNodes: Node[];  // Internal init nodes to start initialization.\n  private SEPERATOR = ',';\n  private _functions: {[key: string]: Graph} = {};\n  private _functionExecutorMap: {[key: string]: FunctionExecutor} = {};\n  private _resourceManager: ResourceManager;\n\n  get weightIds(): number[] {\n    return this.parent ? this.parent.weightIds : this._weightIds;\n  }\n\n  get functionExecutorMap(): {[key: string]: FunctionExecutor} {\n    return this.parent ? this.parent.functionExecutorMap :\n                         this._functionExecutorMap;\n  }\n\n  get weightMap(): NamedTensorsMap {\n    return this.parent ? this.parent.weightMap : this._weightMap;\n  }\n\n  set weightMap(weightMap: NamedTensorsMap) {\n    const weightIds = Object.keys(weightMap).map(\n        key => weightMap[key].map(tensor => tensor.id));\n    this._weightIds = [].concat(...weightIds);\n    this._weightMap = weightMap;\n  }\n\n  /**\n   * Set `ResourceManager` shared by executors of a model.\n   * @param resourceManager: `ResourceManager` of the `GraphModel`.\n   */\n  set resourceManager(resourceManager: ResourceManager) {\n    this._resourceManager = resourceManager;\n  }\n\n  get inputs(): TensorInfo[] {\n    return this._inputs.map(node => {\n      return {\n        name: node.name,\n        shape: node.attrParams['shape'] ?\n            node.attrParams['shape'].value as number[] :\n            undefined,\n        dtype: node.attrParams['dtype'] ?\n            node.attrParams['dtype'].value as DataType :\n            undefined\n      };\n    });\n  }\n\n  get outputs(): TensorInfo[] {\n    return this._outputs.map(node => {\n      return {\n        name: node.name,\n        shape: node.attrParams['shape'] ?\n            node.attrParams['shape'].value as number[] :\n            undefined,\n        dtype: node.attrParams['dtype'] ?\n            node.attrParams['dtype'].value as DataType :\n            undefined\n      };\n    });\n  }\n\n  get inputNodes(): string[] {\n    return this._inputs.map(node => node.signatureKey || node.name);\n  }\n\n  get outputNodes(): string[] {\n    return this._outputs.map((node) => {\n      const name = node.signatureKey || node.name;\n      return node.defaultOutput ? (`${name}:${node.defaultOutput}`) : name;\n    });\n  }\n\n  get functions(): {[key: string]: ISignatureDef} {\n    return Object.keys(this._functions).reduce((map, key) => {\n      map[key] = this._functions[key].signature;\n      return map;\n    }, {} as {[key: string]: ISignatureDef});\n  }\n\n  /**\n   *\n   * @param graph Graph the model or function graph to be executed.\n   * @param parent When building function exector you need to set the parent\n   * executor. Since the weights and function executor maps are set at parant\n   * level, that function executor can access the function maps and weight maps\n   * through the parent.\n   */\n  constructor(private graph: Graph, private parent?: GraphExecutor) {\n    this._outputs = graph.outputs;\n    this._inputs = graph.inputs;\n    this._initNodes = graph.initNodes;\n    this._signature = graph.signature;\n    this._functions = graph.functions;\n    // create sub-graph executors\n    if (graph.functions != null) {\n      Object.keys(graph.functions).forEach(name => {\n        this._functionExecutorMap[name] =\n            new GraphExecutor(graph.functions[name], this);\n      });\n    }\n  }\n\n  private getCompilationKey(inputs: Node[], outputs: Node[]): string {\n    const sortedInputs = inputs.map(node => node.name).sort();\n    const sortedOutputs = outputs.map(node => node.name).sort();\n    return sortedInputs.join(this.SEPERATOR) + '--' +\n        sortedOutputs.join(this.SEPERATOR);\n  }\n\n  /**\n   * Compiles the inference graph and returns the minimal set of nodes that are\n   * required for execution, in the correct execution order.\n   */\n  private compile(inputs: NamedTensorMap, outputs: Node[]): Node[] {\n    const executionInfo =\n        getExecutionSubgraph(inputs, outputs, this.weightMap, this._initNodes);\n    const {missingInputs, dynamicNode, syncInputs} = executionInfo;\n    if (dynamicNode != null) {\n      throw new Error(\n          `This execution contains the node '${dynamicNode.name}', which has ` +\n          `the dynamic op '${dynamicNode.op}'. Please use ` +\n          `model.executeAsync() instead. Alternatively, to avoid the ` +\n          `dynamic ops, specify the inputs [${syncInputs}]`);\n    }\n\n    if (missingInputs.length > 0) {\n      const outNames = outputs.map(n => n.name);\n      const inNames = Object.keys(inputs);\n      throw new Error(\n          `Cannot compute the outputs [${outNames}] from the provided inputs ` +\n          `[${inNames}]. Missing the following inputs: [${missingInputs}]`);\n    }\n\n    return getNodesInTopologicalOrder(\n        this.graph, this.weightMap, executionInfo);\n  }\n\n  /**\n   * Executes the inference for given input tensors.\n   * @param inputs Tensor map for the model inputs, keyed by the input node\n   * names.\n   * @param outputs Optional. output node name from the Tensorflow model, if\n   * no outputs are specified, the default outputs of the model would be used.\n   * You can inspect intermediate nodes of the model by adding them to the\n   * outputs array.\n   */\n  execute(inputs: NamedTensorMap, outputs?: string[]): Tensor[] {\n    inputs = this.mapInputs(inputs);\n    const names = Object.keys(inputs).sort();\n    this.checkInputs(inputs);\n    this.checkInputShapeAndType(inputs);\n    outputs = this.mapOutputs(outputs);\n    this.checkOutputs(outputs);\n    const inputNodes =\n        names.map(name => this.graph.nodes[parseNodeName(name)[0]]);\n    const outputNodeNames = outputs.map(name => parseNodeName(name)[0]);\n    let outputNodes = outputNodeNames.map(name => this.graph.nodes[name]);\n\n    // If no outputs are specified, then use the default outputs of the model.\n    if (outputNodes.length === 0) {\n      outputNodes = this._outputs;\n    }\n\n    const compilationKey = this.getCompilationKey(inputNodes, outputNodes);\n\n    // Do nothing if the compiled graph cache contains the input.\n    let orderedNodes = this.compiledMap.get(compilationKey);\n    if (orderedNodes == null) {\n      orderedNodes = this.compile(inputs, outputNodes);\n      this.compiledMap.set(compilationKey, orderedNodes);\n    }\n\n    const tensorArrayMap: TensorArrayMap = {};\n    const tensorListMap: TensorListMap = {};\n\n    return tidy(() => {\n      const context = new ExecutionContext(\n          this.weightMap, tensorArrayMap, tensorListMap,\n          this.functionExecutorMap);\n      const tensorsMap: NamedTensorsMap = {...this.weightMap};\n\n      Object.keys(inputs).forEach(name => {\n        const [nodeName, index] = parseNodeName(name);\n        const tensors: Tensor[] = [];\n        tensors[index] = inputs[name];\n        tensorsMap[nodeName] = tensors;\n      });\n\n      const tensorsToKeep = this.getFrozenTensorIds(tensorsMap);\n      const intermediateTensorConsumerCount: {[key: number]: number} = {};\n      for (let i = 0; i < orderedNodes.length; i++) {\n        const node = orderedNodes[i];\n        if (!tensorsMap[node.name]) {\n          const tensors =\n              executeOp(node, tensorsMap, context, this._resourceManager) as\n              Tensor[];\n          if (util.isPromise(tensors)) {\n            throw new Error(\n                `The execution of the op '${node.op}' returned a promise. ` +\n                `Please use model.executeAsync() instead.`);\n          }\n          tensorsMap[node.name] = tensors;\n          this.checkTensorForDisposal(\n              node.name, node, tensorsMap, context, tensorsToKeep,\n              outputNodeNames, intermediateTensorConsumerCount);\n        }\n      }\n      // dispose the context for the root executor\n      if (this.parent == null) {\n        context.dispose(tensorsToKeep);\n      }\n      return outputs.map(name => getTensor(name, tensorsMap, context));\n    });\n  }\n\n  private getFrozenTensorIds(tensorMap: NamedTensorsMap): Set<number> {\n    const ids = [].concat.apply(\n        [],\n        Object.keys(tensorMap)\n            .map(key => tensorMap[key])\n            .map(tensors => tensors.map(tensor => tensor.id)));\n    return new Set(ids);\n  }\n  private checkTensorForDisposal(\n      nodeName: string, node: Node, tensorMap: NamedTensorsMap,\n      context: ExecutionContext, tensorsToKeep: Set<number>,\n      outputNames: string[],\n      intermediateTensorConsumerCount: {[key: string]: number}) {\n    // Skip output nodes and any control flow nodes, since its dependency is\n    // tricky to track correctly.\n    if (node.category === 'control' || outputNames.indexOf(nodeName) !== -1) {\n      return;\n    }\n\n    tensorMap[nodeName].forEach(tensor => {\n      if (tensor != null) {\n        intermediateTensorConsumerCount[tensor.id] =\n            (intermediateTensorConsumerCount[tensor.id] || 0) +\n            node.children.length;\n      }\n    });\n    node.inputs.forEach(input => {\n      // Skip any control flow nodes, since its dependency is tricky to track\n      // correctly.\n      if (input.category !== 'control') {\n        const tensors =\n            getTensorsForCurrentContenxt(input.name, tensorMap, context);\n        if (tensors != null) {\n          tensors.forEach(tensor => {\n            if (tensor && !tensor.kept && !tensorsToKeep.has(tensor.id)) {\n              const count = intermediateTensorConsumerCount[tensor.id];\n              if (count === 1) {\n                tensor.dispose();\n                delete intermediateTensorConsumerCount[tensor.id];\n              } else if (count != null) {\n                // only intermediate nodes has count set, inputs and weights are\n                // not.\n                intermediateTensorConsumerCount[tensor.id]--;\n              }\n            }\n          });\n        }\n      }\n    });\n  }\n\n  /**\n   * Executes the inference for given input tensors in Async fashion.\n   * @param inputs Tensor map for the model inputs, keyed by the input node\n   * names.\n   * @param outputs output node name from the Tensorflow model, if no outputs\n   * are specified, the default outputs of the model would be used. You can\n   * inspect intermediate nodes of the model by adding them to the outputs\n   * array.\n   */\n  async executeAsync(inputs: NamedTensorMap, outputs?: string[]):\n      Promise<Tensor[]> {\n    return this._executeAsync(inputs, outputs);\n  }\n\n  /**\n   * Executes the inference for given input tensors in Async fashion.\n   * @param inputs Tensor map for the model inputs, keyed by the input node\n   * names.\n   * @param outputs Optional. output node name from the Tensorflow model,\n   * if no outputs are specified, the default outputs of the model would be\n   * used. You can inspect intermediate nodes of the model by adding them to the\n   * outputs array.\n   * @param isFunctionExecution Optional. Flag for executing a function.\n   * @param tensorArrayMap Optional, global TensorArray map by id. Used for\n   * function execution.\n   * @param tensorArrayMap Optinal global TensorList map by id. Used for\n   * function execution.\n   */\n  private async _executeAsync(\n      inputs: NamedTensorMap, outputs?: string[], isFunctionExecution = false,\n      tensorArrayMap: TensorArrayMap = {},\n      tensorListMap: TensorListMap = {}): Promise<Tensor[]> {\n    if (!isFunctionExecution) {\n      inputs = this.mapInputs(inputs);\n      this.checkInputs(inputs);\n      this.checkInputShapeAndType(inputs);\n      outputs = this.mapOutputs(outputs);\n      this.checkOutputs(outputs);\n    }\n\n    const context = new ExecutionContext(\n        this.weightMap, tensorArrayMap, tensorListMap,\n        this.functionExecutorMap);\n\n    // Graph with control flow op requires runtime evaluation of the execution\n    // order, while without control flow the execution order is pre-determined\n    // in the compile method.\n    const tensorMap = await this.executeWithControlFlow(\n        inputs, context, outputs, isFunctionExecution);\n    const results = outputs.map(name => getTensor(name, tensorMap, context));\n\n    // dispose all the intermediate tensors\n    const outputIds = results.map(t => t.id);\n    const inputIds = Object.keys(inputs).map(name => inputs[name].id);\n    const keepIds =\n        new Set<number>([...outputIds, ...inputIds, ...this.weightIds]);\n    Object.keys(tensorMap).forEach(key => {\n      const tensorArray = tensorMap[key];\n      tensorArray.forEach(tensor => {\n        if (tensor && !tensor.kept && !tensor.isDisposed &&\n            !keepIds.has(tensor.id)) {\n          tensor.dispose();\n        }\n      });\n    });\n    // dispose the context for the root executor\n    if (this.parent == null) {\n      context.dispose(keepIds);\n    }\n\n    return results;\n  }\n\n  async executeFunctionAsync(\n      inputs: Tensor[], tensorArrayMap: TensorArrayMap,\n      tensorListMap: TensorListMap): Promise<Tensor[]> {\n    const mappedInputs = inputs.reduce((map, tensor, index) => {\n      map[this.inputs[index].name] = tensor;\n      return map;\n    }, {} as NamedTensorMap);\n\n    return this._executeAsync(\n        mappedInputs, this.outputNodes, true, tensorArrayMap, tensorListMap);\n  }\n  /**\n   * When there are control flow nodes in the graph, the graph execution use\n   * ExecutionContext to keep track of the frames and loop iterators.\n   * @param inputs placeholder tensors for the graph.\n   * @param context the execution context object for current execution.\n   * @param outputNames Optional. output node name from the Tensorflow model,\n   * if no outputs are specified, the default outputs of the model would be\n   * used. You can inspect intermediate nodes of the model by adding them to the\n   * outputs array.\n   * @param isFunctionExecution Flag for executing a function.\n   */\n  private async executeWithControlFlow(\n      inputs: NamedTensorMap, context: ExecutionContext, outputNames?: string[],\n      isFunctionExecution?: boolean): Promise<NamedTensorsMap> {\n    const names = Object.keys(inputs);\n    const inputNodes =\n        names.map(name => this.graph.nodes[parseNodeName(name)[0]]);\n    const outputNodeNames = outputNames.map(name => parseNodeName(name)[0]);\n    let outputNodes = outputNodeNames.map(name => this.graph.nodes[name]);\n\n    // If no outputs are specified, then use the default outputs of the model.\n    if (outputNodes.length === 0) {\n      outputNodes = this._outputs;\n    }\n\n    const {usedNodes, missingInputs, dynamicNode, syncInputs} =\n        getExecutionSubgraph(\n            inputs, outputNodes, this.weightMap, this._initNodes);\n\n    // First nodes to execute include inputNodes, weights, and initNodes.\n    const stack: NodeWithContexts[] = [\n      ...inputNodes, ...this.graph.weights, ...(this._initNodes || [])\n    ].map(node => {\n      return {node, contexts: context.currentContext};\n    });\n    const tensorsMap: NamedTensorsMap = {...this.weightMap};\n    Object.keys(inputs).forEach(name => {\n      const [nodeName, index] = parseNodeName(name);\n      const tensors: Tensor[] = [];\n      tensors[index] = inputs[name];\n      tensorsMap[nodeName] = tensors;\n    });\n    const intermediateTensorConsumerCount: {[key: number]: number} = {};\n    const tensorsToKeep = this.getFrozenTensorIds(tensorsMap);\n    const added: {[key: string]: boolean} = {};\n    while (stack.length > 0) {\n      const promises = this.processStack(\n          inputNodes, stack, context, tensorsMap, added, tensorsToKeep,\n          outputNodeNames, intermediateTensorConsumerCount, usedNodes);\n      await Promise.all(promises);\n    }\n    if (dynamicNode == null && !isFunctionExecution) {\n      console.warn(\n          `This model execution did not contain any nodes with control flow ` +\n          `or dynamic output shapes. You can use model.execute() instead.`);\n    }\n    const missingOutputs =\n        outputNodes\n            .filter(\n                node => !isControlFlow(node) &&\n                    !getTensor(node.name, tensorsMap, context))\n            .map(node => node.name);\n    if (missingOutputs.length > 0) {\n      let alternativeMsg = '';\n      if (dynamicNode != null) {\n        alternativeMsg =\n            `Alternatively, to avoid the dynamic ops, use model.execute() ` +\n            `and specify the inputs [${syncInputs}]`;\n      }\n      throw new Error(\n          `Cannot compute the outputs [${missingOutputs}] from the provided ` +\n          `inputs [${names}]. Consider providing the following inputs: ` +\n          `[${missingInputs}]. ${alternativeMsg}`);\n    }\n    return tensorsMap;\n  }\n\n  private processStack(\n      inputNodes: Node[], stack: NodeWithContexts[], context: ExecutionContext,\n      tensorMap: NamedTensorsMap, added: {[key: string]: boolean},\n      tensorsToKeep: Set<number>, outputNames: string[],\n      intermediateTensorConsumerCount: {[key: number]: number},\n      usedNodes: Set<string>) {\n    const promises: Array<Promise<Tensor[]>> = [];\n    while (stack.length > 0) {\n      const item = stack.pop();\n      context.currentContext = item.contexts;\n      let nodeName = '';\n      // The tensor of the Enter op with isConstant set should be set\n      // in the parent scope, so it will be available as constant for the\n      // whole loop.\n      if (item.node.op === 'Enter' &&\n          getParamValue('isConstant', item.node, tensorMap, context)) {\n        [nodeName] = getNodeNameAndIndex(item.node.name, context);\n      }\n\n      // only process nodes that are not in the tensorMap yet, this include\n      // inputNodes and internal initNodes.\n      if (tensorMap[item.node.name] == null) {\n        const tensors =\n            executeOp(item.node, tensorMap, context, this._resourceManager);\n        if (!nodeName) {\n          [nodeName] = getNodeNameAndIndex(item.node.name, context);\n        }\n        const currentContext = context.currentContext;\n        if (util.isPromise(tensors)) {\n          promises.push((tensors as Promise<Tensor[]>).then(t => {\n            tensorMap[nodeName] = t;\n            context.currentContext = currentContext;\n            this.checkTensorForDisposal(\n                nodeName, item.node, tensorMap, context, tensorsToKeep,\n                outputNames, intermediateTensorConsumerCount);\n            this.processChildNodes(\n                item.node, stack, context, tensorMap, added, usedNodes);\n            return t;\n          }));\n        } else {\n          tensorMap[nodeName] = tensors as Tensor[];\n          this.checkTensorForDisposal(\n              nodeName, item.node, tensorMap, context, tensorsToKeep,\n              outputNames, intermediateTensorConsumerCount);\n          this.processChildNodes(\n              item.node, stack, context, tensorMap, added, usedNodes);\n        }\n      } else {\n        this.processChildNodes(\n            item.node, stack, context, tensorMap, added, usedNodes);\n      }\n    }\n    return promises;\n  }\n\n  private processChildNodes(\n      node: Node, stack: NodeWithContexts[], context: ExecutionContext,\n      tensorMap: NamedTensorsMap, added: {[key: string]: boolean},\n      usedNodes: Set<string>) {\n    node.children.forEach((childNode) => {\n      const [nodeName, ] = getNodeNameAndIndex(childNode.name, context);\n      if (added[nodeName] || !usedNodes.has(childNode.name)) {\n        return;\n      }\n      // Merge op can be pushed if any of its inputs has value.\n      if (childNode.op === 'Merge') {\n        if (childNode.inputNames.some(name => {\n              return !!getTensor(name, tensorMap, context);\n            })) {\n          added[nodeName] = true;\n          stack.push({contexts: context.currentContext, node: childNode});\n        }\n      } else  // Otherwise all inputs must to have value.\n          if (childNode.inputNames.every(name => {\n                return !!getTensor(name, tensorMap, context);\n              })) {\n        added[nodeName] = true;\n        stack.push({contexts: context.currentContext, node: childNode});\n      }\n    });\n  }\n\n  /**\n   * Releases the memory used by the weight tensors.\n   */\n  dispose() {\n    Object.keys(this.weightMap)\n        .forEach(\n            key => this.weightMap[key].forEach(tensor => tensor.dispose()));\n  }\n\n  private checkInputShapeAndType(inputs: NamedTensorMap) {\n    Object.keys(inputs).forEach(name => {\n      const input = inputs[name];\n      const [nodeName, ] = parseNodeName(name);\n      const node = this.graph.nodes[nodeName];\n      if (node.attrParams['shape'] && node.attrParams['shape'].value) {\n        const shape = node.attrParams['shape'].value as number[];\n        const match = shape.length === input.shape.length &&\n            input.shape.every(\n                (dim, index) => shape[index] === -1 || shape[index] === dim);\n        util.assert(\n            match,\n            () => `The shape of dict['${node.name}'] provided in ` +\n                `model.execute(dict) must be [${shape}], but was ` +\n                `[${input.shape}]`);\n      }\n      if (node.attrParams['dtype'] && node.attrParams['dtype'].value) {\n        util.assert(\n            input.dtype === node.attrParams['dtype'].value as string,\n            () => `The dtype of dict['${node.name}'] provided in ` +\n                `model.execute(dict) must be ` +\n                `${node.attrParams['dtype'].value}, but was ${input.dtype}`);\n      }\n    });\n  }\n\n  private mapInputs(inputs: NamedTensorMap) {\n    const result: NamedTensorMap = {};\n    for (const inputName in inputs) {\n      if (this._signature != null && this._signature.inputs != null &&\n          this._signature.inputs[inputName] != null) {\n        const tensor = this._signature.inputs[inputName];\n        result[tensor.name] = inputs[inputName];\n      } else {\n        result[inputName] = inputs[inputName];\n      }\n    }\n    return result;\n  }\n\n  private checkInputs(inputs: NamedTensorMap) {\n    const notInGraph = Object.keys(inputs).filter(name => {\n      const [nodeName] = parseNodeName(name);\n      return this.graph.nodes[nodeName] == null;\n    });\n    if (notInGraph.length > 0) {\n      throw new Error(\n          `The dict provided in model.execute(dict) has ` +\n          `keys: [${notInGraph}] that are not part of graph`);\n    }\n  }\n\n  private mapOutputs(outputs: string[]) {\n    return outputs.map(name => {\n      if (this._signature != null && this._signature.outputs != null &&\n          this._signature.outputs[name] != null) {\n        const tensor = this._signature.outputs[name];\n        return tensor.name;\n      }\n      return name;\n    }, {});\n  }\n\n  private checkOutputs(outputs: string[]): void {\n    outputs.forEach(name => {\n      const [normalizedName] = parseNodeName(name);\n      if (!this.graph.nodes[normalizedName]) {\n        throw new Error(`The output '${name}' is not found in the graph`);\n      }\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {HashTableMap, NamedTensorMap} from '../data/types';\nimport {HashTable} from './hash_table';\n\n/**\n * Contains global resources of a model.\n */\nexport class ResourceManager {\n  constructor(\n      readonly hashTableNameToHandle: NamedTensorMap = {},\n      readonly hashTableMap: HashTableMap = {}) {}\n\n  /**\n   * Register a `HashTable` in the resource manager.\n   *\n   * The `HashTable` can be retrieved by `resourceManager.getHashTableById`,\n   * where id is the table handle tensor's id.\n   *\n   * @param name Op node name that creates the `HashTable`.\n   * @param hashTable The `HashTable` to be added to resource manager.\n   */\n  addHashTable(name: string, hashTable: HashTable) {\n    this.hashTableNameToHandle[name] = hashTable.handle;\n    this.hashTableMap[hashTable.id] = hashTable;\n  }\n\n  /**\n   * Get the table handle by node name.\n   * @param name Op node name that creates the `HashTable`. This name is also\n   *     used in the inputs list of lookup and import `HashTable` ops.\n   */\n  getHashTableHandleByName(name: string) {\n    return this.hashTableNameToHandle[name];\n  }\n\n  /**\n   * Get the actual `HashTable` by its handle tensor's id.\n   * @param id The id of the handle tensor.\n   */\n  getHashTableById(id: number): HashTable {\n    return this.hashTableMap[id];\n  }\n\n  /**\n   * Dispose `ResourceManager`, including its hashTables and tensors in them.\n   */\n  dispose() {\n    for (const key in this.hashTableMap) {\n      this.hashTableMap[key].clearAndClose();\n      delete this.hashTableMap[key];\n    }\n\n    for (const name in this.hashTableNameToHandle) {\n      this.hashTableNameToHandle[name].dispose();\n      delete this.hashTableNameToHandle[name];\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {InferenceModel, io, ModelPredictConfig, NamedTensorMap, Tensor} from '@tensorflow/tfjs-core';\n\nimport * as tensorflow from '../data/compiled_api';\nimport {NamedTensorsMap, TensorInfo} from '../data/types';\nimport {OperationMapper} from '../operations/operation_mapper';\n\nimport {GraphExecutor} from './graph_executor';\nimport {ResourceManager} from './resource_manager';\n\nexport const TFHUB_SEARCH_PARAM = '?tfjs-format=file';\nexport const DEFAULT_MODEL_NAME = 'model.json';\n/**\n * A `tf.GraphModel` is a directed, acyclic graph built from a\n * SavedModel GraphDef and allows inference execution.\n *\n * A `tf.GraphModel` can only be created by loading from a model converted from\n * a [TensorFlow SavedModel](https://www.tensorflow.org/guide/saved_model) using\n * the command line converter tool and loaded via `tf.loadGraphModel`.\n *\n * @doc {heading: 'Models', subheading: 'Classes'}\n */\nexport class GraphModel implements InferenceModel {\n  private executor: GraphExecutor;\n  private version = 'n/a';\n  private handler: io.IOHandler;\n  private artifacts: io.ModelArtifacts;\n  private initializer: GraphExecutor;\n  private resourceManager: ResourceManager;\n  private signature: tensorflow.ISignatureDef;\n\n  // Returns the version information for the tensorflow model GraphDef.\n  get modelVersion(): string {\n    return this.version;\n  }\n\n  get inputNodes(): string[] {\n    return this.executor.inputNodes;\n  }\n\n  get outputNodes(): string[] {\n    return this.executor.outputNodes;\n  }\n\n  get inputs(): TensorInfo[] {\n    return this.executor.inputs;\n  }\n\n  get outputs(): TensorInfo[] {\n    return this.executor.outputs;\n  }\n\n  get weights(): NamedTensorsMap {\n    return this.executor.weightMap;\n  }\n\n  get metadata(): {} {\n    return this.artifacts.userDefinedMetadata;\n  }\n\n  get modelSignature(): {} {\n    return this.signature;\n  }\n\n  /**\n   * @param modelUrl url for the model, or an `io.IOHandler`.\n   * @param weightManifestUrl url for the weight file generated by\n   * scripts/convert.py script.\n   * @param requestOption options for Request, which allows to send credentials\n   * and custom headers.\n   * @param onProgress Optional, progress callback function, fired periodically\n   * before the load is completed.\n   */\n  constructor(\n      private modelUrl: string|io.IOHandler,\n      private loadOptions: io.LoadOptions = {}) {\n    if (loadOptions == null) {\n      this.loadOptions = {};\n    }\n    this.resourceManager = new ResourceManager();\n  }\n\n  private findIOHandler() {\n    const path = this.modelUrl;\n    if ((path as io.IOHandler).load != null) {\n      // Path is an IO Handler.\n      this.handler = path as io.IOHandler;\n    } else if (this.loadOptions.requestInit != null) {\n      this.handler = io.browserHTTPRequest(path as string, this.loadOptions);\n    } else {\n      const handlers = io.getLoadHandlers(path as string, this.loadOptions);\n      if (handlers.length === 0) {\n        // For backward compatibility: if no load handler can be found,\n        // assume it is a relative http path.\n        handlers.push(io.browserHTTPRequest(path as string, this.loadOptions));\n      } else if (handlers.length > 1) {\n        throw new Error(\n            `Found more than one (${handlers.length}) load handlers for ` +\n            `URL '${[path]}'`);\n      }\n      this.handler = handlers[0];\n    }\n  }\n\n  /**\n   * Loads the model and weight files, construct the in memory weight map and\n   * compile the inference graph.\n   */\n  async load(): Promise<boolean> {\n    this.findIOHandler();\n    if (this.handler.load == null) {\n      throw new Error(\n          'Cannot proceed with model loading because the IOHandler provided ' +\n          'does not have the `load` method implemented.');\n    }\n    const artifacts = await this.handler.load();\n\n    return this.loadSync(artifacts);\n  }\n\n  /**\n   * Synchronously construct the in memory weight map and\n   * compile the inference graph. Also initialize hashtable if any.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}\n   */\n  loadSync(artifacts: io.ModelArtifacts) {\n    this.artifacts = artifacts;\n    const graph = this.artifacts.modelTopology as tensorflow.IGraphDef;\n\n    let signature;\n    if (this.artifacts.userDefinedMetadata != null &&\n        this.artifacts.userDefinedMetadata.signature != null) {\n      signature =  // tslint:disable-next-line:no-any\n          (this.artifacts.userDefinedMetadata as any).signature as\n          tensorflow.ISignatureDef;\n    } else {\n      signature = this.artifacts.signature;\n    }\n    this.signature = signature;\n\n    this.version = `${graph.versions.producer}.${graph.versions.minConsumer}`;\n    const weightMap =\n        io.decodeWeights(this.artifacts.weightData, this.artifacts.weightSpecs);\n    this.executor = new GraphExecutor(\n        OperationMapper.Instance.transformGraph(graph, this.signature));\n    this.executor.weightMap = this.convertTensorMapToTensorsMap(weightMap);\n    // Attach a model-level resourceManager to each executor to share resources,\n    // such as `HashTable`.\n    this.executor.resourceManager = this.resourceManager;\n\n    if (artifacts.modelInitializer != null &&\n        (artifacts.modelInitializer as tensorflow.IGraphDef).node != null) {\n      const initializer =\n          OperationMapper.Instance.transformGraph(artifacts.modelInitializer);\n      this.initializer = new GraphExecutor(initializer);\n      this.initializer.weightMap = this.executor.weightMap;\n      // Attach a model-level resourceManager to the initializer, the\n      // hashTables created from when executing the initializer will be stored\n      // in the resourceManager.\n      this.initializer.resourceManager = this.resourceManager;\n      this.initializer.executeAsync({}, []);\n    }\n\n    return true;\n  }\n\n  /**\n   * Save the configuration and/or weights of the GraphModel.\n   *\n   * An `IOHandler` is an object that has a `save` method of the proper\n   * signature defined. The `save` method manages the storing or\n   * transmission of serialized data (\"artifacts\") that represent the\n   * model's topology and weights onto or via a specific medium, such as\n   * file downloads, local storage, IndexedDB in the web browser and HTTP\n   * requests to a server. TensorFlow.js provides `IOHandler`\n   * implementations for a number of frequently used saving mediums, such as\n   * `tf.io.browserDownloads` and `tf.io.browserLocalStorage`. See `tf.io`\n   * for more details.\n   *\n   * This method also allows you to refer to certain types of `IOHandler`s\n   * as URL-like string shortcuts, such as 'localstorage://' and\n   * 'indexeddb://'.\n   *\n   * Example 1: Save `model`'s topology and weights to browser [local\n   * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);\n   * then load it back.\n   *\n   * ```js\n   * const modelUrl =\n   *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';\n   * const model = await tf.loadGraphModel(modelUrl);\n   * const zeros = tf.zeros([1, 224, 224, 3]);\n   * model.predict(zeros).print();\n   *\n   * const saveResults = await model.save('localstorage://my-model-1');\n   *\n   * const loadedModel = await tf.loadGraphModel('localstorage://my-model-1');\n   * console.log('Prediction from loaded model:');\n   * model.predict(zeros).print();\n   * ```\n   *\n   * @param handlerOrURL An instance of `IOHandler` or a URL-like,\n   * scheme-based string shortcut for `IOHandler`.\n   * @param config Options for saving the model.\n   * @returns A `Promise` of `SaveResult`, which summarizes the result of\n   * the saving, such as byte sizes of the saved artifacts for the model's\n   *   topology and weight values.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}\n   */\n  async save(handlerOrURL: io.IOHandler|string, config?: io.SaveConfig):\n      Promise<io.SaveResult> {\n    if (typeof handlerOrURL === 'string') {\n      const handlers = io.getSaveHandlers(handlerOrURL);\n      if (handlers.length === 0) {\n        throw new Error(\n            `Cannot find any save handlers for URL '${handlerOrURL}'`);\n      } else if (handlers.length > 1) {\n        throw new Error(\n            `Found more than one (${handlers.length}) save handlers for ` +\n            `URL '${handlerOrURL}'`);\n      }\n      handlerOrURL = handlers[0];\n    }\n    if (handlerOrURL.save == null) {\n      throw new Error(\n          'GraphModel.save() cannot proceed because the IOHandler ' +\n          'provided does not have the `save` attribute defined.');\n    }\n\n    return handlerOrURL.save(this.artifacts);\n  }\n\n  /**\n   * Execute the inference for the input tensors.\n   *\n   * @param input The input tensors, when there is single input for the model,\n   * inputs param should be a `tf.Tensor`. For models with mutliple inputs,\n   * inputs params should be in either `tf.Tensor`[] if the input order is\n   * fixed, or otherwise NamedTensorMap format.\n   *\n   * For model with multiple inputs, we recommend you use NamedTensorMap as the\n   * input type, if you use `tf.Tensor`[], the order of the array needs to\n   * follow the\n   * order of inputNodes array. @see {@link GraphModel.inputNodes}\n   *\n   * You can also feed any intermediate nodes using the NamedTensorMap as the\n   * input type. For example, given the graph\n   *    InputNode => Intermediate => OutputNode,\n   * you can execute the subgraph Intermediate => OutputNode by calling\n   *    model.execute('IntermediateNode' : tf.tensor(...));\n   *\n   * This is useful for models that uses tf.dynamic_rnn, where the intermediate\n   * state needs to be fed manually.\n   *\n   * For batch inference execution, the tensors for each input need to be\n   * concatenated together. For example with mobilenet, the required input shape\n   * is [1, 244, 244, 3], which represents the [batch, height, width, channel].\n   * If we are provide a batched data of 100 images, the input tensor should be\n   * in the shape of [100, 244, 244, 3].\n   *\n   * @param config Prediction configuration for specifying the batch size and\n   * output node names. Currently the batch size option is ignored for graph\n   * model.\n   *\n   * @returns Inference result tensors. The output would be single `tf.Tensor`\n   * if model has single output node, otherwise Tensor[] or NamedTensorMap[]\n   * will be returned for model with multiple outputs.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  predict(inputs: Tensor|Tensor[]|NamedTensorMap, config?: ModelPredictConfig):\n      Tensor|Tensor[]|NamedTensorMap {\n    return this.execute(inputs, this.outputNodes);\n  }\n\n  private normalizeInputs(inputs: Tensor|Tensor[]|\n                          NamedTensorMap): NamedTensorMap {\n    if (!(inputs instanceof Tensor) && !Array.isArray(inputs)) {\n      // The input is already a NamedTensorMap.\n      return inputs;\n    }\n    inputs = Array.isArray(inputs) ? inputs : [inputs];\n    if (inputs.length !== this.inputNodes.length) {\n      throw new Error(\n          'Input tensor count mismatch,' +\n          `the graph model has ${this.inputNodes.length} placeholders, ` +\n          `while there are ${inputs.length} input tensors.`);\n    }\n    return this.inputNodes.reduce((map, inputName, i) => {\n      map[inputName] = (inputs as Tensor[])[i];\n      return map;\n    }, {} as NamedTensorMap);\n  }\n\n  private normalizeOutputs(outputs: string|string[]): string[] {\n    outputs = outputs || this.outputNodes;\n    return !Array.isArray(outputs) ? [outputs] : outputs;\n  }\n\n  /**\n   * Executes inference for the model for given input tensors.\n   * @param inputs tensor, tensor array or tensor map of the inputs for the\n   * model, keyed by the input node names.\n   * @param outputs output node name from the Tensorflow model, if no\n   * outputs are specified, the default outputs of the model would be used.\n   * You can inspect intermediate nodes of the model by adding them to the\n   * outputs array.\n   *\n   * @returns A single tensor if provided with a single output or no outputs\n   * are provided and there is only one default output, otherwise return a\n   * tensor array. The order of the tensor array is the same as the outputs\n   * if provided, otherwise the order of outputNodes attribute of the model.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  execute(inputs: Tensor|Tensor[]|NamedTensorMap, outputs?: string|string[]):\n      Tensor|Tensor[] {\n    inputs = this.normalizeInputs(inputs);\n    outputs = this.normalizeOutputs(outputs);\n    const result = this.executor.execute(inputs, outputs);\n    return result.length > 1 ? result : result[0];\n  }\n  /**\n   * Executes inference for the model for given input tensors in async\n   * fashion, use this method when your model contains control flow ops.\n   * @param inputs tensor, tensor array or tensor map of the inputs for the\n   * model, keyed by the input node names.\n   * @param outputs output node name from the Tensorflow model, if no outputs\n   * are specified, the default outputs of the model would be used. You can\n   * inspect intermediate nodes of the model by adding them to the outputs\n   * array.\n   *\n   * @returns A Promise of single tensor if provided with a single output or\n   * no outputs are provided and there is only one default output, otherwise\n   * return a tensor map.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  async executeAsync(\n      inputs: Tensor|Tensor[]|NamedTensorMap,\n      outputs?: string|string[]): Promise<Tensor|Tensor[]> {\n    inputs = this.normalizeInputs(inputs);\n    outputs = this.normalizeOutputs(outputs);\n    const result = await this.executor.executeAsync(inputs, outputs);\n    return result.length > 1 ? result : result[0];\n  }\n\n  private convertTensorMapToTensorsMap(map: NamedTensorMap): NamedTensorsMap {\n    return Object.keys(map).reduce((newMap: NamedTensorsMap, key) => {\n      newMap[key] = [map[key]];\n      return newMap;\n    }, {});\n  }\n\n  /**\n   * Releases the memory used by the weight tensors and resourceManager.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  dispose() {\n    this.executor.dispose();\n\n    if (this.initializer) {\n      this.initializer.dispose();\n    }\n\n    this.resourceManager.dispose();\n  }\n}\n\n/**\n * Load a graph model given a URL to the model definition.\n *\n * Example of loading MobileNetV2 from a URL and making a prediction with a\n * zeros input:\n *\n * ```js\n * const modelUrl =\n *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';\n * const model = await tf.loadGraphModel(modelUrl);\n * const zeros = tf.zeros([1, 224, 224, 3]);\n * model.predict(zeros).print();\n * ```\n *\n * Example of loading MobileNetV2 from a TF Hub URL and making a prediction with\n * a zeros input:\n *\n * ```js\n * const modelUrl =\n *    'https://tfhub.dev/google/imagenet/mobilenet_v2_140_224/classification/2';\n * const model = await tf.loadGraphModel(modelUrl, {fromTFHub: true});\n * const zeros = tf.zeros([1, 224, 224, 3]);\n * model.predict(zeros).print();\n * ```\n * @param modelUrl The url or an `io.IOHandler` that loads the model.\n * @param options Options for the HTTP request, which allows to send credentials\n *    and custom headers.\n *\n * @doc {heading: 'Models', subheading: 'Loading'}\n */\nexport async function loadGraphModel(\n    modelUrl: string|io.IOHandler,\n    options: io.LoadOptions = {}): Promise<GraphModel> {\n  if (modelUrl == null) {\n    throw new Error(\n        'modelUrl in loadGraphModel() cannot be null. Please provide a url ' +\n        'or an IOHandler that loads the model');\n  }\n  if (options == null) {\n    options = {};\n  }\n\n  if (options.fromTFHub) {\n    if ((modelUrl as io.IOHandler).load == null) {\n      if (!(modelUrl as string).endsWith('/')) {\n        modelUrl = (modelUrl as string) + '/';\n      }\n      modelUrl = `${modelUrl}${DEFAULT_MODEL_NAME}${TFHUB_SEARCH_PARAM}`;\n    }\n  }\n  const model = new GraphModel(modelUrl, options);\n  await model.load();\n  return model;\n}\n","/** @license See the LICENSE file. */\n\n// This code is auto-generated, do not modify this file!\nconst version = '3.4.0';\nexport {version};\n"],"names":["DataType","SaverDef","CheckpointFormatVersion","CUSTOM_OPS","getRegisteredOp","name","getParamValue","paramName","node","tensorMap","context","resourceManager","inputParam","inputParams","undefined","inputIndexStart","start","end","inputIndexEnd","type","getTensor","inputNames","slice","map","tensor","data","dataSync","util","toNestedArray","shape","attrParam","attrParams","value","tensorsMap","nodeName","index","parseNodeName","getHashTableHandleByName","contextId","currentContextIds","find","getNodeNameWithContextId","getNodeNameAndIndex","inputName","currentContextId","parts","split","length","Number","getPadding","pad","explicitPadding","i","cloneTensor","kept","clone","tfOpName","category","inputs","attrs","tfName","notSupported","defaultValue","tfDeprecatedName","OperationMapper","Instance","this","_instance","[object Object]","mappersJson","concat","arithmetic","basicMath","control","convolution","creation","dynamic","evaluation","logical","image","graph","matrices","normalization","reduction","sliceJoin","spectral","transformation","hashTable","op","json","opMappers","reduce","mapper","signature","tfNodes","placeholders","weights","initNodes","nodes","mapNode","startsWith","push","input","outputs","inputNodeNameToKey","outputNodeNameToKey","mapSignatureEntries","allNodes","Object","keys","forEach","key","children","signatureKey","functions","library","function","func","mapFunction","result","entries","prev","curr","attr","newNode","substr","rawAttrs","param","getStringParam","getStringArrayParam","getNumberParam","getNumericArrayParam","getBoolParam","getBoolArrayParam","getTensorShapeParam","getTensorShapeArrayParam","getDtypeParam","getDtypeArrayParam","getFuncParam","Error","functionDef","nodeDef","inputArg","arg","dtype","parseDtypeParam","returnNodeMap","ret","outputArg","output","defaultOutput","mapArgsToSignature","methodName","mapArgToTensorInfo","nameMap","parseStringParam","s","keepCase","Array","isArray","String","fromCharCode","apply","text","global","env","atob","Buffer","toString","decodeBase64","toLowerCase","def","b","parseInt","tensorflow.DataType","DT_FLOAT","DT_INT32","DT_INT64","DT_INT8","DT_UINT8","DT_BOOL","DT_DOUBLE","DT_STRING","list","v","parseTensorShapeParam","unknownRank","dim","size","f","NodeValueImpl","getInput","getAttr","assertShapesMatchAllowUndefinedSize","shapeA","shapeB","errorMessagePrefix","assert","dim0","dim1","fullDefinedShape","elementShape","some","inferElementShape","listElementShape","tensors","partialShape","mergeElementShape","notfullDefinedShape","elementShapeA","elementShapeB","TensorArray","maxSize","identicalElementShapes","dynamicSize","clearAfterRead","idTensor","scalar","keep","id","closed","closed_","keepIds","has","dispose","tensorWithState","cleared","read","indices","t","written","write","readMany","stack","maxIndex","Math","max","writeMany","unstack","totalLength","cumulativeLengths","len","elementPerRow","tidy","reshape","sizes","TensorList","elementDtype","maxNumElements","numElements","outputElementShape","reshapedTensors","pop","elementIndex","executeOp","async","thenFunc","elseFunc","cond","args","functionMap","executeFunctionAsync","tensorArrayMap","tensorListMap","bodyFunc","condFunc","condResult","argIds","condValue","indexOf","origResult","resultIds","pred","frameId","enterFrame","exitFrame","nextIteration","tensorArray","addTensorArray","writeTensor","writeTensorArray","getTensorArray","readId","readIndex","gatherId","gatherIndices","gatherDtype","gather","scatterId","scatterIndices","scatterTensor","scatterTensorArray","scatter","concatId","concatTensorArray","concatDtype","splitId","splitTensor","lengths","splitTensorArray","sizeId","sizeTensorArray","closeId","closeTensorArray","clearAndClose","tensorList","getTensorList","setItem","elementDType","getItem","addTensorList","numElementsParam","reserve","fromTensor","pushBack","popBack","TypeError","fusedConvAndDepthWiseParams","extraOp","activationFunc","isBiasAdd","isPrelu","isBatchNorm","numArgs","stride","dataFormat","toUpperCase","dilations","biasArg","preluArg","leakyreluAlpha","nmsParams","boxes","scores","maxOutputSize","iouThreshold","scoreThreshold","softNmsSigma","HashTable","keyDType","valueDType","handle","Map","clear","tfOps.scalar","values","checkKeyAndValueTensor","$keys","$values","keysLength","valuesLength","set","findWithDefault","get","tfc.tidy","tfOps.add","tfOps.addN","tfOps.mod","tfOps.mul","tfOps.div","tfOps.divNoNan","tfOps.floorDiv","tfOps.sub","tfOps.minimum","tfOps.maximum","tfOps.pow","tfOps.squaredDifference","arithmetic.executeOp","tfOps.abs","tfOps.acos","tfOps.acosh","tfOps.asin","tfOps.asinh","tfOps.atan","tfOps.atan2","tfOps.atanh","tfOps.ceil","tfOps.complex","tfOps.cos","tfOps.cosh","tfOps.elu","tfOps.erf","tfOps.exp","tfOps.expm1","tfOps.floor","tfOps.log","tfOps.log1p","tfOps.imag","tfOps.neg","tfOps.reciprocal","tfOps.real","tfOps.relu","tfOps.round","tfOps.selu","tfOps.sigmoid","tfOps.sin","tfOps.sign","tfOps.sinh","tfOps.softplus","tfOps.sqrt","tfOps.square","tfOps.tanh","tfOps.tan","tfOps.clipByValue","tfOps.relu6","tfOps.rsqrt","tfOps.prod","tfOps.leakyRelu","tfOps.prelu","tfOps.isNaN","basicMath.executeOp","control.executeOp","dilation","tfOps.conv1d","tfOps.conv2d","tfOps.fused","conv2d","x","filter","strides","bias","activation","preluActivationWeights","depthwiseConv2d","tfOps.conv2dTranspose","tfOps.depthwiseConv2d","tfOps.conv3d","kernelSize","tfOps.avgPool","tfOps.maxPool","includeBatchInIndex","indexes","tfOps.maxPoolWithArgmax","tfOps.avgPool3d","tfOps.maxPool3d","strideHeight","strideWidth","dilationHeight","dilationWidth","tfOps.dilation2d","convolution.executeOp","tfOps.fill","stop","num","tfOps.linspace","logits","numSamples","seed","tfOps.multinomial","depth","onValue","offValue","tfOps.oneHot","tfOps.ones","tfOps.onesLike","tfOps.randomUniform","step","tfOps.range","mean","stdDev","tfOps.truncatedNormal","tfOps.zeros","tfOps.zerosLike","creation.executeOp","tfOps.image","nonMaxSuppressionWithScoreAsync","selectedIndices","selectedScores","padToMaxOutputSize","nonMaxSuppressionPaddedAsync","validOutputs","nonMaxSuppressionAsync","condition","tfOps.cast","tfOps.whereAsync","tfOps.setdiff1dAsync","dynamic.executeOp","k","sorted","tfOps.topk","tfOps.unique","axis","evaluation.executeOp","images","alignCorners","halfPixelCenters","resizeBilinear","resizeNearestNeighbor","boxInd","cropSize","method","extrapolationValue","cropAndResize","image.executeOp","tfOps.tensor1d","rank","message","summarize","console","warn","log","prototype","call","graph.executeOp","tfOps.equal","tfOps.notEqual","tfOps.greater","tfOps.greaterEqual","tfOps.less","tfOps.lessEqual","tfOps.logicalAnd","tfOps.logicalNot","tfOps.logicalOr","tfOps.where","logical.executeOp","tfOps.matMul","tfOps.einsum","tfOps.transpose","matMul","a","transposeA","transposeB","matrices.executeOp","tfOps.batchNorm","tfOps.localResponseNormalization","tfOps.softmax","tfOps.logSoftmax","tfOps.sparseToDense","normalization.executeOp","keepDims","tfOps.max","tfOps.mean","tfOps.min","tfOps.sum","tfOps.all","tfOps.any","tfOps.argMax","tfOps.argMin","exclusive","reverse","tfOps.cumsum","tfOps.bincount","binaryOutput","tfOps.denseBincount","reduction.executeOp","n","tfOps.concat","tfOps.gather","batchDims","dims","tfOps.reverse","begin","tfOps.slice","beginMask","endMask","ellipsisMask","newAxisMask","shrinkAxisMask","tfOps.stridedSlice","squeezedShape","tfOps.squeeze","mapped","sameShape","arraysEqual","tfOps.reshape","tfOps.stack","tfOps.unstack","reps","tfOps.tile","numOrSizeSplits","tfOps.split","tfOps.scatterND","tfOps.gatherND","sparseValues","sliceJoin.executeOp","tfOps.fft","tfOps.ifft","tfOps.rfft","tfOps.irfft","spectral.executeOp","tfOps.expandDims","tfOps.mirrorPad","tfOps.pad","blockShape","paddings","tfOps.spaceToBatchND","crops","tfOps.batchToSpaceND","blockSize","tfOps.depthToSpace","tfOps.broadcastTo","transformation.executeOp","addHashTable","getHashTableById","import","tensorSize","hashTable.executeOp","opMapper","customExecutor","tfc.util","isPromise","then","ExecutionContext","weightMap","frameName","iterationId","rootContext","generateCurrentContextIds","currentContext","contexts","_currentContextIds","names","contextIdforContexts","join","lastId","newFrame","unshift","splice","shift","assign","getExecutionSubgraph","usedNodes","Set","missingInputs","dynamicNode","syncInputs","seen","inputNodeNames","initNodeNames","frontier","isControlFlow","isDynamicShape","isHashTable","child","add","CONTROL_FLOW_OPS","DYNAMIC_SHAPE_OPS","HASH_TABLE_OPS","GraphExecutor","parent","_outputs","_inputs","_initNodes","_signature","_functions","_functionExecutorMap","weightIds","_weightIds","functionExecutorMap","_weightMap","_resourceManager","inputNodes","outputNodes","sortedInputs","sort","sortedOutputs","SEPERATOR","executionInfo","outNames","inNames","weight","orderedNodes","every","getNodesInTopologicalOrder","mapInputs","checkInputs","checkInputShapeAndType","mapOutputs","checkOutputs","outputNodeNames","compilationKey","getCompilationKey","compiledMap","compile","tensorsToKeep","getFrozenTensorIds","intermediateTensorConsumerCount","checkTensorForDisposal","ids","outputNames","getTensorsForCurrentContenxt","count","_executeAsync","isFunctionExecution","executeWithControlFlow","results","outputIds","inputIds","isDisposed","mappedInputs","added","promises","processStack","Promise","all","missingOutputs","alternativeMsg","item","processChildNodes","childNode","match","notInGraph","normalizedName","ResourceManager","hashTableNameToHandle","hashTableMap","GraphModel","modelUrl","loadOptions","modelVersion","version","executor","metadata","artifacts","userDefinedMetadata","modelSignature","path","load","handler","requestInit","io","browserHTTPRequest","handlers","getLoadHandlers","findIOHandler","loadSync","modelTopology","versions","producer","minConsumer","decodeWeights","weightData","weightSpecs","transformGraph","convertTensorMapToTensorsMap","modelInitializer","initializer","executeAsync","handlerOrURL","config","getSaveHandlers","save","execute","Tensor","normalizeInputs","normalizeOutputs","newMap","options","fromTFHub","endsWith","model","opFunc"],"mappings":"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"}