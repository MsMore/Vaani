{"version":3,"file":"index.js","sources":["../../src/data/compiled_api.ts","../../src/operations/custom_op/register.ts","../../src/operations/executors/utils.ts","../../src/operations/op_list/arithmetic.ts","../../src/operations/op_list/basic_math.ts","../../src/operations/op_list/control.ts","../../src/operations/op_list/convolution.ts","../../src/operations/op_list/creation.ts","../../src/operations/op_list/dynamic.ts","../../src/operations/op_list/evaluation.ts","../../src/operations/op_list/graph.ts","../../src/operations/op_list/hash_table.ts","../../src/operations/op_list/image.ts","../../src/operations/op_list/logical.ts","../../src/operations/op_list/matrices.ts","../../src/operations/op_list/normalization.ts","../../src/operations/op_list/reduction.ts","../../src/operations/op_list/slice_join.ts","../../src/operations/op_list/spectral.ts","../../src/operations/op_list/transformation.ts","../../src/operations/operation_mapper.ts","../../src/operations/custom_op/node_value_impl.ts","../../src/executor/tensor_utils.ts","../../src/executor/tensor_array.ts","../../src/executor/tensor_list.ts","../../src/operations/executors/control_executor.ts","../../src/operations/executors/convolution_executor.ts","../../src/operations/executors/dynamic_executor.ts","../../src/executor/hash_table.ts","../../src/operations/operation_executor.ts","../../src/operations/executors/arithmetic_executor.ts","../../src/operations/executors/basic_math_executor.ts","../../src/operations/executors/creation_executor.ts","../../src/operations/executors/evaluation_executor.ts","../../src/operations/executors/image_executor.ts","../../src/operations/executors/graph_executor.ts","../../src/operations/executors/logical_executor.ts","../../src/operations/executors/matrices_executor.ts","../../src/operations/executors/normalization_executor.ts","../../src/operations/executors/reduction_executor.ts","../../src/operations/executors/slice_join_executor.ts","../../src/operations/executors/spectral_executor.ts","../../src/operations/executors/transformation_executor.ts","../../src/operations/executors/hash_table_executor.ts","../../src/executor/execution_context.ts","../../src/executor/model_analysis.ts","../../src/executor/graph_executor.ts","../../src/executor/resource_manager.ts","../../src/executor/graph_model.ts","../../src/version.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\n/* tslint:disable */\n\n/** Properties of an Any. */\nexport declare interface IAny {\n  /** Any typeUrl */\n  typeUrl?: (string|null);\n\n  /** Any value */\n  value?: (Uint8Array|null);\n}\n\n/** DataType enum. */\nexport enum DataType {\n  'DT_INVALID' = 0,\n  'DT_FLOAT' = 1,\n  'DT_DOUBLE' = 2,\n  'DT_INT32' = 3,\n  'DT_UINT8' = 4,\n  'DT_INT16' = 5,\n  'DT_INT8' = 6,\n  'DT_STRING' = 7,\n  'DT_COMPLEX64' = 8,\n  'DT_INT64' = 9,\n  'DT_BOOL' = 10,\n  'DT_QINT8' = 11,\n  'DT_QUINT8' = 12,\n  'DT_QINT32' = 13,\n  'DT_BFLOAT16' = 14,\n  'DT_FLOAT_REF' = 101,\n  'DT_DOUBLE_REF' = 102,\n  'DT_INT32_REF' = 103,\n  'DT_UINT8_REF' = 104,\n  'DT_INT16_REF' = 105,\n  'DT_INT8_REF' = 106,\n  'DT_STRING_REF' = 107,\n  'DT_COMPLEX64_REF' = 108,\n  'DT_INT64_REF' = 109,\n  'DT_BOOL_REF' = 110,\n  'DT_QINT8_REF' = 111,\n  'DT_QUINT8_REF' = 112,\n  'DT_QINT32_REF' = 113,\n  'DT_BFLOAT16_REF' = 114\n}\n\n/** Properties of a TensorShape. */\nexport declare interface ITensorShape {\n  /** TensorShape dim */\n  dim?: (TensorShape.IDim[]|null);\n\n  /** TensorShape unknownRank */\n  unknownRank?: (boolean|null);\n}\n\nexport namespace TensorShape {\n  /** Properties of a Dim. */\n  export declare interface IDim {\n    /** Dim size */\n    size?: (number|string|null);\n\n    /** Dim name */\n    name?: (string|null);\n  }\n}\n\n/** Properties of a Tensor. */\nexport declare interface ITensor {\n  /** Tensor dtype */\n  dtype?: (DataType|null);\n\n  /** Tensor tensorShape */\n  tensorShape?: (ITensorShape|null);\n\n  /** Tensor versionNumber */\n  versionNumber?: (number|null);\n\n  /** Tensor tensorContent */\n  tensorContent?: (Uint8Array|null);\n\n  /** Tensor floatVal */\n  floatVal?: (number[]|null);\n\n  /** Tensor doubleVal */\n  doubleVal?: (number[]|null);\n\n  /** Tensor intVal */\n  intVal?: (number[]|null);\n\n  /** Tensor stringVal */\n  stringVal?: (Uint8Array[]|null);\n\n  /** Tensor scomplexVal */\n  scomplexVal?: (number[]|null);\n\n  /** Tensor int64Val */\n  int64Val?: ((number | string)[]|null);\n\n  /** Tensor boolVal */\n  boolVal?: (boolean[]|null);\n\n  /** Tensor uint32Val */\n  uint32Val?: (number[]|null);\n\n  /** Tensor uint64Val */\n  uint64Val?: ((number | string)[]|null);\n}\n\n/** Properties of an AttrValue. */\nexport declare interface IAttrValue {\n  /** AttrValue list */\n  list?: (AttrValue.IListValue|null);\n\n  /** AttrValue s */\n  s?: (string|null);\n\n  /** AttrValue i */\n  i?: (number|string|null);\n\n  /** AttrValue f */\n  f?: (number|null);\n\n  /** AttrValue b */\n  b?: (boolean|null);\n\n  /** AttrValue type */\n  type?: (DataType|null);\n\n  /** AttrValue shape */\n  shape?: (ITensorShape|null);\n\n  /** AttrValue tensor */\n  tensor?: (ITensor|null);\n\n  /** AttrValue placeholder */\n  placeholder?: (string|null);\n\n  /** AttrValue func */\n  func?: (INameAttrList|null);\n}\n\nexport namespace AttrValue {\n  /** Properties of a ListValue. */\n  export declare interface IListValue {\n    /** ListValue s */\n    s?: (string[]|null);\n\n    /** ListValue i */\n    i?: ((number | string)[]|null);\n\n    /** ListValue f */\n    f?: (number[]|null);\n\n    /** ListValue b */\n    b?: (boolean[]|null);\n\n    /** ListValue type */\n    type?: (DataType[]|null);\n\n    /** ListValue shape */\n    shape?: (ITensorShape[]|null);\n\n    /** ListValue tensor */\n    tensor?: (ITensor[]|null);\n\n    /** ListValue func */\n    func?: (INameAttrList[]|null);\n  }\n}\n\n/** Properties of a NameAttrList. */\nexport declare interface INameAttrList {\n  /** NameAttrList name */\n  name?: (string|null);\n\n  /** NameAttrList attr */\n  attr?: ({[k: string]: IAttrValue}|null);\n}\n\n/** Properties of a NodeDef. */\nexport declare interface INodeDef {\n  /** NodeDef name */\n  name?: (string|null);\n\n  /** NodeDef op */\n  op?: (string|null);\n\n  /** NodeDef input */\n  input?: (string[]|null);\n\n  /** NodeDef device */\n  device?: (string|null);\n\n  /** NodeDef attr */\n  attr?: ({[k: string]: IAttrValue}|null);\n}\n\n/** Properties of a VersionDef. */\nexport declare interface IVersionDef {\n  /** VersionDef producer */\n  producer?: (number|null);\n\n  /** VersionDef minConsumer */\n  minConsumer?: (number|null);\n\n  /** VersionDef badConsumers */\n  badConsumers?: (number[]|null);\n}\n\n/** Properties of a GraphDef. */\nexport declare interface IGraphDef {\n  /** GraphDef node */\n  node?: (INodeDef[]|null);\n\n  /** GraphDef versions */\n  versions?: (IVersionDef|null);\n\n  /** GraphDef library */\n  library?: (IFunctionDefLibrary|null);\n}\n\n/** Properties of a CollectionDef. */\nexport declare interface ICollectionDef {\n  /** CollectionDef nodeList */\n  nodeList?: (CollectionDef.INodeList|null);\n\n  /** CollectionDef bytesList */\n  bytesList?: (CollectionDef.IBytesList|null);\n\n  /** CollectionDef int64List */\n  int64List?: (CollectionDef.IInt64List|null);\n\n  /** CollectionDef floatList */\n  floatList?: (CollectionDef.IFloatList|null);\n\n  /** CollectionDef anyList */\n  anyList?: (CollectionDef.IAnyList|null);\n}\n\nexport namespace CollectionDef {\n  /** Properties of a NodeList. */\n  export declare interface INodeList {\n    /** NodeList value */\n    value?: (string[]|null);\n  }\n\n  /** Properties of a BytesList. */\n  export declare interface IBytesList {\n    /** BytesList value */\n    value?: (Uint8Array[]|null);\n  }\n\n  /** Properties of an Int64List. */\n  export declare interface IInt64List {\n    /** Int64List value */\n    value?: ((number | string)[]|null);\n  }\n\n  /** Properties of a FloatList. */\n  export declare interface IFloatList {\n    /** FloatList value */\n    value?: (number[]|null);\n  }\n\n  /** Properties of an AnyList. */\n  export declare interface IAnyList {\n    /** AnyList value */\n    value?: (IAny[]|null);\n  }\n}\n\n/** Properties of a SaverDef. */\nexport declare interface ISaverDef {\n  /** SaverDef filenameTensorName */\n  filenameTensorName?: (string|null);\n\n  /** SaverDef saveTensorName */\n  saveTensorName?: (string|null);\n\n  /** SaverDef restoreOpName */\n  restoreOpName?: (string|null);\n\n  /** SaverDef maxToKeep */\n  maxToKeep?: (number|null);\n\n  /** SaverDef sharded */\n  sharded?: (boolean|null);\n\n  /** SaverDef keepCheckpointEveryNHours */\n  keepCheckpointEveryNHours?: (number|null);\n\n  /** SaverDef version */\n  version?: (SaverDef.CheckpointFormatVersion|null);\n}\n\nexport namespace SaverDef {\n  /** CheckpointFormatVersion enum. */\n  export enum CheckpointFormatVersion {'LEGACY' = 0, 'V1' = 1, 'V2' = 2}\n}\n\n/** Properties of a TensorInfo. */\nexport declare interface ITensorInfo {\n  /** TensorInfo name */\n  name?: (string|null);\n\n  /** TensorInfo cooSparse */\n  cooSparse?: (TensorInfo.ICooSparse|null);\n\n  /** TensorInfo dtype */\n  dtype?: (DataType|null);\n\n  /** TensorInfo tensorShape */\n  tensorShape?: (ITensorShape|null);\n}\n\nexport namespace TensorInfo {\n  /** Properties of a CooSparse. */\n  export declare interface ICooSparse {\n    /** CooSparse valuesTensorName */\n    valuesTensorName?: (string|null);\n\n    /** CooSparse indicesTensorName */\n    indicesTensorName?: (string|null);\n\n    /** CooSparse denseShapeTensorName */\n    denseShapeTensorName?: (string|null);\n  }\n}\n\n/** Properties of a SignatureDef. */\nexport declare interface ISignatureDef {\n  /** SignatureDef inputs */\n  inputs?: ({[k: string]: ITensorInfo}|null);\n\n  /** SignatureDef outputs */\n  outputs?: ({[k: string]: ITensorInfo}|null);\n\n  /** SignatureDef methodName */\n  methodName?: (string|null);\n}\n\n/** Properties of an AssetFileDef. */\nexport declare interface IAssetFileDef {\n  /** AssetFileDef tensorInfo */\n  tensorInfo?: (ITensorInfo|null);\n\n  /** AssetFileDef filename */\n  filename?: (string|null);\n}\n\n/** Properties of an OpDef. */\nexport declare interface IOpDef {\n  /** OpDef name */\n  name?: (string|null);\n\n  /** OpDef inputArg */\n  inputArg?: (OpDef.IArgDef[]|null);\n\n  /** OpDef outputArg */\n  outputArg?: (OpDef.IArgDef[]|null);\n\n  /** OpDef attr */\n  attr?: (OpDef.IAttrDef[]|null);\n\n  /** OpDef deprecation */\n  deprecation?: (OpDef.IOpDeprecation|null);\n\n  /** OpDef summary */\n  summary?: (string|null);\n\n  /** OpDef description */\n  description?: (string|null);\n\n  /** OpDef isCommutative */\n  isCommutative?: (boolean|null);\n\n  /** OpDef isAggregate */\n  isAggregate?: (boolean|null);\n\n  /** OpDef isStateful */\n  isStateful?: (boolean|null);\n\n  /** OpDef allowsUninitializedInput */\n  allowsUninitializedInput?: (boolean|null);\n}\n\nexport namespace OpDef {\n  /** Properties of an ArgDef. */\n  export declare interface IArgDef {\n    /** ArgDef name */\n    name?: (string|null);\n\n    /** ArgDef description */\n    description?: (string|null);\n\n    /** ArgDef type */\n    type?: (DataType|null);\n\n    /** ArgDef typeAttr */\n    typeAttr?: (string|null);\n\n    /** ArgDef numberAttr */\n    numberAttr?: (string|null);\n\n    /** ArgDef typeListAttr */\n    typeListAttr?: (string|null);\n\n    /** ArgDef isRef */\n    isRef?: (boolean|null);\n  }\n\n  /** Properties of an AttrDef. */\n  export declare interface IAttrDef {\n    /** AttrDef name */\n    name?: (string|null);\n\n    /** AttrDef type */\n    type?: (string|null);\n\n    /** AttrDef defaultValue */\n    defaultValue?: (IAttrValue|null);\n\n    /** AttrDef description */\n    description?: (string|null);\n\n    /** AttrDef hasMinimum */\n    hasMinimum?: (boolean|null);\n\n    /** AttrDef minimum */\n    minimum?: (number|string|null);\n\n    /** AttrDef allowedValues */\n    allowedValues?: (IAttrValue|null);\n  }\n\n  /** Properties of an OpDeprecation. */\n  export declare interface IOpDeprecation {\n    /** OpDeprecation version */\n    version?: (number|null);\n\n    /** OpDeprecation explanation */\n    explanation?: (string|null);\n  }\n}\n\n/** Properties of an OpList. */\nexport declare interface IOpList {\n  /** OpList op */\n  op?: (IOpDef[]|null);\n}\n\n/** Properties of a MetaGraphDef. */\nexport declare interface IMetaGraphDef {\n  /** MetaGraphDef metaInfoDef */\n  metaInfoDef?: (MetaGraphDef.IMetaInfoDef|null);\n\n  /** MetaGraphDef graphDef */\n  graphDef?: (IGraphDef|null);\n\n  /** MetaGraphDef saverDef */\n  saverDef?: (ISaverDef|null);\n\n  /** MetaGraphDef collectionDef */\n  collectionDef?: ({[k: string]: ICollectionDef}|null);\n\n  /** MetaGraphDef signatureDef */\n  signatureDef?: ({[k: string]: ISignatureDef}|null);\n\n  /** MetaGraphDef assetFileDef */\n  assetFileDef?: (IAssetFileDef[]|null);\n}\n\nexport namespace MetaGraphDef {\n  /** Properties of a MetaInfoDef. */\n  export declare interface IMetaInfoDef {\n    /** MetaInfoDef metaGraphVersion */\n    metaGraphVersion?: (string|null);\n\n    /** MetaInfoDef strippedOpList */\n    strippedOpList?: (IOpList|null);\n\n    /** MetaInfoDef anyInfo */\n    anyInfo?: (IAny|null);\n\n    /** MetaInfoDef tags */\n    tags?: (string[]|null);\n\n    /** MetaInfoDef tensorflowVersion */\n    tensorflowVersion?: (string|null);\n\n    /** MetaInfoDef tensorflowGitVersion */\n    tensorflowGitVersion?: (string|null);\n  }\n}\n\n/** Properties of a SavedModel. */\nexport declare interface ISavedModel {\n  /** SavedModel savedModelSchemaVersion */\n  savedModelSchemaVersion?: (number|string|null);\n\n  /** SavedModel metaGraphs */\n  metaGraphs?: (IMetaGraphDef[]|null);\n}\n\n/** Properties of a FunctionDefLibrary. */\nexport declare interface IFunctionDefLibrary {\n  /** FunctionDefLibrary function */\n  'function'?: (IFunctionDef[]|null);\n\n  /** FunctionDefLibrary gradient */\n  gradient?: (IGradientDef[]|null);\n}\n\n/** Properties of a FunctionDef. */\nexport declare interface IFunctionDef {\n  /** FunctionDef signature */\n  signature?: (IOpDef|null);\n\n  /** FunctionDef attr */\n  attr?: ({[k: string]: IAttrValue}|null);\n\n  /** FunctionDef nodeDef */\n  nodeDef?: (INodeDef[]|null);\n\n  /** FunctionDef ret */\n  ret?: ({[k: string]: string}|null);\n}\n\n/** Properties of a GradientDef. */\nexport declare interface IGradientDef {\n  /** GradientDef functionName */\n  functionName?: (string|null);\n\n  /** GradientDef gradientFunc */\n  gradientFunc?: (string|null);\n}\n","\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpExecutor, OpMapper} from '../types';\n\nconst CUSTOM_OPS: {[key: string]: OpMapper} = {};\n\n/**\n * Register an Op for graph model executor. This allow you to register\n * TensorFlow custom op or override existing op.\n *\n * Here is an example of registering a new MatMul Op.\n * ```js\n * const customMatmul = (node) =>\n *    tf.matMul(\n *        node.inputs[0], node.inputs[1],\n *        node.attrs['transpose_a'], node.attrs['transpose_b']);\n *\n * tf.registerOp('MatMul', customMatmul);\n * ```\n * The inputs and attrs of the node object is based on the TensorFlow op\n * registry.\n *\n * @param name The Tensorflow Op name.\n * @param opFunc An op function which is called with the current graph node\n * during execution and needs to return a tensor or a list of tensors. The node\n * has the following attributes:\n *    - attr: A map from attribute name to its value\n *    - inputs: A list of input tensors\n *\n * @doc {heading: 'Models', subheading: 'Op Registry'}\n */\nexport function registerOp(name: string, opFunc: OpExecutor) {\n  const opMapper: OpMapper = {\n    tfOpName: name,\n    category: 'custom',\n    inputs: [],\n    attrs: [],\n    customExecutor: opFunc\n  };\n\n  CUSTOM_OPS[name] = opMapper;\n}\n\n/**\n * Retrieve the OpMapper object for the registered op.\n *\n * @param name The Tensorflow Op name.\n *\n * @doc {heading: 'Models', subheading: 'Op Registry'}\n */\nexport function getRegisteredOp(name: string): OpMapper {\n  return CUSTOM_OPS[name];\n}\n\n/**\n * Deregister the Op for graph model executor.\n *\n * @param name The Tensorflow Op name.\n *\n * @doc {heading: 'Models', subheading: 'Op Registry'}\n */\nexport function deregisterOp(name: string) {\n  delete CUSTOM_OPS[name];\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {clone, Tensor, util} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {ResourceManager} from '../../executor/resource_manager';\nimport {Node, ValueType} from '../types';\n\nexport function getParamValue(\n    paramName: string, node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext, resourceManager?: ResourceManager): ValueType {\n  const inputParam = node.inputParams[paramName];\n  if (inputParam && inputParam.inputIndexStart !== undefined) {\n    const start = inputParam.inputIndexStart;\n    const end = inputParam.inputIndexEnd === 0 ?\n        undefined :\n        (inputParam.inputIndexEnd === undefined ? start + 1 :\n                                                  inputParam.inputIndexEnd);\n    if (inputParam.type === 'tensor') {\n      return getTensor(\n          node.inputNames[inputParam.inputIndexStart], tensorMap, context,\n          resourceManager);\n    }\n    if (inputParam.type === 'tensors') {\n      const inputs = node.inputNames.slice(start, end);\n\n      return inputs.map(\n          name => getTensor(name, tensorMap, context, resourceManager));\n    }\n    const tensor = getTensor(\n        node.inputNames.slice(start)[0], tensorMap, context, resourceManager);\n    const data = tensor.dataSync();\n    return inputParam.type === 'number' ?\n        data[0] :\n        util.toNestedArray(tensor.shape, data);\n  }\n  const attrParam = node.attrParams[paramName];\n  return attrParam && attrParam.value;\n}\n\n/**\n * Retrieve the tensor from tensorsMap based on input name.\n * @param name Node input name\n * @param tensorsMap Tensors map keyed by the node\n * @param context contains tensors and information for running the current node.\n * @param resourceManager Optional. Contains global resources of the model.\n */\nexport function getTensor(\n    name: string, tensorsMap: NamedTensorsMap, context: ExecutionContext,\n    resourceManager?: ResourceManager): Tensor {\n  const [nodeName, index] = parseNodeName(name);\n\n  if (resourceManager != null) {\n    const tensor = resourceManager.getHashTableHandleByName(nodeName);\n    if (tensor != null) {\n      return tensor;\n    }\n  }\n\n  const contextId = context.currentContextIds.find(contextId => {\n    return !!tensorsMap[getNodeNameWithContextId(nodeName, contextId)];\n  });\n\n  return contextId !== undefined ?\n      tensorsMap[getNodeNameWithContextId(nodeName, contextId)][index] :\n      undefined;\n}\n\n/**\n * Retrieve the tensors based on input name for current context.\n * @param name Node input name\n * @param tensorsMap Tensors map keyed by the node\n */\nexport function getTensorsForCurrentContenxt(\n    name: string, tensorsMap: NamedTensorsMap,\n    context: ExecutionContext): Tensor[] {\n  return tensorsMap[getNodeNameWithContextId(name, context.currentContextId)];\n}\n\n/**\n * Returns the node name and index from the Node input name.\n * @param inputName The input name of the node, in format of\n * node_name:output_index, i.e. MatMul:0, if the output_index is not set, it is\n * default to 0.\n */\nexport function getNodeNameAndIndex(\n    inputName: string, context?: ExecutionContext): [string, number] {\n  const [nodeName, index] = parseNodeName(inputName);\n\n  return [\n    getNodeNameWithContextId(nodeName, context && context.currentContextId),\n    index\n  ];\n}\n\nfunction getNodeNameWithContextId(name: string, contextId?: string): string {\n  return !!contextId ? `${name}-${contextId}` : name;\n}\n\nexport function parseNodeName(name: string): [string, number] {\n  const parts = name.split(':');\n  if (parts.length === 1) {\n    return [name, 0];\n  }\n\n  const nodeName = parts[0];\n  return [nodeName, Number(parts[parts.length - 1])];\n}\n\nexport function split(arr: number[], size: number) {\n  const res = [];\n  for (let i = 0; i < arr.length; i += size) {\n    res.push(arr.slice(i, i + size));\n  }\n  return res;\n}\nexport function getPadding(\n    node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): ValueType {\n  let pad = getParamValue('pad', node, tensorMap, context);\n  if (pad === 'explicit') {\n    // This is 1d array, we need to convert it to 2d array\n    pad = getParamValue('explicitPaddings', node, tensorMap, context);\n    const explicitPadding: [\n      [number, number], [number, number], [number, number], [number, number]\n    ] = [[0, 0], [0, 0], [0, 0], [0, 0]];\n    for (let i = 0; i < 4; i++) {\n      explicitPadding[i][0] = (pad as number[])[i * 2];\n      explicitPadding[i][1] = (pad as number[])[i * 2 + 1];\n    }\n    return explicitPadding;\n  }\n  return pad;\n}\n\n/**\n *  Reuse the tensor if it is marked as keep, otherwise clone the tensor to\n *  avoid disposal. This is important for TensorArray and TensorList ops, since\n *  internally they use a tensor as the id for TensorArray and TensorList, and\n * to simplify lookup, they also use Tensor.id as the key to the internal map.\n * These id tensors have been marked as kept in the backend, we need avoid clone\n * them in order to create new Tensor.id.\n * @param tensor\n */\nexport function cloneTensor(tensor: Tensor): Tensor {\n  return tensor.kept ? tensor : clone(tensor);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Add',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'AddV2',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'AddN',\n    'category': 'arithmetic',\n    'inputs': [{'start': 0, 'end': 0, 'name': 'tensors', 'type': 'tensors'}]\n  },\n  {\n    'tfOpName': 'BiasAdd',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Sub',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'RealDiv',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Div',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'DivNoNan',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'FloorDiv',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Mul',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Maximum',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'}\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Minimum',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'}\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Pow',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'SquaredDifference',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Mod',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'FloorMod',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'T',\n      'name': 'dtype',\n      'type': 'dtype',\n      'notSupported': true\n    }]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Abs',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Acos',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Asin',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Atan',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Atan2',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'y', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Ceil',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'ClipByValue',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'clipValueMin', 'type': 'number'},\n      {'start': 2, 'name': 'clipValueMax', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Complex',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'real', 'type': 'tensor'},\n      {'start': 1, 'name': 'imag', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'ComplexAbs',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Cos',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Cosh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Elu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Exp',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Floor',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Log',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Imag',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'Tout',\n        'name': 'outputType',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Neg',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Real',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'Tout',\n        'name': 'outputType',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Prelu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'alpha', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Relu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Relu6',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Selu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sigmoid',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sin',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sinh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sqrt',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Rsqrt',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Square',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Tan',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Tanh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sign',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Round',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Expm1',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Log1p',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Reciprocal',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Softplus',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Asinh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Acosh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Atanh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Erf',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Prod',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axes', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'keep_dims',\n        'name': 'keepDims',\n        'type': 'bool',\n        'notSupported': true\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LeakyRelu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'alpha',\n        'name': 'alpha',\n        'type': 'number',\n        'defaultValue': 0.2\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'IsNan',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'T',\n      'name': 'dtype',\n      'type': 'dtype',\n      'notSupported': true\n    }]\n  }\n];\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'EmptyTensorList',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'elementShape', 'type': 'shape'},\n      {'start': 1, 'name': 'maxNumElements', 'type': 'number'},\n    ],\n    'attrs':\n        [{'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'LoopCond',\n    'category': 'control',\n    'inputs': [{'start': 0, 'name': 'pred', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'Switch',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'data', 'type': 'tensor'},\n      {'start': 1, 'name': 'pred', 'type': 'tensor'}\n    ]\n  },\n  {\n    'tfOpName': 'Merge',\n    'category': 'control',\n    'inputs': [{'start': 0, 'end': 0, 'name': 'tensors', 'type': 'tensors'}]\n  },\n  {\n    'tfOpName': 'Enter',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true},\n      {'tfName': 'frame_name', 'name': 'frameName', 'type': 'string'},\n      {'tfName': 'is_constant', 'name': 'isConstant', 'type': 'bool'}\n    ]\n  },\n  {\n    'tfOpName': 'Exit',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'NextIteration',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'size', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'element_shape', 'name': 'elementShape', 'type': 'shape'},\n      {'tfName': 'dynamic_size', 'name': 'dynamicSize', 'type': 'bool'},\n      {'tfName': 'clear_after_read', 'name': 'clearAfterRead', 'type': 'bool'},\n      {\n        'tfName': 'identical_element_shapes',\n        'name': 'identicalElementShapes',\n        'type': 'bool'\n      },\n      {'tfName': 'tensor_array_name', 'name': 'name', 'type': 'string'}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayWriteV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'tensor'},\n      {'start': 1, 'name': 'index', 'type': 'number'},\n      {'start': 2, 'name': 'tensor', 'type': 'tensor'},\n      {'start': 3, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayReadV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'tensor'},\n      {'start': 1, 'name': 'index', 'type': 'number'},\n      {'start': 2, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [{\n      'tfName': 'dtype',\n      'name': 'dtype',\n      'type': 'dtype',\n      'notSupported': true\n    }]\n  },\n  {\n    'tfOpName': 'TensorArrayGatherV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'number[]'},\n      {'start': 2, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'element_shape', 'name': 'elementShape', 'type': 'shape'}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayScatterV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'number[]'},\n      {'start': 2, 'name': 'tensor', 'type': 'tensor'},\n      {'start': 3, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorArrayConcatV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'tensor'},\n      {'start': 1, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'}, {\n        'tfName': 'element_shape_except0',\n        'name': 'elementShapeExcept0',\n        'type': 'shape',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorArraySplitV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'tensor'},\n      {'start': 1, 'name': 'tensor', 'type': 'tensor'},\n      {'start': 2, 'name': 'lengths', 'type': 'number[]'},\n      {'start': 3, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorArraySizeV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'tensor'},\n      {'start': 1, 'name': 'flowIn', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayCloseV3',\n    'category': 'control',\n    'inputs': [{'start': 0, 'name': 'tensorArrayId', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'StatelessIf',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'cond', 'type': 'tensor'},\n      {'start': 1, 'end': 0, 'name': 'args', 'type': 'tensors'}\n    ],\n    'attrs': [\n      {'tfName': 'then_branch', 'name': 'thenBranch', 'type': 'func'},\n      {'tfName': 'else_branch', 'name': 'elseBranch', 'type': 'func'}\n    ]\n  },\n  {\n    'tfOpName': 'If',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'cond', 'type': 'tensor'},\n      {'start': 1, 'end': 0, 'name': 'args', 'type': 'tensors'}\n    ],\n    'attrs': [\n      {'tfName': 'then_branch', 'name': 'thenBranch', 'type': 'func'},\n      {'tfName': 'else_branch', 'name': 'elseBranch', 'type': 'func'}\n    ]\n  },\n  {\n    'tfOpName': 'StatelessWhile',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'end': 0, 'name': 'args', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'cond', 'name': 'cond', 'type': 'func'},\n      {'tfName': 'body', 'name': 'body', 'type': 'func'}\n    ]\n  },\n  {\n    'tfOpName': 'While',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'end': 0, 'name': 'args', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'cond', 'name': 'cond', 'type': 'func'},\n      {'tfName': 'body', 'name': 'body', 'type': 'func'}\n    ]\n  },\n  {\n    'tfOpName': 'TensorListScatter',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'number[]'},\n      {'start': 2, 'name': 'elementShape', 'type': 'shape'}\n    ],\n    'attrs':\n        [{'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorListScatterV2',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'number[]'},\n      {'start': 2, 'name': 'elementShape', 'type': 'shape'},\n      {'start': 3, 'name': 'numElements', 'type': 'number'},\n    ],\n    'attrs':\n        [{'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorListGather',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorListId', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'number[]'},\n      {'start': 2, 'name': 'elementShape', 'type': 'shape'},\n    ],\n    'attrs':\n        [{'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorListGetItem',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorListId', 'type': 'tensor'},\n      {'start': 1, 'name': 'index', 'type': 'number'},\n      {'start': 2, 'name': 'elementShape', 'type': 'shape'},\n    ],\n    'attrs':\n        [{'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorListSetItem',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorListId', 'type': 'tensor'},\n      {'start': 1, 'name': 'index', 'type': 'number'},\n      {'start': 2, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs':\n        [{'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorListReserve',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'elementShape', 'type': 'shape'},\n      {'start': 1, 'name': 'numElements', 'type': 'number'},\n    ],\n    'attrs':\n        [{'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorListFromTensor',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n      {'start': 1, 'name': 'elementShape', 'type': 'shape'}\n    ],\n    'attrs':\n        [{'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorListStack',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorListId', 'type': 'tensor'},\n      {'start': 1, 'name': 'elementShape', 'type': 'shape'},\n    ],\n    'attrs': [\n      {'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'},\n      {'tfName': 'num_elements', 'name': 'numElements', 'type': 'dtype'}\n    ]\n  },\n  {\n    'tfOpName': 'TensorListSplit',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n      {'start': 1, 'name': 'elementShape', 'type': 'shape'},\n      {'start': 2, 'name': 'lengths', 'type': 'number[]'},\n    ],\n    'attrs':\n        [{'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorListConcat',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorListId', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'element_shape', 'name': 'elementShape', 'type': 'shape'},\n      {'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}\n    ]\n  },\n  {\n    'tfOpName': 'TensorListPopBack',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorListId', 'type': 'tensor'},\n      {'start': 1, 'name': 'elementShape', 'type': 'shape'},\n    ],\n    'attrs':\n        [{'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorListPushBack',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorListId', 'type': 'tensor'},\n      {'start': 1, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}\n    ]\n  }\n];\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'AvgPool',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'MaxPool',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]'}, {\n        'tfName': 'explicit_paddings',\n        'name': 'explicitPaddings',\n        'type': 'number[]',\n        'defaultValue': [],\n        'notSupported': true\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'MaxPoolWithArgmax',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'},\n      {'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]'}, {\n        'tfName': 'include_batch_in_index',\n        'name': 'includeBatchInIndex',\n        'type': 'bool'\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'AvgPool3D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'MaxPool3D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Conv1D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'stride', 'name': 'stride', 'type': 'number'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NWC'\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'dilation',\n        'name': 'dilation',\n        'type': 'number',\n        'defaultValue': 1\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Conv2D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true},\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'},\n      {'tfName': 'useCudnnOnGpu', 'name': 'useCudnnOnGpu', 'type': 'bool'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {\n        'tfName': 'explicit_paddings',\n        'name': 'explicitPaddings',\n        'type': 'number[]',\n        'defaultValue': []\n      },\n      {'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': '_FusedConv2D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n      {'start': 2, end: 0, 'name': 'args', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'num_args', 'name': 'numArgs', 'type': 'number'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true},\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'explicit_paddings',\n        'name': 'explicitPaddings',\n        'type': 'number[]',\n        'defaultValue': []\n      },\n      {\n        'tfName': 'use_cudnn_on_gpu',\n        'name': 'useCudnnOnGpu',\n        'type': 'bool',\n        'defaultValue': true\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {\n        'tfName': 'dilations',\n        'name': 'dilations',\n        'type': 'number[]',\n        'defaultValue': [1, 1, 1, 1]\n      },\n      {\n        'tfName': 'fused_ops',\n        'name': 'fusedOps',\n        'type': 'string[]',\n        'defaultValue': []\n      },\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.0001\n      },\n      {\n        'tfName': 'leakyrelu_alpha',\n        'name': 'leakyreluAlpha',\n        'type': 'number'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Conv2DBackpropInput',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 2, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n      {'start': 0, 'name': 'outputShape', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {\n        'tfName': 'explicit_paddings',\n        'name': 'explicitPaddings',\n        'type': 'number[]',\n        'defaultValue': []\n      },\n      {\n        'tfName': 'dilations',\n        'name': 'dilations',\n        'type': 'number[]',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'DepthwiseConv2d',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'input', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {\n        'tfName': 'explicit_paddings',\n        'name': 'explicitPaddings',\n        'type': 'number[]',\n        'defaultValue': []\n      },\n      {'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'DepthwiseConv2dNative',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'input', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {\n        'tfName': 'explicit_paddings',\n        'name': 'explicitPaddings',\n        'type': 'number[]',\n        'defaultValue': []\n      },\n      {'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'FusedDepthwiseConv2dNative',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n      {'start': 2, end: 0, 'name': 'args', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'num_args', 'name': 'numArgs', 'type': 'number'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true},\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {\n        'tfName': 'dilations',\n        'name': 'dilations',\n        'type': 'number[]',\n        'defaultValue': [1, 1, 1, 1]\n      },\n      {\n        'tfName': 'fused_ops',\n        'name': 'fusedOps',\n        'type': 'string[]',\n        'defaultValue': []\n      },\n      {\n        'tfName': 'explicit_paddings',\n        'name': 'explicitPaddings',\n        'type': 'number[]',\n        'defaultValue': []\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Conv3D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]'}\n    ],\n  },\n  {\n    'tfOpName': 'Dilation2D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'rates', 'name': 'dilations', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Fill',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n      {'start': 1, 'name': 'value', 'type': 'number'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'LinSpace',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'start', 'type': 'number'},\n      {'start': 1, 'name': 'stop', 'type': 'number'},\n      {'start': 2, 'name': 'num', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'OneHot',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'indices', 'type': 'tensor'},\n      {'start': 1, 'name': 'depth', 'type': 'number'},\n      {'start': 2, 'name': 'onValue', 'type': 'number', 'defaultValue': 1},\n      {'start': 3, 'name': 'offValue', 'type': 'number', 'defaultValue': 0},\n    ],\n    'attrs': [\n      {\n        'tfName': 'axis',\n        'name': 'axis',\n        'type': 'number',\n        'notSupported': true\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Ones',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'OnesLike',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [{'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'RandomUniform',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'minval',\n        'name': 'minval',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'maxval',\n        'name': 'maxval',\n        'type': 'number',\n        'defaultValue': 1\n      },\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'seed', 'name': 'seed', 'type': 'number', 'defaultValue': 0}, {\n        'tfName': 'seed2',\n        'name': 'seed2',\n        'type': 'number',\n        'defaultValue': 0,\n        'notSupported': true\n      },\n      {'tfName': 'T', 'name': 'T', 'type': 'number', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Range',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'start', 'type': 'number'},\n      {'start': 1, 'name': 'stop', 'type': 'number'},\n      {'start': 2, 'name': 'step', 'type': 'number', 'defaultValue': 0},\n    ],\n    'attrs': [{'tfName': 'Tidx', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TruncatedNormal',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'means',\n        'name': 'mean',\n        'type': 'number',\n        'defaultValue': 0.0\n      },\n      {\n        'tfName': 'stddev',\n        'name': 'stdDev',\n        'type': 'number',\n        'defaultValue': 1.0\n      },\n      {'tfName': 'seed', 'name': 'seed', 'type': 'number'}, {\n        'tfName': 'seed2',\n        'name': 'seed2',\n        'type': 'number',\n        'defaultValue': 0,\n        'notSupported': true\n      },\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'T', 'name': 'T', 'type': 'number', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Zeros',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'ZerosLike',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'Multinomial',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'logits', 'type': 'tensor'},\n      {'start': 1, 'name': 'numSamples', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'seed', 'name': 'seed', 'type': 'number'},\n      {'tfName': 'seed2', 'name': 'seed2', 'type': 'number'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'output_dtype', 'name': 'output_dtype', 'type': 'dtype'}\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'NonMaxSuppressionV2',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'boxes', 'type': 'tensor'},\n      {'start': 1, 'name': 'scores', 'type': 'tensor'},\n      {'start': 2, 'name': 'maxOutputSize', 'type': 'number'},\n      {'start': 3, 'name': 'iouThreshold', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'NonMaxSuppressionV3',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'boxes', 'type': 'tensor'},\n      {'start': 1, 'name': 'scores', 'type': 'tensor'},\n      {'start': 2, 'name': 'maxOutputSize', 'type': 'number'},\n      {'start': 3, 'name': 'iouThreshold', 'type': 'number'},\n      {'start': 4, 'name': 'scoreThreshold', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'NonMaxSuppressionV4',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'boxes', 'type': 'tensor'},\n      {'start': 1, 'name': 'scores', 'type': 'tensor'},\n      {'start': 2, 'name': 'maxOutputSize', 'type': 'number'},\n      {'start': 3, 'name': 'iouThreshold', 'type': 'number'},\n      {'start': 4, 'name': 'scoreThreshold', 'type': 'number'}\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'T_threshold',\n        'name': 'threshold',\n        'type': 'dtype',\n        'notSupported': true\n      },\n      {\n        'tfName': 'pad_to_max_output_size',\n        'name': 'padToMaxOutputSize',\n        'type': 'bool'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'NonMaxSuppressionV5',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'boxes', 'type': 'tensor'},\n      {'start': 1, 'name': 'scores', 'type': 'tensor'},\n      {'start': 2, 'name': 'maxOutputSize', 'type': 'number'},\n      {'start': 3, 'name': 'iouThreshold', 'type': 'number'},\n      {'start': 4, 'name': 'scoreThreshold', 'type': 'number'},\n      {'start': 5, 'name': 'softNmsSigma', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'Where',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'condition', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'ListDiff',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'y', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'T',\n      'name': 'dtype',\n      'type': 'dtype',\n      'notSupported': true\n    }]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'TopKV2',\n    'category': 'evaluation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'k', 'type': 'number'},\n    ],\n    'attrs': [{'tfName': 'sorted', 'name': 'sorted', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Unique',\n    'category': 'evaluation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n  },\n  {\n    'tfOpName': 'UniqueV2',\n    'category': 'evaluation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number'},\n    ],\n  },\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'PlaceholderWithDefault',\n    'category': 'graph',\n    'inputs': [\n      {'start': 0, 'name': 'default', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'shape', 'name': 'shape', 'type': 'shape'},\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'}\n    ]\n  },\n  {\n    'tfOpName': 'Placeholder',\n    'category': 'graph',\n    'attrs': [\n      {'tfName': 'shape', 'name': 'shape', 'type': 'shape'},\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'}\n    ]\n  },\n  {'tfOpName': 'Const', 'category': 'graph'}, {\n    'tfOpName': 'Identity',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'IdentityN',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'end': 0, 'name': 'x', 'type': 'tensors'}]\n  },\n  {\n    'tfOpName': 'Snapshot',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'Rank',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'Size',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'Shape',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'ShapeN',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'end': 0, 'name': 'x', 'type': 'tensors'}]\n  },\n  {\n    'tfOpName': 'Print',\n    'category': 'graph',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'data', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'message', 'name': 'message', 'type': 'string'}, {\n        'tfName': 'first_n',\n        'name': 'firstN',\n        'type': 'number',\n        'notSupported': true\n      },\n      {\n        'tfName': 'summarize',\n        'name': 'summarize',\n        'type': 'number',\n        'defaultValue': 3\n      }\n    ]\n  },\n  {'tfOpName': 'NoOp', 'category': 'graph', 'inputs': []}, {\n    'tfOpName': 'StopGradient',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'FakeQuantWithMinMaxVars',\n    'category': 'graph',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'min', 'name': 'min', 'type': 'number'},\n      {'tfName': 'max', 'name': 'max', 'type': 'number'}\n    ]\n  }\n];\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'HashTable',\n    'category': 'hash_table',\n    'inputs': [],\n    'attrs': [\n      {'tfName': 'shared_name', 'name': 'sharedName', 'type': 'string'},\n      {\n        'tfName': 'use_node_name_sharing',\n        'name': 'useNodeNameSharing',\n        'type': 'bool'\n      },\n      {'tfName': 'key_dtype', 'name': 'keyDType', 'type': 'dtype'},\n      {'tfName': 'value_dtype', 'name': 'valueDType', 'type': 'dtype'},\n    ]\n  },\n  {\n    'tfOpName': 'HashTableV2',\n    'category': 'hash_table',\n    'inputs': [],\n    'attrs': [\n      {'tfName': 'shared_name', 'name': 'sharedName', 'type': 'string'},\n      {\n        'tfName': 'use_node_name_sharing',\n        'name': 'useNodeNameSharing',\n        'type': 'bool'\n      },\n      {'tfName': 'key_dtype', 'name': 'keyDType', 'type': 'dtype'},\n      {'tfName': 'value_dtype', 'name': 'valueDType', 'type': 'dtype'},\n    ]\n  },\n  {\n    'tfOpName': 'LookupTableImport',\n    'category': 'hash_table',\n    'inputs': [\n      {'start': 0, 'name': 'tableHandle', 'type': 'tensor'},\n      {'start': 1, 'name': 'keys', 'type': 'tensor'},\n      {'start': 2, 'name': 'values', 'type': 'tensor'}\n    ],\n    'attrs': [\n      {'tfName': 'Tin', 'name': 'tIn', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'Tout',\n        'name': 'tOut',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LookupTableImportV2',\n    'category': 'hash_table',\n    'inputs': [\n      {'start': 0, 'name': 'tableHandle', 'type': 'tensor'},\n      {'start': 1, 'name': 'keys', 'type': 'tensor'},\n      {'start': 2, 'name': 'values', 'type': 'tensor'}\n    ],\n    'attrs': [\n      {'tfName': 'Tin', 'name': 'tIn', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'Tout',\n        'name': 'tOut',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LookupTableFind',\n    'category': 'hash_table',\n    'inputs': [\n      {'start': 0, 'name': 'tableHandle', 'type': 'tensor'},\n      {'start': 1, 'name': 'keys', 'type': 'tensor'},\n      {'start': 2, 'name': 'defaultValue', 'type': 'tensor'}\n    ],\n    'attrs': [\n      {'tfName': 'Tin', 'name': 'tIn', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'Tout',\n        'name': 'tOut',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LookupTableFindV2',\n    'category': 'hash_table',\n    'inputs': [\n      {'start': 0, 'name': 'tableHandle', 'type': 'tensor'},\n      {'start': 1, 'name': 'keys', 'type': 'tensor'},\n      {'start': 2, 'name': 'defaultValue', 'type': 'tensor'}\n    ],\n    'attrs': [\n      {'tfName': 'Tin', 'name': 'tIn', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'Tout',\n        'name': 'tOut',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LookupTableSize',\n    'category': 'hash_table',\n    'inputs': [\n      {'start': 0, 'name': 'tableHandle', 'type': 'tensor'}\n    ]\n  },\n  {\n    'tfOpName': 'LookupTableSizeV2',\n    'category': 'hash_table',\n    'inputs': [\n      {'start': 0, 'name': 'tableHandle', 'type': 'tensor'}\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'ResizeBilinear',\n    'category': 'image',\n    'inputs': [\n      {'start': 0, 'name': 'images', 'type': 'tensor'},\n      {'start': 1, 'name': 'size', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {'tfName': 'align_corners', 'name': 'alignCorners', 'type': 'bool'}, {\n        'tfName': 'half_pixel_centers',\n        'name': 'halfPixelCenters',\n        'type': 'bool'\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'ResizeNearestNeighbor',\n    'category': 'image',\n    'inputs': [\n      {'start': 0, 'name': 'images', 'type': 'tensor'},\n      {'start': 1, 'name': 'size', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {'tfName': 'align_corners', 'name': 'alignCorners', 'type': 'bool'}, {\n        'tfName': 'half_pixel_centers',\n        'name': 'halfPixelCenters',\n        'type': 'bool'\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'CropAndResize',\n    'category': 'image',\n    'inputs': [\n      {'start': 0, 'name': 'image', 'type': 'tensor'},\n      {'start': 1, 'name': 'boxes', 'type': 'tensor'},\n      {'start': 2, 'name': 'boxInd', 'type': 'tensor'},\n      {'start': 3, 'name': 'cropSize', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {'tfName': 'method', 'name': 'method', 'type': 'string'}, {\n        'tfName': 'extrapolation_value',\n        'name': 'extrapolationValue',\n        'type': 'number'\n      }\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Equal',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'NotEqual',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Greater',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'GreaterEqual',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Less',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LessEqual',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LogicalAnd',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LogicalNot',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LogicalOr',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Select',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'condition', 'type': 'tensor'},\n      {'start': 1, 'name': 'a', 'type': 'tensor'},\n      {'start': 2, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'SelectV2',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'condition', 'type': 'tensor'},\n      {'start': 1, 'name': 'a', 'type': 'tensor'},\n      {'start': 2, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'T',\n      'name': 'dtype',\n      'type': 'dtype',\n      'notSupported': true\n    }]\n  }\n];\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': '_FusedMatMul',\n    'category': 'matrices',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n      {'start': 2, end: 0, 'name': 'args', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'num_args', 'name': 'numArgs', 'type': 'number'}, {\n        'tfName': 'fused_ops',\n        'name': 'fusedOps',\n        'type': 'string[]',\n        'defaultValue': []\n      },\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.0001\n      },\n      {\n        'tfName': 'transpose_a',\n        'name': 'transposeA',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'transpose_b',\n        'name': 'transposeB',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'MatMul',\n    'category': 'matrices',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'transpose_a',\n        'name': 'transposeA',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'transpose_b',\n        'name': 'transposeB',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'BatchMatMul',\n    'category': 'matrices',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'adj_x',\n        'name': 'transposeA',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'adj_y',\n        'name': 'transposeB',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'BatchMatMulV2',\n    'category': 'matrices',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'adj_x',\n        'name': 'transposeA',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'adj_y',\n        'name': 'transposeB',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Transpose',\n    'category': 'matrices',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'perm', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Einsum',\n    'category': 'matrices',\n    'inputs': [{'start': 0, 'end': 0, 'name': 'tensors', 'type': 'tensors'}],\n    'attrs': [\n      {'tfName': 'equation', 'name': 'equation', 'type': 'string'},\n      {'tfName': 'N', 'name': 'n', 'type': 'number', 'defaultValue': 2},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'FusedBatchNorm',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'scale', 'type': 'tensor'},\n      {'start': 2, 'name': 'offset', 'type': 'tensor'},\n      {'start': 3, 'name': 'mean', 'type': 'tensor'},\n      {'start': 4, 'name': 'variance', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.001\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'FusedBatchNormV2',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'scale', 'type': 'tensor'},\n      {'start': 2, 'name': 'offset', 'type': 'tensor'},\n      {'start': 3, 'name': 'mean', 'type': 'tensor'},\n      {'start': 4, 'name': 'variance', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.001\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'FusedBatchNormV3',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'scale', 'type': 'tensor'},\n      {'start': 2, 'name': 'offset', 'type': 'tensor'},\n      {'start': 3, 'name': 'mean', 'type': 'tensor'},\n      {'start': 4, 'name': 'variance', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.001\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LRN',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'depth_radius',\n        'name': 'radius',\n        'type': 'number',\n        'defaultValue': 5\n      },\n      {'tfName': 'bias', 'name': 'bias', 'type': 'number', 'defaultValue': 1.0},\n      {\n        'tfName': 'alpha',\n        'name': 'alpha',\n        'type': 'number',\n        'defaultValue': 1.0\n      },\n      {\n        'tfName': 'beta',\n        'name': 'beta',\n        'type': 'number',\n        'defaultValue': 0.5\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Softmax',\n    'category': 'normalization',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'LogSoftmax',\n    'category': 'normalization',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'SparseToDense',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'sparseIndices', 'type': 'tensor'},\n      {'start': 1, 'name': 'outputShape', 'type': 'number[]'},\n      {'start': 2, 'name': 'sparseValues', 'type': 'tensor'},\n      {'start': 3, 'name': 'defaultValue', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'validate_indices',\n      'name': 'validateIndices',\n      'type': 'bool',\n      'defaultValue': true,\n      'notSupported': true\n    }]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Bincount',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'size', 'type': 'number'},\n      {'start': 2, 'name': 'weights', 'type': 'tensor'}\n    ]\n  },\n  {\n    'tfOpName': 'DenseBincount',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'size', 'type': 'number'},\n      {'start': 2, 'name': 'weights', 'type': 'tensor'}\n    ],\n    'attrs':\n        [{'tfName': 'binary_output', 'name': 'binaryOutput', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Max',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Mean',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Min',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Sum',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'All',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Any',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'ArgMax',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'ArgMin',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'Prod',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Cumsum',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'exclusive', 'name': 'exclusive', 'type': 'bool'},\n      {'tfName': 'reverse', 'name': 'reverse', 'type': 'bool'}\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'ConcatV2',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'end': -1, 'name': 'tensors', 'type': 'tensors'},\n      {'start': -1, 'name': 'axis', 'type': 'number'}\n    ],\n    'attrs':\n        [{'tfName': 'N', 'name': 'n', 'type': 'number', 'defaultValue': 2}]\n  },\n  {\n    'tfOpName': 'Concat',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 1, 'end': 0, 'name': 'tensors', 'type': 'tensors'},\n      {'start': 0, 'name': 'axis', 'type': 'number'}\n    ],\n    'attrs': [{'tfName': 'N', 'name': 'n', 'type': 'number', 'defaultValue': 2}]\n\n  },\n  {\n    'tfOpName': 'GatherV2',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'tensor'},\n      {'start': 2, 'name': 'axis', 'type': 'number', 'defaultValue': 0}\n    ],\n    'attrs': [{\n      'tfName': 'batch_dims',\n      'name': 'batchDims',\n      'type': 'number',\n      'defaultValue': 0\n    }]\n  },\n  {\n    'tfOpName': 'Gather',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'validate_indices',\n      'name': 'validateIndices',\n      'type': 'bool',\n      'notSupported': true\n    }]\n  },\n  {\n    'tfOpName': 'Reverse',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'dims', 'type': 'bool[]'}\n    ]\n  },\n  {\n    'tfOpName': 'ReverseV2',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'Slice',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'begin', 'type': 'number[]'},\n      {'start': 2, 'name': 'size', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'StridedSlice',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'begin', 'type': 'number[]'},\n      {'start': 2, 'name': 'end', 'type': 'number[]'},\n      {'start': 3, 'name': 'strides', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'begin_mask',\n        'name': 'beginMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'end_mask',\n        'name': 'endMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'new_axis_mask',\n        'name': 'newAxisMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'ellipsis_mask',\n        'name': 'ellipsisMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'shrink_axis_mask',\n        'name': 'shrinkAxisMask',\n        'type': 'number',\n        'defaultValue': 0\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Pack',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'end': 0, 'name': 'tensors', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'axis', 'name': 'axis', 'type': 'number', 'defaultValue': 0}\n    ]\n  },\n  {\n    'tfOpName': 'Unpack',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'axis', 'name': 'axis', 'type': 'number', 'defaultValue': 0}, {\n        'tfName': 'num',\n        'name': 'num',\n        'type': 'number',\n        'defaultValue': 0,\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Tile',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'reps', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'Split',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'axis', 'type': 'number', 'defaultValue': 0},\n      {'start': 1, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'num_split',\n      'name': 'numOrSizeSplits',\n      'type': 'number',\n      'defaultValue': 1\n    }]\n  },\n  {\n    'tfOpName': 'SplitV',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'numOrSizeSplits', 'type': 'number[]'},\n      {'start': 2, 'name': 'axis', 'type': 'number', 'defaultValue': 0}\n    ]\n  },\n  {\n    'tfOpName': 'ScatterNd',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'indices', 'type': 'tensor'},\n      {'start': 1, 'name': 'values', 'type': 'tensor'},\n      {'start': 2, 'name': 'shape', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'GatherNd',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'tensor'}\n    ]\n  },\n  {\n    'tfOpName': 'SparseToDense',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'sparseIndices', 'type': 'tensor'},\n      {'start': 1, 'name': 'outputShape', 'type': 'number[]'},\n      {'start': 2, 'name': 'sparseValues', 'type': 'tensor'},\n      {'start': 3, 'name': 'defaultValue', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'validate_indices',\n      'name': 'validateIndices',\n      'type': 'bool',\n      'defaultValue': false,\n      'notSupported': true\n    }]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'FFT',\n    'category': 'spectral',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'IFFT',\n    'category': 'spectral',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'RFFT',\n    'category': 'spectral',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'}, {\n        'start': 1,\n        'name': 'fft_length',\n        'type': 'number',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'IRFFT',\n    'category': 'spectral',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'}, {\n        'start': 1,\n        'name': 'fft_length',\n        'type': 'number',\n        'notSupported': true\n      }\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Cast',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'SrcT',\n        'name': 'sdtype',\n        'type': 'dtype',\n        'notSupported': true\n      },\n      {'tfName': 'DstT', 'name': 'dtype', 'type': 'dtype'}\n    ]\n  },\n  {\n    'tfOpName': 'ExpandDims',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'MirrorPad',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'padding', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'mode', 'name': 'mode', 'type': 'string'}]\n  },\n  {\n    'tfOpName': 'Pad',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'padding', 'type': 'number[]'},\n    ],\n    'attrs': [{\n      'tfName': 'constant_value',\n      'name': 'constantValue',\n      'type': 'number',\n      'defaultValue': 0\n    }]\n  },\n  {\n    'tfOpName': 'PadV2',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'padding', 'type': 'number[]'}, {\n        'start': 2,\n        'name': 'constantValue',\n        'type': 'number',\n        'defaultValue': 0\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Reshape',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'shape', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'Squeeze',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'axis',\n      'tfDeprecatedName': 'squeeze_dims',\n      'name': 'axis',\n      'type': 'number[]'\n    }]\n  },\n  {\n    'tfOpName': 'SpaceToBatchND',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'blockShape', 'type': 'number[]'},\n      {'start': 2, 'name': 'paddings', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'BatchToSpaceND',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'blockShape', 'type': 'number[]'},\n      {'start': 2, 'name': 'crops', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'DepthToSpace',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'block_size', 'name': 'blockSize', 'type': 'number'},\n      {'tfName': 'data_format', 'name': 'dataFormat', 'type': 'string'}\n    ]\n  },\n  {\n    'tfOpName': 'BroadcastTo',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'shape', 'type': 'number[]'},\n    ],\n    'attrs': []\n  }\n];\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, env} from '@tensorflow/tfjs-core';\n\nimport * as tensorflow from '../data/compiled_api';\n\nimport {getRegisteredOp} from './custom_op/register';\nimport {getNodeNameAndIndex} from './executors/utils';\nimport * as arithmetic from './op_list/arithmetic';\nimport * as basicMath from './op_list/basic_math';\nimport * as control from './op_list/control';\nimport * as convolution from './op_list/convolution';\nimport * as creation from './op_list/creation';\nimport * as dynamic from './op_list/dynamic';\nimport * as evaluation from './op_list/evaluation';\nimport * as graph from './op_list/graph';\nimport * as hashTable from './op_list/hash_table';\nimport * as image from './op_list/image';\nimport * as logical from './op_list/logical';\nimport * as matrices from './op_list/matrices';\nimport * as normalization from './op_list/normalization';\nimport * as reduction from './op_list/reduction';\nimport * as sliceJoin from './op_list/slice_join';\nimport * as spectral from './op_list/spectral';\nimport * as transformation from './op_list/transformation';\nimport {Graph, InputParamValue, Node, OpMapper, ParamValue} from './types';\n\nexport class OperationMapper {\n  private static _instance: OperationMapper;\n\n  private opMappers: {[key: string]: OpMapper};\n\n  // Singleton instance for the mapper\n  public static get Instance() {\n    return this._instance || (this._instance = new this());\n  }\n\n  // Loads the op mapping from the JSON file.\n  private constructor() {\n    const ops = [\n      arithmetic, basicMath, control, convolution, creation, dynamic,\n      evaluation, logical, image, graph, matrices, normalization, reduction,\n      sliceJoin, spectral, transformation, hashTable\n    ];\n    const mappersJson: OpMapper[] = [].concat(...ops.map(op => op.json));\n\n    this.opMappers = mappersJson.reduce<{[key: string]: OpMapper}>(\n        (map, mapper: OpMapper) => {\n          map[mapper.tfOpName] = mapper;\n          return map;\n        },\n        {});\n  }\n\n  // Converts the model inference graph from Tensorflow GraphDef to local\n  // representation for TensorFlow.js API\n  transformGraph(\n      graph: tensorflow.IGraphDef,\n      signature: tensorflow.ISignatureDef = {}): Graph {\n    const tfNodes = graph.node;\n    const placeholders: Node[] = [];\n    const weights: Node[] = [];\n    const initNodes: Node[] = [];\n    const nodes = tfNodes.reduce<{[key: string]: Node}>((map, node) => {\n      map[node.name] = this.mapNode(node);\n      if (node.op.startsWith('Placeholder')) {\n        placeholders.push(map[node.name]);\n      } else if (node.op === 'Const') {\n        weights.push(map[node.name]);\n      } else if (node.input == null || node.input.length === 0) {\n        initNodes.push(map[node.name]);\n      }\n      return map;\n    }, {});\n\n    let inputs: Node[] = [];\n    const outputs: Node[] = [];\n    let inputNodeNameToKey: {[key: string]: string} = {};\n    let outputNodeNameToKey: {[key: string]: string} = {};\n    if (signature != null) {\n      inputNodeNameToKey = this.mapSignatureEntries(signature.inputs);\n      outputNodeNameToKey = this.mapSignatureEntries(signature.outputs);\n    }\n    const allNodes = Object.keys(nodes);\n    allNodes.forEach(key => {\n      const node = nodes[key];\n      node.inputNames.forEach(name => {\n        const [nodeName, ] = getNodeNameAndIndex(name);\n        node.inputs.push(nodes[nodeName]);\n        nodes[nodeName].children.push(node);\n      });\n    });\n\n    // if signature has not outputs set, add any node that does not have\n    // outputs.\n    if (Object.keys(outputNodeNameToKey).length === 0) {\n      allNodes.forEach(key => {\n        const node = nodes[key];\n        if (node.children.length === 0) {\n          outputs.push(node);\n        }\n      });\n    } else {\n      Object.keys(outputNodeNameToKey).forEach(name => {\n        const [nodeName, ] = getNodeNameAndIndex(name);\n        const node = nodes[nodeName];\n        if (node != null) {\n          node.signatureKey = outputNodeNameToKey[name];\n          outputs.push(node);\n        }\n      });\n    }\n\n    if (Object.keys(inputNodeNameToKey).length > 0) {\n      Object.keys(inputNodeNameToKey).forEach(name => {\n        const [nodeName, ] = getNodeNameAndIndex(name);\n        const node = nodes[nodeName];\n        if (node) {\n          node.signatureKey = inputNodeNameToKey[name];\n          inputs.push(node);\n        }\n      });\n    } else {\n      inputs = placeholders;\n    }\n\n    let functions = {};\n    if (graph.library != null && graph.library.function != null) {\n      functions = graph.library.function.reduce((functions, func) => {\n        functions[func.signature.name] = this.mapFunction(func);\n        return functions;\n      }, {} as {[key: string]: Graph});\n    }\n\n    const result: Graph =\n        {nodes, inputs, outputs, weights, placeholders, signature, functions};\n\n    if (initNodes.length > 0) {\n      result.initNodes = initNodes;\n    }\n\n    return result;\n  }\n\n  private mapSignatureEntries(entries: {[k: string]: tensorflow.ITensorInfo}) {\n    return Object.keys(entries || {})\n        .reduce<{[key: string]: string}>((prev, curr) => {\n          prev[entries[curr].name] = curr;\n          return prev;\n        }, {});\n  }\n\n  private mapNode(node: tensorflow.INodeDef): Node {\n    // Unsupported ops will cause an error at run-time (not parse time), since\n    // they may not be used by the actual execution subgraph.\n    const mapper =\n        getRegisteredOp(node.op) || this.opMappers[node.op] || {} as OpMapper;\n    if (node.attr == null) {\n      node.attr = {};\n    }\n\n    const newNode: Node = {\n      name: node.name,\n      op: node.op,\n      category: mapper.category,\n      inputNames:\n          (node.input ||\n           []).map(input => input.startsWith('^') ? input.substr(1) : input),\n      inputs: [],\n      children: [],\n      inputParams: {},\n      attrParams: {},\n      rawAttrs: node.attr\n    };\n\n    if (mapper.inputs != null) {\n      newNode.inputParams =\n          mapper.inputs.reduce<{[key: string]: InputParamValue}>(\n              (map, param) => {\n                map[param.name] = {\n                  type: param.type,\n                  inputIndexStart: param.start,\n                  inputIndexEnd: param.end\n                };\n                return map;\n              },\n              {});\n    }\n    if (mapper.attrs != null) {\n      newNode.attrParams =\n          mapper.attrs.reduce<{[key: string]: ParamValue}>((map, param) => {\n            const type = param.type;\n            let value = undefined;\n            switch (param.type) {\n              case 'string':\n                value = getStringParam(\n                    node.attr, param.tfName, param.defaultValue as string);\n\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getStringParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as string);\n                }\n                break;\n              case 'string[]':\n                value = getStringArrayParam(\n                    node.attr, param.tfName, param.defaultValue as string[]);\n\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getStringArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as string[]);\n                }\n                break;\n              case 'number':\n                value = getNumberParam(\n                    node.attr, param.tfName,\n                    (param.defaultValue || 0) as number);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getNumberParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number);\n                }\n                break;\n              case 'number[]':\n                value = getNumericArrayParam(\n                    node.attr, param.tfName, param.defaultValue as number[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getNumericArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number[]);\n                }\n                break;\n              case 'bool':\n                value = getBoolParam(\n                    node.attr, param.tfName, param.defaultValue as boolean);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getBoolParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as boolean);\n                }\n                break;\n              case 'bool[]':\n                value = getBoolArrayParam(\n                    node.attr, param.tfName, param.defaultValue as boolean[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getBoolArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as boolean[]);\n                }\n                break;\n              case 'shape':\n                value = getTensorShapeParam(\n                    node.attr, param.tfName, param.defaultValue as number[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getTensorShapeParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number[]);\n                }\n                break;\n              case 'shape[]':\n                value = getTensorShapeArrayParam(\n                    node.attr, param.tfName, param.defaultValue as number[][]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getTensorShapeArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number[][]);\n                }\n                break;\n              case 'dtype':\n                value = getDtypeParam(\n                    node.attr, param.tfName, param.defaultValue as DataType);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getDtypeParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as DataType);\n                }\n                break;\n              case 'dtype[]':\n                value = getDtypeArrayParam(\n                    node.attr, param.tfName, param.defaultValue as DataType[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getDtypeArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as DataType[]);\n                }\n                break;\n              case 'func':\n                value = getFuncParam(\n                    node.attr, param.tfName, param.defaultValue as string);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getFuncParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as string);\n                }\n                break;\n              case 'tensor':\n              case 'tensors':\n                break;\n              default:\n                throw new Error(\n                    `Unsupported param type: ${param.type} for op: ${node.op}`);\n            }\n            map[param.name] = {value, type};\n            return map;\n          }, {});\n    }\n    return newNode;\n  }\n\n  // map the TFunctionDef to TFJS graph object\n  private mapFunction(functionDef: tensorflow.IFunctionDef): Graph {\n    const tfNodes = functionDef.nodeDef;\n    const placeholders: Node[] = [];\n    const weights: Node[] = [];\n    let nodes: {[key: string]: Node} = {};\n    if (tfNodes != null) {\n      nodes = tfNodes.reduce<{[key: string]: Node}>((map, node) => {\n        map[node.name] = this.mapNode(node);\n        if (node.op === 'Const') {\n          weights.push(map[node.name]);\n        }\n        return map;\n      }, {});\n    }\n    const inputs: Node[] = [];\n    const outputs: Node[] = [];\n\n    functionDef.signature.inputArg.forEach(arg => {\n      const [nodeName, ] = getNodeNameAndIndex(arg.name);\n      const node: Node = {\n        name: nodeName,\n        op: 'Placeholder',\n        inputs: [],\n        inputNames: [],\n        category: 'graph',\n        inputParams: {},\n        attrParams: {dtype: {value: parseDtypeParam(arg.type), type: 'dtype'}},\n        children: []\n      };\n      node.signatureKey = arg.name;\n      inputs.push(node);\n      nodes[nodeName] = node;\n    });\n\n    const allNodes = Object.keys(nodes);\n    allNodes.forEach(key => {\n      const node = nodes[key];\n      node.inputNames.forEach(name => {\n        const [nodeName, ] = getNodeNameAndIndex(name);\n        node.inputs.push(nodes[nodeName]);\n        nodes[nodeName].children.push(node);\n      });\n    });\n\n    const returnNodeMap = functionDef.ret;\n\n    functionDef.signature.outputArg.forEach(output => {\n      const [nodeName, index] = getNodeNameAndIndex(returnNodeMap[output.name]);\n      const node = nodes[nodeName];\n      if (node != null) {\n        node.defaultOutput = index;\n        outputs.push(node);\n      }\n    });\n\n    const signature = this.mapArgsToSignature(functionDef);\n    return {nodes, inputs, outputs, weights, placeholders, signature};\n  }\n\n  private mapArgsToSignature(functionDef: tensorflow.IFunctionDef):\n      tensorflow.ISignatureDef {\n    return {\n      methodName: functionDef.signature.name,\n      inputs: functionDef.signature.inputArg.reduce(\n          (map, arg) => {\n            map[arg.name] = this.mapArgToTensorInfo(arg);\n            return map;\n          },\n          {} as {[key: string]: tensorflow.ITensorInfo}),\n      outputs: functionDef.signature.outputArg.reduce(\n          (map, arg) => {\n            map[arg.name] = this.mapArgToTensorInfo(arg, functionDef.ret);\n            return map;\n          },\n          {} as {[key: string]: tensorflow.ITensorInfo}),\n    };\n  }\n\n  private mapArgToTensorInfo(\n      arg: tensorflow.OpDef.IArgDef,\n      nameMap?: {[key: string]: string}): tensorflow.ITensorInfo {\n    let name = arg.name;\n    if (nameMap != null) {\n      name = nameMap[name];\n    }\n    return {name, dtype: arg.type};\n  }\n}\n\nexport function decodeBase64(text: string): string {\n  const global = env().global;\n  if (typeof global.atob !== 'undefined') {\n    return global.atob(text);\n  } else if (typeof Buffer !== 'undefined') {\n    return new Buffer(text, 'base64').toString();\n  } else {\n    throw new Error(\n        'Unable to decode base64 in this environment. ' +\n        'Missing built-in atob() or Buffer()');\n  }\n}\n\nexport function parseStringParam(s: []|string, keepCase: boolean): string {\n  const value =\n      Array.isArray(s) ? String.fromCharCode.apply(null, s) : decodeBase64(s);\n  return keepCase ? value : value.toLowerCase();\n}\n\nexport function getStringParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string, def: string,\n    keepCase = false): string {\n  const param = attrs[name];\n  if (param != null) {\n    return parseStringParam(param.s, keepCase);\n  }\n  return def;\n}\n\nexport function getBoolParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: boolean): boolean {\n  const param = attrs[name];\n  return param ? param.b : def;\n}\n\nexport function getNumberParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: number): number {\n  const param = attrs[name] || {};\n  const value =\n      param['i'] != null ? param['i'] : (param['f'] != null ? param['f'] : def);\n  return (typeof value === 'number') ? value : parseInt(value, 10);\n}\n\nexport function parseDtypeParam(value: string|tensorflow.DataType): DataType {\n  if (typeof (value) === 'string') {\n    // tslint:disable-next-line:no-any\n    value = tensorflow.DataType[value as any];\n  }\n  switch (value) {\n    case tensorflow.DataType.DT_FLOAT:\n      return 'float32';\n    case tensorflow.DataType.DT_INT32:\n    case tensorflow.DataType.DT_INT64:\n    case tensorflow.DataType.DT_INT8:\n    case tensorflow.DataType.DT_UINT8:\n      return 'int32';\n    case tensorflow.DataType.DT_BOOL:\n      return 'bool';\n    case tensorflow.DataType.DT_DOUBLE:\n      return 'float32';\n    case tensorflow.DataType.DT_STRING:\n      return 'string';\n    default:\n      // Unknown dtype error will happen at runtime (instead of parse time),\n      // since these nodes might not be used by the actual subgraph execution.\n      return null;\n  }\n}\n\nexport function getFuncParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: string): string {\n  const param = attrs[name];\n  if (param && param.func) {\n    return param.func.name;\n  }\n  return def;\n}\n\nexport function getDtypeParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: DataType): DataType {\n  const param = attrs[name];\n  if (param && param.type) {\n    return parseDtypeParam(param.type);\n  }\n  return def;\n}\n\nexport function getDtypeArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: DataType[]): DataType[] {\n  const param = attrs[name];\n  if (param && param.list && param.list.type) {\n    return param.list.type.map(v => parseDtypeParam(v));\n  }\n  return def;\n}\n\nexport function parseTensorShapeParam(shape: tensorflow.ITensorShape): number[]|\n    undefined {\n  if (shape.unknownRank) {\n    return undefined;\n  }\n  if (shape.dim != null) {\n    return shape.dim.map(\n        dim =>\n            (typeof dim.size === 'number') ? dim.size : parseInt(dim.size, 10));\n  }\n  return [];\n}\n\nexport function getTensorShapeParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def?: number[]): number[]|undefined {\n  const param = attrs[name];\n  if (param && param.shape) {\n    return parseTensorShapeParam(param.shape);\n  }\n  return def;\n}\n\nexport function getNumericArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: number[]): number[] {\n  const param = attrs[name];\n  if (param) {\n    return ((param.list.f && param.list.f.length ? param.list.f :\n                                                   param.list.i) ||\n            [])\n        .map(v => (typeof v === 'number') ? v : parseInt(v, 10));\n  }\n  return def;\n}\n\nexport function getStringArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string, def: string[],\n    keepCase = false): string[] {\n  const param = attrs[name];\n  if (param && param.list && param.list.s) {\n    return param.list.s.map((v) => {\n      return parseStringParam(v, keepCase);\n    });\n  }\n  return def;\n}\n\nexport function getTensorShapeArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: number[][]): number[][] {\n  const param = attrs[name];\n  if (param && param.list && param.list.shape) {\n    return param.list.shape.map((v) => {\n      return parseTensorShapeParam(v);\n    });\n  }\n  return def;\n}\n\nexport function getBoolArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: boolean[]): boolean[] {\n  const param = attrs[name];\n  if (param && param.list && param.list.b) {\n    return param.list.b;\n  }\n  return def;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, Tensor} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {getTensor} from '../executors/utils';\nimport {getBoolArrayParam, getBoolParam, getDtypeArrayParam, getDtypeParam, getNumberParam, getNumericArrayParam, getStringArrayParam, getStringParam, getTensorShapeArrayParam, getTensorShapeParam} from '../operation_mapper';\nimport {GraphNode, Node, ValueType} from '../types';\n\n/**\n * Helper class for lookup inputs and params for nodes in the model graph.\n */\nexport class NodeValueImpl implements GraphNode {\n  public readonly inputs: Tensor[] = [];\n  public readonly attrs: {[key: string]: ValueType} = {};\n  constructor(\n      private node: Node, private tensorMap: NamedTensorsMap,\n      private context: ExecutionContext) {\n    this.inputs = node.inputNames.map(name => this.getInput(name));\n    if (node.rawAttrs != null) {\n      this.attrs = Object.keys(node.rawAttrs)\n                       .reduce((attrs: {[key: string]: ValueType}, key) => {\n                         attrs[key] = this.getAttr(key);\n                         return attrs;\n                       }, {});\n    }\n  }\n\n  /**\n   * Return the value of the attribute or input param.\n   * @param name String: name of attribute or input param.\n   */\n  private getInput(name: string): Tensor {\n    return getTensor(name, this.tensorMap, this.context);\n  }\n\n  /**\n   * Return the value of the attribute or input param.\n   * @param name String: name of attribute or input param.\n   */\n  private getAttr(name: string, defaultValue?: ValueType): ValueType {\n    const value = this.node.rawAttrs[name];\n    if (value.tensor != null) {\n      return getTensor(name, this.tensorMap, this.context);\n    }\n    if (value.i != null || value.f != null) {\n      return getNumberParam(this.node.rawAttrs, name, defaultValue as number);\n    }\n    if (value.s != null) {\n      return getStringParam(this.node.rawAttrs, name, defaultValue as string);\n    }\n    if (value.b != null) {\n      return getBoolParam(this.node.rawAttrs, name, defaultValue as boolean);\n    }\n    if (value.shape != null) {\n      return getTensorShapeParam(\n          this.node.rawAttrs, name, defaultValue as number[]);\n    }\n    if (value.type != null) {\n      return getDtypeParam(this.node.rawAttrs, name, defaultValue as DataType);\n    }\n    if (value.list != null) {\n      if (value.list.i != null || value.list.f != null) {\n        return getNumericArrayParam(\n            this.node.rawAttrs, name, defaultValue as number[]);\n      }\n      if (value.list.s != null) {\n        return getStringArrayParam(\n            this.node.rawAttrs, name, defaultValue as string[]);\n      }\n      if (value.list.shape != null) {\n        return getTensorShapeArrayParam(\n            this.node.rawAttrs, name, defaultValue as number[][]);\n      }\n      if (value.list.b != null) {\n        return getBoolArrayParam(\n            this.node.rawAttrs, name, defaultValue as boolean[]);\n      }\n      if (value.list.type != null) {\n        return getDtypeArrayParam(\n            this.node.rawAttrs, name, defaultValue as DataType[]);\n      }\n    }\n\n    return defaultValue;\n  }\n}\n","\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * This differs from util.assertShapesMatch in that it allows values of\n * negative one, an undefined size of a dimensinon, in a shape to match\n * anything.\n */\n\nimport {Tensor, util} from '@tensorflow/tfjs-core';\n\n/**\n * Used by TensorList and TensorArray to verify if elementShape matches, support\n * negative value as the dim shape.\n * @param shapeA\n * @param shapeB\n * @param errorMessagePrefix\n */\nexport function assertShapesMatchAllowUndefinedSize(\n    shapeA: number|number[], shapeB: number|number[],\n    errorMessagePrefix = ''): void {\n  // constant shape means unknown rank\n  if (typeof shapeA === 'number' || typeof shapeB === 'number') {\n    return;\n  }\n  util.assert(\n      shapeA.length === shapeB.length,\n      () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n  for (let i = 0; i < shapeA.length; i++) {\n    const dim0 = shapeA[i];\n    const dim1 = shapeB[i];\n    util.assert(\n        dim0 < 0 || dim1 < 0 || dim0 === dim1,\n        () =>\n            errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n  }\n}\n\nexport function fullDefinedShape(elementShape: number|number[]): boolean {\n  if (typeof elementShape === 'number' || elementShape.some(dim => dim < 0)) {\n    return false;\n  }\n  return true;\n}\n/**\n * Generate the output element shape from the list elementShape, list tensors\n * and input param.\n * @param listElementShape\n * @param tensors\n * @param elementShape\n */\nexport function inferElementShape(\n    listElementShape: number|number[], tensors: Tensor[],\n    elementShape: number|number[]): number[] {\n  let partialShape = mergeElementShape(listElementShape, elementShape);\n  const notfullDefinedShape = !fullDefinedShape(partialShape);\n  if (notfullDefinedShape && tensors.length === 0) {\n    throw new Error(\n        `Tried to calculate elements of an empty list` +\n        ` with non-fully-defined elementShape: ${partialShape}`);\n  }\n  if (notfullDefinedShape) {\n    tensors.forEach(tensor => {\n      partialShape = mergeElementShape(tensor.shape, partialShape);\n    });\n  }\n  if (!fullDefinedShape(partialShape)) {\n    throw new Error(`Non-fully-defined elementShape: ${partialShape}`);\n  }\n  return partialShape as number[];\n}\n\nexport function mergeElementShape(\n    elementShapeA: number|number[], elementShapeB: number|number[]): number|\n    number[] {\n  if (typeof elementShapeA === 'number') {\n    return elementShapeB;\n  }\n  if (typeof elementShapeB === 'number') {\n    return elementShapeA;\n  }\n\n  if (elementShapeA.length !== elementShapeB.length) {\n    throw new Error(`Incompatible ranks during merge: ${elementShapeA} vs. ${\n        elementShapeB}`);\n  }\n\n  const result: number[] = [];\n  for (let i = 0; i < elementShapeA.length; ++i) {\n    const dim0 = elementShapeA[i];\n    const dim1 = elementShapeB[i];\n    if (dim0 >= 0 && dim1 >= 0 && dim0 !== dim1) {\n      throw new Error(`Incompatible shape during merge: ${elementShapeA} vs. ${\n          elementShapeB}`);\n    }\n    result[i] = dim0 >= 0 ? dim0 : dim1;\n  }\n  return result;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {concat, DataType, keep, reshape, scalar, slice, stack, Tensor, tensor, tidy, unstack} from '@tensorflow/tfjs-core';\n\nimport {assertShapesMatchAllowUndefinedSize} from './tensor_utils';\n\nexport interface TensorWithState {\n  tensor?: Tensor;\n  written?: boolean;\n  read?: boolean;\n  cleared?: boolean;\n}\n/**\n * The TensorArray object keeps an array of Tensors.  It\n * allows reading from the array and writing to the array.\n */\nexport class TensorArray {\n  private tensors: TensorWithState[] = [];\n  private closed_ = false;\n  readonly idTensor: Tensor;\n  constructor(\n      readonly name: string, readonly dtype: DataType, private maxSize: number,\n      private elementShape: number[], readonly identicalElementShapes: boolean,\n      readonly dynamicSize: boolean, readonly clearAfterRead: boolean) {\n    this.idTensor = scalar(0);\n    keep(this.idTensor);\n  }\n\n  get id() {\n    return this.idTensor.id;\n  }\n\n  get closed() {\n    return this.closed_;\n  }\n\n  /**\n   * Dispose the tensors and idTensor and mark the TensoryArray as closed.\n   */\n  clearAndClose(keepIds?: Set<number>) {\n    this.tensors.forEach(tensor => {\n      if (keepIds == null || !keepIds.has(tensor.tensor.id)) {\n        tensor.tensor.dispose();\n      }\n    });\n    this.tensors = [];\n    this.closed_ = true;\n    this.idTensor.dispose();\n  }\n\n  size(): number {\n    return this.tensors.length;\n  }\n\n  /**\n   * Read the value at location index in the TensorArray.\n   * @param index Number the index to read from.\n   */\n  read(index: number): Tensor {\n    if (this.closed_) {\n      throw new Error(`TensorArray ${this.name} has already been closed.`);\n    }\n\n    if (index < 0 || index >= this.size()) {\n      throw new Error(`Tried to read from index ${index}, but array size is: ${\n          this.size()}`);\n    }\n\n    const tensorWithState = this.tensors[index];\n    if (tensorWithState.cleared) {\n      throw new Error(\n          `TensorArray ${this.name}: Could not read index ${\n              index} twice because it was cleared after a previous read ` +\n          `(perhaps try setting clear_after_read = false?).`);\n    }\n\n    if (this.clearAfterRead) {\n      tensorWithState.cleared = true;\n    }\n\n    tensorWithState.read = true;\n    return tensorWithState.tensor;\n  }\n\n  /**\n   * Helper method to read multiple tensors from the specified indices.\n   */\n  readMany(indices: number[]): Tensor[] {\n    return indices.map(index => this.read(index));\n  }\n\n  /**\n   * Write value into the index of the TensorArray.\n   * @param index number the index to write to.\n   * @param tensor\n   */\n  write(index: number, tensor: Tensor) {\n    if (this.closed_) {\n      throw new Error(`TensorArray ${this.name} has already been closed.`);\n    }\n\n    if (index < 0 || !this.dynamicSize && index >= this.maxSize) {\n      throw new Error(`Tried to write to index ${\n          index}, but array is not resizeable and size is: ${this.maxSize}`);\n    }\n\n    const t = this.tensors[index] || {};\n\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray ${\n          this.name}: Could not write to TensorArray index ${index},\n          because the value dtype is ${\n          tensor.dtype}, but TensorArray dtype is ${this.dtype}.`);\n    }\n\n    // Set the shape for the first time write to unknow shape tensor array\n    if (this.size() === 0 &&\n        (this.elementShape == null || this.elementShape.length === 0)) {\n      this.elementShape = tensor.shape;\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensor.shape,\n        `TensorArray ${this.name}: Could not write to TensorArray index ${\n            index}.`);\n\n    if (t.read) {\n      throw new Error(\n          `TensorArray ${this.name}: Could not write to TensorArray index ${\n              index}, because it has already been read.`);\n    }\n\n    if (t.written) {\n      throw new Error(\n          `TensorArray ${this.name}: Could not write to TensorArray index ${\n              index}, because it has already been written.`);\n    }\n\n    t.tensor = tensor;\n    keep(tensor);\n    t.written = true;\n\n    this.tensors[index] = t;\n  }\n\n  /**\n   * Helper method to write multiple tensors to the specified indices.\n   */\n  writeMany(indices: number[], tensors: Tensor[]) {\n    if (indices.length !== tensors.length) {\n      throw new Error(\n          `TensorArray ${this.name}: could not write multiple tensors,` +\n          `because the index size: ${\n              indices.length} is not the same as tensors size: ${\n              tensors.length}.`);\n    }\n\n    indices.forEach((i, index) => this.write(i, tensors[index]));\n  }\n\n  /**\n   * Return selected values in the TensorArray as a packed Tensor. All of\n   * selected values must have been written and their shapes must all match.\n   * @param [indices] number[] Optional. Taking values in [0, max_value). If the\n   *    TensorArray is not dynamic, max_value=size(). If not specified returns\n   *    all tensors in the original order.\n   * @param [dtype]\n   */\n  gather(indices?: number[], dtype?: DataType): Tensor {\n    if (!!dtype && dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but gather requested dtype ${dtype}`);\n    }\n\n    if (!indices) {\n      indices = [];\n      for (let i = 0; i < this.size(); i++) {\n        indices.push(i);\n      }\n    } else {\n      indices = indices.slice(0, this.size());\n    }\n\n    if (indices.length === 0) {\n      return tensor([], [0].concat(this.elementShape));\n    }\n\n    // Read all the PersistentTensors into a vector to keep track of\n    // their memory.\n    const tensors = this.readMany(indices);\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensors[0].shape, 'TensorArray shape mismatch: ');\n\n    return stack(tensors, 0);\n  }\n\n  /**\n   * Return the values in the TensorArray as a concatenated Tensor.\n   */\n  concat(dtype?: DataType): Tensor {\n    if (!!dtype && dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but concat requested dtype ${dtype}`);\n    }\n\n    if (this.size() === 0) {\n      return tensor([], [0].concat(this.elementShape));\n    }\n\n    const indices = [];\n    for (let i = 0; i < this.size(); i++) {\n      indices.push(i);\n    }\n    // Collect all the tensors from the tensors array.\n    const tensors = this.readMany(indices);\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensors[0].shape,\n        `TensorArray shape mismatch: tensor array shape (${\n            this.elementShape}) vs first tensor shape (${tensors[0].shape})`);\n\n    return concat(tensors, 0);\n  }\n\n  /**\n   * Scatter the values of a Tensor in specific indices of a TensorArray.\n   * @param indices nummber[] values in [0, max_value). If the\n   *    TensorArray is not dynamic, max_value=size().\n   * @param tensor Tensor input tensor.\n   */\n  scatter(indices: number[], tensor: Tensor) {\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but tensor has dtype ${tensor.dtype}`);\n    }\n\n    if (indices.length !== tensor.shape[0]) {\n      throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${\n          indices.length} vs. ${tensor.shape[0]}`);\n    }\n\n    const maxIndex = Math.max(...indices);\n\n    if (!this.dynamicSize && maxIndex >= this.maxSize) {\n      throw new Error(\n          `Max index must be < array size (${maxIndex}  vs. ${this.maxSize})`);\n    }\n\n    this.writeMany(indices, unstack(tensor, 0));\n  }\n\n  /**\n   * Split the values of a Tensor into the TensorArray.\n   * @param length number[] with the lengths to use when splitting value along\n   *    its first dimension.\n   * @param tensor Tensor, the tensor to split.\n   */\n  split(length: number[], tensor: Tensor) {\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but tensor has dtype ${tensor.dtype}`);\n    }\n    let totalLength = 0;\n    const cumulativeLengths = length.map(len => {\n      totalLength += len;\n      return totalLength;\n    });\n\n    if (totalLength !== tensor.shape[0]) {\n      throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${totalLength}, and tensor's shape is: ${tensor.shape}`);\n    }\n\n    if (!this.dynamicSize && length.length !== this.maxSize) {\n      throw new Error(\n          `TensorArray's size is not equal to the size of lengths (${\n              this.maxSize} vs. ${length.length}), ` +\n          'and the TensorArray is not marked as dynamically resizeable');\n    }\n\n    const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;\n    const tensors: Tensor[] = [];\n    tidy(() => {\n      tensor = reshape(tensor, [1, totalLength, elementPerRow]);\n      for (let i = 0; i < length.length; ++i) {\n        const previousLength = (i === 0) ? 0 : cumulativeLengths[i - 1];\n        const indices = [0, previousLength, 0];\n        const sizes = [1, length[i], elementPerRow];\n        tensors[i] = reshape(slice(tensor, indices, sizes), this.elementShape);\n      }\n      return tensors;\n    });\n    const indices = [];\n    for (let i = 0; i < length.length; i++) {\n      indices[i] = i;\n    }\n    this.writeMany(indices, tensors);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {concat, DataType, keep, reshape, scalar, slice, stack, Tensor, tensor, tidy, unstack} from '@tensorflow/tfjs-core';\n\nimport {assertShapesMatchAllowUndefinedSize, inferElementShape, mergeElementShape} from './tensor_utils';\n\n/**\n * TensorList stores a container of `tf.Tensor` objects, which are accessible\n * via tensors field.\n *\n * In order to get a copy of the underlying list, use the copy method:\n * ```\n *    TensorList b = a.copy();\n *    b.tensors().pushBack(t);  // This does not modify a.tensors().\n * ```\n *\n * Note that this is not a deep copy: the memory locations of the underlying\n * tensors will still point to the same locations of the corresponding tensors\n * in the original.\n */\n\nexport class TensorList {\n  readonly idTensor: Tensor;\n  maxNumElements: number;\n\n  get id() {\n    return this.idTensor.id;\n  }\n  /**\n   *\n   * @param tensors list of tensors\n   * @param elementShape shape of each tensor, this can be a single number (any\n   * shape is allowed) or partial shape (dim = -1).\n   * @param elementDtype data type of each tensor\n   * @param maxNumElements The maximum allowed size of `tensors`. Defaults to -1\n   *   meaning that the size of `tensors` is unbounded.\n   */\n  constructor(\n      readonly tensors: Tensor[], readonly elementShape: number|number[],\n      readonly elementDtype: DataType, maxNumElements = -1) {\n    if (tensors != null) {\n      tensors.forEach(tensor => {\n        if (elementDtype !== tensor.dtype) {\n          throw new Error(`Invalid data types; op elements ${\n              elementDtype}, but list elements ${tensor.dtype}`);\n        }\n        assertShapesMatchAllowUndefinedSize(\n            elementShape, tensor.shape, 'TensorList shape mismatch: ');\n\n        keep(tensor);\n      });\n    }\n    this.idTensor = scalar(0);\n    this.maxNumElements = maxNumElements;\n    keep(this.idTensor);\n  }\n\n  /**\n   * Get a new TensorList containing a copy of the underlying tensor container.\n   */\n  copy(): TensorList {\n    return new TensorList(\n        [...this.tensors], this.elementShape, this.elementDtype);\n  }\n\n  /**\n   * Dispose the tensors and idTensor and clear the tensor list.\n   */\n  clearAndClose(keepIds?: Set<number>) {\n    this.tensors.forEach(tensor => {\n      if (keepIds == null || !keepIds.has(tensor.id)) {\n        tensor.dispose();\n      }\n    });\n    this.tensors.length = 0;\n    this.idTensor.dispose();\n  }\n  /**\n   * The size of the tensors in the tensor list.\n   */\n  size() {\n    return this.tensors.length;\n  }\n\n  /**\n   * Return a tensor that stacks a list of rank-R tf.Tensors into one rank-(R+1)\n   * tf.Tensor.\n   * @param elementShape shape of each tensor\n   * @param elementDtype data type of each tensor\n   * @param numElements the number of elements to stack\n   */\n  stack(elementShape: number[], elementDtype: DataType, numElements = -1):\n      Tensor {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          elementDtype}, but list elements ${this.elementDtype}`);\n    }\n    if (numElements !== -1 && this.tensors.length !== numElements) {\n      throw new Error(`Operation expected a list with ${\n          numElements} elements but got a list with ${\n          this.tensors.length} elements.`);\n    }\n    assertShapesMatchAllowUndefinedSize(\n        elementShape, this.elementShape, 'TensorList shape mismatch: ');\n    const outputElementShape =\n        inferElementShape(this.elementShape, this.tensors, elementShape);\n    return tidy(() => {\n      const reshapedTensors =\n          this.tensors.map(tensor => reshape(tensor, outputElementShape));\n      return stack(reshapedTensors, 0);\n    });\n  }\n\n  /**\n   * Pop a tensor from the end of the list.\n   * @param elementShape shape of the tensor\n   * @param elementDtype data type of the tensor\n   */\n  popBack(elementShape: number[], elementDtype: DataType): Tensor {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          elementDtype}, but list elements ${this.elementDtype}`);\n    }\n\n    if (this.size() === 0) {\n      throw new Error('Trying to pop from an empty list.');\n    }\n    const outputElementShape =\n        inferElementShape(this.elementShape, this.tensors, elementShape);\n    const tensor = this.tensors.pop();\n\n    assertShapesMatchAllowUndefinedSize(\n        tensor.shape, elementShape, 'TensorList shape mismatch: ');\n\n    return reshape(tensor, outputElementShape);\n  }\n\n  /**\n   * Push a tensor to the end of the list.\n   * @param tensor Tensor to be pushed.\n   */\n  pushBack(tensor: Tensor) {\n    if (tensor.dtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          tensor.dtype}, but list elements ${this.elementDtype}`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        tensor.shape, this.elementShape, 'TensorList shape mismatch: ');\n\n    if (this.maxNumElements === this.size()) {\n      throw new Error(`Trying to push element into a full list.`);\n    }\n    keep(tensor);\n    this.tensors.push(tensor);\n  }\n\n  /**\n   * Update the size of the list.\n   * @param size the new size of the list.\n   */\n  resize(size: number) {\n    if (size < 0) {\n      throw new Error(\n          `TensorListResize expects size to be non-negative. Got: ${size}`);\n    }\n\n    if (this.maxNumElements !== -1 && size > this.maxNumElements) {\n      throw new Error(`TensorListResize input size ${\n          size} is greater maxNumElement ${this.maxNumElements}.`);\n    }\n    this.tensors.length = size;\n  }\n\n  /**\n   * Retrieve the element at the provided index\n   * @param elementShape shape of the tensor\n   * @param elementDtype dtype of the tensor\n   * @param elementIndex index of the tensor\n   */\n  getItem(elementIndex: number, elementShape: number[], elementDtype: DataType):\n      Tensor {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          elementDtype}, but list elements ${this.elementDtype}`);\n    }\n    if (elementIndex < 0 || elementIndex > this.tensors.length) {\n      throw new Error(`Trying to access element ${\n          elementIndex} in a list with ${this.tensors.length} elements.`);\n    }\n\n    if (this.tensors[elementIndex] == null) {\n      throw new Error(`element at index ${elementIndex} is null.`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        this.tensors[elementIndex].shape, elementShape,\n        'TensorList shape mismatch: ');\n    const outputElementShape =\n        inferElementShape(this.elementShape, this.tensors, elementShape);\n    return reshape(this.tensors[elementIndex], outputElementShape);\n  }\n\n  /**\n   * Set the tensor at the index\n   * @param elementIndex index of the tensor\n   * @param tensor the tensor to be inserted into the list\n   */\n  setItem(elementIndex: number, tensor: Tensor) {\n    if (tensor.dtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          tensor.dtype}, but list elements ${this.elementDtype}`);\n    }\n\n    if (elementIndex < 0 ||\n        this.maxNumElements !== -1 && elementIndex >= this.maxNumElements) {\n      throw new Error(`Trying to set element ${\n          elementIndex} in a list with max ${this.maxNumElements} elements.`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensor.shape, 'TensorList shape mismatch: ');\n    keep(tensor);\n    this.tensors[elementIndex] = tensor;\n  }\n\n  /**\n   * Return selected values in the TensorList as a stacked Tensor. All of\n   * selected values must have been written and their shapes must all match.\n   * @param indices indices of tensors to gather\n   * @param elementDtype output tensor dtype\n   * @param elementShape output tensor element shape\n   */\n  gather(indices: number[], elementDtype: DataType, elementShape: number[]):\n      Tensor {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          elementDtype}, but list elements ${this.elementDtype}`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, elementShape, 'TensorList shape mismatch: ');\n\n    // When indices is greater than the size of the list, indices beyond the\n    // size of the list are ignored.\n    indices = indices.slice(0, this.size());\n    const outputElementShape =\n        inferElementShape(this.elementShape, this.tensors, elementShape);\n    if (indices.length === 0) {\n      return tensor([], [0].concat(outputElementShape));\n    }\n\n    return tidy(() => {\n      const tensors =\n          indices.map(i => reshape(this.tensors[i], outputElementShape));\n      return stack(tensors, 0);\n    });\n  }\n\n  /**\n   * Return the values in the TensorList as a concatenated Tensor.\n   * @param elementDtype output tensor dtype\n   * @param elementShape output tensor element shape\n   */\n  concat(elementDtype: DataType, elementShape: number[]): Tensor {\n    if (!!elementDtype && elementDtype !== this.elementDtype) {\n      throw new Error(`TensorList dtype is ${\n          this.elementDtype} but concat requested dtype ${elementDtype}`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, elementShape, 'TensorList shape mismatch: ');\n    const outputElementShape =\n        inferElementShape(this.elementShape, this.tensors, elementShape);\n\n    if (this.size() === 0) {\n      return tensor([], [0].concat(outputElementShape));\n    }\n    return tidy(() => {\n      const tensors = this.tensors.map(t => reshape(t, outputElementShape));\n      return concat(tensors, 0);\n    });\n  }\n}\n\n/**\n * Creates a TensorList which, when stacked, has the value of tensor.\n * @param tensor from tensor\n * @param elementShape output tensor element shape\n */\nexport function fromTensor(\n    tensor: Tensor, elementShape: number[], elementDtype: DataType) {\n  const dtype = tensor.dtype;\n  if (tensor.shape.length < 1) {\n    throw new Error(\n        `Tensor must be at least a vector, but saw shape: ${tensor.shape}`);\n  }\n  if (tensor.dtype !== elementDtype) {\n    throw new Error(`Invalid data types; op elements ${\n        tensor.dtype}, but list elements ${elementDtype}`);\n  }\n  const tensorElementShape = tensor.shape.slice(1);\n  assertShapesMatchAllowUndefinedSize(\n      tensorElementShape, elementShape, 'TensorList shape mismatch: ');\n  const tensorList: Tensor[] = unstack(tensor);\n  return new TensorList(tensorList, elementShape, dtype);\n}\n\n/**\n * Return a TensorList of the given size with empty elements.\n * @param elementShape the shape of the future elements of the list\n * @param elementDtype the desired type of elements in the list\n * @param numElements the number of elements to reserve\n */\nexport function reserve(\n    elementShape: number[], elementDtype: DataType, numElements: number) {\n  return new TensorList([], elementShape, elementDtype, numElements);\n}\n\n/**\n * Put tensors at specific indices of a stacked tensor into a TensorList.\n * @param indices list of indices on how to scatter the tensor.\n * @param tensor input tensor.\n * @param elementShape the shape of the future elements of the list\n * @param numElements the number of elements to scatter\n */\nexport function scatter(\n    tensor: Tensor, indices: number[], elementShape: number[],\n    numElements?: number): TensorList {\n  if (indices.length !== tensor.shape[0]) {\n    throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${\n        indices.length} vs. ${tensor.shape[0]}`);\n  }\n\n  const maxIndex = Math.max(...indices);\n\n  if (numElements != null && numElements !== -1 && maxIndex >= numElements) {\n    throw new Error(\n        `Max index must be < array size (${maxIndex}  vs. ${numElements})`);\n  }\n\n  const list = new TensorList([], elementShape, tensor.dtype, numElements);\n  const tensors = unstack(tensor, 0);\n  indices.forEach((value, index) => {\n    list.setItem(value, tensors[index]);\n  });\n  return list;\n}\n\n/**\n * Split the values of a Tensor into a TensorList.\n * @param length the lengths to use when splitting value along\n *    its first dimension.\n * @param tensor the tensor to split.\n * @param elementShape the shape of the future elements of the list\n */\nexport function split(\n    tensor: Tensor, length: number[], elementShape: number[]) {\n  let totalLength = 0;\n  const cumulativeLengths = length.map(len => {\n    totalLength += len;\n    return totalLength;\n  });\n\n  if (totalLength !== tensor.shape[0]) {\n    throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${totalLength}, and tensor's shape is: ${tensor.shape}`);\n  }\n\n  const shapeWithoutFirstDim = tensor.shape.slice(1);\n  const outputElementShape =\n      mergeElementShape(shapeWithoutFirstDim, elementShape);\n  const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;\n  const tensors: Tensor[] = tidy(() => {\n    const tensors = [];\n    tensor = reshape(tensor, [1, totalLength, elementPerRow]);\n    for (let i = 0; i < length.length; ++i) {\n      const previousLength = (i === 0) ? 0 : cumulativeLengths[i - 1];\n      const indices = [0, previousLength, 0];\n      const sizes = [1, length[i], elementPerRow];\n      tensors[i] = reshape(\n          slice(tensor, indices, sizes), outputElementShape as number[]);\n    }\n    tensor.dispose();\n    return tensors;\n  });\n\n  const list = new TensorList([], elementShape, tensor.dtype, length.length);\n\n  for (let i = 0; i < tensors.length; i++) {\n    list.setItem(i, tensors[i]);\n  }\n  return list;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, scalar, Tensor} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {TensorArray} from '../../executor/tensor_array';\nimport {fromTensor, reserve, scatter, split} from '../../executor/tensor_list';\nimport {InternalOpAsyncExecutor, Node} from '../types';\n\nimport {cloneTensor, getParamValue, getTensor} from './utils';\n\nexport const executeOp: InternalOpAsyncExecutor = async(\n    node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): Promise<Tensor[]> => {\n  switch (node.op) {\n    case 'If':\n    case 'StatelessIf': {\n      const thenFunc =\n          getParamValue('thenBranch', node, tensorMap, context) as string;\n      const elseFunc =\n          getParamValue('elseBranch', node, tensorMap, context) as string;\n      const cond = getParamValue('cond', node, tensorMap, context) as Tensor;\n      const args = getParamValue('args', node, tensorMap, context) as Tensor[];\n      const condValue = await cond.data();\n      if (condValue[0]) {\n        return context.functionMap[thenFunc].executeFunctionAsync(\n            args, context.tensorArrayMap, context.tensorListMap);\n      } else {\n        return context.functionMap[elseFunc].executeFunctionAsync(\n            args, context.tensorArrayMap, context.tensorListMap);\n      }\n    }\n    case 'While':\n    case 'StatelessWhile': {\n      const bodyFunc =\n          getParamValue('body', node, tensorMap, context) as string;\n      const condFunc =\n          getParamValue('cond', node, tensorMap, context) as string;\n      const args = getParamValue('args', node, tensorMap, context) as Tensor[];\n\n      // Calculate the condition of the loop\n      const condResult =\n          (await context.functionMap[condFunc].executeFunctionAsync(\n              args, context.tensorArrayMap, context.tensorListMap));\n      const argIds = args.map(tensor => tensor.id);\n      let condValue = await condResult[0].data();\n      // Dispose the intermediate tensors for condition function\n      condResult.forEach(tensor => {\n        if (!tensor.kept && argIds.indexOf(tensor.id) === -1) {\n          tensor.dispose();\n        }\n      });\n\n      let result: Tensor[] = args;\n\n      while (condValue[0]) {\n        // Record the previous result for intermediate tensor tracking\n        const origResult = result;\n        // Execution the body of the loop\n        result = await context.functionMap[bodyFunc].executeFunctionAsync(\n            result, context.tensorArrayMap, context.tensorListMap);\n        const resultIds = result.map(tensor => tensor.id);\n\n        // Dispose the intermediate tensor for body function that is not global\n        // kept, not input/output of the body function\n        origResult.forEach(tensor => {\n          if (!tensor.kept && argIds.indexOf(tensor.id) === -1 &&\n              resultIds.indexOf(tensor.id) === -1) {\n            tensor.dispose();\n          }\n        });\n\n        // Recalcuate the condition of the loop using the latest results.\n        const condResult =\n            (await context.functionMap[condFunc].executeFunctionAsync(\n                result, context.tensorArrayMap, context.tensorListMap));\n        condValue = await condResult[0].data();\n        // Dispose the intermediate tensors for condition function\n        condResult.forEach(tensor => {\n          if (!tensor.kept && argIds.indexOf(tensor.id) === -1 &&\n              resultIds.indexOf(tensor.id) === -1) {\n            tensor.dispose();\n          }\n        });\n      }\n      return result;\n    }\n    case 'LoopCond': {\n      const pred = getParamValue('pred', node, tensorMap, context) as Tensor;\n      return [cloneTensor(pred)];\n    }\n    case 'Switch': {\n      const pred = getParamValue('pred', node, tensorMap, context) as Tensor;\n      let data = getParamValue('data', node, tensorMap, context) as Tensor;\n      if (!data.kept) {\n        data = cloneTensor(data);\n      }\n      // Outputs nodes :0 => false, :1 => true\n      return (await pred.data())[0] ? [undefined, data] : [data, undefined];\n    }\n    case 'Merge': {\n      const inputName = node.inputNames.find(\n          name => getTensor(name, tensorMap, context) !== undefined);\n      if (inputName) {\n        const data = getTensor(inputName, tensorMap, context);\n        return [cloneTensor(data)];\n      }\n      return undefined;\n    }\n    case 'Enter': {\n      const frameId =\n          getParamValue('frameName', node, tensorMap, context) as string;\n      const data = getParamValue('tensor', node, tensorMap, context) as Tensor;\n      context.enterFrame(frameId);\n      return [cloneTensor(data)];\n    }\n    case 'Exit': {\n      const data = getParamValue('tensor', node, tensorMap, context) as Tensor;\n      context.exitFrame();\n      return [cloneTensor(data)];\n    }\n    case 'NextIteration': {\n      const data = getParamValue('tensor', node, tensorMap, context) as Tensor;\n      context.nextIteration();\n      return [cloneTensor(data)];\n    }\n    case 'TensorArrayV3': {\n      const size = getParamValue('size', node, tensorMap, context) as number;\n      const dtype =\n          getParamValue('dtype', node, tensorMap, context) as DataType;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const dynamicSize =\n          getParamValue('dynamicSize', node, tensorMap, context) as boolean;\n      const clearAfterRead =\n          getParamValue('clearAfterRead', node, tensorMap, context) as boolean;\n      const identicalElementShapes =\n          getParamValue('identicalElementShapes', node, tensorMap, context) as\n          boolean;\n      const name = getParamValue('name', node, tensorMap, context) as string;\n      const tensorArray = new TensorArray(\n          name, dtype, size, elementShape, identicalElementShapes, dynamicSize,\n          clearAfterRead);\n      context.addTensorArray(tensorArray);\n      return [tensorArray.idTensor, scalar(1.0)];\n    }\n    case 'TensorArrayWriteV3': {\n      const id =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const index = getParamValue('index', node, tensorMap, context) as number;\n      const writeTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const writeTensorArray = context.getTensorArray(id.id);\n      writeTensorArray.write(index, writeTensor);\n      return [writeTensorArray.idTensor];\n    }\n    case 'TensorArrayReadV3': {\n      const readId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const readIndex =\n          getParamValue('index', node, tensorMap, context) as number;\n      const readTensorArray = context.getTensorArray(readId.id);\n      return [readTensorArray.read(readIndex)];\n    }\n    case 'TensorArrayGatherV3': {\n      const gatherId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const gatherIndices =\n          getParamValue('indices', node, tensorMap, context) as number[];\n      const gatherDtype =\n          getParamValue('dtype', node, tensorMap, context) as DataType;\n      const gatherTensorArray = context.getTensorArray(gatherId.id);\n      return [gatherTensorArray.gather(gatherIndices, gatherDtype)];\n    }\n    case 'TensorArrayScatterV3': {\n      const scatterId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const scatterIndices =\n          getParamValue('indices', node, tensorMap, context) as number[];\n      const scatterTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const scatterTensorArray = context.getTensorArray(scatterId.id);\n      scatterTensorArray.scatter(scatterIndices, scatterTensor);\n      return [scatterTensorArray.idTensor];\n    }\n    case 'TensorArrayConcatV3': {\n      const concatId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const concatTensorArray = context.getTensorArray(concatId.id);\n      const concatDtype =\n          getParamValue('dtype', node, tensorMap, context) as DataType;\n      return [concatTensorArray.concat(concatDtype)];\n    }\n    case 'TensorArraySplitV3': {\n      const splitId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const splitTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const lengths =\n          getParamValue('lengths', node, tensorMap, context) as number[];\n      const splitTensorArray = context.getTensorArray(splitId.id);\n      splitTensorArray.split(lengths, splitTensor);\n      return [splitTensorArray.idTensor];\n    }\n    case 'TensorArraySizeV3': {\n      const sizeId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const sizeTensorArray = context.getTensorArray(sizeId.id);\n      return [scalar(sizeTensorArray.size(), 'int32')];\n    }\n    case 'TensorArrayCloseV3': {\n      const closeId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const closeTensorArray = context.getTensorArray(closeId.id);\n      closeTensorArray.clearAndClose();\n      return [closeTensorArray.idTensor];\n    }\n    case 'TensorListSetItem': {\n      const idTensor =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const index = getParamValue('index', node, tensorMap, context) as number;\n      const writeTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const tensorList = context.getTensorList(idTensor.id);\n      tensorList.setItem(index, writeTensor);\n      return [tensorList.idTensor];\n    }\n    case 'TensorListGetItem': {\n      const idTensor =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const readIndex =\n          getParamValue('index', node, tensorMap, context) as number;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n\n      const elementDType =\n          getParamValue('elementDType', node, tensorMap, context) as DataType;\n      const tensorList = context.getTensorList(idTensor.id);\n      return [tensorList.getItem(readIndex, elementShape, elementDType)];\n    }\n    case 'TensorListScatterV2':\n    case 'TensorListScatter': {\n      const scatterIndices =\n          getParamValue('indices', node, tensorMap, context) as number[];\n      const scatterTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const numElements =\n          getParamValue('numElements', node, tensorMap, context) as number;\n      const tensorList =\n          scatter(scatterTensor, scatterIndices, elementShape, numElements);\n      context.addTensorList(tensorList);\n      return [tensorList.idTensor];\n    }\n    case 'TensorListReserve':\n    case 'EmptyTensorList': {\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const elementDtype =\n          getParamValue('elementDType', node, tensorMap, context) as DataType;\n      let numElementsParam;\n\n      if (node.op === 'TensorListReserve') {\n        numElementsParam = 'numElements';\n      } else {\n        numElementsParam = 'maxNumElements';\n      }\n\n      const numElements =\n          getParamValue(numElementsParam, node, tensorMap, context) as number;\n\n      const tensorList = reserve(elementShape, elementDtype, numElements);\n      context.addTensorList(tensorList);\n      return [tensorList.idTensor];\n    }\n    case 'TensorListGather': {\n      const gatherId =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const gatherIndices =\n          getParamValue('indices', node, tensorMap, context) as number[];\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const elementDtype =\n          getParamValue('elementDType', node, tensorMap, context) as DataType;\n      const tensorList = context.getTensorList(gatherId.id);\n      return [tensorList.gather(gatherIndices, elementDtype, elementShape)];\n    }\n    case 'TensorListStack': {\n      const idTensor =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const elementDtype =\n          getParamValue('elementDType', node, tensorMap, context) as DataType;\n      const numElements =\n          getParamValue('numElements', node, tensorMap, context) as number;\n      const tensorList = context.getTensorList(idTensor.id);\n      return [tensorList.stack(elementShape, elementDtype, numElements)];\n    }\n    case 'TensorListFromTensor': {\n      const tensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const elementDtype =\n          getParamValue('elementDType', node, tensorMap, context) as DataType;\n      const tensorList = fromTensor(tensor, elementShape, elementDtype);\n      context.addTensorList(tensorList);\n      return [tensorList.idTensor];\n    }\n    case 'TensorListConcat': {\n      const concatId =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const tensorList = context.getTensorList(concatId.id);\n      const concatDtype =\n          getParamValue('dtype', node, tensorMap, context) as DataType;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      return [tensorList.concat(concatDtype, elementShape)];\n    }\n    case 'TensorListPushBack': {\n      const idTensor =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const writeTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const tensorList = context.getTensorList(idTensor.id);\n      tensorList.pushBack(writeTensor);\n      return [tensorList.idTensor];\n    }\n    case 'TensorListPopBack': {\n      const idTensor =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const elementDType =\n          getParamValue('elementDType', node, tensorMap, context) as DataType;\n      const tensorList = context.getTensorList(idTensor.id);\n      return [tensorList.popBack(elementShape, elementDType)];\n    }\n    case 'TensorListSplit': {\n      const splitTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const lengths =\n          getParamValue('lengths', node, tensorMap, context) as number[];\n\n      const tensorList = split(splitTensor, lengths, elementShape);\n      context.addTensorList(tensorList);\n      return [tensorList.idTensor];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'control';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Rank, Tensor, Tensor3D, Tensor4D, Tensor5D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getPadding, getParamValue} from './utils';\n\nfunction fusedConvAndDepthWiseParams(\n    node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext) {\n  const [extraOp, activationFunc] =\n      (getParamValue('fusedOps', node, tensorMap, context) as string[]);\n\n  const isBiasAdd = extraOp === 'biasadd';\n  const isPrelu = activationFunc === 'prelu';\n  const isBatchNorm = extraOp === 'fusedbatchnorm';\n\n  const numArgs =\n      (getParamValue('numArgs', node, tensorMap, context) as number);\n  if (isBiasAdd) {\n    if (isPrelu && numArgs !== 2) {\n      throw new Error(\n          'FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu ' +\n          'must have two extra arguments: bias and alpha.');\n    }\n    if (!isPrelu && numArgs !== 1) {\n      throw new Error(\n          'FusedConv2d and DepthwiseConv2d with BiasAdd must have ' +\n          'one extra argument: bias.');\n    }\n  }\n  if (isBatchNorm) {\n    throw new Error(\n        'FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported');\n  }\n  const stride = getParamValue('strides', node, tensorMap, context) as number[];\n  const pad = getPadding(node, tensorMap, context);\n  const dataFormat =\n      (getParamValue('dataFormat', node, tensorMap, context) as string)\n          .toUpperCase();\n  const dilations =\n      getParamValue('dilations', node, tensorMap, context) as number[];\n  const [biasArg, preluArg] =\n      getParamValue('args', node, tensorMap, context) as Tensor[];\n  const leakyreluAlpha =\n      getParamValue('leakyreluAlpha', node, tensorMap, context) as number;\n\n  return {\n    stride,\n    pad,\n    dataFormat,\n    dilations,\n    biasArg,\n    preluArg,\n    activationFunc,\n    leakyreluAlpha\n  };\n}\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'Conv1D': {\n          const stride =\n              getParamValue('stride', node, tensorMap, context) as number;\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const dataFormat =\n              (getParamValue('dataFormat', node, tensorMap, context) as string)\n                  .toUpperCase();\n          const dilation =\n              getParamValue('dilation', node, tensorMap, context) as number;\n          return [tfOps.conv1d(\n              getParamValue('x', node, tensorMap, context) as Tensor3D,\n              getParamValue('filter', node, tensorMap, context) as Tensor3D,\n              stride, pad as 'valid' | 'same', dataFormat as 'NWC' | 'NCW',\n              dilation)];\n        }\n        case 'Conv2D': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getPadding(node, tensorMap, context);\n          const dataFormat =\n              (getParamValue('dataFormat', node, tensorMap, context) as string)\n                  .toUpperCase();\n          const dilations =\n              getParamValue('dilations', node, tensorMap, context) as number[];\n          return [tfOps.conv2d(\n              getParamValue('x', node, tensorMap, context) as Tensor3D |\n                  Tensor4D,\n              getParamValue('filter', node, tensorMap, context) as Tensor4D,\n              [stride[1], stride[2]], pad as 'valid' | 'same',\n              dataFormat as 'NHWC' | 'NCHW', [dilations[1], dilations[2]])];\n        }\n        case '_FusedConv2D': {\n          const {\n            stride,\n            pad,\n            dataFormat,\n            dilations,\n            biasArg,\n            preluArg,\n            activationFunc,\n            leakyreluAlpha\n          } = fusedConvAndDepthWiseParams(node, tensorMap, context);\n\n          return [tfOps.fused.conv2d({\n            x: getParamValue('x', node, tensorMap, context) as Tensor3D |\n                Tensor4D,\n            filter: getParamValue('filter', node, tensorMap, context) as\n                Tensor4D,\n            strides: [stride[1], stride[2]],\n            pad: pad as 'valid' | 'same',\n            dataFormat: dataFormat as 'NHWC' | 'NCHW',\n            dilations: [dilations[1], dilations[2]],\n            bias: biasArg,\n            activation: activationFunc as tfOps.fused.Activation,\n            preluActivationWeights: preluArg,\n            leakyreluAlpha\n          })];\n        }\n\n        case 'FusedDepthwiseConv2dNative': {\n          const {\n            stride,\n            pad,\n            dataFormat,\n            dilations,\n            biasArg,\n            preluArg,\n            activationFunc,\n            leakyreluAlpha,\n          } = fusedConvAndDepthWiseParams(node, tensorMap, context);\n\n          return [tfOps.fused.depthwiseConv2d({\n            x: getParamValue('x', node, tensorMap, context) as Tensor3D |\n                Tensor4D,\n            filter: getParamValue('filter', node, tensorMap, context) as\n                Tensor4D,\n            strides: [stride[1], stride[2]],\n            pad: pad as 'valid' | 'same',\n            dataFormat: dataFormat as 'NHWC' | 'NCHW',\n            dilations: [dilations[1], dilations[2]],\n            bias: biasArg,\n            activation: activationFunc as tfOps.fused.Activation,\n            preluActivationWeights: preluArg,\n            leakyreluAlpha\n          })];\n        }\n        case 'Conv2DBackpropInput':\n        case 'Conv2dTranspose': {\n          const shape = getParamValue(\n                            'outputShape', node, tensorMap,\n                            context) as [number, number, number] |\n              [number, number, number, number];\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getPadding(node, tensorMap, context);\n          return [tfOps.conv2dTranspose(\n              getParamValue('x', node, tensorMap, context) as Tensor3D |\n                  Tensor4D,\n              getParamValue('filter', node, tensorMap, context) as Tensor4D,\n              shape, [stride[1], stride[2]], pad as 'valid' | 'same')];\n        }\n        case 'DepthwiseConv2dNative':\n        case 'DepthwiseConv2d': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getPadding(node, tensorMap, context);\n          const dilations =\n              getParamValue('dilations', node, tensorMap, context) as number[];\n          const dataFormat =\n              (getParamValue('dataFormat', node, tensorMap, context) as string)\n                  .toUpperCase();\n\n          return [tfOps.depthwiseConv2d(\n              getParamValue('input', node, tensorMap, context) as Tensor3D |\n                  Tensor4D,\n              getParamValue('filter', node, tensorMap, context) as Tensor4D,\n              [stride[1], stride[2]], pad as 'valid' | 'same',\n              dataFormat as 'NHWC' | 'NCHW', [dilations[1], dilations[2]])];\n        }\n        case 'Conv3D': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const dataFormat =\n              (getParamValue('dataFormat', node, tensorMap, context) as string)\n                  .toUpperCase();\n          const dilations =\n              getParamValue('dilations', node, tensorMap, context) as number[];\n          return [tfOps.conv3d(\n              getParamValue('x', node, tensorMap, context) as Tensor4D |\n                  Tensor<Rank.R5>,\n              getParamValue('filter', node, tensorMap, context) as\n                  Tensor<Rank.R5>,\n              [stride[1], stride[2], stride[3]], pad as 'valid' | 'same',\n              dataFormat as 'NDHWC' | 'NCDHW',\n              [dilations[1], dilations[2], dilations[3]])];\n        }\n        case 'AvgPool': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const kernelSize =\n              getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n          return [tfOps.avgPool(\n              getParamValue('x', node, tensorMap, context) as Tensor3D |\n                  Tensor4D,\n              [kernelSize[1], kernelSize[2]], [stride[1], stride[2]],\n              pad as 'valid' | 'same')];\n        }\n        case 'MaxPool': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const kernelSize =\n              getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n          return [tfOps.maxPool(\n              getParamValue('x', node, tensorMap, context) as Tensor3D |\n                  Tensor4D,\n              [kernelSize[1], kernelSize[2]], [stride[1], stride[2]],\n              pad as 'valid' | 'same')];\n        }\n        case 'MaxPoolWithArgmax': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const kernelSize =\n              getParamValue('kernelSize', node, tensorMap, context) as number[];\n          const includeBatchInIndex =\n              getParamValue('includeBatchInIndex', node, tensorMap, context) as\n              boolean;\n          const {result, indexes} = tfOps.maxPoolWithArgmax(\n              getParamValue('x', node, tensorMap, context) as Tensor4D,\n              [kernelSize[1], kernelSize[2]], [stride[1], stride[2]],\n              pad as 'valid' | 'same', includeBatchInIndex);\n          return [result, indexes];\n        }\n        case 'AvgPool3D': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const kernelSize =\n              getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n          return [tfOps.avgPool3d(\n              getParamValue('x', node, tensorMap, context) as Tensor5D,\n              [kernelSize[1], kernelSize[2], kernelSize[3]],\n              [stride[1], stride[2], stride[3]], pad as 'valid' | 'same')];\n        }\n\n        case 'MaxPool3D': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const kernelSize =\n              getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n          return [tfOps.maxPool3d(\n              getParamValue('x', node, tensorMap, context) as Tensor5D,\n              [kernelSize[1], kernelSize[2], kernelSize[3]],\n              [stride[1], stride[2], stride[3]], pad as 'valid' | 'same')];\n        }\n\n        case 'Dilation2D': {\n          const strides =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const dilations =\n              getParamValue('dilations', node, tensorMap, context) as number[];\n\n          // strides: [1, stride_height, stride_width, 1].\n          const strideHeight = strides[1];\n          const strideWidth = strides[2];\n\n          // dilations: [1, dilation_height, dilation_width, 1].\n          const dilationHeight = dilations[1];\n          const dilationWidth = dilations[2];\n\n          return [tfOps.dilation2d(\n              getParamValue('x', node, tensorMap, context) as Tensor3D |\n                  Tensor4D,\n              getParamValue('filter', node, tensorMap, context) as Tensor3D,\n              [strideHeight, strideWidth], pad as 'valid' | 'same',\n              [dilationHeight, dilationWidth], 'NHWC' /* dataFormat */)];\n        }\n\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'convolution';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor, Tensor1D, Tensor2D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpAsyncExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nfunction nmsParams(\n    node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext) {\n  const boxes = getParamValue('boxes', node, tensorMap, context) as Tensor;\n  const scores = getParamValue('scores', node, tensorMap, context) as Tensor;\n  const maxOutputSize =\n      getParamValue('maxOutputSize', node, tensorMap, context) as number;\n  const iouThreshold =\n      getParamValue('iouThreshold', node, tensorMap, context) as number;\n  const scoreThreshold =\n      getParamValue('scoreThreshold', node, tensorMap, context) as number;\n  const softNmsSigma =\n      getParamValue('softNmsSigma', node, tensorMap, context) as number;\n\n  return {\n    boxes,\n    scores,\n    maxOutputSize,\n    iouThreshold,\n    scoreThreshold,\n    softNmsSigma\n  };\n}\n\nexport const executeOp: InternalOpAsyncExecutor = async(\n    node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): Promise<Tensor[]> => {\n  switch (node.op) {\n    case 'NonMaxSuppressionV5': {\n      const {\n        boxes,\n        scores,\n        maxOutputSize,\n        iouThreshold,\n        scoreThreshold,\n        softNmsSigma\n      } = nmsParams(node, tensorMap, context);\n\n      const result = await tfOps.image.nonMaxSuppressionWithScoreAsync(\n          boxes as Tensor2D, scores as Tensor1D, maxOutputSize, iouThreshold,\n          scoreThreshold, softNmsSigma);\n\n      return [result.selectedIndices, result.selectedScores];\n    }\n    case 'NonMaxSuppressionV4': {\n      const {boxes, scores, maxOutputSize, iouThreshold, scoreThreshold} =\n          nmsParams(node, tensorMap, context);\n\n      const padToMaxOutputSize =\n          getParamValue('padToMaxOutputSize', node, tensorMap, context) as\n          boolean;\n\n      const result = await tfOps.image.nonMaxSuppressionPaddedAsync(\n          boxes as Tensor2D, scores as Tensor1D, maxOutputSize, iouThreshold,\n          scoreThreshold, padToMaxOutputSize);\n\n      return [result.selectedIndices, result.validOutputs];\n    }\n    case 'NonMaxSuppressionV3':\n    case 'NonMaxSuppressionV2': {\n      const {boxes, scores, maxOutputSize, iouThreshold, scoreThreshold} =\n          nmsParams(node, tensorMap, context);\n\n      return [await tfOps.image.nonMaxSuppressionAsync(\n          boxes as Tensor2D, scores as Tensor1D, maxOutputSize, iouThreshold,\n          scoreThreshold)];\n    }\n    case 'Where': {\n      const condition = tfOps.cast(\n          (getParamValue('condition', node, tensorMap, context) as Tensor),\n          'bool');\n      const result = [await tfOps.whereAsync(condition)];\n      condition.dispose();\n      return result;\n    }\n    case 'ListDiff': {\n      return tfOps.setdiff1dAsync(\n          getParamValue('x', node, tensorMap, context) as Tensor,\n          getParamValue('y', node, tensorMap, context) as Tensor);\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'dynamic';\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {DataType, keep, scalar, stack, Tensor, tidy, unstack, util} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\n/**\n * Hashtable contains a set of tensors, which can be accessed by key.\n */\nexport class HashTable {\n  readonly handle: Tensor;\n\n  // tslint:disable-next-line: no-any\n  private tensorMap: Map<any, Tensor>;\n\n  get id() {\n    return this.handle.id;\n  }\n\n  /**\n   * Constructor of HashTable. Creates a hash table.\n   *\n   * @param keyDType `dtype` of the table keys.\n   * @param valueDType `dtype` of the table values.\n   */\n  constructor(readonly keyDType: DataType, readonly valueDType: DataType) {\n    this.handle = scalar(0);\n    // tslint:disable-next-line: no-any\n    this.tensorMap = new Map<any, Tensor>();\n\n    keep(this.handle);\n  }\n\n  /**\n   * Dispose the tensors and handle and clear the hashtable.\n   */\n  clearAndClose() {\n    this.tensorMap.forEach(value => value.dispose());\n    this.tensorMap.clear();\n    this.handle.dispose();\n  }\n\n  /**\n   * The number of items in the hash table.\n   */\n  size(): number {\n    return this.tensorMap.size;\n  }\n\n  /**\n   * The number of items in the hash table as a rank-0 tensor.\n   */\n  tensorSize(): Tensor {\n    return tfOps.scalar(this.size(), 'int32');\n  }\n\n  /**\n   * Replaces the contents of the table with the specified keys and values.\n   * @param keys Keys to store in the hashtable.\n   * @param values Values to store in the hashtable.\n   */\n  async import(keys: Tensor, values: Tensor): Promise<Tensor> {\n    this.checkKeyAndValueTensor(keys, values);\n\n    // We only store the primitive values of the keys, this allows lookup\n    // to be O(1).\n    const $keys = await keys.data();\n\n    // Clear the hashTable before inserting new values.\n    this.tensorMap.forEach(value => value.dispose());\n    this.tensorMap.clear();\n\n    return tidy(() => {\n      const $values = unstack(values);\n\n      const keysLength = $keys.length;\n      const valuesLength = $values.length;\n\n      util.assert(\n          keysLength === valuesLength,\n          () => `The number of elements doesn't match, keys has ` +\n              `${keysLength} elements, the values has ${valuesLength} ` +\n              `elements.`);\n\n      for (let i = 0; i < keysLength; i++) {\n        const key = $keys[i];\n        const value = $values[i];\n\n        keep(value);\n        this.tensorMap.set(key, value);\n      }\n\n      return this.handle;\n    });\n  }\n\n  /**\n   * Looks up keys in a hash table, outputs the corresponding values.\n   *\n   * Performs batch lookups, for every element in the key tensor, `find`\n   * stacks the corresponding value into the return tensor.\n   *\n   * If an element is not present in the table, the given `defaultValue` is\n   * used.\n   *\n   * @param keys Keys to look up. Must have the same type as the keys of the\n   *     table.\n   * @param defaultValue The scalar `defaultValue` is the value output for keys\n   *     not present in the table. It must also be of the same type as the\n   *     table values.\n   */\n  async find(keys: Tensor, defaultValue: Tensor): Promise<Tensor> {\n    this.checkKeyAndValueTensor(keys, defaultValue);\n\n    const $keys = await keys.data();\n\n    return tidy(() => {\n      const result: Tensor[] = [];\n\n      for (let i = 0; i < $keys.length; i++) {\n        const key = $keys[i];\n\n        const value = this.findWithDefault(key, defaultValue);\n        result.push(value);\n      }\n\n      return stack(result);\n    });\n  }\n\n  // tslint:disable-next-line: no-any\n  private findWithDefault(key: any, defaultValue: Tensor): Tensor {\n    const result = this.tensorMap.get(key);\n\n    return result != null ? result : defaultValue;\n  }\n\n  private checkKeyAndValueTensor(key: Tensor, value: Tensor) {\n    if (key.dtype !== this.keyDType) {\n      throw new Error(\n          `Expect key dtype ${this.keyDType}, but got ` +\n          `${key.dtype}`);\n    }\n\n    if (value.dtype !== this.valueDType) {\n      throw new Error(\n          `Expect value dtype ${this.valueDType}, but got ` +\n          `${value.dtype}`);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../data/types';\nimport {ExecutionContext} from '../executor/execution_context';\nimport {ResourceManager} from '../executor/resource_manager';\n\nimport {NodeValueImpl} from './custom_op/node_value_impl';\nimport {getRegisteredOp} from './custom_op/register';\nimport * as arithmetic from './executors/arithmetic_executor';\nimport * as basicMath from './executors/basic_math_executor';\nimport * as control from './executors/control_executor';\nimport * as convolution from './executors/convolution_executor';\nimport * as creation from './executors/creation_executor';\nimport * as dynamic from './executors/dynamic_executor';\nimport * as evaluation from './executors/evaluation_executor';\nimport * as graph from './executors/graph_executor';\nimport * as hashTable from './executors/hash_table_executor';\nimport * as image from './executors/image_executor';\nimport * as logical from './executors/logical_executor';\nimport * as matrices from './executors/matrices_executor';\nimport * as normalization from './executors/normalization_executor';\nimport * as reduction from './executors/reduction_executor';\nimport * as sliceJoin from './executors/slice_join_executor';\nimport * as spectral from './executors/spectral_executor';\nimport * as transformation from './executors/transformation_executor';\nimport {Node} from './types';\n\n/**\n * Executes the op defined by the node object.\n * @param node\n * @param tensorMap contains tensors for executed nodes and weights\n * @param context contains tensors and information for running the current node.\n * @param resourceManager Optional. Contains global resources of the model.\n */\nexport function executeOp(\n    node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext,\n    resourceManager?: ResourceManager): tfc.Tensor[]|Promise<tfc.Tensor[]> {\n  const value =\n      ((node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext) => {\n        switch (node.category) {\n          case 'arithmetic':\n            return tfc.tidy(\n                () => arithmetic.executeOp(node, tensorMap, context));\n          case 'basic_math':\n            return tfc.tidy(\n                () => basicMath.executeOp(node, tensorMap, context));\n          case 'control':\n            return control.executeOp(node, tensorMap, context);\n          case 'convolution':\n            return tfc.tidy(\n                () => convolution.executeOp(node, tensorMap, context));\n          case 'creation':\n            return tfc.tidy(() => creation.executeOp(node, tensorMap, context));\n          case 'dynamic':\n            return dynamic.executeOp(node, tensorMap, context);\n          case 'evaluation':\n            return tfc.tidy(\n                () => evaluation.executeOp(node, tensorMap, context));\n          case 'image':\n            return tfc.tidy(() => image.executeOp(node, tensorMap, context));\n          case 'graph':\n            return tfc.tidy(() => graph.executeOp(node, tensorMap, context));\n          case 'logical':\n            return tfc.tidy(() => logical.executeOp(node, tensorMap, context));\n          case 'matrices':\n            return tfc.tidy(() => matrices.executeOp(node, tensorMap, context));\n          case 'normalization':\n            return tfc.tidy(\n                () => normalization.executeOp(node, tensorMap, context));\n          case 'reduction':\n            return tfc.tidy(\n                () => reduction.executeOp(node, tensorMap, context));\n          case 'slice_join':\n            return tfc.tidy(\n                () => sliceJoin.executeOp(node, tensorMap, context));\n          case 'spectral':\n            return tfc.tidy(() => spectral.executeOp(node, tensorMap, context));\n          case 'transformation':\n            return tfc.tidy(\n                () => transformation.executeOp(node, tensorMap, context));\n          case 'hash_table':\n            return hashTable.executeOp(\n                node, tensorMap, context, resourceManager);\n          case 'custom':\n            const opMapper = getRegisteredOp(node.op);\n            if (opMapper && opMapper.customExecutor) {\n              return opMapper.customExecutor(\n                  new NodeValueImpl(node, tensorMap, context));\n            } else {\n              throw TypeError(`Custom op ${node.op} is not registered.`);\n            }\n          default:\n            throw TypeError(\n                `Unknown op '${node.op}'. File an issue at ` +\n                `https://github.com/tensorflow/tfjs/issues so we can add it` +\n                `, or register a custom execution with tf.registerOp()`);\n        }\n      })(node, tensorMap, context);\n  if (tfc.util.isPromise(value)) {\n    return (value as Promise<tfc.Tensor>).then((data) => [].concat(data));\n  }\n  return [].concat(value);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'BiasAdd':\n        case 'AddV2':\n        case 'Add': {\n          return [tfOps.add(\n              (getParamValue('a', node, tensorMap, context) as Tensor),\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'AddN': {\n          return [tfOps.addN((\n              getParamValue('tensors', node, tensorMap, context) as Tensor[]))];\n        }\n        case 'FloorMod':\n        case 'Mod':\n          return [tfOps.mod(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        case 'Mul':\n          return [tfOps.mul(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        case 'RealDiv':\n        case 'Div': {\n          return [tfOps.div(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'DivNoNan': {\n          return [tfOps.divNoNan(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'FloorDiv': {\n          return [tfOps.floorDiv(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'Sub': {\n          return [tfOps.sub(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'Minimum': {\n          return [tfOps.minimum(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'Maximum': {\n          return [tfOps.maximum(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'Pow': {\n          return [tfOps.pow(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'SquaredDifference': {\n          return [tfOps.squaredDifference(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'arithmetic';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue, getTensor} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'Abs':\n        case 'ComplexAbs':\n          return [tfOps.abs(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Acos':\n          return [tfOps.acos(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Acosh':\n          return [tfOps.acosh(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Asin':\n          return [tfOps.asin(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Asinh':\n          return [tfOps.asinh(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Atan':\n          return [tfOps.atan(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Atan2':\n          return [tfOps.atan2(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('y', node, tensorMap, context) as Tensor)];\n        case 'Atanh':\n          return [tfOps.atanh(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Ceil':\n          return [tfOps.ceil(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Complex':\n          return [tfOps.complex(\n              getParamValue('real', node, tensorMap, context) as Tensor,\n              getParamValue('imag', node, tensorMap, context) as Tensor)];\n        case 'Cos':\n          return [tfOps.cos(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Cosh':\n          return [tfOps.cosh(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Elu':\n          return [tfOps.elu(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Erf':\n          return [tfOps.erf(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Exp':\n          return [tfOps.exp(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Expm1': {\n          return [tfOps.expm1(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Floor':\n          return [tfOps.floor(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Log':\n          return [tfOps.log(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Log1p': {\n          return [tfOps.log1p(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Imag':\n          return [tfOps.imag(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n\n        case 'Neg':\n          return [tfOps.neg(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Reciprocal': {\n          return [tfOps.reciprocal(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Real':\n          return [tfOps.real(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Relu':\n          return [tfOps.relu(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Round': {\n          return [tfOps.round(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Selu':\n          return [tfOps.selu(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Sigmoid':\n          return [tfOps.sigmoid(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Sin':\n          return [tfOps.sin(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Sign': {\n          return [tfOps.sign(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Sinh': {\n          return [tfOps.sinh(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Softplus': {\n          return [tfOps.softplus(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Sqrt': {\n          return [tfOps.sqrt(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Square': {\n          return [tfOps.square(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Tanh': {\n          return [tfOps.tanh(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Tan':\n          return [tfOps.tan(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'ClipByValue':\n          return [tfOps.clipByValue(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('clipValueMin', node, tensorMap, context) as number,\n              getParamValue('clipValueMax', node, tensorMap, context) as\n                  number)];\n        case 'Relu6':\n          return [tfOps.relu6(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Rsqrt':\n          return [tfOps.rsqrt(\n              getTensor(node.inputNames[0], tensorMap, context))];\n        case 'Prod':\n          return [tfOps.prod(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('axes', node, tensorMap, context) as number[])];\n        case 'LeakyRelu':\n          return [tfOps.leakyRelu(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('alpha', node, tensorMap, context) as number)];\n        case 'Prelu':\n          return [tfOps.prelu(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('alpha', node, tensorMap, context) as Tensor)];\n        case 'IsNan':\n          return [tfOps.isNaN(\n              getTensor(node.inputNames[0], tensorMap, context))];\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'basic_math';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, Tensor, Tensor1D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'Fill': {\n          const shape =\n              getParamValue('shape', node, tensorMap, context) as number[];\n          const dtype =\n              getParamValue('dtype', node, tensorMap, context) as DataType;\n          const value =\n              getParamValue('value', node, tensorMap, context) as number;\n          return [tfOps.fill(shape, value, dtype)];\n        }\n        case 'LinSpace': {\n          const start =\n              getParamValue('start', node, tensorMap, context) as number;\n          const stop =\n              getParamValue('stop', node, tensorMap, context) as number;\n          const num = getParamValue('num', node, tensorMap, context) as number;\n          return [tfOps.linspace(start, stop, num)];\n        }\n        case 'Multinomial': {\n          const logits =\n              getParamValue('logits', node, tensorMap, context) as Tensor1D;\n          const numSamples =\n              getParamValue('numSamples', node, tensorMap, context) as number;\n          const seed =\n              getParamValue('seed', node, tensorMap, context) as number;\n          return [tfOps.multinomial(logits, numSamples, seed)];\n        }\n        case 'OneHot': {\n          const indices =\n              getParamValue('indices', node, tensorMap, context) as Tensor1D;\n          const depth =\n              getParamValue('depth', node, tensorMap, context) as number;\n          const onValue =\n              getParamValue('onValue', node, tensorMap, context) as number;\n          const offValue =\n              getParamValue('offValue', node, tensorMap, context) as number;\n          return [tfOps.oneHot(indices, depth, onValue, offValue)];\n        }\n        case 'Ones': {\n          return [tfOps.ones(\n              getParamValue('shape', node, tensorMap, context) as number[],\n              getParamValue('dtype', node, tensorMap, context) as DataType)];\n        }\n        case 'OnesLike': {\n          return [tfOps.onesLike(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'RandomUniform': {\n          return [tfOps.randomUniform(\n              // tslint:disable-next-line:no-any\n              getParamValue('shape', node, tensorMap, context) as any,\n              getParamValue('minval', node, tensorMap, context) as number,\n              getParamValue('maxval', node, tensorMap, context) as number,\n              getParamValue('dtype', node, tensorMap, context) as DataType)];\n        }\n        case 'Range': {\n          const start =\n              getParamValue('start', node, tensorMap, context) as number;\n          const stop =\n              getParamValue('stop', node, tensorMap, context) as number;\n          const step =\n              getParamValue('step', node, tensorMap, context) as number;\n          return [tfOps.range(\n              start, stop, step,\n              getParamValue('dtype', node, tensorMap, context) as 'float32' |\n                  'int32')];\n        }\n        case 'TruncatedNormal': {\n          const shape =\n              getParamValue('shape', node, tensorMap, context) as number[];\n          const mean =\n              getParamValue('mean', node, tensorMap, context) as number;\n          const stdDev =\n              getParamValue('stdDev', node, tensorMap, context) as number;\n          const seed =\n              getParamValue('seed', node, tensorMap, context) as number;\n          return [tfOps.truncatedNormal(\n              shape, mean, stdDev,\n              getParamValue('dtype', node, tensorMap, context) as 'float32' |\n                  'int32',\n              seed)];\n        }\n        case 'Zeros': {\n          return [tfOps.zeros(\n              getParamValue('shape', node, tensorMap, context) as number[],\n              getParamValue('dtype', node, tensorMap, context) as DataType)];\n        }\n        case 'ZerosLike': {\n          return [tfOps.zerosLike(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'creation';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext):\n        Tensor[] => {\n          switch (node.op) {\n            case 'TopKV2': {\n              const x = getParamValue('x', node, tensorMap, context) as Tensor;\n              const k = getParamValue('k', node, tensorMap, context) as number;\n              const sorted =\n                  getParamValue('sorted', node, tensorMap, context) as boolean;\n              const result = tfOps.topk(x, k, sorted);\n              return [result.values, result.indices];\n            }\n            case 'Unique': {\n              const x = getParamValue('x', node, tensorMap, context) as Tensor;\n              const result = tfOps.unique(x);\n              return [result.values, result.indices];\n            }\n            case 'UniqueV2': {\n              const x = getParamValue('x', node, tensorMap, context) as Tensor;\n              const axis =\n                  getParamValue('axis', node, tensorMap, context) as number;\n              const result = tfOps.unique(x, axis);\n              return [result.values, result.indices];\n            }\n            default:\n              throw TypeError(`Node type ${node.op} is not implemented`);\n          }\n        };\n\nexport const CATEGORY = 'evaluation';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor, Tensor1D, Tensor2D, Tensor3D, Tensor4D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'ResizeBilinear': {\n          const images =\n              getParamValue('images', node, tensorMap, context) as Tensor;\n          const size =\n              getParamValue('size', node, tensorMap, context) as number[];\n          const alignCorners =\n              getParamValue('alignCorners', node, tensorMap, context) as\n              boolean;\n          const halfPixelCenters =\n              getParamValue('halfPixelCenters', node, tensorMap, context) as\n              boolean;\n          return [tfOps.image.resizeBilinear(\n              images as Tensor3D | Tensor4D, [size[0], size[1]], alignCorners,\n              halfPixelCenters)];\n        }\n        case 'ResizeNearestNeighbor': {\n          const images =\n              getParamValue('images', node, tensorMap, context) as Tensor;\n          const size =\n              getParamValue('size', node, tensorMap, context) as number[];\n          const alignCorners =\n              getParamValue('alignCorners', node, tensorMap, context) as\n              boolean;\n          const halfPixelCenters =\n              getParamValue('halfPixelCenters', node, tensorMap, context) as\n              boolean;\n          return [tfOps.image.resizeNearestNeighbor(\n              images as Tensor3D | Tensor4D, [size[0], size[1]], alignCorners,\n              halfPixelCenters)];\n        }\n        case 'CropAndResize': {\n          const image =\n              getParamValue('image', node, tensorMap, context) as Tensor;\n          const boxes =\n              getParamValue('boxes', node, tensorMap, context) as Tensor;\n          const boxInd =\n              getParamValue('boxInd', node, tensorMap, context) as Tensor;\n          const cropSize =\n              getParamValue('cropSize', node, tensorMap, context) as number[];\n          const method =\n              getParamValue('method', node, tensorMap, context) as string;\n          const extrapolationValue =\n              getParamValue('extrapolationValue', node, tensorMap, context) as\n              number;\n          return [tfOps.image.cropAndResize(\n              image as Tensor4D, boxes as Tensor2D, boxInd as Tensor1D,\n              cropSize as [number, number], method as 'bilinear' | 'nearest',\n              extrapolationValue)];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'image';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {cloneTensor, getParamValue, getTensor} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'Const': {\n          return tensorMap[node.name];\n        }\n        case 'PlaceholderWithDefault':\n          const def =\n              getParamValue('default', node, tensorMap, context) as Tensor;\n          return [getTensor(node.name, tensorMap, context) || def];\n        case 'Placeholder':\n          return [getTensor(node.name, tensorMap, context)];\n        case 'Identity':\n        case 'StopGradient':\n        case 'FakeQuantWithMinMaxVars': {  // This op is currently ignored.\n          const data = getParamValue('x', node, tensorMap, context) as Tensor;\n          return [cloneTensor(data)];\n        }\n        case 'IdentityN':\n          return (getParamValue('x', node, tensorMap, context) as Tensor[])\n              .map((t: Tensor) => cloneTensor(t));\n        case 'Snapshot':\n          const snapshot =\n              (getParamValue('x', node, tensorMap, context) as Tensor);\n          return [cloneTensor(snapshot)];\n        case 'Shape':\n          return [tfOps.tensor1d(\n              (getParamValue('x', node, tensorMap, context) as Tensor).shape,\n              'int32')];\n        case 'ShapeN':\n          return (getParamValue('x', node, tensorMap, context) as Tensor[])\n              .map((t: Tensor) => tfOps.tensor1d(t.shape));\n        case 'Size':\n          return [tfOps.scalar(\n              (getParamValue('x', node, tensorMap, context) as Tensor).size,\n              'int32')];\n        case 'Rank':\n          return [tfOps.scalar(\n              (getParamValue('x', node, tensorMap, context) as Tensor).rank,\n              'int32')];\n        case 'NoOp':\n          return [tfOps.scalar(1)];\n        case 'Print':\n          const input = getParamValue('x', node, tensorMap, context) as Tensor;\n          const data =\n              getParamValue('data', node, tensorMap, context) as Tensor[];\n          const message =\n              getParamValue('message', node, tensorMap, context) as string;\n          const summarize =\n              getParamValue('summarize', node, tensorMap, context) as number;\n          console.warn(\n              'The graph has a tf.print() operation,' +\n              'usually used for debugging, which slows down performance.');\n          console.log(message);\n          for (let i = 0; i < data.length; i++) {\n            console.log(Array.prototype.slice.call(data[i].dataSync())\n                            .slice(0, summarize));\n          }\n          return [input];\n\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'graph';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'Equal': {\n          return [tfOps.equal(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'NotEqual': {\n          return [tfOps.notEqual(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'Greater': {\n          return [tfOps.greater(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'GreaterEqual': {\n          return [tfOps.greaterEqual(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'Less': {\n          return [tfOps.less(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'LessEqual': {\n          return [tfOps.lessEqual(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'LogicalAnd': {\n          return [tfOps.logicalAnd(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'LogicalNot': {\n          return [tfOps.logicalNot(\n              getParamValue('a', node, tensorMap, context) as Tensor)];\n        }\n        case 'LogicalOr': {\n          return [tfOps.logicalOr(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'Select':\n        case 'SelectV2': {\n          return [tfOps.where(\n              getParamValue('condition', node, tensorMap, context) as Tensor,\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'logical';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor, Tensor2D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'BatchMatMul':\n        case 'BatchMatMulV2':\n        case 'MatMul':\n          return [tfOps.matMul(\n              getParamValue('a', node, tensorMap, context) as Tensor2D,\n              getParamValue('b', node, tensorMap, context) as Tensor2D,\n              getParamValue('transposeA', node, tensorMap, context) as boolean,\n              getParamValue('transposeB', node, tensorMap, context) as\n                  boolean)];\n\n        case 'Einsum':\n          return [tfOps.einsum(\n              getParamValue('equation', node, tensorMap, context) as string,\n              ...getParamValue('tensors', node, tensorMap, context) as\n                  Tensor[])];\n\n        case 'Transpose':\n          return [tfOps.transpose(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('perm', node, tensorMap, context) as number[])];\n\n        case '_FusedMatMul':\n          const [extraOp, activationFunc] =\n              (getParamValue('fusedOps', node, tensorMap, context) as string[]);\n\n          const isBiasAdd = extraOp === 'biasadd';\n          const isPrelu = activationFunc === 'prelu';\n\n          const numArgs =\n              (getParamValue('numArgs', node, tensorMap, context) as number);\n          const leakyreluAlpha =\n              getParamValue('leakyreluAlpha', node, tensorMap, context) as\n              number;\n\n          if (isBiasAdd) {\n            if (isPrelu && numArgs !== 2) {\n              throw new Error(\n                  'Fused MatMul with BiasAdd and Prelu must have two ' +\n                  'extra arguments: bias and alpha.');\n            }\n            if (!isPrelu && numArgs !== 1) {\n              throw new Error(\n                  'Fused MatMul with BiasAdd must have one extra argument: bias.');\n            }\n          }\n          const [biasArg, preluArg] =\n              getParamValue('args', node, tensorMap, context) as Tensor[];\n          return [tfOps.fused.matMul({\n            a: getParamValue('a', node, tensorMap, context) as Tensor2D,\n            b: getParamValue('b', node, tensorMap, context) as Tensor2D,\n            transposeA: getParamValue('transposeA', node, tensorMap, context) as\n                boolean,\n            transposeB: getParamValue('transposeB', node, tensorMap, context) as\n                boolean,\n            bias: biasArg,\n            activation: activationFunc as tfOps.fused.Activation,\n            preluActivationWeights: preluArg,\n            leakyreluAlpha\n          })];\n\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'matrices';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Scalar, Tensor, Tensor3D, Tensor4D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'FusedBatchNorm':\n        case 'FusedBatchNormV2': {\n          return [tfOps.batchNorm(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('mean', node, tensorMap, context) as Tensor,\n              getParamValue('variance', node, tensorMap, context) as Tensor,\n              getParamValue('offset', node, tensorMap, context) as Tensor,\n              getParamValue('scale', node, tensorMap, context) as Tensor,\n              getParamValue('epsilon', node, tensorMap, context) as number)];\n        }\n        case 'FusedBatchNormV3': {\n          return [tfOps.batchNorm(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('mean', node, tensorMap, context) as Tensor,\n              getParamValue('variance', node, tensorMap, context) as Tensor,\n              getParamValue('offset', node, tensorMap, context) as Tensor,\n              getParamValue('scale', node, tensorMap, context) as Tensor,\n              getParamValue('epsilon', node, tensorMap, context) as number)];\n        }\n        case 'LRN': {\n          return [tfOps.localResponseNormalization(\n              getParamValue('x', node, tensorMap, context) as Tensor3D |\n                  Tensor4D,\n              getParamValue('radius', node, tensorMap, context) as number,\n              getParamValue('bias', node, tensorMap, context) as number,\n              getParamValue('alpha', node, tensorMap, context) as number,\n              getParamValue('beta', node, tensorMap, context) as number)];\n        }\n        case 'Softmax': {\n          return [tfOps.softmax(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'LogSoftmax': {\n          return [tfOps.logSoftmax(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'SparseToDense': {\n          return [tfOps.sparseToDense(\n              getParamValue('sparseIndices', node, tensorMap, context) as\n                  Tensor,\n              getParamValue('outputShape', node, tensorMap, context) as Tensor,\n              getParamValue('sparseValues', node, tensorMap, context) as\n                  number[],\n              getParamValue('defaultValue', node, tensorMap, context) as\n                  Scalar)];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'normalization';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor, Tensor1D, Tensor2D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'Max': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          const keepDims =\n              getParamValue('keepDims', node, tensorMap, context) as boolean;\n          return [tfOps.max(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis,\n              keepDims)];\n        }\n        case 'Mean': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          const keepDims =\n              getParamValue('keepDims', node, tensorMap, context) as boolean;\n          return [tfOps.mean(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis,\n              keepDims)];\n        }\n        case 'Min': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          const keepDims =\n              getParamValue('keepDims', node, tensorMap, context) as boolean;\n          return [tfOps.min(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis,\n              keepDims)];\n        }\n        case 'Sum': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          const keepDims =\n              getParamValue('keepDims', node, tensorMap, context) as boolean;\n          return [tfOps.sum(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis,\n              keepDims)];\n        }\n        case 'All': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          const keepDims =\n              getParamValue('keepDims', node, tensorMap, context) as boolean;\n          return [tfOps.all(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis,\n              keepDims)];\n        }\n        case 'Any': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          const keepDims =\n              getParamValue('keepDims', node, tensorMap, context) as boolean;\n          return [tfOps.any(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis,\n              keepDims)];\n        }\n        case 'ArgMax': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          return [tfOps.argMax(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis)];\n        }\n        case 'ArgMin': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          return [tfOps.argMin(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis)];\n        }\n        case 'Prod': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          const keepDims =\n              getParamValue('keepDims', node, tensorMap, context) as boolean;\n          return [tfOps.prod(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis,\n              keepDims)];\n        }\n        case 'Cumsum': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          const exclusive =\n              getParamValue('exclusive', node, tensorMap, context) as boolean;\n          const reverse =\n              getParamValue('reverse', node, tensorMap, context) as boolean;\n          return [tfOps.cumsum(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis,\n              exclusive, reverse)];\n        }\n        case 'Bincount':\n          const x = getParamValue('x', node, tensorMap, context) as Tensor1D;\n          const weights =\n              getParamValue('weights', node, tensorMap, context) as Tensor1D;\n          const size =\n              getParamValue('size', node, tensorMap, context) as number;\n\n          return [tfOps.bincount(x, weights, size)];\n        case 'DenseBincount': {\n          const x = getParamValue('x', node, tensorMap, context) as Tensor1D |\n              Tensor2D;\n          const weights =\n              getParamValue('weights', node, tensorMap, context) as Tensor1D |\n              Tensor2D;\n          const size =\n              getParamValue('size', node, tensorMap, context) as number;\n\n          const binaryOutput =\n              getParamValue('binaryOutput', node, tensorMap, context) as\n              boolean;\n\n          return [tfOps.denseBincount(x, weights, size, binaryOutput)];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'reduction';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Scalar, Tensor, Tensor1D, tidy, util} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'ConcatV2':\n        case 'Concat': {\n          const n = getParamValue('n', node, tensorMap, context) as number;\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          let inputs =\n              getParamValue('tensors', node, tensorMap, context) as Tensor[];\n          inputs = inputs.slice(0, n);\n          return [tfOps.concat(inputs, axis)];\n        }\n        case 'Gather': {\n          const input = getParamValue('x', node, tensorMap, context) as Tensor;\n          const indices =\n              getParamValue('indices', node, tensorMap, context) as Tensor1D;\n          return [tfOps.gather(input, tfOps.cast(indices, 'int32'), 0)];\n        }\n        case 'GatherV2': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          const batchDims =\n              getParamValue('batchDims', node, tensorMap, context) as number;\n          const input = getParamValue('x', node, tensorMap, context) as Tensor;\n          const indices =\n              getParamValue('indices', node, tensorMap, context) as Tensor1D;\n          return [tfOps.gather(\n              input, tfOps.cast(indices, 'int32'), axis, batchDims)];\n        }\n        case 'Reverse': {\n          const dims =\n              getParamValue('dims', node, tensorMap, context) as boolean[];\n          const axis = [];\n          for (let i = 0; i < dims.length; i++) {\n            if (dims[i]) {\n              axis.push(i);\n            }\n          }\n          const input = getParamValue('x', node, tensorMap, context) as Tensor;\n          return [tfOps.reverse(input, axis)];\n        }\n        case 'ReverseV2': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          const input = getParamValue('x', node, tensorMap, context) as Tensor;\n          return [tfOps.reverse(input, axis)];\n        }\n        case 'Slice': {\n          // tslint:disable-next-line:no-any\n          const begin = getParamValue('begin', node, tensorMap, context) as any;\n          // tslint:disable-next-line:no-any\n          const size = getParamValue('size', node, tensorMap, context) as any;\n          return [tfOps.slice(\n              getParamValue('x', node, tensorMap, context) as Tensor, begin,\n              size)];\n        }\n        case 'StridedSlice': {\n          const begin =\n              getParamValue('begin', node, tensorMap, context) as number[];\n          const end =\n              getParamValue('end', node, tensorMap, context) as number[];\n          const strides =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const beginMask =\n              getParamValue('beginMask', node, tensorMap, context) as number;\n          const endMask =\n              getParamValue('endMask', node, tensorMap, context) as number;\n          const ellipsisMask =\n              getParamValue('ellipsisMask', node, tensorMap, context) as number;\n          const newAxisMask =\n              getParamValue('newAxisMask', node, tensorMap, context) as number;\n          const shrinkAxisMask =\n              getParamValue('shrinkAxisMask', node, tensorMap, context) as\n              number;\n          const tensor = getParamValue('x', node, tensorMap, context) as Tensor;\n\n          return [tfOps.stridedSlice(\n              tensor, begin, end, strides, beginMask, endMask, ellipsisMask,\n              newAxisMask, shrinkAxisMask)];\n        }\n        case 'Pack': {\n          return tidy(() => {\n            const axis =\n                getParamValue('axis', node, tensorMap, context) as number;\n            const tensors =\n                getParamValue('tensors', node, tensorMap, context) as Tensor[];\n            // Reshape the tensors to the first tensor's shape if they don't\n            // match.\n            const shape = tensors[0].shape;\n            const squeezedShape = tfOps.squeeze(tensors[0]).shape;\n            const mapped = tensors.map(tensor => {\n              const sameShape = util.arraysEqual(tensor.shape, shape);\n              if (!sameShape &&\n                  !util.arraysEqual(\n                      tfOps.squeeze(tensor).shape, squeezedShape)) {\n                throw new Error('the input tensors shape does not match');\n              }\n              return sameShape ? tensor : tfOps.reshape(tensor, shape);\n            });\n            return [tfOps.stack(mapped, axis)];\n          });\n        }\n        case 'Unpack': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          const tensor =\n              getParamValue('tensor', node, tensorMap, context) as Tensor;\n          return tfOps.unstack(tensor, axis);\n        }\n        case 'Tile': {\n          const reps =\n              getParamValue('reps', node, tensorMap, context) as number[];\n          return [tfOps.tile(\n              getParamValue('x', node, tensorMap, context) as Tensor, reps)];\n        }\n        case 'Split':\n        case 'SplitV': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          const numOrSizeSplits =\n              getParamValue('numOrSizeSplits', node, tensorMap, context) as\n                  number |\n              number[];\n          const tensor = getParamValue('x', node, tensorMap, context) as Tensor;\n\n          return tfOps.split(tensor, numOrSizeSplits, axis);\n        }\n        case 'ScatterNd': {\n          const indices =\n              getParamValue('indices', node, tensorMap, context) as Tensor;\n          const values =\n              getParamValue('values', node, tensorMap, context) as Tensor;\n          const shape =\n              getParamValue('shape', node, tensorMap, context) as number[];\n          return [tfOps.scatterND(indices, values, shape)];\n        }\n        case 'GatherNd': {\n          const x = getParamValue('x', node, tensorMap, context) as Tensor;\n          const indices =\n              getParamValue('indices', node, tensorMap, context) as Tensor;\n          return [tfOps.gatherND(x, indices)];\n        }\n        case 'SparseToDense': {\n          const indices =\n              getParamValue('sparseIndices', node, tensorMap, context) as\n              Tensor;\n          const shape =\n              getParamValue('outputShape', node, tensorMap, context) as\n              number[];\n          const sparseValues =\n              getParamValue('sparseValues', node, tensorMap, context) as Tensor;\n          const defaultValue =\n              getParamValue('defaultValue', node, tensorMap, context) as Scalar;\n          return [tfOps.sparseToDense(\n              indices, sparseValues, shape,\n              sparseValues.dtype === defaultValue.dtype ?\n                  defaultValue :\n                  tfOps.cast(defaultValue, sparseValues.dtype))];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'slice_join';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext):\n        Tensor[] => {\n          switch (node.op) {\n            case 'FFT': {\n              return [tfOps.fft(\n                  getParamValue('x', node, tensorMap, context) as Tensor)];\n            }\n            case 'IFFT': {\n              return [tfOps.ifft(\n                  getParamValue('x', node, tensorMap, context) as Tensor)];\n            }\n            case 'RFFT': {\n              return [tfOps.rfft(\n                  getParamValue('x', node, tensorMap, context) as Tensor)];\n            }\n            case 'IRFFT': {\n              return [tfOps.irfft(\n                  getParamValue('x', node, tensorMap, context) as Tensor)];\n            }\n            default:\n              throw TypeError(`Node type ${node.op} is not implemented`);\n          }\n        };\n\nexport const CATEGORY = 'spectral';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor, Tensor4D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'Cast': {\n          return [tfOps.cast(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('dtype', node, tensorMap, context) as 'int32' |\n                  'float32' | 'bool')];\n        }\n        case 'ExpandDims': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          return [tfOps.expandDims(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis)];\n        }\n        case 'Squeeze': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          return [tfOps.squeeze(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis)];\n        }\n\n        case 'Reshape': {\n          return [tfOps.reshape(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('shape', node, tensorMap, context) as number[])];\n        }\n        case 'MirrorPad': {\n          return [tfOps.mirrorPad(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('padding', node, tensorMap, context) as\n                  Array<[number, number]>,\n              getParamValue('mode', node, tensorMap, context) as 'reflect' |\n                  'symmetric')];\n        }\n        case 'PadV2':\n        case 'Pad': {\n          return [tfOps.pad(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('padding', node, tensorMap, context) as\n                  Array<[number, number]>,\n              getParamValue('constantValue', node, tensorMap, context) as\n                  number)];\n        }\n        case 'SpaceToBatchND': {\n          const blockShape =\n              getParamValue('blockShape', node, tensorMap, context) as number[];\n          const paddings =\n              getParamValue('paddings', node, tensorMap, context) as number[][];\n          return [tfOps.spaceToBatchND(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              blockShape, paddings)];\n        }\n        case 'BatchToSpaceND': {\n          const blockShape =\n              getParamValue('blockShape', node, tensorMap, context) as number[];\n          const crops =\n              getParamValue('crops', node, tensorMap, context) as number[][];\n          return [tfOps.batchToSpaceND(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              blockShape, crops)];\n        }\n        case 'DepthToSpace': {\n          const blockSize =\n              getParamValue('blockSize', node, tensorMap, context) as number;\n          const dataFormat =\n              (getParamValue('dataFormat', node, tensorMap, context) as\n               string).toUpperCase() as 'NHWC' |\n              'NCHW';\n          return [tfOps.depthToSpace(\n              getParamValue('x', node, tensorMap, context) as Tensor4D,\n              blockSize, dataFormat)];\n        }\n        case 'BroadcastTo': {\n          return [tfOps.broadcastTo(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('shape', node, tensorMap, context) as number[])];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'transformation';\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, Tensor} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {HashTable} from '../../executor/hash_table';\nimport {ResourceManager} from '../../executor/resource_manager';\nimport {InternalOpAsyncExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpAsyncExecutor = async(\n    node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext,\n    resourceManager: ResourceManager): Promise<Tensor[]> => {\n  switch (node.op) {\n    case 'HashTable':\n    case 'HashTableV2': {\n      const keyDType =\n          getParamValue('keyDType', node, tensorMap, context) as DataType;\n      const valueDType =\n          getParamValue('valueDType', node, tensorMap, context) as DataType;\n\n      const hashTable = new HashTable(keyDType, valueDType);\n      resourceManager.addHashTable(node.name, hashTable);\n      return [hashTable.handle];\n    }\n    case 'LookupTableImport':\n    case 'LookupTableImportV2': {\n      const handle = getParamValue(\n                         'tableHandle', node, tensorMap, context,\n                         resourceManager) as Tensor;\n      const keys = getParamValue('keys', node, tensorMap, context) as Tensor;\n      const values =\n          getParamValue('values', node, tensorMap, context) as Tensor;\n\n      const hashTable = resourceManager.getHashTableById(handle.id);\n\n      return [await hashTable.import(keys, values)];\n    }\n    case 'LookupTableFind':\n    case 'LookupTableFindV2': {\n      const handle = getParamValue(\n                         'tableHandle', node, tensorMap, context,\n                         resourceManager) as Tensor;\n      const keys = getParamValue('keys', node, tensorMap, context) as Tensor;\n      const defaultValue =\n          getParamValue('defaultValue', node, tensorMap, context) as Tensor;\n\n      const hashTable = resourceManager.getHashTableById(handle.id);\n      return [await hashTable.find(keys, defaultValue)];\n    }\n    case 'LookupTableSize':\n    case 'LookupTableSizeV2': {\n      const handle = getParamValue(\n                         'tableHandle', node, tensorMap, context,\n                         resourceManager) as Tensor;\n\n      const hashTable = resourceManager.getHashTableById(handle.id);\n      return [hashTable.tensorSize()];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'hash_table';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap, TensorArrayMap, TensorListMap} from '../data/types';\n\nimport {TensorArray} from './tensor_array';\nimport {TensorList} from './tensor_list';\nimport {FunctionExecutor} from './types';\n\nexport interface ExecutionContextInfo {\n  id: number;           // the unique id of the context info\n  frameName: string;    // The frame name of the loop, this comes from\n                        // the TensorFlow NodeDef.\n  iterationId: number;  // The iteration id of the loop\n}\n\n/**\n * ExecutionContext captures the runtime environment of the node. It keeps\n * track of the current frame and iteration for the control flow ops.\n *\n * For example, typical Dynamic RNN model may contain loops, for which\n * TensorFlow will generate graphs with Enter/Exit nodes to control the\n * current execution frame, and NextIteration Nodes for iteration id increment.\n * For model with branch logic, TensorFLow will generate Switch/Merge ops.\n */\nexport class ExecutionContext {\n  private rootContext = {id: 0, frameName: '', iterationId: 0};\n  private contexts: ExecutionContextInfo[] = [this.rootContext];\n  private lastId = 0;\n  private _currentContextIds: string[];\n\n  constructor(\n      readonly weightMap: NamedTensorsMap = {},\n      readonly tensorArrayMap: TensorArrayMap = {},\n      readonly tensorListMap: TensorListMap = {},\n      readonly functionMap: {[key: string]: FunctionExecutor} = {}) {\n    this.generateCurrentContextIds();\n  }\n\n  private newFrame(id: number, frameName: string) {\n    return {id, frameName, iterationId: 0};\n  }\n\n  /**\n   * Set the current context\n   * @param contexts: ExecutionContextInfo[] the current path of execution\n   * frames\n   */\n  set currentContext(contexts: ExecutionContextInfo[]) {\n    if (this.contexts !== contexts) {\n      this.contexts = contexts;\n      this.generateCurrentContextIds();\n    }\n  }\n\n  get currentContext(): ExecutionContextInfo[] {\n    return this.contexts;\n  }\n\n  /**\n   * Returns the current context in string format.\n   */\n  get currentContextId(): string {\n    return this._currentContextIds[0];\n  }\n\n  /**\n   * Returns the current context and all parent contexts in string format.\n   * This allow access to the nodes in the current and parent frames.\n   */\n  get currentContextIds(): string[] {\n    return this._currentContextIds;\n  }\n\n  private generateCurrentContextIds() {\n    const names = [];\n    for (let i = 0; i < this.contexts.length - 1; i++) {\n      const contexts = this.contexts.slice(0, this.contexts.length - i);\n      names.push(this.contextIdforContexts(contexts));\n    }\n    names.push('');\n    this._currentContextIds = names;\n  }\n\n  private contextIdforContexts(contexts: ExecutionContextInfo[]) {\n    return contexts ?\n        contexts\n            .map(\n                context => (context.id === 0 && context.iterationId === 0) ?\n                    '' :\n                    `${context.frameName}-${context.iterationId}`)\n            .join('/') :\n        '';\n  }\n\n  /**\n   * Enter a new frame, a new context is pushed on the current context list.\n   * @param frameId new frame id\n   */\n  enterFrame(frameId: string) {\n    if (this.contexts) {\n      this.lastId++;\n      this.contexts = this.contexts.slice();\n      this.contexts.push(this.newFrame(this.lastId, frameId));\n      this._currentContextIds.unshift(this.contextIdforContexts(this.contexts));\n    }\n  }\n\n  /**\n   * Exit the current frame, the last context is removed from the current\n   * context list.\n   */\n  exitFrame() {\n    if (this.contexts && this.contexts.length > 1) {\n      this.contexts = this.contexts.slice();\n      this.contexts.splice(-1);\n      this.currentContextIds.shift();\n    } else {\n      throw new Error('Cannot exit frame, the context is empty');\n    }\n  }\n\n  /**\n   * Enter the next iteration of a loop, the iteration id of last context is\n   * increased.\n   */\n  nextIteration() {\n    if (this.contexts && this.contexts.length > 0) {\n      this.contexts = this.contexts.slice();\n      this.lastId++;\n      const context =\n          Object.assign({}, this.contexts[this.contexts.length - 1]);\n      context.iterationId += 1;\n      context.id = this.lastId;\n      this.contexts.splice(-1, 1, context);\n      this._currentContextIds.splice(\n          0, 1, this.contextIdforContexts(this.contexts));\n    } else {\n      throw new Error('Cannot increase frame iteration, the context is empty');\n    }\n  }\n\n  getWeight(name: string): Tensor[] {\n    return this.weightMap[name];\n  }\n\n  addTensorArray(tensorArray: TensorArray) {\n    this.tensorArrayMap[tensorArray.id] = tensorArray;\n  }\n\n  getTensorArray(id: number): TensorArray {\n    return this.tensorArrayMap[id];\n  }\n\n  addTensorList(tensorList: TensorList) {\n    this.tensorListMap[tensorList.id] = tensorList;\n  }\n\n  getTensorList(id: number): TensorList {\n    return this.tensorListMap[id];\n  }\n\n  dispose(keepIds: Set<number>) {\n    for (const key in this.tensorArrayMap) {\n      this.tensorArrayMap[key].clearAndClose(keepIds);\n    }\n\n    for (const key in this.tensorListMap) {\n      this.tensorListMap[key].clearAndClose(keepIds);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NamedTensorMap} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../data/types';\nimport {parseNodeName} from '../operations/executors/utils';\nimport {Graph, Node} from '../operations/types';\n\nexport interface ExecutionInfo {\n  inputs: NamedTensorMap;\n  outputs: Node[];\n  usedNodes: Set<string>;\n  missingInputs: string[];\n  dynamicNode: Node;\n  syncInputs: string[];\n}\n\n/**\n * Given graph inputs and desired outputs, find the minimal set of nodes\n * to execute in order to compute the outputs. In addition return other useful\n * info such:\n * - Missing inputs needed to compute the output.\n * - Whether the subgraph contains dynamic ops (control flow, dynamic shape).\n * - Alternative inputs in order to avoid async (dynamic op) execution.\n */\nexport function getExecutionSubgraph(\n    inputs: NamedTensorMap, outputs: Node[], weightMap: NamedTensorsMap,\n    initNodes?: Node[]): ExecutionInfo {\n  const usedNodes = new Set<string>();\n  const missingInputs: string[] = [];\n  let dynamicNode: Node = null;\n  let syncInputs: string[] = null;\n\n  // Start with the outputs, going backwards and find all the nodes that are\n  // needed to compute those outputs.\n  const seen = new Set<string>();\n  const inputNodeNames =\n      Object.keys(inputs).map(name => parseNodeName(name)[0]);\n\n  let initNodeNames: string[] = [];\n  if (initNodes != null) {\n    initNodeNames = initNodes.map(node => parseNodeName(node.name)[0]);\n  }\n\n  const frontier = [...outputs];\n  while (frontier.length > 0) {\n    const node = frontier.pop();\n    if (isControlFlow(node) || isDynamicShape(node) || isHashTable(node)) {\n      if (dynamicNode == null) {\n        dynamicNode = node;\n        syncInputs = dynamicNode.children.map(child => child.name)\n                         .filter(name => usedNodes.has(name));\n      }\n    }\n    usedNodes.add(node.name);\n\n    // Weights are dead end since we already have their values.\n    if (weightMap[node.name] != null) {\n      continue;\n    }\n    // This node is a dead end since it's one of the user-provided inputs.\n    if (inputNodeNames.indexOf(node.name) !== -1) {\n      continue;\n    }\n    // This node is a dead end since it doesn't have any inputs.\n    if (initNodeNames.indexOf(node.name) !== -1) {\n      continue;\n    }\n    if (node.inputs.length === 0) {\n      missingInputs.push(node.name);\n      continue;\n    }\n    node.inputs.forEach(input => {\n      // Don't add to the frontier if it is already there.\n      if (seen.has(input.name)) {\n        return;\n      }\n      seen.add(input.name);\n      frontier.push(input);\n    });\n  }\n  return {inputs, outputs, usedNodes, missingInputs, dynamicNode, syncInputs};\n}\n\n/**\n * Given the execution info, return a list of nodes in topological order that\n * need to be executed to compute the output.\n */\nexport function getNodesInTopologicalOrder(\n    graph: Graph, weightMap: NamedTensorsMap,\n    executionInfo: ExecutionInfo): Node[] {\n  const {usedNodes, inputs} = executionInfo;\n  const frontier: Node[] = [];\n  const inputNodes = Object.keys(inputs)\n                         .map(name => parseNodeName(name)[0])\n                         .map(name => graph.nodes[name]);\n  const initNodes = graph.initNodes;\n\n  inputNodes.forEach(input => {\n    if (usedNodes.has(input.name)) {\n      frontier.push(input);\n    }\n  });\n  graph.weights.forEach(weight => {\n    if (usedNodes.has(weight.name)) {\n      frontier.push(weight);\n    }\n  });\n  if (initNodes != null) {\n    initNodes.forEach(node => {\n      if (usedNodes.has(node.name)) {\n        frontier.push(node);\n      }\n    });\n  }\n  const seen = new Set<string>();\n  const orderedNodes: Node[] = [];\n  while (frontier.length > 0) {\n    const node = frontier.pop();\n    seen.add(node.name);\n    if (!weightMap[node.name]) {\n      orderedNodes.push(node);\n    }\n    node.children.forEach(child => {\n      if (!seen.has(child.name) && usedNodes.has(child.name) &&\n          child.inputs.every(input => seen.has(input.name))) {\n        frontier.push(child);\n      }\n    });\n  }\n  return orderedNodes;\n}\n\nconst CONTROL_FLOW_OPS = [\n  'Switch', 'Merge', 'Enter', 'Exit', 'NextIteration', 'StatelessIf',\n  'StatelessWhile', 'if', 'While'\n];\nconst DYNAMIC_SHAPE_OPS = [\n  'NonMaxSuppressionV2', 'NonMaxSuppressionV3', 'NonMaxSuppressionV5', 'Where'\n];\nconst HASH_TABLE_OPS = [\n  'HashTable', 'HashTableV2', 'LookupTableImport', 'LookupTableImportV2',\n  'LookupTableFind', 'LookupTableFindV2', 'LookupTableSize', 'LookupTableSizeV2'\n];\n\nexport function isControlFlow(node: Node) {\n  return CONTROL_FLOW_OPS.indexOf(node.op) >= 0;\n}\n\nexport function isDynamicShape(node: Node) {\n  return DYNAMIC_SHAPE_OPS.indexOf(node.op) >= 0;\n}\n\nexport function isHashTable(node: Node) {\n  return HASH_TABLE_OPS.indexOf(node.op) >= 0;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NamedTensorMap, Tensor, tidy, util} from '@tensorflow/tfjs-core';\n\nimport {ISignatureDef} from '../data/compiled_api';\nimport {NamedTensorsMap, TensorArrayMap, TensorInfo, TensorListMap} from '../data/types';\nimport {getNodeNameAndIndex, getParamValue, getTensor, getTensorsForCurrentContenxt, parseNodeName} from '../operations/executors/utils';\nimport {executeOp} from '../operations/operation_executor';\nimport {Graph, Node} from '../operations/types';\n\nimport {ExecutionContext, ExecutionContextInfo} from './execution_context';\nimport {getExecutionSubgraph, getNodesInTopologicalOrder, isControlFlow} from './model_analysis';\nimport {ResourceManager} from './resource_manager';\nimport {FunctionExecutor} from './types';\n\ninterface NodeWithContexts {\n  contexts: ExecutionContextInfo[];\n  node: Node;\n}\n\nexport class GraphExecutor implements FunctionExecutor {\n  private compiledMap: Map<string, Node[]> = new Map();\n  private _weightMap: NamedTensorsMap = {};\n  private _weightIds: number[];\n  private _signature: ISignatureDef;\n  private _inputs: Node[];\n  private _outputs: Node[];\n  private _initNodes: Node[];  // Internal init nodes to start initialization.\n  private SEPERATOR = ',';\n  private _functions: {[key: string]: Graph} = {};\n  private _functionExecutorMap: {[key: string]: FunctionExecutor} = {};\n  private _resourceManager: ResourceManager;\n\n  get weightIds(): number[] {\n    return this.parent ? this.parent.weightIds : this._weightIds;\n  }\n\n  get functionExecutorMap(): {[key: string]: FunctionExecutor} {\n    return this.parent ? this.parent.functionExecutorMap :\n                         this._functionExecutorMap;\n  }\n\n  get weightMap(): NamedTensorsMap {\n    return this.parent ? this.parent.weightMap : this._weightMap;\n  }\n\n  set weightMap(weightMap: NamedTensorsMap) {\n    const weightIds = Object.keys(weightMap).map(\n        key => weightMap[key].map(tensor => tensor.id));\n    this._weightIds = [].concat(...weightIds);\n    this._weightMap = weightMap;\n  }\n\n  /**\n   * Set `ResourceManager` shared by executors of a model.\n   * @param resourceManager: `ResourceManager` of the `GraphModel`.\n   */\n  set resourceManager(resourceManager: ResourceManager) {\n    this._resourceManager = resourceManager;\n  }\n\n  get inputs(): TensorInfo[] {\n    return this._inputs.map(node => {\n      return {\n        name: node.name,\n        shape: node.attrParams['shape'] ?\n            node.attrParams['shape'].value as number[] :\n            undefined,\n        dtype: node.attrParams['dtype'] ?\n            node.attrParams['dtype'].value as DataType :\n            undefined\n      };\n    });\n  }\n\n  get outputs(): TensorInfo[] {\n    return this._outputs.map(node => {\n      return {\n        name: node.name,\n        shape: node.attrParams['shape'] ?\n            node.attrParams['shape'].value as number[] :\n            undefined,\n        dtype: node.attrParams['dtype'] ?\n            node.attrParams['dtype'].value as DataType :\n            undefined\n      };\n    });\n  }\n\n  get inputNodes(): string[] {\n    return this._inputs.map(node => node.signatureKey || node.name);\n  }\n\n  get outputNodes(): string[] {\n    return this._outputs.map((node) => {\n      const name = node.signatureKey || node.name;\n      return node.defaultOutput ? (`${name}:${node.defaultOutput}`) : name;\n    });\n  }\n\n  get functions(): {[key: string]: ISignatureDef} {\n    return Object.keys(this._functions).reduce((map, key) => {\n      map[key] = this._functions[key].signature;\n      return map;\n    }, {} as {[key: string]: ISignatureDef});\n  }\n\n  /**\n   *\n   * @param graph Graph the model or function graph to be executed.\n   * @param parent When building function exector you need to set the parent\n   * executor. Since the weights and function executor maps are set at parant\n   * level, that function executor can access the function maps and weight maps\n   * through the parent.\n   */\n  constructor(private graph: Graph, private parent?: GraphExecutor) {\n    this._outputs = graph.outputs;\n    this._inputs = graph.inputs;\n    this._initNodes = graph.initNodes;\n    this._signature = graph.signature;\n    this._functions = graph.functions;\n    // create sub-graph executors\n    if (graph.functions != null) {\n      Object.keys(graph.functions).forEach(name => {\n        this._functionExecutorMap[name] =\n            new GraphExecutor(graph.functions[name], this);\n      });\n    }\n  }\n\n  private getCompilationKey(inputs: Node[], outputs: Node[]): string {\n    const sortedInputs = inputs.map(node => node.name).sort();\n    const sortedOutputs = outputs.map(node => node.name).sort();\n    return sortedInputs.join(this.SEPERATOR) + '--' +\n        sortedOutputs.join(this.SEPERATOR);\n  }\n\n  /**\n   * Compiles the inference graph and returns the minimal set of nodes that are\n   * required for execution, in the correct execution order.\n   */\n  private compile(inputs: NamedTensorMap, outputs: Node[]): Node[] {\n    const executionInfo =\n        getExecutionSubgraph(inputs, outputs, this.weightMap, this._initNodes);\n    const {missingInputs, dynamicNode, syncInputs} = executionInfo;\n    if (dynamicNode != null) {\n      throw new Error(\n          `This execution contains the node '${dynamicNode.name}', which has ` +\n          `the dynamic op '${dynamicNode.op}'. Please use ` +\n          `model.executeAsync() instead. Alternatively, to avoid the ` +\n          `dynamic ops, specify the inputs [${syncInputs}]`);\n    }\n\n    if (missingInputs.length > 0) {\n      const outNames = outputs.map(n => n.name);\n      const inNames = Object.keys(inputs);\n      throw new Error(\n          `Cannot compute the outputs [${outNames}] from the provided inputs ` +\n          `[${inNames}]. Missing the following inputs: [${missingInputs}]`);\n    }\n\n    return getNodesInTopologicalOrder(\n        this.graph, this.weightMap, executionInfo);\n  }\n\n  /**\n   * Executes the inference for given input tensors.\n   * @param inputs Tensor map for the model inputs, keyed by the input node\n   * names.\n   * @param outputs Optional. output node name from the Tensorflow model, if\n   * no outputs are specified, the default outputs of the model would be used.\n   * You can inspect intermediate nodes of the model by adding them to the\n   * outputs array.\n   */\n  execute(inputs: NamedTensorMap, outputs?: string[]): Tensor[] {\n    inputs = this.mapInputs(inputs);\n    const names = Object.keys(inputs).sort();\n    this.checkInputs(inputs);\n    this.checkInputShapeAndType(inputs);\n    outputs = this.mapOutputs(outputs);\n    this.checkOutputs(outputs);\n    const inputNodes =\n        names.map(name => this.graph.nodes[parseNodeName(name)[0]]);\n    const outputNodeNames = outputs.map(name => parseNodeName(name)[0]);\n    let outputNodes = outputNodeNames.map(name => this.graph.nodes[name]);\n\n    // If no outputs are specified, then use the default outputs of the model.\n    if (outputNodes.length === 0) {\n      outputNodes = this._outputs;\n    }\n\n    const compilationKey = this.getCompilationKey(inputNodes, outputNodes);\n\n    // Do nothing if the compiled graph cache contains the input.\n    let orderedNodes = this.compiledMap.get(compilationKey);\n    if (orderedNodes == null) {\n      orderedNodes = this.compile(inputs, outputNodes);\n      this.compiledMap.set(compilationKey, orderedNodes);\n    }\n\n    const tensorArrayMap: TensorArrayMap = {};\n    const tensorListMap: TensorListMap = {};\n\n    return tidy(() => {\n      const context = new ExecutionContext(\n          this.weightMap, tensorArrayMap, tensorListMap,\n          this.functionExecutorMap);\n      const tensorsMap: NamedTensorsMap = {...this.weightMap};\n\n      Object.keys(inputs).forEach(name => {\n        const [nodeName, index] = parseNodeName(name);\n        const tensors: Tensor[] = [];\n        tensors[index] = inputs[name];\n        tensorsMap[nodeName] = tensors;\n      });\n\n      const tensorsToKeep = this.getFrozenTensorIds(tensorsMap);\n      const intermediateTensorConsumerCount: {[key: number]: number} = {};\n      for (let i = 0; i < orderedNodes.length; i++) {\n        const node = orderedNodes[i];\n        if (!tensorsMap[node.name]) {\n          const tensors =\n              executeOp(node, tensorsMap, context, this._resourceManager) as\n              Tensor[];\n          if (util.isPromise(tensors)) {\n            throw new Error(\n                `The execution of the op '${node.op}' returned a promise. ` +\n                `Please use model.executeAsync() instead.`);\n          }\n          tensorsMap[node.name] = tensors;\n          this.checkTensorForDisposal(\n              node.name, node, tensorsMap, context, tensorsToKeep,\n              outputNodeNames, intermediateTensorConsumerCount);\n        }\n      }\n      // dispose the context for the root executor\n      if (this.parent == null) {\n        context.dispose(tensorsToKeep);\n      }\n      return outputs.map(name => getTensor(name, tensorsMap, context));\n    });\n  }\n\n  private getFrozenTensorIds(tensorMap: NamedTensorsMap): Set<number> {\n    const ids = [].concat.apply(\n        [],\n        Object.keys(tensorMap)\n            .map(key => tensorMap[key])\n            .map(tensors => tensors.map(tensor => tensor.id)));\n    return new Set(ids);\n  }\n  private checkTensorForDisposal(\n      nodeName: string, node: Node, tensorMap: NamedTensorsMap,\n      context: ExecutionContext, tensorsToKeep: Set<number>,\n      outputNames: string[],\n      intermediateTensorConsumerCount: {[key: string]: number}) {\n    // Skip output nodes and any control flow nodes, since its dependency is\n    // tricky to track correctly.\n    if (node.category === 'control' || outputNames.indexOf(nodeName) !== -1) {\n      return;\n    }\n\n    tensorMap[nodeName].forEach(tensor => {\n      if (tensor != null) {\n        intermediateTensorConsumerCount[tensor.id] =\n            (intermediateTensorConsumerCount[tensor.id] || 0) +\n            node.children.length;\n      }\n    });\n    node.inputs.forEach(input => {\n      // Skip any control flow nodes, since its dependency is tricky to track\n      // correctly.\n      if (input.category !== 'control') {\n        const tensors =\n            getTensorsForCurrentContenxt(input.name, tensorMap, context);\n        if (tensors != null) {\n          tensors.forEach(tensor => {\n            if (tensor && !tensor.kept && !tensorsToKeep.has(tensor.id)) {\n              const count = intermediateTensorConsumerCount[tensor.id];\n              if (count === 1) {\n                tensor.dispose();\n                delete intermediateTensorConsumerCount[tensor.id];\n              } else if (count != null) {\n                // only intermediate nodes has count set, inputs and weights are\n                // not.\n                intermediateTensorConsumerCount[tensor.id]--;\n              }\n            }\n          });\n        }\n      }\n    });\n  }\n\n  /**\n   * Executes the inference for given input tensors in Async fashion.\n   * @param inputs Tensor map for the model inputs, keyed by the input node\n   * names.\n   * @param outputs output node name from the Tensorflow model, if no outputs\n   * are specified, the default outputs of the model would be used. You can\n   * inspect intermediate nodes of the model by adding them to the outputs\n   * array.\n   */\n  async executeAsync(inputs: NamedTensorMap, outputs?: string[]):\n      Promise<Tensor[]> {\n    return this._executeAsync(inputs, outputs);\n  }\n\n  /**\n   * Executes the inference for given input tensors in Async fashion.\n   * @param inputs Tensor map for the model inputs, keyed by the input node\n   * names.\n   * @param outputs Optional. output node name from the Tensorflow model,\n   * if no outputs are specified, the default outputs of the model would be\n   * used. You can inspect intermediate nodes of the model by adding them to the\n   * outputs array.\n   * @param isFunctionExecution Optional. Flag for executing a function.\n   * @param tensorArrayMap Optional, global TensorArray map by id. Used for\n   * function execution.\n   * @param tensorArrayMap Optinal global TensorList map by id. Used for\n   * function execution.\n   */\n  private async _executeAsync(\n      inputs: NamedTensorMap, outputs?: string[], isFunctionExecution = false,\n      tensorArrayMap: TensorArrayMap = {},\n      tensorListMap: TensorListMap = {}): Promise<Tensor[]> {\n    if (!isFunctionExecution) {\n      inputs = this.mapInputs(inputs);\n      this.checkInputs(inputs);\n      this.checkInputShapeAndType(inputs);\n      outputs = this.mapOutputs(outputs);\n      this.checkOutputs(outputs);\n    }\n\n    const context = new ExecutionContext(\n        this.weightMap, tensorArrayMap, tensorListMap,\n        this.functionExecutorMap);\n\n    // Graph with control flow op requires runtime evaluation of the execution\n    // order, while without control flow the execution order is pre-determined\n    // in the compile method.\n    const tensorMap = await this.executeWithControlFlow(\n        inputs, context, outputs, isFunctionExecution);\n    const results = outputs.map(name => getTensor(name, tensorMap, context));\n\n    // dispose all the intermediate tensors\n    const outputIds = results.map(t => t.id);\n    const inputIds = Object.keys(inputs).map(name => inputs[name].id);\n    const keepIds =\n        new Set<number>([...outputIds, ...inputIds, ...this.weightIds]);\n    Object.keys(tensorMap).forEach(key => {\n      const tensorArray = tensorMap[key];\n      tensorArray.forEach(tensor => {\n        if (tensor && !tensor.kept && !tensor.isDisposed &&\n            !keepIds.has(tensor.id)) {\n          tensor.dispose();\n        }\n      });\n    });\n    // dispose the context for the root executor\n    if (this.parent == null) {\n      context.dispose(keepIds);\n    }\n\n    return results;\n  }\n\n  async executeFunctionAsync(\n      inputs: Tensor[], tensorArrayMap: TensorArrayMap,\n      tensorListMap: TensorListMap): Promise<Tensor[]> {\n    const mappedInputs = inputs.reduce((map, tensor, index) => {\n      map[this.inputs[index].name] = tensor;\n      return map;\n    }, {} as NamedTensorMap);\n\n    return this._executeAsync(\n        mappedInputs, this.outputNodes, true, tensorArrayMap, tensorListMap);\n  }\n  /**\n   * When there are control flow nodes in the graph, the graph execution use\n   * ExecutionContext to keep track of the frames and loop iterators.\n   * @param inputs placeholder tensors for the graph.\n   * @param context the execution context object for current execution.\n   * @param outputNames Optional. output node name from the Tensorflow model,\n   * if no outputs are specified, the default outputs of the model would be\n   * used. You can inspect intermediate nodes of the model by adding them to the\n   * outputs array.\n   * @param isFunctionExecution Flag for executing a function.\n   */\n  private async executeWithControlFlow(\n      inputs: NamedTensorMap, context: ExecutionContext, outputNames?: string[],\n      isFunctionExecution?: boolean): Promise<NamedTensorsMap> {\n    const names = Object.keys(inputs);\n    const inputNodes =\n        names.map(name => this.graph.nodes[parseNodeName(name)[0]]);\n    const outputNodeNames = outputNames.map(name => parseNodeName(name)[0]);\n    let outputNodes = outputNodeNames.map(name => this.graph.nodes[name]);\n\n    // If no outputs are specified, then use the default outputs of the model.\n    if (outputNodes.length === 0) {\n      outputNodes = this._outputs;\n    }\n\n    const {usedNodes, missingInputs, dynamicNode, syncInputs} =\n        getExecutionSubgraph(\n            inputs, outputNodes, this.weightMap, this._initNodes);\n\n    // First nodes to execute include inputNodes, weights, and initNodes.\n    const stack: NodeWithContexts[] = [\n      ...inputNodes, ...this.graph.weights, ...(this._initNodes || [])\n    ].map(node => {\n      return {node, contexts: context.currentContext};\n    });\n    const tensorsMap: NamedTensorsMap = {...this.weightMap};\n    Object.keys(inputs).forEach(name => {\n      const [nodeName, index] = parseNodeName(name);\n      const tensors: Tensor[] = [];\n      tensors[index] = inputs[name];\n      tensorsMap[nodeName] = tensors;\n    });\n    const intermediateTensorConsumerCount: {[key: number]: number} = {};\n    const tensorsToKeep = this.getFrozenTensorIds(tensorsMap);\n    const added: {[key: string]: boolean} = {};\n    while (stack.length > 0) {\n      const promises = this.processStack(\n          inputNodes, stack, context, tensorsMap, added, tensorsToKeep,\n          outputNodeNames, intermediateTensorConsumerCount, usedNodes);\n      await Promise.all(promises);\n    }\n    if (dynamicNode == null && !isFunctionExecution) {\n      console.warn(\n          `This model execution did not contain any nodes with control flow ` +\n          `or dynamic output shapes. You can use model.execute() instead.`);\n    }\n    const missingOutputs =\n        outputNodes\n            .filter(\n                node => !isControlFlow(node) &&\n                    !getTensor(node.name, tensorsMap, context))\n            .map(node => node.name);\n    if (missingOutputs.length > 0) {\n      let alternativeMsg = '';\n      if (dynamicNode != null) {\n        alternativeMsg =\n            `Alternatively, to avoid the dynamic ops, use model.execute() ` +\n            `and specify the inputs [${syncInputs}]`;\n      }\n      throw new Error(\n          `Cannot compute the outputs [${missingOutputs}] from the provided ` +\n          `inputs [${names}]. Consider providing the following inputs: ` +\n          `[${missingInputs}]. ${alternativeMsg}`);\n    }\n    return tensorsMap;\n  }\n\n  private processStack(\n      inputNodes: Node[], stack: NodeWithContexts[], context: ExecutionContext,\n      tensorMap: NamedTensorsMap, added: {[key: string]: boolean},\n      tensorsToKeep: Set<number>, outputNames: string[],\n      intermediateTensorConsumerCount: {[key: number]: number},\n      usedNodes: Set<string>) {\n    const promises: Array<Promise<Tensor[]>> = [];\n    while (stack.length > 0) {\n      const item = stack.pop();\n      context.currentContext = item.contexts;\n      let nodeName = '';\n      // The tensor of the Enter op with isConstant set should be set\n      // in the parent scope, so it will be available as constant for the\n      // whole loop.\n      if (item.node.op === 'Enter' &&\n          getParamValue('isConstant', item.node, tensorMap, context)) {\n        [nodeName] = getNodeNameAndIndex(item.node.name, context);\n      }\n\n      // only process nodes that are not in the tensorMap yet, this include\n      // inputNodes and internal initNodes.\n      if (tensorMap[item.node.name] == null) {\n        const tensors =\n            executeOp(item.node, tensorMap, context, this._resourceManager);\n        if (!nodeName) {\n          [nodeName] = getNodeNameAndIndex(item.node.name, context);\n        }\n        const currentContext = context.currentContext;\n        if (util.isPromise(tensors)) {\n          promises.push((tensors as Promise<Tensor[]>).then(t => {\n            tensorMap[nodeName] = t;\n            context.currentContext = currentContext;\n            this.checkTensorForDisposal(\n                nodeName, item.node, tensorMap, context, tensorsToKeep,\n                outputNames, intermediateTensorConsumerCount);\n            this.processChildNodes(\n                item.node, stack, context, tensorMap, added, usedNodes);\n            return t;\n          }));\n        } else {\n          tensorMap[nodeName] = tensors as Tensor[];\n          this.checkTensorForDisposal(\n              nodeName, item.node, tensorMap, context, tensorsToKeep,\n              outputNames, intermediateTensorConsumerCount);\n          this.processChildNodes(\n              item.node, stack, context, tensorMap, added, usedNodes);\n        }\n      } else {\n        this.processChildNodes(\n            item.node, stack, context, tensorMap, added, usedNodes);\n      }\n    }\n    return promises;\n  }\n\n  private processChildNodes(\n      node: Node, stack: NodeWithContexts[], context: ExecutionContext,\n      tensorMap: NamedTensorsMap, added: {[key: string]: boolean},\n      usedNodes: Set<string>) {\n    node.children.forEach((childNode) => {\n      const [nodeName, ] = getNodeNameAndIndex(childNode.name, context);\n      if (added[nodeName] || !usedNodes.has(childNode.name)) {\n        return;\n      }\n      // Merge op can be pushed if any of its inputs has value.\n      if (childNode.op === 'Merge') {\n        if (childNode.inputNames.some(name => {\n              return !!getTensor(name, tensorMap, context);\n            })) {\n          added[nodeName] = true;\n          stack.push({contexts: context.currentContext, node: childNode});\n        }\n      } else  // Otherwise all inputs must to have value.\n          if (childNode.inputNames.every(name => {\n                return !!getTensor(name, tensorMap, context);\n              })) {\n        added[nodeName] = true;\n        stack.push({contexts: context.currentContext, node: childNode});\n      }\n    });\n  }\n\n  /**\n   * Releases the memory used by the weight tensors.\n   */\n  dispose() {\n    Object.keys(this.weightMap)\n        .forEach(\n            key => this.weightMap[key].forEach(tensor => tensor.dispose()));\n  }\n\n  private checkInputShapeAndType(inputs: NamedTensorMap) {\n    Object.keys(inputs).forEach(name => {\n      const input = inputs[name];\n      const [nodeName, ] = parseNodeName(name);\n      const node = this.graph.nodes[nodeName];\n      if (node.attrParams['shape'] && node.attrParams['shape'].value) {\n        const shape = node.attrParams['shape'].value as number[];\n        const match = shape.length === input.shape.length &&\n            input.shape.every(\n                (dim, index) => shape[index] === -1 || shape[index] === dim);\n        util.assert(\n            match,\n            () => `The shape of dict['${node.name}'] provided in ` +\n                `model.execute(dict) must be [${shape}], but was ` +\n                `[${input.shape}]`);\n      }\n      if (node.attrParams['dtype'] && node.attrParams['dtype'].value) {\n        util.assert(\n            input.dtype === node.attrParams['dtype'].value as string,\n            () => `The dtype of dict['${node.name}'] provided in ` +\n                `model.execute(dict) must be ` +\n                `${node.attrParams['dtype'].value}, but was ${input.dtype}`);\n      }\n    });\n  }\n\n  private mapInputs(inputs: NamedTensorMap) {\n    const result: NamedTensorMap = {};\n    for (const inputName in inputs) {\n      if (this._signature != null && this._signature.inputs != null &&\n          this._signature.inputs[inputName] != null) {\n        const tensor = this._signature.inputs[inputName];\n        result[tensor.name] = inputs[inputName];\n      } else {\n        result[inputName] = inputs[inputName];\n      }\n    }\n    return result;\n  }\n\n  private checkInputs(inputs: NamedTensorMap) {\n    const notInGraph = Object.keys(inputs).filter(name => {\n      const [nodeName] = parseNodeName(name);\n      return this.graph.nodes[nodeName] == null;\n    });\n    if (notInGraph.length > 0) {\n      throw new Error(\n          `The dict provided in model.execute(dict) has ` +\n          `keys: [${notInGraph}] that are not part of graph`);\n    }\n  }\n\n  private mapOutputs(outputs: string[]) {\n    return outputs.map(name => {\n      if (this._signature != null && this._signature.outputs != null &&\n          this._signature.outputs[name] != null) {\n        const tensor = this._signature.outputs[name];\n        return tensor.name;\n      }\n      return name;\n    }, {});\n  }\n\n  private checkOutputs(outputs: string[]): void {\n    outputs.forEach(name => {\n      const [normalizedName] = parseNodeName(name);\n      if (!this.graph.nodes[normalizedName]) {\n        throw new Error(`The output '${name}' is not found in the graph`);\n      }\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {HashTableMap, NamedTensorMap} from '../data/types';\nimport {HashTable} from './hash_table';\n\n/**\n * Contains global resources of a model.\n */\nexport class ResourceManager {\n  constructor(\n      readonly hashTableNameToHandle: NamedTensorMap = {},\n      readonly hashTableMap: HashTableMap = {}) {}\n\n  /**\n   * Register a `HashTable` in the resource manager.\n   *\n   * The `HashTable` can be retrieved by `resourceManager.getHashTableById`,\n   * where id is the table handle tensor's id.\n   *\n   * @param name Op node name that creates the `HashTable`.\n   * @param hashTable The `HashTable` to be added to resource manager.\n   */\n  addHashTable(name: string, hashTable: HashTable) {\n    this.hashTableNameToHandle[name] = hashTable.handle;\n    this.hashTableMap[hashTable.id] = hashTable;\n  }\n\n  /**\n   * Get the table handle by node name.\n   * @param name Op node name that creates the `HashTable`. This name is also\n   *     used in the inputs list of lookup and import `HashTable` ops.\n   */\n  getHashTableHandleByName(name: string) {\n    return this.hashTableNameToHandle[name];\n  }\n\n  /**\n   * Get the actual `HashTable` by its handle tensor's id.\n   * @param id The id of the handle tensor.\n   */\n  getHashTableById(id: number): HashTable {\n    return this.hashTableMap[id];\n  }\n\n  /**\n   * Dispose `ResourceManager`, including its hashTables and tensors in them.\n   */\n  dispose() {\n    for (const key in this.hashTableMap) {\n      this.hashTableMap[key].clearAndClose();\n      delete this.hashTableMap[key];\n    }\n\n    for (const name in this.hashTableNameToHandle) {\n      this.hashTableNameToHandle[name].dispose();\n      delete this.hashTableNameToHandle[name];\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {InferenceModel, io, ModelPredictConfig, NamedTensorMap, Tensor} from '@tensorflow/tfjs-core';\n\nimport * as tensorflow from '../data/compiled_api';\nimport {NamedTensorsMap, TensorInfo} from '../data/types';\nimport {OperationMapper} from '../operations/operation_mapper';\n\nimport {GraphExecutor} from './graph_executor';\nimport {ResourceManager} from './resource_manager';\n\nexport const TFHUB_SEARCH_PARAM = '?tfjs-format=file';\nexport const DEFAULT_MODEL_NAME = 'model.json';\n/**\n * A `tf.GraphModel` is a directed, acyclic graph built from a\n * SavedModel GraphDef and allows inference execution.\n *\n * A `tf.GraphModel` can only be created by loading from a model converted from\n * a [TensorFlow SavedModel](https://www.tensorflow.org/guide/saved_model) using\n * the command line converter tool and loaded via `tf.loadGraphModel`.\n *\n * @doc {heading: 'Models', subheading: 'Classes'}\n */\nexport class GraphModel implements InferenceModel {\n  private executor: GraphExecutor;\n  private version = 'n/a';\n  private handler: io.IOHandler;\n  private artifacts: io.ModelArtifacts;\n  private initializer: GraphExecutor;\n  private resourceManager: ResourceManager;\n  private signature: tensorflow.ISignatureDef;\n\n  // Returns the version information for the tensorflow model GraphDef.\n  get modelVersion(): string {\n    return this.version;\n  }\n\n  get inputNodes(): string[] {\n    return this.executor.inputNodes;\n  }\n\n  get outputNodes(): string[] {\n    return this.executor.outputNodes;\n  }\n\n  get inputs(): TensorInfo[] {\n    return this.executor.inputs;\n  }\n\n  get outputs(): TensorInfo[] {\n    return this.executor.outputs;\n  }\n\n  get weights(): NamedTensorsMap {\n    return this.executor.weightMap;\n  }\n\n  get metadata(): {} {\n    return this.artifacts.userDefinedMetadata;\n  }\n\n  get modelSignature(): {} {\n    return this.signature;\n  }\n\n  /**\n   * @param modelUrl url for the model, or an `io.IOHandler`.\n   * @param weightManifestUrl url for the weight file generated by\n   * scripts/convert.py script.\n   * @param requestOption options for Request, which allows to send credentials\n   * and custom headers.\n   * @param onProgress Optional, progress callback function, fired periodically\n   * before the load is completed.\n   */\n  constructor(\n      private modelUrl: string|io.IOHandler,\n      private loadOptions: io.LoadOptions = {}) {\n    if (loadOptions == null) {\n      this.loadOptions = {};\n    }\n    this.resourceManager = new ResourceManager();\n  }\n\n  private findIOHandler() {\n    const path = this.modelUrl;\n    if ((path as io.IOHandler).load != null) {\n      // Path is an IO Handler.\n      this.handler = path as io.IOHandler;\n    } else if (this.loadOptions.requestInit != null) {\n      this.handler = io.browserHTTPRequest(path as string, this.loadOptions);\n    } else {\n      const handlers = io.getLoadHandlers(path as string, this.loadOptions);\n      if (handlers.length === 0) {\n        // For backward compatibility: if no load handler can be found,\n        // assume it is a relative http path.\n        handlers.push(io.browserHTTPRequest(path as string, this.loadOptions));\n      } else if (handlers.length > 1) {\n        throw new Error(\n            `Found more than one (${handlers.length}) load handlers for ` +\n            `URL '${[path]}'`);\n      }\n      this.handler = handlers[0];\n    }\n  }\n\n  /**\n   * Loads the model and weight files, construct the in memory weight map and\n   * compile the inference graph.\n   */\n  async load(): Promise<boolean> {\n    this.findIOHandler();\n    if (this.handler.load == null) {\n      throw new Error(\n          'Cannot proceed with model loading because the IOHandler provided ' +\n          'does not have the `load` method implemented.');\n    }\n    const artifacts = await this.handler.load();\n\n    return this.loadSync(artifacts);\n  }\n\n  /**\n   * Synchronously construct the in memory weight map and\n   * compile the inference graph. Also initialize hashtable if any.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}\n   */\n  loadSync(artifacts: io.ModelArtifacts) {\n    this.artifacts = artifacts;\n    const graph = this.artifacts.modelTopology as tensorflow.IGraphDef;\n\n    let signature;\n    if (this.artifacts.userDefinedMetadata != null &&\n        this.artifacts.userDefinedMetadata.signature != null) {\n      signature =  // tslint:disable-next-line:no-any\n          (this.artifacts.userDefinedMetadata as any).signature as\n          tensorflow.ISignatureDef;\n    } else {\n      signature = this.artifacts.signature;\n    }\n    this.signature = signature;\n\n    this.version = `${graph.versions.producer}.${graph.versions.minConsumer}`;\n    const weightMap =\n        io.decodeWeights(this.artifacts.weightData, this.artifacts.weightSpecs);\n    this.executor = new GraphExecutor(\n        OperationMapper.Instance.transformGraph(graph, this.signature));\n    this.executor.weightMap = this.convertTensorMapToTensorsMap(weightMap);\n    // Attach a model-level resourceManager to each executor to share resources,\n    // such as `HashTable`.\n    this.executor.resourceManager = this.resourceManager;\n\n    if (artifacts.modelInitializer != null &&\n        (artifacts.modelInitializer as tensorflow.IGraphDef).node != null) {\n      const initializer =\n          OperationMapper.Instance.transformGraph(artifacts.modelInitializer);\n      this.initializer = new GraphExecutor(initializer);\n      this.initializer.weightMap = this.executor.weightMap;\n      // Attach a model-level resourceManager to the initializer, the\n      // hashTables created from when executing the initializer will be stored\n      // in the resourceManager.\n      this.initializer.resourceManager = this.resourceManager;\n      this.initializer.executeAsync({}, []);\n    }\n\n    return true;\n  }\n\n  /**\n   * Save the configuration and/or weights of the GraphModel.\n   *\n   * An `IOHandler` is an object that has a `save` method of the proper\n   * signature defined. The `save` method manages the storing or\n   * transmission of serialized data (\"artifacts\") that represent the\n   * model's topology and weights onto or via a specific medium, such as\n   * file downloads, local storage, IndexedDB in the web browser and HTTP\n   * requests to a server. TensorFlow.js provides `IOHandler`\n   * implementations for a number of frequently used saving mediums, such as\n   * `tf.io.browserDownloads` and `tf.io.browserLocalStorage`. See `tf.io`\n   * for more details.\n   *\n   * This method also allows you to refer to certain types of `IOHandler`s\n   * as URL-like string shortcuts, such as 'localstorage://' and\n   * 'indexeddb://'.\n   *\n   * Example 1: Save `model`'s topology and weights to browser [local\n   * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);\n   * then load it back.\n   *\n   * ```js\n   * const modelUrl =\n   *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';\n   * const model = await tf.loadGraphModel(modelUrl);\n   * const zeros = tf.zeros([1, 224, 224, 3]);\n   * model.predict(zeros).print();\n   *\n   * const saveResults = await model.save('localstorage://my-model-1');\n   *\n   * const loadedModel = await tf.loadGraphModel('localstorage://my-model-1');\n   * console.log('Prediction from loaded model:');\n   * model.predict(zeros).print();\n   * ```\n   *\n   * @param handlerOrURL An instance of `IOHandler` or a URL-like,\n   * scheme-based string shortcut for `IOHandler`.\n   * @param config Options for saving the model.\n   * @returns A `Promise` of `SaveResult`, which summarizes the result of\n   * the saving, such as byte sizes of the saved artifacts for the model's\n   *   topology and weight values.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}\n   */\n  async save(handlerOrURL: io.IOHandler|string, config?: io.SaveConfig):\n      Promise<io.SaveResult> {\n    if (typeof handlerOrURL === 'string') {\n      const handlers = io.getSaveHandlers(handlerOrURL);\n      if (handlers.length === 0) {\n        throw new Error(\n            `Cannot find any save handlers for URL '${handlerOrURL}'`);\n      } else if (handlers.length > 1) {\n        throw new Error(\n            `Found more than one (${handlers.length}) save handlers for ` +\n            `URL '${handlerOrURL}'`);\n      }\n      handlerOrURL = handlers[0];\n    }\n    if (handlerOrURL.save == null) {\n      throw new Error(\n          'GraphModel.save() cannot proceed because the IOHandler ' +\n          'provided does not have the `save` attribute defined.');\n    }\n\n    return handlerOrURL.save(this.artifacts);\n  }\n\n  /**\n   * Execute the inference for the input tensors.\n   *\n   * @param input The input tensors, when there is single input for the model,\n   * inputs param should be a `tf.Tensor`. For models with mutliple inputs,\n   * inputs params should be in either `tf.Tensor`[] if the input order is\n   * fixed, or otherwise NamedTensorMap format.\n   *\n   * For model with multiple inputs, we recommend you use NamedTensorMap as the\n   * input type, if you use `tf.Tensor`[], the order of the array needs to\n   * follow the\n   * order of inputNodes array. @see {@link GraphModel.inputNodes}\n   *\n   * You can also feed any intermediate nodes using the NamedTensorMap as the\n   * input type. For example, given the graph\n   *    InputNode => Intermediate => OutputNode,\n   * you can execute the subgraph Intermediate => OutputNode by calling\n   *    model.execute('IntermediateNode' : tf.tensor(...));\n   *\n   * This is useful for models that uses tf.dynamic_rnn, where the intermediate\n   * state needs to be fed manually.\n   *\n   * For batch inference execution, the tensors for each input need to be\n   * concatenated together. For example with mobilenet, the required input shape\n   * is [1, 244, 244, 3], which represents the [batch, height, width, channel].\n   * If we are provide a batched data of 100 images, the input tensor should be\n   * in the shape of [100, 244, 244, 3].\n   *\n   * @param config Prediction configuration for specifying the batch size and\n   * output node names. Currently the batch size option is ignored for graph\n   * model.\n   *\n   * @returns Inference result tensors. The output would be single `tf.Tensor`\n   * if model has single output node, otherwise Tensor[] or NamedTensorMap[]\n   * will be returned for model with multiple outputs.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  predict(inputs: Tensor|Tensor[]|NamedTensorMap, config?: ModelPredictConfig):\n      Tensor|Tensor[]|NamedTensorMap {\n    return this.execute(inputs, this.outputNodes);\n  }\n\n  private normalizeInputs(inputs: Tensor|Tensor[]|\n                          NamedTensorMap): NamedTensorMap {\n    if (!(inputs instanceof Tensor) && !Array.isArray(inputs)) {\n      // The input is already a NamedTensorMap.\n      return inputs;\n    }\n    inputs = Array.isArray(inputs) ? inputs : [inputs];\n    if (inputs.length !== this.inputNodes.length) {\n      throw new Error(\n          'Input tensor count mismatch,' +\n          `the graph model has ${this.inputNodes.length} placeholders, ` +\n          `while there are ${inputs.length} input tensors.`);\n    }\n    return this.inputNodes.reduce((map, inputName, i) => {\n      map[inputName] = (inputs as Tensor[])[i];\n      return map;\n    }, {} as NamedTensorMap);\n  }\n\n  private normalizeOutputs(outputs: string|string[]): string[] {\n    outputs = outputs || this.outputNodes;\n    return !Array.isArray(outputs) ? [outputs] : outputs;\n  }\n\n  /**\n   * Executes inference for the model for given input tensors.\n   * @param inputs tensor, tensor array or tensor map of the inputs for the\n   * model, keyed by the input node names.\n   * @param outputs output node name from the Tensorflow model, if no\n   * outputs are specified, the default outputs of the model would be used.\n   * You can inspect intermediate nodes of the model by adding them to the\n   * outputs array.\n   *\n   * @returns A single tensor if provided with a single output or no outputs\n   * are provided and there is only one default output, otherwise return a\n   * tensor array. The order of the tensor array is the same as the outputs\n   * if provided, otherwise the order of outputNodes attribute of the model.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  execute(inputs: Tensor|Tensor[]|NamedTensorMap, outputs?: string|string[]):\n      Tensor|Tensor[] {\n    inputs = this.normalizeInputs(inputs);\n    outputs = this.normalizeOutputs(outputs);\n    const result = this.executor.execute(inputs, outputs);\n    return result.length > 1 ? result : result[0];\n  }\n  /**\n   * Executes inference for the model for given input tensors in async\n   * fashion, use this method when your model contains control flow ops.\n   * @param inputs tensor, tensor array or tensor map of the inputs for the\n   * model, keyed by the input node names.\n   * @param outputs output node name from the Tensorflow model, if no outputs\n   * are specified, the default outputs of the model would be used. You can\n   * inspect intermediate nodes of the model by adding them to the outputs\n   * array.\n   *\n   * @returns A Promise of single tensor if provided with a single output or\n   * no outputs are provided and there is only one default output, otherwise\n   * return a tensor map.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  async executeAsync(\n      inputs: Tensor|Tensor[]|NamedTensorMap,\n      outputs?: string|string[]): Promise<Tensor|Tensor[]> {\n    inputs = this.normalizeInputs(inputs);\n    outputs = this.normalizeOutputs(outputs);\n    const result = await this.executor.executeAsync(inputs, outputs);\n    return result.length > 1 ? result : result[0];\n  }\n\n  private convertTensorMapToTensorsMap(map: NamedTensorMap): NamedTensorsMap {\n    return Object.keys(map).reduce((newMap: NamedTensorsMap, key) => {\n      newMap[key] = [map[key]];\n      return newMap;\n    }, {});\n  }\n\n  /**\n   * Releases the memory used by the weight tensors and resourceManager.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  dispose() {\n    this.executor.dispose();\n\n    if (this.initializer) {\n      this.initializer.dispose();\n    }\n\n    this.resourceManager.dispose();\n  }\n}\n\n/**\n * Load a graph model given a URL to the model definition.\n *\n * Example of loading MobileNetV2 from a URL and making a prediction with a\n * zeros input:\n *\n * ```js\n * const modelUrl =\n *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';\n * const model = await tf.loadGraphModel(modelUrl);\n * const zeros = tf.zeros([1, 224, 224, 3]);\n * model.predict(zeros).print();\n * ```\n *\n * Example of loading MobileNetV2 from a TF Hub URL and making a prediction with\n * a zeros input:\n *\n * ```js\n * const modelUrl =\n *    'https://tfhub.dev/google/imagenet/mobilenet_v2_140_224/classification/2';\n * const model = await tf.loadGraphModel(modelUrl, {fromTFHub: true});\n * const zeros = tf.zeros([1, 224, 224, 3]);\n * model.predict(zeros).print();\n * ```\n * @param modelUrl The url or an `io.IOHandler` that loads the model.\n * @param options Options for the HTTP request, which allows to send credentials\n *    and custom headers.\n *\n * @doc {heading: 'Models', subheading: 'Loading'}\n */\nexport async function loadGraphModel(\n    modelUrl: string|io.IOHandler,\n    options: io.LoadOptions = {}): Promise<GraphModel> {\n  if (modelUrl == null) {\n    throw new Error(\n        'modelUrl in loadGraphModel() cannot be null. Please provide a url ' +\n        'or an IOHandler that loads the model');\n  }\n  if (options == null) {\n    options = {};\n  }\n\n  if (options.fromTFHub) {\n    if ((modelUrl as io.IOHandler).load == null) {\n      if (!(modelUrl as string).endsWith('/')) {\n        modelUrl = (modelUrl as string) + '/';\n      }\n      modelUrl = `${modelUrl}${DEFAULT_MODEL_NAME}${TFHUB_SEARCH_PARAM}`;\n    }\n  }\n  const model = new GraphModel(modelUrl, options);\n  await model.load();\n  return model;\n}\n","/** @license See the LICENSE file. */\n\n// This code is auto-generated, do not modify this file!\nconst version = '3.4.0';\nexport {version};\n"],"names":["DataType","SaverDef","CheckpointFormatVersion","CUSTOM_OPS","getRegisteredOp","name","getParamValue","paramName","node","tensorMap","context","resourceManager","inputParam","inputParams","undefined","inputIndexStart","start","end","inputIndexEnd","type","getTensor","inputNames","slice","map","tensor","data","dataSync","util","toNestedArray","shape","attrParam","attrParams","value","tensorsMap","_a","nodeName","index","getHashTableHandleByName","contextId","currentContextIds","find","getNodeNameWithContextId","getNodeNameAndIndex","inputName","currentContextId","parseNodeName","parts","split","length","Number","getPadding","pad","explicitPadding","i","cloneTensor","kept","clone","tfOpName","category","inputs","attrs","tfName","notSupported","defaultValue","tfDeprecatedName","ops","arithmetic","basicMath","control","convolution","creation","dynamic","evaluation","logical","image","graph","matrices","normalization","reduction","sliceJoin","spectral","transformation","hashTable","mappersJson","concat","op","json","this","opMappers","reduce","mapper","Object","OperationMapper","_instance","signature","tfNodes","placeholders","weights","initNodes","nodes","_this","mapNode","startsWith","push","input","outputs","inputNodeNameToKey","outputNodeNameToKey","mapSignatureEntries","allNodes","keys","forEach","key","children","signatureKey","functions","library","function","func","mapFunction","result","entries","prev","curr","attr","newNode","substr","rawAttrs","param","getStringParam","getStringArrayParam","getNumberParam","getNumericArrayParam","getBoolParam","getBoolArrayParam","getTensorShapeParam","getTensorShapeArrayParam","getDtypeParam","getDtypeArrayParam","getFuncParam","Error","functionDef","nodeDef","inputArg","arg","dtype","parseDtypeParam","returnNodeMap","ret","outputArg","output","defaultOutput","mapArgsToSignature","methodName","mapArgToTensorInfo","nameMap","parseStringParam","s","keepCase","Array","isArray","String","fromCharCode","apply","text","global","env","atob","Buffer","toString","decodeBase64","toLowerCase","def","b","parseInt","tensorflow.DataType","DT_FLOAT","DT_INT32","DT_INT64","DT_INT8","DT_UINT8","DT_BOOL","DT_DOUBLE","DT_STRING","list","v","parseTensorShapeParam","unknownRank","dim","size","f","getInput","getAttr","NodeValueImpl","assertShapesMatchAllowUndefinedSize","shapeA","shapeB","errorMessagePrefix","assert","dim0","dim1","fullDefinedShape","elementShape","some","inferElementShape","listElementShape","tensors","partialShape","mergeElementShape","notfullDefinedShape","elementShapeA","elementShapeB","maxSize","identicalElementShapes","dynamicSize","clearAfterRead","idTensor","scalar","keep","TensorArray","id","closed_","keepIds","has","dispose","tensorWithState","cleared","read","indices","t","written","write","readMany","stack","maxIndex","Math","max","writeMany","unstack","totalLength","cumulativeLengths","len","elementPerRow","tidy","reshape","indices_1","sizes","elementDtype","maxNumElements","TensorList","numElements","outputElementShape","reshapedTensors","pop","elementIndex","executeOp","thenFunc","elseFunc","cond","args","condValue","_b","functionMap","executeFunctionAsync","tensorArrayMap","tensorListMap","bodyFunc","condFunc","condResult","argIds_1","indexOf","origResult","resultIds","condResult_1","pred","frameId","enterFrame","exitFrame","nextIteration","name_1","tensorArray","addTensorArray","writeTensor","writeTensorArray","getTensorArray","readId","readIndex","gatherId","gatherIndices","gatherDtype","gather","scatterId","scatterIndices","scatterTensor","scatterTensorArray","scatter","concatId","concatTensorArray","concatDtype","splitId","splitTensor","lengths","splitTensorArray","sizeId","sizeTensorArray","closeId","closeTensorArray","clearAndClose","tensorList","getTensorList","setItem","elementDType","getItem","addTensorList","numElementsParam","reserve","fromTensor","pushBack","popBack","TypeError","fusedConvAndDepthWiseParams","extraOp","activationFunc","isBiasAdd","isPrelu","isBatchNorm","numArgs","stride","dataFormat","toUpperCase","dilations","biasArg","preluArg","leakyreluAlpha","nmsParams","boxes","scores","maxOutputSize","iouThreshold","scoreThreshold","softNmsSigma","keyDType","valueDType","handle","Map","HashTable","clear","tfOps.scalar","values","checkKeyAndValueTensor","$keys","$values","keysLength","valuesLength","set","findWithDefault","get","tfc.tidy","tfOps.add","tfOps.addN","tfOps.mod","tfOps.mul","tfOps.div","tfOps.divNoNan","tfOps.floorDiv","tfOps.sub","tfOps.minimum","tfOps.maximum","tfOps.pow","tfOps.squaredDifference","arithmetic.executeOp","tfOps.abs","tfOps.acos","tfOps.acosh","tfOps.asin","tfOps.asinh","tfOps.atan","tfOps.atan2","tfOps.atanh","tfOps.ceil","tfOps.complex","tfOps.cos","tfOps.cosh","tfOps.elu","tfOps.erf","tfOps.exp","tfOps.expm1","tfOps.floor","tfOps.log","tfOps.log1p","tfOps.imag","tfOps.neg","tfOps.reciprocal","tfOps.real","tfOps.relu","tfOps.round","tfOps.selu","tfOps.sigmoid","tfOps.sin","tfOps.sign","tfOps.sinh","tfOps.softplus","tfOps.sqrt","tfOps.square","tfOps.tanh","tfOps.tan","tfOps.clipByValue","tfOps.relu6","tfOps.rsqrt","tfOps.prod","tfOps.leakyRelu","tfOps.prelu","tfOps.isNaN","basicMath.executeOp","control.executeOp","dilation","tfOps.conv1d","tfOps.conv2d","tfOps.fused","conv2d","x","filter","strides","bias","activation","preluActivationWeights","depthwiseConv2d","tfOps.conv2dTranspose","tfOps.depthwiseConv2d","tfOps.conv3d","kernelSize","tfOps.avgPool","tfOps.maxPool","includeBatchInIndex","_c","tfOps.avgPool3d","tfOps.maxPool3d","strideHeight","strideWidth","dilationHeight","dilationWidth","tfOps.dilation2d","convolution.executeOp","tfOps.fill","stop_1","num","tfOps.linspace","logits","numSamples","seed","tfOps.multinomial","depth","onValue","offValue","tfOps.oneHot","tfOps.ones","tfOps.onesLike","tfOps.randomUniform","stop_2","step","tfOps.range","mean","stdDev","tfOps.truncatedNormal","tfOps.zeros","tfOps.zerosLike","creation.executeOp","tfOps.image","nonMaxSuppressionWithScoreAsync","_e","selectedIndices","selectedScores","padToMaxOutputSize","nonMaxSuppressionPaddedAsync","validOutputs","_d","nonMaxSuppressionAsync","condition","tfOps.cast","tfOps.whereAsync","tfOps.setdiff1dAsync","dynamic.executeOp","k","sorted","tfOps.topk","tfOps.unique","axis","evaluation.executeOp","images","alignCorners","halfPixelCenters","resizeBilinear","resizeNearestNeighbor","boxInd","cropSize","method","extrapolationValue","cropAndResize","image.executeOp","tfOps.tensor1d","rank","message","summarize","console","warn","log","prototype","call","graph.executeOp","tfOps.equal","tfOps.notEqual","tfOps.greater","tfOps.greaterEqual","tfOps.less","tfOps.lessEqual","tfOps.logicalAnd","tfOps.logicalNot","tfOps.logicalOr","tfOps.where","logical.executeOp","tfOps.matMul","tfOps.einsum","tfOps","tfOps.transpose","matMul","a","transposeA","transposeB","matrices.executeOp","tfOps.batchNorm","tfOps.localResponseNormalization","tfOps.softmax","tfOps.logSoftmax","tfOps.sparseToDense","normalization.executeOp","keepDims","tfOps.max","tfOps.mean","tfOps.min","tfOps.sum","tfOps.all","tfOps.any","tfOps.argMax","tfOps.argMin","exclusive","reverse","tfOps.cumsum","tfOps.bincount","x_1","weights_1","size_1","binaryOutput","tfOps.denseBincount","reduction.executeOp","n","tfOps.concat","tfOps.gather","batchDims","dims","tfOps.reverse","begin","tfOps.slice","beginMask","endMask","ellipsisMask","newAxisMask","shrinkAxisMask","tfOps.stridedSlice","squeezedShape","tfOps.squeeze","mapped","sameShape","arraysEqual","tfOps.reshape","tfOps.stack","tfOps.unstack","reps","tfOps.tile","numOrSizeSplits","tfOps.split","tfOps.scatterND","tfOps.gatherND","sparseValues","sliceJoin.executeOp","tfOps.fft","tfOps.ifft","tfOps.rfft","tfOps.irfft","spectral.executeOp","tfOps.expandDims","tfOps.mirrorPad","tfOps.pad","blockShape","paddings","tfOps.spaceToBatchND","crops","tfOps.batchToSpaceND","blockSize","tfOps.depthToSpace","tfOps.broadcastTo","transformation.executeOp","addHashTable","getHashTableById","import","tensorSize","hashTable.executeOp","opMapper","customExecutor","tfc.util","isPromise","then","weightMap","frameName","iterationId","rootContext","generateCurrentContextIds","ExecutionContext","contexts","_currentContextIds","names","contextIdforContexts","join","lastId","newFrame","unshift","splice","shift","assign","getExecutionSubgraph","usedNodes","Set","missingInputs","dynamicNode","syncInputs","seen","inputNodeNames","initNodeNames","frontier","isControlFlow","isDynamicShape","isHashTable","child","add","CONTROL_FLOW_OPS","DYNAMIC_SHAPE_OPS","HASH_TABLE_OPS","parent","_outputs","_inputs","_initNodes","_signature","_functions","_functionExecutorMap","GraphExecutor","weightIds","_weightIds","functionExecutorMap","_weightMap","_resourceManager","sortedInputs","sort","sortedOutputs","SEPERATOR","executionInfo","outNames","inNames","inputNodes","weight","orderedNodes","every","getNodesInTopologicalOrder","mapInputs","checkInputs","checkInputShapeAndType","mapOutputs","checkOutputs","outputNodeNames","outputNodes","compilationKey","getCompilationKey","compiledMap","compile","tensorsToKeep","getFrozenTensorIds","intermediateTensorConsumerCount","checkTensorForDisposal","ids","outputNames","getTensorsForCurrentContenxt","count","_executeAsync","isFunctionExecution","executeWithControlFlow","results","outputIds","inputIds","isDisposed","mappedInputs","tslib_1.__spread","currentContext","added","promises","processStack","Promise","all","missingOutputs","alternativeMsg","item","this_1","currentContext_1","processChildNodes","childNode","shape_1","match","notInGraph","normalizedName","hashTableNameToHandle","hashTableMap","ResourceManager","modelUrl","loadOptions","GraphModel","version","executor","artifacts","userDefinedMetadata","path","load","handler","requestInit","io","browserHTTPRequest","handlers","getLoadHandlers","findIOHandler","loadSync","modelTopology","versions","producer","minConsumer","decodeWeights","weightData","weightSpecs","Instance","transformGraph","convertTensorMapToTensorsMap","modelInitializer","initializer","executeAsync","handlerOrURL","config","getSaveHandlers","save","execute","Tensor","normalizeInputs","normalizeOutputs","newMap","options","fromTFHub","endsWith","model","opFunc"],"mappings":"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"}