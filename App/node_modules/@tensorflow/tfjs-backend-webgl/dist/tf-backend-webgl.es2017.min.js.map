{"version":3,"file":"tf-backend-webgl.es2017.min.js","sources":["../src/canvas_util.ts","../src/tex_util.ts","../src/webgl_util.ts","../src/flags_webgl.ts","../src/glsl_version.ts","../src/shader_compiler_util.ts","../src/decode_matrix_gpu.ts","../src/decode_matrix_packed_gpu.ts","../src/encode_float_gpu.ts","../src/encode_float_packed_gpu.ts","../src/encode_matrix_gpu.ts","../src/encode_matrix_packed_gpu.ts","../src/gpgpu_util.ts","../src/gpgpu_context.ts","../src/shader_compiler.ts","../src/gpgpu_math.ts","../node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/binary_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Add.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/unary_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Ceil.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Exp.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Expm1.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Floor.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Greater.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Less.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Log.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Maximum.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Minimum.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Multiply.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/NotEqual.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Rsqrt.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SquaredDifference.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Sub.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Abs.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Bincount_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Concat_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/GatherV2_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/LinSpace_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Max_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Neg.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Prod.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Range_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Slice.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/StridedSlice_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Tile_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/TopK_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Transpose_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Unique_impl.js","../src/kernel_utils/shared.ts","../src/packing_util.ts","../src/pack_gpu.ts","../src/reshape_packed_gpu.ts","../src/texture_manager.ts","../src/unaryop_gpu.ts","../src/unaryop_packed_gpu.ts","../src/unpack_gpu.ts","../src/backend_webgl.ts","../src/webgl.ts","../src/base.ts","../src/binaryop_gpu.ts","../src/binaryop_packed_gpu.ts","../src/kernels/Identity.ts","../src/kernels/Complex.ts","../src/kernels/LeakyRelu.ts","../src/kernels/Prelu.ts","../src/kernel_utils/kernel_funcs_utils.ts","../src/mulmat_packed_gpu.ts","../src/binaryop_complex_gpu.ts","../src/kernels/Multiply.ts","../src/kernels/Reshape.ts","../src/kernel_utils/reshape.ts","../src/mean_gpu.ts","../src/reduce_gpu.ts","../src/kernel_utils/reduce.ts","../src/transpose_gpu.ts","../src/transpose_packed_gpu.ts","../src/kernels/Transpose_impl.ts","../src/kernels/Sum.ts","../src/kernels/Sum_impl.ts","../src/kernels/Transpose.ts","../src/kernels/BatchMatMul_impl.ts","../src/kernels/_FusedMatMul.ts","../src/kernels/Abs.ts","../src/kernels/Acos.ts","../src/kernels/Acosh.ts","../src/kernels/Add.ts","../src/addn_gpu.ts","../src/addn_packed_gpu.ts","../src/kernels/AddN.ts","../src/kernels/All.ts","../src/kernels/Any.ts","../src/argminmax_gpu.ts","../src/argminmax_packed_gpu.ts","../src/kernel_utils/arg_min_max.ts","../src/kernels/ArgMax.ts","../src/kernels/ArgMin.ts","../src/kernels/Asin.ts","../src/kernels/Asinh.ts","../src/kernels/Atan.ts","../src/kernels/Atan2.ts","../src/kernels/Atanh.ts","../src/pool_gpu.ts","../src/kernels/AvgPool.ts","../src/kernels/AvgPool3D.ts","../src/avg_pool_backprop_gpu.ts","../src/kernels/AvgPool3DGrad.ts","../src/kernels/AvgPoolGrad.ts","../src/kernels/BatchMatMul.ts","../src/batchnorm_gpu.ts","../src/batchnorm_packed_gpu.ts","../src/kernels/BatchNorm.ts","../src/slice_gpu.ts","../src/slice_packed_gpu.ts","../src/kernels/Slice.ts","../src/kernels/BatchToSpaceND.ts","../src/kernels/Bincount.ts","../src/kernels/NotEqual.ts","../src/kernels/Real.ts","../src/kernels/Cast.ts","../src/kernel_utils/int.ts","../src/kernels/Ceil.ts","../src/clip_gpu.ts","../src/clip_packed_gpu.ts","../src/kernels/ClipByValue.ts","../src/complex_abs_gpu.ts","../src/kernels/ComplexAbs.ts","../src/concat_gpu.ts","../src/concat_packed_gpu.ts","../src/kernels/Imag.ts","../src/kernels/Concat_impl.ts","../src/kernels/Concat.ts","../src/conv_gpu.ts","../src/im2col_packed_gpu.ts","../src/kernels/Conv2D_impl.ts","../src/kernels/Conv2D.ts","../src/conv_backprop_gpu.ts","../src/kernels/Conv2DBackpropFilter.ts","../src/kernels/Conv2DBackpropInput.ts","../src/kernels/Conv3D.ts","../src/kernels/Conv3DBackpropFilterV2.ts","../src/kernels/Conv3DBackpropInputV2.ts","../src/kernels/Cos.ts","../src/kernels/Cosh.ts","../src/crop_and_resize_gpu.ts","../src/kernels/CropAndResize.ts","../src/cumsum_gpu.ts","../src/kernels/Cumsum.ts","../src/kernels/DenseBincount.ts","../src/depth_to_space_gpu.ts","../src/kernels/DepthToSpace.ts","../src/conv_gpu_depthwise.ts","../src/conv_packed_gpu_depthwise.ts","../src/kernels/DepthwiseConv2dNative.ts","../src/conv_backprop_gpu_depthwise.ts","../src/kernels/DepthwiseConv2dNativeBackpropFilter.ts","../src/kernels/DepthwiseConv2dNativeBackpropInput.ts","../src/diag_gpu.ts","../src/kernels/Diag.ts","../src/dilation_gpu.ts","../src/kernels/Dilation2D.ts","../src/kernels/Einsum.ts","../src/kernels/Elu.ts","../src/kernels/EluGrad.ts","../src/kernels/Equal.ts","../src/kernels/Erf.ts","../src/kernels/Exp.ts","../src/kernels/ExpandDims.ts","../src/kernels/Expm1.ts","../src/fft_gpu.ts","../src/kernels/FFT_impl.ts","../src/kernels/FFT.ts","../src/fill_gpu.ts","../src/kernels/Fill.ts","../src/flip_left_right_gpu.ts","../src/kernels/FlipLeftRight.ts","../src/kernels/Floor.ts","../src/kernels/FloorDiv.ts","../src/kernels/FromPixels_utils/from_pixels_gpu.ts","../src/kernels/FromPixels_utils/from_pixels_packed_gpu.ts","../src/kernels/FromPixels.ts","../src/kernels/FusedConv2D.ts","../src/kernels/FusedDepthwiseConv2D.ts","../src/gather_nd_gpu.ts","../src/kernels/GatherNd.ts","../src/gather_gpu.ts","../src/kernels/GatherV2.ts","../src/kernels/Greater.ts","../src/kernels/GreaterEqual.ts","../src/kernels/IFFT.ts","../src/kernels/IsFinite.ts","../src/kernels/IsInf.ts","../src/kernels/IsNaN.ts","../src/kernels/Less.ts","../src/kernels/LessEqual.ts","../src/kernels/LinSpace.ts","../src/kernels/Log.ts","../src/kernels/Log1p.ts","../src/kernels/LogicalAnd.ts","../src/kernels/LogicalNot.ts","../src/kernels/LogicalOr.ts","../src/lrn_gpu.ts","../src/lrn_packed_gpu.ts","../src/kernels/LRN.ts","../src/lrn_grad_gpu.ts","../src/kernels/LRNGrad.ts","../src/kernels/Max.ts","../src/kernels/Max_impl.ts","../src/kernels/Maximum.ts","../src/kernels/MaxPool.ts","../src/kernels/MaxPool3D.ts","../src/max_pool_backprop_gpu.ts","../src/kernels/MaxPool3DGrad.ts","../src/kernels/MaxPoolGrad.ts","../src/kernels/MaxPoolWithArgmax.ts","../src/kernels/MaxPoolWithArgmax_impl.ts","../src/kernels/Mean.ts","../src/kernels/Mean_impl.ts","../src/kernels/Min.ts","../src/kernels/Minimum.ts","../src/mirror_pad_gpu.ts","../src/mirror_pad_packed_gpu.ts","../src/kernels/MirrorPad.ts","../src/kernels/Mod.ts","../src/multinomial_gpu.ts","../src/kernels/RealDiv.ts","../src/kernels/Sub.ts","../src/kernels/Softmax.ts","../src/kernels/Multinomial.ts","../src/kernels/Neg.ts","../src/kernels/NonMaxSuppressionV3.ts","../src/kernels/NonMaxSuppressionV4.ts","../src/kernels/NonMaxSuppressionV5.ts","../src/onehot_gpu.ts","../src/kernels/OneHot.ts","../src/kernels/ZerosLike.ts","../src/kernels/OnesLike.ts","../src/kernels/Pack.ts","../src/pad_gpu.ts","../src/pad_packed_gpu.ts","../src/kernels/PadV2.ts","../src/kernels/Pow.ts","../src/kernels/Prod.ts","../src/kernels/Range.ts","../src/kernels/Reciprocal.ts","../src/kernels/Relu.ts","../src/kernels/Relu6.ts","../src/resize_bilinear_gpu.ts","../src/resize_bilinear_packed_gpu.ts","../src/kernels/ResizeBilinear.ts","../src/resize_bilinear_backprop_gpu.ts","../src/kernels/ResizeBilinearGrad.ts","../src/resize_nearest_neighbor_gpu.ts","../src/kernels/ResizeNearestNeighbor.ts","../src/resize_nearest_neighbor_backprop_gpu.ts","../src/kernels/ResizeNearestNeighborGrad.ts","../src/reverse_gpu.ts","../src/reverse_packed_gpu.ts","../src/kernels/Reverse.ts","../src/rotate_gpu.ts","../src/kernels/RotateWithOffset.ts","../src/kernels/Round.ts","../src/kernels/Rsqrt.ts","../src/scatter_gpu.ts","../src/kernels/ScatterNd.ts","../src/select_gpu.ts","../src/kernels/Select.ts","../src/kernels/Selu.ts","../src/kernels/Sigmoid.ts","../src/kernels/Sign.ts","../src/kernels/Sin.ts","../src/kernels/Sinh.ts","../src/kernels/Softplus.ts","../src/kernels/SpaceToBatchND.ts","../src/kernels/SparseToDense.ts","../src/kernels/SplitV.ts","../src/kernels/Sqrt.ts","../src/kernels/Square.ts","../src/kernels/SquaredDifference.ts","../src/kernels/Step.ts","../src/strided_slice_gpu.ts","../src/kernels/StridedSlice.ts","../src/kernels/Tan.ts","../src/kernels/Tanh.ts","../src/tile_gpu.ts","../src/kernels/Tile.ts","../src/kernels/TopK.ts","../src/transform_gpu.ts","../src/kernels/Transform.ts","../src/kernels/Unique.ts","../src/kernels/Unpack.ts","../src/segment_gpu.ts","../src/kernels/UnsortedSegmentSum.ts","../src/register_all_kernels.ts","../src/version.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nconst contexts: {[key: string]: WebGLRenderingContext} = {};\n\nconst WEBGL_ATTRIBUTES: WebGLContextAttributes = {\n  alpha: false,\n  antialias: false,\n  premultipliedAlpha: false,\n  preserveDrawingBuffer: false,\n  depth: false,\n  stencil: false,\n  failIfMajorPerformanceCaveat: true\n};\n\nexport function clearWebGLContext(webGLVersion: number) {\n  delete contexts[webGLVersion];\n}\n\nexport function setWebGLContext(\n    webGLVersion: number, gl: WebGLRenderingContext) {\n  contexts[webGLVersion] = gl;\n}\n\nexport function getWebGLContext(webGLVersion: number): WebGLRenderingContext {\n  if (!(webGLVersion in contexts)) {\n    const newCtx = getWebGLRenderingContext(webGLVersion);\n    if (newCtx !== null) {\n      contexts[webGLVersion] = newCtx;\n    } else {\n      console.log('Could not get context for WebGL version', webGLVersion);\n      return null;\n    }\n  }\n  const gl = contexts[webGLVersion];\n  if (gl.isContextLost()) {\n    delete contexts[webGLVersion];\n    return getWebGLContext(webGLVersion);\n  }\n\n  gl.disable(gl.DEPTH_TEST);\n  gl.disable(gl.STENCIL_TEST);\n  gl.disable(gl.BLEND);\n  gl.disable(gl.DITHER);\n  gl.disable(gl.POLYGON_OFFSET_FILL);\n  gl.disable(gl.SAMPLE_COVERAGE);\n  gl.enable(gl.SCISSOR_TEST);\n  gl.enable(gl.CULL_FACE);\n  gl.cullFace(gl.BACK);\n\n  return contexts[webGLVersion];\n}\n\nfunction createCanvas(webGLVersion: number) {\n  if (typeof OffscreenCanvas !== 'undefined' && webGLVersion === 2) {\n    return new OffscreenCanvas(300, 150);\n  } else if (typeof document !== 'undefined') {\n    return document.createElement('canvas');\n  } else {\n    throw new Error('Cannot create a canvas in this context');\n  }\n}\n\nfunction getWebGLRenderingContext(webGLVersion: number): WebGLRenderingContext {\n  if (webGLVersion !== 1 && webGLVersion !== 2) {\n    throw new Error('Cannot get WebGL rendering context, WebGL is disabled.');\n  }\n  const canvas = createCanvas(webGLVersion);\n\n  canvas.addEventListener('webglcontextlost', (ev: Event) => {\n    ev.preventDefault();\n    delete contexts[webGLVersion];\n  }, false);\n  if (webGLVersion === 1) {\n    return (canvas.getContext('webgl', WEBGL_ATTRIBUTES) ||\n            canvas.getContext('experimental-webgl', WEBGL_ATTRIBUTES)) as\n        WebGLRenderingContext;\n  }\n  return canvas.getContext('webgl2', WEBGL_ATTRIBUTES) as WebGLRenderingContext;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataId, DataType, env, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nexport enum PackingScheme {\n  /**\n   * All values in a single texel are densely packed without any constraints.\n   *\n   * This is how the shader encodes a tensor with shape = [2, 3, 4]\n   * (indices are [batch, row, col]).\n   *\n   * 000|001   010|011   020|021\n   * -------   -------   -------\n   * 002|003   012|013   022|023\n   *\n   * 100|101   110|111   120|121\n   * -------   -------   -------\n   * 102|103   112|113   122|123\n   *\n   */\n  DENSE,\n\n  /**\n   * Single texels contain only values from the same batch, and from adjacent\n   * rows and columns.\n   *\n   * This is how the shader encodes a tensor with shape = [2, 3, 5]\n   * (indices are [batch, row, col]).\n   *\n   * 000|001   002|003   004|xxx   020|021   022|023   024|xxx\n   * -------   -------   -------   -------   -------   -------\n   * 010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n   *\n   * 100|101   102|103   104|xxx   120|121   122|123   124|xxx\n   * -------   -------   -------   -------   -------   -------\n   * 110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n   *\n   */\n  SHARED_BATCH\n}\n\nexport enum TextureUsage {\n  RENDER,\n  UPLOAD,\n  PIXELS,\n  DOWNLOAD\n}\n\nexport enum PhysicalTextureType {\n  UNPACKED_FLOAT16,\n  UNPACKED_FLOAT32,\n  PACKED_4X1_UNSIGNED_BYTE,\n  PACKED_2X2_FLOAT32,\n  PACKED_2X2_FLOAT16\n}\n\nexport interface TextureData {\n  // Required.\n  shape: number[];\n  dtype: DataType;\n\n  // Optional.\n  values?: backend_util.BackendValues;\n  texture?: WebGLTexture;\n  // For complex numbers, the real and imaginary parts are stored as their own\n  // individual tensorInfos, with a parent joining the two with the\n  // complexTensors field. When this is defined, texture will be null.\n  complexTensorInfos?: {real: TensorInfo, imag: TensorInfo};\n  /** [rows, columns] shape of the texture. */\n  texShape?: [number, number];\n  usage?: TextureUsage;\n  isPacked?: boolean;\n\n  refCount: number;\n\n  // Available when the tensor has been sliced.\n  slice?: {\n    // Offset in the 'flat index' space.\n    flatOffset: number;\n    // Used for counting how many sliced tensors point to the same texture.\n    origDataId: DataId;\n  };\n}\n\nexport function getUnpackedMatrixTextureShapeWidthHeight(\n    rows: number, columns: number): [number, number] {\n  return [columns, rows];\n}\n\nexport function getUnpackedArraySizeFromMatrixSize(\n    matrixSize: number, channelsPerTexture: number): number {\n  return matrixSize * channelsPerTexture;\n}\n\nexport function getColorMatrixTextureShapeWidthHeight(\n    rows: number, columns: number): [number, number] {\n  return [columns * 4, rows];\n}\n\n/**\n * Get shape for densely packed RGBA texture.\n */\nexport function getDenseTexShape(shape: number[]): [number, number] {\n  const size = util.sizeFromShape(shape);\n  const texelsNeeded = Math.ceil(size / 4);\n  return util.sizeToSquarishShape(texelsNeeded);\n}\n\nexport function getMatrixSizeFromUnpackedArraySize(\n    unpackedSize: number, channelsPerTexture: number): number {\n  if (unpackedSize % channelsPerTexture !== 0) {\n    throw new Error(\n        `unpackedSize (${unpackedSize}) must be a multiple of ` +\n        `${channelsPerTexture}`);\n  }\n  return unpackedSize / channelsPerTexture;\n}\n\nexport function decodeMatrixFromUnpackedColorRGBAArray(\n    unpackedArray: Float32Array, matrix: Float32Array, channels: number) {\n  const requiredSize = unpackedArray.length * channels / 4;\n  if (matrix.length < requiredSize) {\n    throw new Error(\n        `matrix length (${matrix.length}) must be >= ${requiredSize}`);\n  }\n  let dst = 0;\n  for (let src = 0; src < unpackedArray.length; src += 4) {\n    for (let c = 0; c < channels; c++) {\n      matrix[dst++] = unpackedArray[src + c];\n    }\n  }\n}\n\nexport function getPackedMatrixTextureShapeWidthHeight(\n    rows: number, columns: number): [number, number] {\n  return [\n    Math.max(1, Math.ceil(columns / 2)), Math.max(1, Math.ceil(rows / 2))\n  ];\n}\n\nexport function getPackedRGBAArraySizeFromMatrixShape(\n    rows: number, columns: number): number {\n  const [w, h] = getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return w * h * 4;\n}\n\nexport interface TextureConfig {\n  internalFormatFloat: number;\n  textureFormatFloat: number;\n  internalFormatPackedHalfFloat: number;\n  internalFormatHalfFloat: number;\n  internalFormatPackedFloat: number;\n\n  // The format to use during a gl.readPixels call.\n  downloadTextureFormat: number;\n  // How many channels need to be unpacked after a gl.readPixels call.\n  downloadUnpackNumChannels: number;\n\n  defaultNumChannels: number;\n  textureTypeHalfFloat: number;\n  textureTypeFloat: number;\n}\n\nexport function getTextureConfig(\n    // tslint:disable-next-line:no-any\n    gl: WebGLRenderingContext, textureHalfFloatExtension?: any): TextureConfig {\n  // tslint:disable-next-line:no-any\n  const glany = gl as any;\n\n  let internalFormatFloat: number;\n  let internalFormatHalfFloat: number;\n  let internalFormatPackedHalfFloat: number;\n  let internalFormatPackedFloat: number;\n  let textureFormatFloat: number;\n\n  let downloadTextureFormat: number;\n  let downloadUnpackNumChannels: number;\n\n  let defaultNumChannels: number;\n  let textureTypeHalfFloat: number;\n  let textureTypeFloat: number;\n\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    internalFormatFloat = glany.R32F;\n    internalFormatHalfFloat = glany.R16F;\n    internalFormatPackedHalfFloat = glany.RGBA16F;\n    internalFormatPackedFloat = glany.RGBA32F;\n    textureFormatFloat = glany.RED;\n    downloadUnpackNumChannels = 4;\n    defaultNumChannels = 1;\n    textureTypeHalfFloat = glany.HALF_FLOAT;\n    textureTypeFloat = glany.FLOAT;\n  } else {\n    internalFormatFloat = gl.RGBA;\n    internalFormatHalfFloat = gl.RGBA;\n    internalFormatPackedHalfFloat = gl.RGBA;\n    internalFormatPackedFloat = glany.RGBA;\n    textureFormatFloat = gl.RGBA;\n    downloadUnpackNumChannels = 4;\n    defaultNumChannels = 4;\n    textureTypeHalfFloat = textureHalfFloatExtension != null ?\n        textureHalfFloatExtension.HALF_FLOAT_OES :\n        null;\n    textureTypeFloat = gl.FLOAT;\n  }\n  downloadTextureFormat = gl.RGBA;\n\n  return {\n    internalFormatFloat,\n    internalFormatHalfFloat,\n    internalFormatPackedHalfFloat,\n    internalFormatPackedFloat,\n    textureFormatFloat,\n    downloadTextureFormat,\n    downloadUnpackNumChannels,\n    defaultNumChannels,\n    textureTypeHalfFloat,\n    textureTypeFloat\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {getWebGLContext} from './canvas_util';\nimport {getTextureConfig} from './tex_util';\n\nexport function callAndCheck<T>(gl: WebGLRenderingContext, func: () => T): T {\n  const returnValue = func();\n  if (env().getBool('DEBUG')) {\n    checkWebGLError(gl);\n  }\n  return returnValue;\n}\n\nfunction checkWebGLError(gl: WebGLRenderingContext) {\n  const error = gl.getError();\n  if (error !== gl.NO_ERROR) {\n    throw new Error('WebGL Error: ' + getWebGLErrorMessage(gl, error));\n  }\n}\n\n// https://en.wikipedia.org/wiki/Half-precision_floating-point_format\nconst MIN_FLOAT16 = 5.96e-8;\nconst MAX_FLOAT16 = 65504;\n\nexport function canBeRepresented(num: number): boolean {\n  if (env().getBool('WEBGL_RENDER_FLOAT32_ENABLED') || num === 0 ||\n      (MIN_FLOAT16 < Math.abs(num) && Math.abs(num) < MAX_FLOAT16)) {\n    return true;\n  }\n  return false;\n}\n\nexport function getWebGLErrorMessage(\n    gl: WebGLRenderingContext, status: number): string {\n  switch (status) {\n    case gl.NO_ERROR:\n      return 'NO_ERROR';\n    case gl.INVALID_ENUM:\n      return 'INVALID_ENUM';\n    case gl.INVALID_VALUE:\n      return 'INVALID_VALUE';\n    case gl.INVALID_OPERATION:\n      return 'INVALID_OPERATION';\n    case gl.INVALID_FRAMEBUFFER_OPERATION:\n      return 'INVALID_FRAMEBUFFER_OPERATION';\n    case gl.OUT_OF_MEMORY:\n      return 'OUT_OF_MEMORY';\n    case gl.CONTEXT_LOST_WEBGL:\n      return 'CONTEXT_LOST_WEBGL';\n    default:\n      return `Unknown error code ${status}`;\n  }\n}\n\nexport function getExtensionOrThrow(\n    gl: WebGLRenderingContext, extensionName: string): {} {\n  return throwIfNull<{}>(\n      gl, () => gl.getExtension(extensionName),\n      'Extension \"' + extensionName + '\" not supported on this browser.');\n}\n\nexport function createVertexShader(\n    gl: WebGLRenderingContext, vertexShaderSource: string): WebGLShader {\n  const vertexShader: WebGLShader = throwIfNull<WebGLShader>(\n      gl, () => gl.createShader(gl.VERTEX_SHADER),\n      'Unable to create vertex WebGLShader.');\n  callAndCheck(gl, () => gl.shaderSource(vertexShader, vertexShaderSource));\n  callAndCheck(gl, () => gl.compileShader(vertexShader));\n  if (gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS) === false) {\n    console.log(gl.getShaderInfoLog(vertexShader));\n    throw new Error('Failed to compile vertex shader.');\n  }\n  return vertexShader;\n}\n\nexport function createFragmentShader(\n    gl: WebGLRenderingContext, fragmentShaderSource: string): WebGLShader {\n  const fragmentShader: WebGLShader = throwIfNull<WebGLShader>(\n      gl, () => gl.createShader(gl.FRAGMENT_SHADER),\n      'Unable to create fragment WebGLShader.');\n  callAndCheck(gl, () => gl.shaderSource(fragmentShader, fragmentShaderSource));\n  callAndCheck(gl, () => gl.compileShader(fragmentShader));\n  if (gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS) === false) {\n    logShaderSourceAndInfoLog(\n        fragmentShaderSource, gl.getShaderInfoLog(fragmentShader));\n    throw new Error('Failed to compile fragment shader.');\n  }\n  return fragmentShader;\n}\n\nconst lineNumberRegex = /ERROR: [0-9]+:([0-9]+):/g;\nfunction logShaderSourceAndInfoLog(\n    shaderSource: string, shaderInfoLog: string) {\n  const lineNumberRegexResult = lineNumberRegex.exec(shaderInfoLog);\n  if (lineNumberRegexResult == null) {\n    console.log(`Couldn't parse line number in error: ${shaderInfoLog}`);\n    console.log(shaderSource);\n    return;\n  }\n\n  const lineNumber = +lineNumberRegexResult[1];\n\n  const shaderLines = shaderSource.split('\\n');\n  const pad = shaderLines.length.toString().length + 2;\n  const linesWithLineNumbers = shaderLines.map(\n      (line, lineNumber) =>\n          util.rightPad((lineNumber + 1).toString(), pad) + line);\n  let maxLineLength = 0;\n  for (let i = 0; i < linesWithLineNumbers.length; i++) {\n    maxLineLength = Math.max(linesWithLineNumbers[i].length, maxLineLength);\n  }\n\n  const beforeErrorLines = linesWithLineNumbers.slice(0, lineNumber - 1);\n  const errorLine = linesWithLineNumbers.slice(lineNumber - 1, lineNumber);\n  const afterErrorLines = linesWithLineNumbers.slice(lineNumber);\n\n  console.log(beforeErrorLines.join('\\n'));\n  console.log(shaderInfoLog.split('\\n')[0]);\n  console.log(\n      `%c ${util.rightPad(errorLine[0], maxLineLength)}`,\n      'border:1px solid red; background-color:#e3d2d2; color:#a61717');\n  console.log(afterErrorLines.join('\\n'));\n}\n\nexport function createProgram(gl: WebGLRenderingContext): WebGLProgram {\n  return throwIfNull<WebGLProgram>(\n      gl, () => gl.createProgram(), 'Unable to create WebGLProgram.');\n}\n\nexport function linkProgram(gl: WebGLRenderingContext, program: WebGLProgram) {\n  callAndCheck(gl, () => gl.linkProgram(program));\n  if (gl.getProgramParameter(program, gl.LINK_STATUS) === false) {\n    console.log(gl.getProgramInfoLog(program));\n    throw new Error('Failed to link vertex and fragment shaders.');\n  }\n}\n\nexport function validateProgram(\n    gl: WebGLRenderingContext, program: WebGLProgram) {\n  callAndCheck(gl, () => gl.validateProgram(program));\n  if (gl.getProgramParameter(program, gl.VALIDATE_STATUS) === false) {\n    console.log(gl.getProgramInfoLog(program));\n    throw new Error('Shader program validation failed.');\n  }\n}\n\nexport function createStaticVertexBuffer(\n    gl: WebGLRenderingContext, data: Float32Array): WebGLBuffer {\n  const buffer: WebGLBuffer = throwIfNull<WebGLBuffer>(\n      gl, () => gl.createBuffer(), 'Unable to create WebGLBuffer');\n  callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, buffer));\n  callAndCheck(gl, () => gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW));\n  return buffer;\n}\n\nexport function createStaticIndexBuffer(\n    gl: WebGLRenderingContext, data: Uint16Array): WebGLBuffer {\n  const buffer: WebGLBuffer = throwIfNull<WebGLBuffer>(\n      gl, () => gl.createBuffer(), 'Unable to create WebGLBuffer');\n  callAndCheck(gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer));\n  callAndCheck(\n      gl, () => gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, gl.STATIC_DRAW));\n  return buffer;\n}\n\nexport function getNumChannels(): number {\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    return 1;\n  }\n  return 4;\n}\n\nexport function createTexture(gl: WebGLRenderingContext): WebGLTexture {\n  return throwIfNull<WebGLTexture>(\n      gl, () => gl.createTexture(), 'Unable to create WebGLTexture.');\n}\n\nexport function validateTextureSize(width: number, height: number) {\n  const maxTextureSize = env().getNumber('WEBGL_MAX_TEXTURE_SIZE');\n  if ((width <= 0) || (height <= 0)) {\n    const requested = `[${width}x${height}]`;\n    throw new Error('Requested texture size ' + requested + ' is invalid.');\n  }\n  if ((width > maxTextureSize) || (height > maxTextureSize)) {\n    const requested = `[${width}x${height}]`;\n    const max = `[${maxTextureSize}x${maxTextureSize}]`;\n    throw new Error(\n        'Requested texture size ' + requested +\n        ' greater than WebGL maximum on this browser / GPU ' + max + '.');\n  }\n}\n\nexport function createFramebuffer(gl: WebGLRenderingContext): WebGLFramebuffer {\n  return throwIfNull<WebGLFramebuffer>(\n      gl, () => gl.createFramebuffer(), 'Unable to create WebGLFramebuffer.');\n}\n\nexport function bindVertexBufferToProgramAttribute(\n    gl: WebGLRenderingContext, program: WebGLProgram, attribute: string,\n    buffer: WebGLBuffer, arrayEntriesPerItem: number, itemStrideInBytes: number,\n    itemOffsetInBytes: number): boolean {\n  const loc = gl.getAttribLocation(program, attribute);\n  if (loc === -1) {\n    // The GPU compiler decided to strip out this attribute because it's unused,\n    // thus no need to bind.\n    return false;\n  }\n  callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, buffer));\n  callAndCheck(\n      gl,\n      () => gl.vertexAttribPointer(\n          loc, arrayEntriesPerItem, gl.FLOAT, false, itemStrideInBytes,\n          itemOffsetInBytes));\n  callAndCheck(gl, () => gl.enableVertexAttribArray(loc));\n  return true;\n}\n\nexport function bindTextureUnit(\n    gl: WebGLRenderingContext, texture: WebGLTexture, textureUnit: number) {\n  validateTextureUnit(gl, textureUnit);\n  callAndCheck(gl, () => gl.activeTexture(gl.TEXTURE0 + textureUnit));\n  callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n}\n\nexport function unbindTextureUnit(\n    gl: WebGLRenderingContext, textureUnit: number) {\n  validateTextureUnit(gl, textureUnit);\n  callAndCheck(gl, () => gl.activeTexture(gl.TEXTURE0 + textureUnit));\n  callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\n\nexport function getProgramUniformLocationOrThrow(\n    gl: WebGLRenderingContext, program: WebGLProgram,\n    uniformName: string): WebGLUniformLocation {\n  return throwIfNull<WebGLUniformLocation>(\n      gl, () => gl.getUniformLocation(program, uniformName),\n      'uniform \"' + uniformName + '\" not present in program.');\n}\n\nexport function getProgramUniformLocation(\n    gl: WebGLRenderingContext, program: WebGLProgram,\n    uniformName: string): WebGLUniformLocation {\n  return gl.getUniformLocation(program, uniformName);\n}\n\nexport function bindTextureToProgramUniformSampler(\n    gl: WebGLRenderingContext, texture: WebGLTexture,\n    uniformSamplerLocation: WebGLUniformLocation, textureUnit: number) {\n  callAndCheck(gl, () => bindTextureUnit(gl, texture, textureUnit));\n  callAndCheck(gl, () => gl.uniform1i(uniformSamplerLocation, textureUnit));\n}\n\nexport function bindCanvasToFramebuffer(gl: WebGLRenderingContext) {\n  callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));\n  callAndCheck(gl, () => gl.viewport(0, 0, gl.canvas.width, gl.canvas.height));\n  callAndCheck(gl, () => gl.scissor(0, 0, gl.canvas.width, gl.canvas.height));\n}\n\nexport function bindColorTextureToFramebuffer(\n    gl: WebGLRenderingContext, texture: WebGLTexture,\n    framebuffer: WebGLFramebuffer) {\n  callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer));\n  callAndCheck(\n      gl,\n      () => gl.framebufferTexture2D(\n          gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0));\n}\n\nexport function unbindColorTextureFromFramebuffer(\n    gl: WebGLRenderingContext, framebuffer: WebGLFramebuffer) {\n  callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer));\n  callAndCheck(\n      gl,\n      () => gl.framebufferTexture2D(\n          gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, null, 0));\n}\n\nexport function validateFramebuffer(gl: WebGLRenderingContext) {\n  const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n  if (status !== gl.FRAMEBUFFER_COMPLETE) {\n    throw new Error(\n        'Error binding framebuffer: ' + getFramebufferErrorMessage(gl, status));\n  }\n}\n\nexport function getFramebufferErrorMessage(\n    gl: WebGLRenderingContext, status: number): string {\n  switch (status) {\n    case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:\n      return 'FRAMEBUFFER_INCOMPLETE_ATTACHMENT';\n    case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:\n      return 'FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT';\n    case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\n      return 'FRAMEBUFFER_INCOMPLETE_DIMENSIONS';\n    case gl.FRAMEBUFFER_UNSUPPORTED:\n      return 'FRAMEBUFFER_UNSUPPORTED';\n    default:\n      return `unknown error ${status}`;\n  }\n}\n\nfunction throwIfNull<T>(\n    gl: WebGLRenderingContext, returnTOrNull: () => T | null,\n    failureMessage: string): T {\n  const tOrNull: T|null = callAndCheck(gl, () => returnTOrNull());\n  if (tOrNull == null) {\n    throw new Error(failureMessage);\n  }\n  return tOrNull;\n}\n\nfunction validateTextureUnit(gl: WebGLRenderingContext, textureUnit: number) {\n  const maxTextureUnit = gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1;\n  const glTextureUnit = textureUnit + gl.TEXTURE0;\n  if (glTextureUnit < gl.TEXTURE0 || glTextureUnit > maxTextureUnit) {\n    const textureUnitRange = `[gl.TEXTURE0, gl.TEXTURE${maxTextureUnit}]`;\n    throw new Error(`textureUnit must be in ${textureUnitRange}.`);\n  }\n}\n\nexport function getBatchDim(shape: number[], dimsToSkip = 2): number {\n  return util.sizeFromShape(shape.slice(0, shape.length - dimsToSkip));\n}\n\nexport function getRowsCols(shape: number[]): [number, number] {\n  if (shape.length === 0) {\n    throw Error('Cannot get rows and columns of an empty shape array.');\n  }\n\n  return [\n    shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]\n  ];\n}\n\nexport function getShapeAs3D(shape: number[]): [number, number, number] {\n  let shapeAs3D: [number, number, number] = [1, 1, 1];\n  const isScalar = shape.length === 0 || (shape.length === 1 && shape[0] === 1);\n  if (!isScalar) {\n    shapeAs3D =\n        [getBatchDim(shape), ...getRowsCols(shape)] as [number, number, number];\n  }\n  return shapeAs3D;\n}\n\nexport function getTextureShapeFromLogicalShape(\n    logShape: number[], isPacked = false): [number, number] {\n  let maxTexSize = env().getNumber('WEBGL_MAX_TEXTURE_SIZE');\n  if (isPacked) {\n    maxTexSize = maxTexSize * 2;\n\n    // This logic ensures we accurately count the number of packed texels needed\n    // to accommodate the tensor. We can only pack values in the same texel if\n    // they are from adjacent pairs of rows/cols within the same batch. So if a\n    // tensor has 3 rows, we pretend it has 4 rows in order to account for the\n    // fact that the texels containing the third row are half empty.\n    logShape = logShape.map(\n        (d, i) => i >= logShape.length - 2 ?\n            util.nearestLargerEven(logShape[i]) :\n            logShape[i]);\n\n    // Packed texture height is at least 2 (the channel height of a single\n    // texel).\n    if (logShape.length === 1) {\n      logShape = [2, logShape[0]];\n    }\n  }\n\n  // If logical shape is 2, we don't squeeze, since we want to match physical.\n  if (logShape.length !== 2) {\n    const squeezeResult = util.squeezeShape(logShape);\n    logShape = squeezeResult.newShape;\n  }\n\n  let size = util.sizeFromShape(logShape);\n  if (logShape.length <= 1 && size <= maxTexSize) {\n    return [1, size];\n  } else if (\n      logShape.length === 2 && logShape[0] <= maxTexSize &&\n      logShape[1] <= maxTexSize) {\n    return logShape as [number, number];\n  } else if (\n      logShape.length === 3 && logShape[0] * logShape[1] <= maxTexSize &&\n      logShape[2] <= maxTexSize) {\n    return [logShape[0] * logShape[1], logShape[2]];\n  } else if (\n      logShape.length === 3 && logShape[0] <= maxTexSize &&\n      logShape[1] * logShape[2] <= maxTexSize) {\n    return [logShape[0], logShape[1] * logShape[2]];\n  } else if (\n      logShape.length === 4 &&\n      logShape[0] * logShape[1] * logShape[2] <= maxTexSize &&\n      logShape[3] <= maxTexSize) {\n    return [logShape[0] * logShape[1] * logShape[2], logShape[3]];\n  } else if (\n      logShape.length === 4 && logShape[0] <= maxTexSize &&\n      logShape[1] * logShape[2] * logShape[3] <= maxTexSize) {\n    return [logShape[0], logShape[1] * logShape[2] * logShape[3]];\n  } else {\n    if (isPacked) {\n      // For packed textures size equals the number of channels required to\n      // accommodate the texture data. However in order to squarify such that\n      // inner dimensions stay even, we rewrite size to equal the number of\n      // texels. Then in the return statement we rehydrate the squarified\n      // dimensions to channel units.\n\n      const batchDim = getBatchDim(logShape);\n      let rows = 2, cols = 2;\n      if (logShape.length) {\n        [rows, cols] = getRowsCols(logShape);\n      }\n      size = batchDim * (rows / 2) * (cols / 2);\n      return util.sizeToSquarishShape(size).map(d => d * 2) as [number, number];\n    }\n    return util.sizeToSquarishShape(size);\n  }\n}\n\nfunction isEven(n: number): boolean {\n  return n % 2 === 0;\n}\n\n/**\n * This determines whether reshaping a packed texture requires rearranging\n * the data within the texture, assuming 2x2 packing.\n */\nexport function isReshapeFree(shape1: number[], shape2: number[]): boolean {\n  shape1 = shape1.slice(-2);\n  shape2 = shape2.slice(-2);\n\n  if (util.arraysEqual(shape1, shape2)) {\n    return true;\n  }\n\n  if (!shape1.length || !shape2.length) {  // One of the shapes is a scalar.\n    return true;\n  }\n\n  if (shape1[0] === 0 || shape1[1] === 0 || shape2[0] === 0 ||\n      shape2[1] === 0) {\n    return true;\n  }\n\n  if (shape1.length !== shape2.length) {  // One of the shapes is a vector.\n    const shape1Cols = shape1.slice(-1)[0];\n    const shape2Cols = shape2.slice(-1)[0];\n    if (shape1Cols === shape2Cols) {\n      return true;\n    }\n\n    if (isEven(shape1Cols) && isEven(shape2Cols) &&\n        (shape1[0] === 1 || shape2[0] === 1)) {\n      return true;\n    }\n  }\n  return shape1[1] === shape2[1] && isEven(shape1[0]) && isEven(shape2[0]);\n}\n\n// We cache webgl params because the environment gets reset between\n// unit tests and we don't want to constantly query the WebGLContext for\n// MAX_TEXTURE_SIZE.\nlet MAX_TEXTURE_SIZE: number;\nlet MAX_TEXTURES_IN_SHADER: number;\n\nexport function getWebGLMaxTextureSize(webGLVersion: number): number {\n  if (MAX_TEXTURE_SIZE == null) {\n    const gl = getWebGLContext(webGLVersion);\n    MAX_TEXTURE_SIZE = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n  }\n  return MAX_TEXTURE_SIZE;\n}\n\nexport function resetMaxTextureSize() {\n  MAX_TEXTURE_SIZE = null;\n}\nexport function resetMaxTexturesInShader() {\n  MAX_TEXTURES_IN_SHADER = null;\n}\n\nexport function getMaxTexturesInShader(webGLVersion: number): number {\n  if (MAX_TEXTURES_IN_SHADER == null) {\n    const gl = getWebGLContext(webGLVersion);\n    MAX_TEXTURES_IN_SHADER = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n  }\n  // We cap at 16 to avoid spurious runtime \"memory exhausted\" error.\n  return Math.min(16, MAX_TEXTURES_IN_SHADER);\n}\n\nexport function getWebGLDisjointQueryTimerVersion(webGLVersion: number):\n    number {\n  if (webGLVersion === 0) {\n    return 0;\n  }\n\n  let queryTimerVersion: number;\n  const gl = getWebGLContext(webGLVersion);\n\n  if (hasExtension(gl, 'EXT_disjoint_timer_query_webgl2') &&\n      webGLVersion === 2) {\n    queryTimerVersion = 2;\n  } else if (hasExtension(gl, 'EXT_disjoint_timer_query')) {\n    queryTimerVersion = 1;\n  } else {\n    queryTimerVersion = 0;\n  }\n  return queryTimerVersion;\n}\n\nexport function hasExtension(gl: WebGLRenderingContext, extensionName: string) {\n  const ext = gl.getExtension(extensionName);\n  return ext != null;\n}\n\nexport function isWebGLVersionEnabled(webGLVersion: 1|2) {\n  try {\n    const gl = getWebGLContext(webGLVersion);\n    if (gl != null) {\n      return true;\n    }\n  } catch (e) {\n    console.log('Error when getting WebGL context: ', e);\n    return false;\n  }\n  return false;\n}\n\nexport function isCapableOfRenderingToFloatTexture(webGLVersion: number):\n    boolean {\n  if (webGLVersion === 0) {\n    return false;\n  }\n\n  const gl = getWebGLContext(webGLVersion);\n\n  if (webGLVersion === 1) {\n    if (!hasExtension(gl, 'OES_texture_float')) {\n      return false;\n    }\n  } else {\n    if (!hasExtension(gl, 'EXT_color_buffer_float')) {\n      return false;\n    }\n  }\n\n  const isFrameBufferComplete = createFloatTextureAndBindToFramebuffer(gl);\n  return isFrameBufferComplete;\n}\n\n/**\n * Check if we can download values from a float/half-float texture.\n *\n * Note that for performance reasons we use binding a texture to a framebuffer\n * as a proxy for ability to download float values later using readPixels. The\n * texture params of this texture will not match those in readPixels exactly\n * but if we are unable to bind some kind of float texture to the frameBuffer\n * then we definitely will not be able to read float values from it.\n */\nexport function isDownloadFloatTextureEnabled(webGLVersion: number): boolean {\n  if (webGLVersion === 0) {\n    return false;\n  }\n\n  const gl = getWebGLContext(webGLVersion);\n\n  if (webGLVersion === 1) {\n    if (!hasExtension(gl, 'OES_texture_float')) {\n      return false;\n    }\n    if (!hasExtension(gl, 'WEBGL_color_buffer_float')) {\n      return false;\n    }\n  } else {\n    if (hasExtension(gl, 'EXT_color_buffer_float')) {\n      return createFloatTextureAndBindToFramebuffer(gl);\n    }\n\n    const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';\n    if (hasExtension(gl, COLOR_BUFFER_HALF_FLOAT)) {\n      const textureHalfFloatExtension =\n          gl.getExtension(COLOR_BUFFER_HALF_FLOAT);\n      return createHalfFloatTextureAndBindToFramebuffer(\n          gl, textureHalfFloatExtension);\n    }\n\n    return false;\n  }\n\n  const isFrameBufferComplete = createFloatTextureAndBindToFramebuffer(gl);\n  return isFrameBufferComplete;\n}\n\nfunction createFloatTextureAndBindToFramebuffer(gl: WebGLRenderingContext):\n    boolean {\n  const texConfig = getTextureConfig(gl);\n\n  const texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n\n  const width = 1;\n  const height = 1;\n  gl.texImage2D(\n      gl.TEXTURE_2D, 0, texConfig.internalFormatFloat, width, height, 0,\n      texConfig.textureFormatFloat, texConfig.textureTypeFloat, null);\n\n  const frameBuffer = gl.createFramebuffer();\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n  gl.framebufferTexture2D(\n      gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n  const isFrameBufferComplete =\n      gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n\n  gl.bindTexture(gl.TEXTURE_2D, null);\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  gl.deleteTexture(texture);\n  gl.deleteFramebuffer(frameBuffer);\n\n  return isFrameBufferComplete;\n}\n\nfunction createHalfFloatTextureAndBindToFramebuffer(\n    // tslint:disable-next-line:no-any\n    gl: WebGLRenderingContext, textureHalfFloatExtension: any): boolean {\n  const texConfig = getTextureConfig(gl, textureHalfFloatExtension);\n  const texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n\n  const width = 1;\n  const height = 1;\n  gl.texImage2D(\n      gl.TEXTURE_2D, 0, texConfig.internalFormatHalfFloat, width, height, 0,\n      texConfig.textureFormatFloat, texConfig.textureTypeHalfFloat, null);\n\n  const frameBuffer = gl.createFramebuffer();\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n  gl.framebufferTexture2D(\n      gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n  const isFrameBufferComplete =\n      gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n\n  gl.bindTexture(gl.TEXTURE_2D, null);\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  gl.deleteTexture(texture);\n  gl.deleteFramebuffer(frameBuffer);\n\n  return isFrameBufferComplete;\n}\n\nexport function isWebGLFenceEnabled(webGLVersion: number) {\n  if (webGLVersion !== 2) {\n    return false;\n  }\n  const gl = getWebGLContext(webGLVersion);\n\n  // tslint:disable-next-line:no-any\n  const isEnabled = (gl as any).fenceSync != null;\n  return isEnabled;\n}\n\nexport function assertNotComplex(\n    tensor: TensorInfo|TensorInfo[], opName: string): void {\n  if (!Array.isArray(tensor)) {\n    tensor = [tensor];\n  }\n  tensor.forEach(t => {\n    if (t != null) {\n      util.assert(\n          t.dtype !== 'complex64',\n          () => `${opName} does not support complex64 tensors ` +\n              'in the WebGL backend.');\n    }\n  });\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {device_util, env} from '@tensorflow/tfjs-core';\n\nimport {getMaxTexturesInShader, getWebGLDisjointQueryTimerVersion, getWebGLMaxTextureSize, isCapableOfRenderingToFloatTexture, isDownloadFloatTextureEnabled, isWebGLFenceEnabled, isWebGLVersionEnabled} from './webgl_util';\n\nconst ENV = env();\n\n/**\n * This file contains WebGL-specific flag registrations.\n */\n\n/**\n * True if WebGL is supported.\n */\nENV.registerFlag('HAS_WEBGL', () => ENV.getNumber('WEBGL_VERSION') > 0);\n\n/** 0: No WebGL, 1: WebGL 1.0, 2: WebGL 2.0. */\nENV.registerFlag('WEBGL_VERSION', () => {\n  if (isWebGLVersionEnabled(2)) {\n    return 2;\n  } else if (isWebGLVersionEnabled(1)) {\n    return 1;\n  }\n  return 0;\n});\n\n/** Whether to check for numerical representation problems. */\nENV.registerFlag('WEBGL_CHECK_NUMERICAL_PROBLEMS', () => false);\n\nENV.registerFlag(\n    'WEBGL_BUFFER_SUPPORTED', () => ENV.get('WEBGL_VERSION') === 2);\n\n/** Whether the WebGL backend will sometimes forward ops to the CPU. */\nENV.registerFlag('WEBGL_CPU_FORWARD', () => true);\n\n/** Whether the WebGL backend will always use f16 textures for rendering. */\nENV.registerFlag('WEBGL_FORCE_F16_TEXTURES', () => false);\n\n/** Whether to turn all packing related flags on. */\nENV.registerFlag('WEBGL_PACK', () => ENV.getBool('HAS_WEBGL'));\n\n/** Whether we will pack the batchnormalization op. */\nENV.registerFlag('WEBGL_PACK_NORMALIZATION', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack the clip op. */\nENV.registerFlag('WEBGL_PACK_CLIP', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack the depthwise conv op. */\n// TODO: https://github.com/tensorflow/tfjs/issues/1679\nENV.registerFlag('WEBGL_PACK_DEPTHWISECONV', () => true);\n\n/** Whether we will pack binary ops. */\nENV.registerFlag(\n    'WEBGL_PACK_BINARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack unary ops. */\nENV.registerFlag(\n    'WEBGL_PACK_UNARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack array ops. */\nENV.registerFlag(\n    'WEBGL_PACK_ARRAY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack image ops. */\nENV.registerFlag(\n    'WEBGL_PACK_IMAGE_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack reduce ops. */\nENV.registerFlag('WEBGL_PACK_REDUCE', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether packed WebGL kernels lazily unpack their outputs. */\nENV.registerFlag('WEBGL_LAZILY_UNPACK', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will use the im2col algorithm to speed up convolutions. */\nENV.registerFlag('WEBGL_CONV_IM2COL', () => ENV.getBool('WEBGL_PACK'));\n\n/** The maximum texture dimension. */\nENV.registerFlag(\n    'WEBGL_MAX_TEXTURE_SIZE',\n    () => getWebGLMaxTextureSize(ENV.getNumber('WEBGL_VERSION')));\n\n/** The maximum texture dimension. */\nENV.registerFlag(\n    'WEBGL_MAX_TEXTURES_IN_SHADER',\n    () => getMaxTexturesInShader(ENV.getNumber('WEBGL_VERSION')));\n\n/**\n * The disjoint_query_timer extension version.\n * 0: disabled, 1: EXT_disjoint_timer_query, 2:\n * EXT_disjoint_timer_query_webgl2.\n * In Firefox with WebGL 2.0,\n * EXT_disjoint_timer_query_webgl2 is not available, so we must use the\n * WebGL 1.0 extension.\n */\nENV.registerFlag('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION', () => {\n  const webGLVersion = ENV.getNumber('WEBGL_VERSION');\n\n  if (webGLVersion === 0) {\n    return 0;\n  }\n  return getWebGLDisjointQueryTimerVersion(webGLVersion);\n});\n\n/**\n * Whether the timer object from the disjoint_query_timer extension gives\n * timing information that is reliable.\n */\nENV.registerFlag(\n    'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE',\n    () => ENV.getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0 &&\n        !device_util.isMobile());\n\n/**\n * Whether the device is physically capable of rendering to float32 textures.\n */\nENV.registerFlag(\n    'WEBGL_RENDER_FLOAT32_CAPABLE',\n    () => isCapableOfRenderingToFloatTexture(ENV.getNumber('WEBGL_VERSION')));\n\n/**\n * Whether rendering to float32 textures is enabled. If disabled, renders to\n * float16 textures.\n */\nENV.registerFlag('WEBGL_RENDER_FLOAT32_ENABLED', () => {\n  return ENV.getBool('WEBGL_FORCE_F16_TEXTURES') ?\n      false :\n      ENV.getBool('WEBGL_RENDER_FLOAT32_CAPABLE');\n});\n\n/**\n * Whether downloading float textures is enabled (16 or 32 bit). If disabled,\n * uses IEEE 754 encoding of the float32 values to 4 uint8 when downloading.\n */\nENV.registerFlag(\n    'WEBGL_DOWNLOAD_FLOAT_ENABLED',\n    () => isDownloadFloatTextureEnabled(ENV.getNumber('WEBGL_VERSION')));\n\n/** Whether the fence API is available. */\nENV.registerFlag(\n    'WEBGL_FENCE_API_ENABLED',\n    () => isWebGLFenceEnabled(ENV.getNumber('WEBGL_VERSION')));\n\n/**\n * Tensors with size <= than this will be uploaded as uniforms, not textures.\n */\nENV.registerFlag('WEBGL_SIZE_UPLOAD_UNIFORM', () => {\n  // Use uniform uploads only when 32bit floats are supported. In\n  // 16bit\n  // environments there are problems with comparing a 16bit texture value\n  // with a 32bit uniform value.\n  const useUniforms = ENV.getBool('WEBGL_RENDER_FLOAT32_ENABLED');\n  return useUniforms ? 4 : 0;\n});\n\n/**\n * If the total number of bytes allocated on the GPU is greater than this\n * number, we will aggressively delete textures upon disposal with\n * gl.deleteMatrixTexture, rather than making them available for reuse.\n *\n * Default value -1 indicates that we will never aggressively delete textures.\n */\nENV.registerFlag(\n    'WEBGL_DELETE_TEXTURE_THRESHOLD',\n    () => {\n      return -1;\n    },\n    threshold => {\n      if (threshold < 0 && threshold !== -1) {\n        throw new Error(\n            `WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never ` +\n            `delete) or at least 0, but got ${threshold}.`);\n      }\n    });\n\n/**\n * Trigger a manual GL command flush if the threshold of time has passed since\n * previous Kernel execution. This can be useful for Andorid device where GL\n * command flush are delayed un til the end of javascript task. This value is\n * measured in millisecond. Typically you want to set this value to close to 1.\n *\n * Default value 1 for mobile chrome, and -1 for rest cases. -1 indicates that\n * we will not enforce manual flush and depend on system default flush schedule.\n */\nENV.registerFlag(\n    'WEBGL_FLUSH_THRESHOLD',\n    () => {\n      return device_util.isMobile() && ENV.getBool('IS_CHROME') ? 1 : -1;\n    },\n    threshold => {\n      if (threshold < 0 && threshold !== -1) {\n        throw new Error(\n            `WEBGL_FLUSH_THRESHOLD must be -1 (indicating never ` +\n            `manual flush) or at least 0, but got ${threshold}.`);\n      }\n    });\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {env} from '@tensorflow/tfjs-core';\n\nexport type GLSL = {\n  version: string,\n  attribute: string,\n  varyingVs: string,\n  varyingFs: string,\n  texture2D: string,\n  output: string,\n  defineOutput: string,\n  defineSpecialNaN: string,\n  defineSpecialInf: string,\n  defineRound: string\n};\n\nexport function getGlslDifferences(): GLSL {\n  let version: string;\n  let attribute: string;\n  let varyingVs: string;\n  let varyingFs: string;\n  let texture2D: string;\n  let output: string;\n  let defineOutput: string;\n  let defineSpecialNaN: string;\n  let defineSpecialInf: string;\n  let defineRound: string;\n\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    version = '#version 300 es';\n    attribute = 'in';\n    varyingVs = 'out';\n    varyingFs = 'in';\n    texture2D = 'texture';\n    output = 'outputColor';\n    defineOutput = 'out vec4 outputColor;';\n\n    // Use custom isnan definition to work across differences between\n    // implementations on various platforms. While this should happen in ANGLE\n    // we still see differences between android and windows (on chrome) when\n    // using isnan directly.\n    defineSpecialNaN = `\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    `;\n    // In webgl 2 we do not need to specify a custom isinf so there is no\n    // need for a special INFINITY constant.\n    defineSpecialInf = ``;\n    defineRound = `\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    `;\n  } else {\n    version = '';\n    attribute = 'attribute';\n    varyingVs = 'varying';\n    varyingFs = 'varying';\n    texture2D = 'texture2D';\n    output = 'gl_FragColor';\n    defineOutput = '';\n    // WebGL1 has no built in isnan so we define one here.\n    defineSpecialNaN = `\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    `;\n    defineSpecialInf = `\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    `;\n    defineRound = `\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    `;\n  }\n\n  return {\n    version,\n    attribute,\n    varyingVs,\n    varyingFs,\n    texture2D,\n    output,\n    defineOutput,\n    defineSpecialNaN,\n    defineSpecialInf,\n    defineRound\n  };\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\n/**\n * Produces GLSL code that derives logical coordinates from a flat\n * index. The code performs integer division with each stride and decrements\n * the index until the index equals the final dimension coordinate.\n */\nexport function getLogicalCoordinatesFromFlatIndex(\n    coords: string[], shape: number[], index = 'index'): string {\n  const strides = util.computeStrides(shape);\n  return strides\n      .map((stride, i) => {\n        const line1 = `int ${coords[i]} = ${index} / ${stride}`;\n        const line2 = i === strides.length - 1 ?\n            `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` :\n            `index -= ${coords[i]} * ${stride}`;\n        return `${line1}; ${line2};`;\n      })\n      .join('');\n}\n\nfunction buildVec(x: string[]): string {\n  if (x.length === 1) {\n    return `${x[0]}`;\n  }\n  return `vec${x.length}(${x.join(',')})`;\n}\n\n/**\n * Produces GLSL code that computes the dot product of the input x and y\n * vectors. Handles splitting inputs into increments of vec4s when necessary.\n */\nexport function dotify(x: string[], y: string[]): string {\n  if (x.length !== y.length) {\n    throw new Error(\n        `Vectors to be dotted must be of the same length -` +\n        `got ${x.length} and ${y.length}`);\n  }\n\n  const slices: string[] = [];\n  const nearestVec4 = Math.floor(x.length / 4);\n  const nearestVec4Remainder = x.length % 4;\n\n  for (let i = 0; i < nearestVec4; i++) {\n    const xSlice = x.slice(i * 4, i * 4 + 4);\n    const ySlice = y.slice(i * 4, i * 4 + 4);\n    slices.push(`${buildVec(xSlice)}, ${buildVec(ySlice)}`);\n  }\n\n  if (nearestVec4Remainder !== 0) {\n    let xSlice = x.slice(nearestVec4 * 4);\n    let ySlice = y.slice(nearestVec4 * 4);\n    if (xSlice.length === 1) {\n      xSlice = xSlice.map(d => `float(${d})`);\n      ySlice = ySlice.map(d => `float(${d})`);\n    }\n    slices.push(`${buildVec(xSlice)}, ${buildVec(ySlice)}`);\n  }\n\n  return slices.map((d, i) => `dot(${d})`).join('+');\n}\n\n/**\n * Produces GLSL that computes the flat index from 3D coordinates.\n */\nexport function getFlatIndexFrom3D(shape: [number, number, number]): string {\n  const strides = util.computeStrides(shape).map(d => d.toString());\n\n  return `\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${strides[0]} + coords.y * ${strides[1]} + coords.z;\n  }\n`;\n}\n\nexport const ENCODE_FLOAT_SNIPPET = `\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n`;\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\nimport {getDenseTexShape, PackingScheme} from './tex_util';\n\nexport class DecodeMatrixProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: [number, number, number];\n  packedInputs = false;\n  packedOutput = true;\n  outPackingScheme = PackingScheme.DENSE;\n\n  constructor(outputShape: [number, number, number]) {\n    const texShape = getDenseTexShape(outputShape);\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n\n    this.userCode = `\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${\n        shader_util.getLogicalCoordinatesFromFlatIndex(\n            ['r', 'c', 'd'], outputShape)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${texShape[0]}, ${texShape[1]}));\n        int index = 4 * (resTexRC.x * ${texShape[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\nimport {getDenseTexShape, PackingScheme} from './tex_util';\n\nexport class DecodeMatrixPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: [number, number, number];\n  outPackingScheme = PackingScheme.DENSE;\n\n  constructor(outputShape: [number, number, number]) {\n    const texShape = getDenseTexShape(outputShape);\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n\n    this.userCode = `\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${\n        shader_util.getLogicalCoordinatesFromFlatIndex(\n            ['r', 'c', 'd'], outputShape)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${texShape[0]}, ${texShape[1]}));\n        int index = 4 * (resTexRC.x * ${texShape[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {ENCODE_FLOAT_SNIPPET} from './shader_compiler_util';\nimport {TextureUsage} from './tex_util';\n\nexport class EncodeFloatProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  outTexUsage = TextureUsage.DOWNLOAD;\n\n  constructor(outputShape: number[]) {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.userCode = `\n      ${ENCODE_FLOAT_SNIPPET}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${glsl.output} = encode_float(x);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {ENCODE_FLOAT_SNIPPET} from './shader_compiler_util';\nimport {TextureUsage} from './tex_util';\n\nexport class EncodeFloatPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  packedInputs = true;\n  packedOutput = false;\n  outTexUsage = TextureUsage.DOWNLOAD;\n\n  constructor(outputShape: [number, number, number]) {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.userCode = `\n      ${ENCODE_FLOAT_SNIPPET}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${glsl.output} = encode_float(x);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n\nexport class EncodeMatrixProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(\n      outputShape: [number, number, number], texShape: [number, number],\n      inputIsUnsignedByte = false) {\n    const glsl = getGlslDifferences();\n    const [height, width] = texShape;\n    this.outputShape = outputShape;\n\n    let output = `result`;\n    if (inputIsUnsignedByte) {\n      output = `floor(result * 255. + 0.5)`;\n    }\n\n    this.userCode = `\n      ${shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / ${width};\n        int c = imod(flatIndex, ${width});\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(${width}.0, ${height}.0);\n        vec4 values = ${glsl.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${glsl.output} = vec4(${output}, 0., 0., 0.);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n\n/*\nThis is how the shader encodes a tensor with shape = [2, 3, 5]\n(indices are [batch, row, col]).\n\n000|001   002|003   004|xxx   020|021   022|023   024|xxx\n-------   -------   -------   -------   -------   -------\n010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n\n100|101   102|103   104|xxx   120|121   122|123   124|xxx\n-------   -------   -------   -------   -------   -------\n110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n\nSingle texels contain only values from the same batch, and from adjacent rows\nand columns.\n */\n\nexport class EncodeMatrixPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  packedInputs = false;\n  packedOutput = true;\n\n  constructor(\n      outputShape: [number, number, number], texShape: [number, number],\n      inputIsUnsignedByte = false) {\n    const glsl = getGlslDifferences();\n    const [height, width] = texShape;\n    this.outputShape = outputShape;\n\n    let mainLoop = '';\n    let output = 'result';\n    if (inputIsUnsignedByte) {\n      output = 'floor(result * 255. + 0.5)';\n    }\n\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        const channel = row * 2 + col;\n\n        mainLoop += `\n          localCoords = coords;\n          if(localCoords[2] + ${col} < ${outputShape[2]}) {\n            localCoords[2] += ${col};\n            if(localCoords[1] + ${row} < ${outputShape[1]}) {\n              localCoords[1] += ${row};\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n\n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / ${width};\n              c = imod(flatIndex, ${width});\n              uv = (vec2(c, r) + halfCR) / vec2(${width}.0, ${height}.0);\n              values = ${glsl.texture2D}(A, uv);\n\n              if(offset == 0) {\n                result[${channel}] = values[0];\n              } else if(offset == 1) {\n                result[${channel}] = values[1];\n              } else if(offset == 2) {\n                result[${channel}] = values[2];\n              } else {\n                result[${channel}] = values[3];\n              }\n            }\n          }\n        `;\n      }\n    }\n\n    this.userCode = `\n      ${shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n\n        ${mainLoop}\n\n        ${glsl.output} = ${output};\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {PixelData, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {getGlslDifferences} from './glsl_version';\nimport * as tex_util from './tex_util';\nimport {TextureConfig} from './tex_util';\nimport * as webgl_util from './webgl_util';\n\nexport function createVertexShader(gl: WebGLRenderingContext): WebGLShader {\n  const glsl = getGlslDifferences();\n  const vertexShaderSource = `${glsl.version}\n    precision highp float;\n    ${glsl.attribute} vec3 clipSpacePos;\n    ${glsl.attribute} vec2 uv;\n    ${glsl.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`;\n  return webgl_util.createVertexShader(gl, vertexShaderSource);\n}\n\nexport function createVertexBuffer(gl: WebGLRenderingContext): WebGLBuffer {\n  // [x y z u v] * [upper-left, lower-left, upper-right, lower-right]\n  const vertexArray = new Float32Array(\n      [-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]);\n  return webgl_util.createStaticVertexBuffer(gl, vertexArray);\n}\n\nexport function createIndexBuffer(gl: WebGLRenderingContext): WebGLBuffer {\n  // OpenGL (and WebGL) have \"CCW == front\" winding\n  const triangleVertexIndices = new Uint16Array([0, 1, 2, 2, 1, 3]);\n  return webgl_util.createStaticIndexBuffer(gl, triangleVertexIndices);\n}\n\nfunction createAndConfigureTexture(\n    gl: WebGLRenderingContext, width: number, height: number,\n    internalFormat: number, textureFormat: number,\n    textureType: number): WebGLTexture {\n  webgl_util.validateTextureSize(width, height);\n  const texture = webgl_util.createTexture(gl);\n\n  const tex2d = gl.TEXTURE_2D;\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(tex2d, texture));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MIN_FILTER, gl.NEAREST));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MAG_FILTER, gl.NEAREST));\n  webgl_util.callAndCheck(\n      gl,\n      () => gl.texImage2D(\n          tex2d, 0, internalFormat, width, height, 0, textureFormat,\n          textureType, null));\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n  return texture;\n}\n\nexport function getInternalFormatForFloat32MatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatFloat;\n}\n\nexport function createFloat32MatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLTexture {\n  const [width, height] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForFloat32MatrixTexture(textureConfig),\n      textureConfig.textureFormatFloat, gl.FLOAT);\n}\n\nexport function getInternalFormatForFloat16MatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatHalfFloat;\n}\n\nexport function createFloat16MatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLTexture {\n  const [width, height] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForFloat16MatrixTexture(textureConfig),\n      textureConfig.textureFormatFloat, textureConfig.textureTypeHalfFloat);\n}\n\nexport function getInternalFormatForUnsignedBytesMatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.downloadTextureFormat;\n}\n\nexport function createUnsignedBytesMatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLTexture {\n  const [width, height] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForUnsignedBytesMatrixTexture(textureConfig), gl.RGBA,\n      gl.UNSIGNED_BYTE);\n}\n\nexport function getInternalFormatForPackedMatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatPackedFloat;\n}\n\nexport function createPackedMatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLTexture {\n  const [width, height] =\n      tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height, getInternalFormatForPackedMatrixTexture(textureConfig),\n      gl.RGBA, gl.FLOAT);\n}\n\nexport function getInternalFormatForFloat16PackedMatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatPackedHalfFloat;\n}\n\nexport function createFloat16PackedMatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLTexture {\n  const [width, height] =\n      tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForFloat16PackedMatrixTexture(textureConfig), gl.RGBA,\n      textureConfig.textureTypeHalfFloat);\n}\n\nexport function bindVertexProgramAttributeStreams(\n    gl: WebGLRenderingContext, program: WebGLProgram,\n    vertexBuffer: WebGLBuffer): boolean {\n  const posOffset = 0;               // x is the first buffer element\n  const uvOffset = 3 * 4;            // uv comes after [x y z]\n  const stride = (3 * 4) + (2 * 4);  // xyz + uv, each entry is 4-byte float.\n  webgl_util.callAndCheck(\n      gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer));\n  const success = webgl_util.bindVertexBufferToProgramAttribute(\n      gl, program, 'clipSpacePos', vertexBuffer, 3, stride, posOffset);\n  return success &&\n      webgl_util.bindVertexBufferToProgramAttribute(\n          gl, program, 'uv', vertexBuffer, 2, stride, uvOffset);\n}\n\nexport function uploadDenseMatrixToTexture(\n    gl: WebGLRenderingContext, texture: WebGLTexture, width: number,\n    height: number, data: TypedArray, textureConfig: TextureConfig) {\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n\n  let dataForUpload: TypedArray, texelDataType: number, internalFormat: number;\n  if (data instanceof Uint8Array) {\n    dataForUpload = new Uint8Array(width * height * 4);\n    texelDataType = gl.UNSIGNED_BYTE;\n    internalFormat = gl.RGBA;\n  } else {\n    dataForUpload = new Float32Array(width * height * 4);\n    texelDataType = gl.FLOAT;\n    internalFormat = textureConfig.internalFormatPackedFloat;\n  }\n\n  dataForUpload.set(data);\n\n  webgl_util.callAndCheck(\n      gl,\n      () => gl.texImage2D(\n          gl.TEXTURE_2D, 0, internalFormat, width, height, 0, gl.RGBA,\n          texelDataType, dataForUpload));\n\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\n\nexport function uploadPixelDataToTexture(\n    gl: WebGLRenderingContext, texture: WebGLTexture,\n    pixels: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement|\n    HTMLVideoElement|ImageBitmap) {\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n  if ((pixels as PixelData).data instanceof Uint8Array) {\n    webgl_util.callAndCheck(\n        gl,\n        () => gl.texImage2D(\n            gl.TEXTURE_2D, 0, gl.RGBA, pixels.width, pixels.height, 0, gl.RGBA,\n            gl.UNSIGNED_BYTE, (pixels as PixelData).data));\n  } else {\n    webgl_util.callAndCheck(\n        gl,\n        () => gl.texImage2D(\n            gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE,\n            pixels as ImageData | HTMLImageElement | HTMLCanvasElement |\n                HTMLVideoElement|ImageBitmap));\n  }\n\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\n\nexport function createBufferFromOutputTexture(\n    gl2: WebGL2RenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLBuffer {\n  // Create and bind the buffer.\n  const buffer = gl2.createBuffer();\n  webgl_util.callAndCheck(\n      gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer));\n\n  // Initialize the buffer to the size of the texture in bytes.\n  const bytesPerFloat = 4;\n  const valuesPerTexel = 4;\n  const bufferSizeBytes = bytesPerFloat * valuesPerTexel * rows * columns;\n\n  webgl_util.callAndCheck(\n      gl2,\n      () => gl2.bufferData(\n          gl2.PIXEL_PACK_BUFFER, bufferSizeBytes, gl2.STREAM_READ));\n\n  // Enqueue a command on the GPU command queue to copy of texture into the\n  // buffer.\n  webgl_util.callAndCheck(\n      gl2, () => gl2.readPixels(0, 0, columns, rows, gl2.RGBA, gl2.FLOAT, 0));\n\n  webgl_util.callAndCheck(\n      gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null));\n\n  return buffer;\n}\n\nexport function downloadFloat32MatrixFromBuffer(\n    gl: WebGLRenderingContext, buffer: WebGLBuffer,\n    size: number): Float32Array {\n  const gl2 = gl as WebGL2RenderingContext;\n\n  const downloadTarget = new Float32Array(size);\n\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n  gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n\n  return downloadTarget;\n}\n\nexport function downloadByteEncodedFloatMatrixFromOutputTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig) {\n  const [w, h] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n\n  const numChannels = 4;\n  const downloadTarget = new Uint8Array(\n      tex_util.getUnpackedArraySizeFromMatrixSize(rows * columns, numChannels));\n\n  webgl_util.callAndCheck(\n      gl,\n      () => gl.readPixels(\n          0, 0, w, h, textureConfig.downloadTextureFormat, gl.UNSIGNED_BYTE,\n          downloadTarget));\n\n  // By wrapping the buffer in a Float32Array, we use native browser IEEE 754\n  // decoding of the 4 bytes that back each 32 bit float.\n  return new Float32Array(downloadTarget.buffer);\n}\n\nexport function downloadPackedMatrixFromBuffer(\n    gl: WebGLRenderingContext, buffer: WebGLBuffer, batch: number, rows: number,\n    cols: number, physicalRows: number, physicalCols: number,\n    textureConfig: TextureConfig): Float32Array {\n  const gl2 = gl as WebGL2RenderingContext;\n\n  const downloadTarget =\n      new Float32Array(tex_util.getPackedRGBAArraySizeFromMatrixShape(\n          physicalRows, physicalCols));\n\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n  gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n\n  return downloadTarget;\n}\n\nexport function downloadMatrixFromPackedOutputTexture(\n    gl: WebGLRenderingContext, physicalRows: number,\n    physicalCols: number): Float32Array {\n  const packedRGBA = new Float32Array(physicalRows * physicalCols * 4);\n  webgl_util.callAndCheck(\n      gl,\n      () => gl.readPixels(\n          0, 0, physicalCols, physicalRows, gl.RGBA, gl.FLOAT, packedRGBA));\n\n  return packedRGBA;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, PixelData, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {getWebGLContext, setWebGLContext} from './canvas_util';\nimport * as gpgpu_util from './gpgpu_util';\nimport * as tex_util from './tex_util';\nimport {TextureConfig} from './tex_util';\nimport {WebGL1DisjointQueryTimerExtension, WebGL2DisjointQueryTimerExtension} from './webgl_types';\nimport * as webgl_util from './webgl_util';\n\nexport interface FenceContext {\n  query: WebGLQuery|WebGLSync;\n  isFencePassed(): boolean;\n}\n\nexport class GPGPUContext {\n  gl: WebGLRenderingContext;\n  textureFloatExtension: {};\n  textureHalfFloatExtension: {};\n  colorBufferFloatExtension: {};\n  colorBufferHalfFloatExtension: {};\n  disjointQueryTimerExtension: WebGL2DisjointQueryTimerExtension|\n      WebGL1DisjointQueryTimerExtension;\n  vertexBuffer: WebGLBuffer;\n  indexBuffer: WebGLBuffer;\n  framebuffer: WebGLFramebuffer;\n  outputTexture: WebGLTexture|null = null;\n  program: WebGLProgram|null = null;\n  private disposed = false;\n  private disjoint: boolean;\n  textureConfig: TextureConfig;\n\n  constructor(gl?: WebGLRenderingContext) {\n    const glVersion = env().getNumber('WEBGL_VERSION');\n    if (gl != null) {\n      this.gl = gl;\n      setWebGLContext(glVersion, gl);\n    } else {\n      this.gl = getWebGLContext(glVersion);\n    }\n    // WebGL 2.0 enables texture floats without an extension.\n    let COLOR_BUFFER_FLOAT = 'WEBGL_color_buffer_float';\n    const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';\n    if (env().getNumber('WEBGL_VERSION') === 1) {\n      const TEXTURE_FLOAT = 'OES_texture_float';\n      const TEXTURE_HALF_FLOAT = 'OES_texture_half_float';\n\n      this.textureFloatExtension =\n          webgl_util.getExtensionOrThrow(this.gl, TEXTURE_FLOAT);\n      if (webgl_util.hasExtension(this.gl, TEXTURE_HALF_FLOAT)) {\n        this.textureHalfFloatExtension =\n            webgl_util.getExtensionOrThrow(this.gl, TEXTURE_HALF_FLOAT);\n      } else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n        throw new Error(\n            'GL context does not support half float textures, yet the ' +\n            'environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n      }\n\n      this.colorBufferFloatExtension = this.gl.getExtension(COLOR_BUFFER_FLOAT);\n      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n        this.colorBufferHalfFloatExtension =\n            webgl_util.getExtensionOrThrow(this.gl, COLOR_BUFFER_HALF_FLOAT);\n      } else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n        throw new Error(\n            'GL context does not support color renderable half floats, yet ' +\n            'the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n      }\n    } else {\n      COLOR_BUFFER_FLOAT = 'EXT_color_buffer_float';\n      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_FLOAT)) {\n        this.colorBufferFloatExtension =\n            this.gl.getExtension(COLOR_BUFFER_FLOAT);\n      } else if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n        this.colorBufferHalfFloatExtension =\n            this.gl.getExtension(COLOR_BUFFER_HALF_FLOAT);\n      } else {\n        throw new Error('GL context does not support color renderable floats');\n      }\n    }\n\n    this.vertexBuffer = gpgpu_util.createVertexBuffer(this.gl);\n    this.indexBuffer = gpgpu_util.createIndexBuffer(this.gl);\n    this.framebuffer = webgl_util.createFramebuffer(this.gl);\n\n    this.textureConfig =\n        tex_util.getTextureConfig(this.gl, this.textureHalfFloatExtension);\n  }\n\n  private get debug(): boolean {\n    return env().getBool('DEBUG');\n  }\n\n  public dispose() {\n    if (this.disposed) {\n      return;\n    }\n    if (this.program != null) {\n      console.warn(\n          'Disposing a GPGPUContext that still has a bound WebGLProgram.' +\n          ' This is probably a resource leak, delete the program with ' +\n          'GPGPUContext.deleteProgram before disposing.');\n    }\n    if (this.outputTexture != null) {\n      console.warn(\n          'Disposing a GPGPUContext that still has a bound output matrix ' +\n          'texture.  This is probably a resource leak, delete the output ' +\n          'matrix texture with GPGPUContext.deleteMatrixTexture before ' +\n          'disposing.');\n    }\n    const gl = this.gl;\n    webgl_util.callAndCheck(gl, () => gl.finish());\n    webgl_util.callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));\n    webgl_util.callAndCheck(gl, () => gl.deleteFramebuffer(this.framebuffer));\n    webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, null));\n    webgl_util.callAndCheck(\n        gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null));\n    webgl_util.callAndCheck(gl, () => gl.deleteBuffer(this.indexBuffer));\n    this.disposed = true;\n  }\n\n  public createFloat32MatrixTexture(rows: number, columns: number):\n      WebGLTexture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat32MatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public createFloat16MatrixTexture(rows: number, columns: number):\n      WebGLTexture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat16MatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public createUnsignedBytesMatrixTexture(rows: number, columns: number):\n      WebGLTexture {\n    this.throwIfDisposed();\n    return gpgpu_util.createUnsignedBytesMatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public uploadPixelDataToTexture(\n      texture: WebGLTexture,\n      pixels: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement|\n              ImageBitmap) {\n    this.throwIfDisposed();\n    gpgpu_util.uploadPixelDataToTexture(this.gl, texture, pixels);\n  }\n\n  public uploadDenseMatrixToTexture(\n      texture: WebGLTexture, width: number, height: number, data: TypedArray) {\n    this.throwIfDisposed();\n    gpgpu_util.uploadDenseMatrixToTexture(\n        this.gl, texture, width, height, data, this.textureConfig);\n  }\n\n  public createFloat16PackedMatrixTexture(rows: number, columns: number):\n      WebGLTexture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat16PackedMatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public createPackedMatrixTexture(rows: number, columns: number):\n      WebGLTexture {\n    this.throwIfDisposed();\n    return gpgpu_util.createPackedMatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public deleteMatrixTexture(texture: WebGLTexture) {\n    this.throwIfDisposed();\n    if (this.outputTexture === texture) {\n      webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n      this.outputTexture = null;\n    }\n    webgl_util.callAndCheck(this.gl, () => this.gl.deleteTexture(texture));\n  }\n\n  public downloadByteEncodedFloatMatrixFromOutputTexture(\n      texture: WebGLTexture, rows: number, columns: number): Float32Array {\n    return this.downloadMatrixDriver(\n        texture,\n        () => gpgpu_util.downloadByteEncodedFloatMatrixFromOutputTexture(\n            this.gl, rows, columns, this.textureConfig));\n  }\n\n  public downloadPackedMatrixFromBuffer(\n      buffer: WebGLBuffer, batch: number, rows: number, columns: number,\n      physicalRows: number, physicalCols: number): Float32Array {\n    return gpgpu_util.downloadPackedMatrixFromBuffer(\n        this.gl, buffer, batch, rows, columns, physicalRows, physicalCols,\n        this.textureConfig);\n  }\n\n  public downloadFloat32MatrixFromBuffer(buffer: WebGLBuffer, size: number):\n      Float32Array {\n    return gpgpu_util.downloadFloat32MatrixFromBuffer(this.gl, buffer, size);\n  }\n\n  public createBufferFromTexture(\n      texture: WebGLTexture, rows: number, columns: number): WebGLBuffer {\n    this.bindTextureToFrameBuffer(texture);\n    const result = gpgpu_util.createBufferFromOutputTexture(\n        this.gl as WebGL2RenderingContext, rows, columns, this.textureConfig);\n    this.unbindTextureToFrameBuffer();\n    return result;\n  }\n\n  public createAndWaitForFence(): Promise<void> {\n    const fenceContext = this.createFence(this.gl);\n    return this.pollFence(fenceContext);\n  }\n\n  private createFence(gl: WebGLRenderingContext): FenceContext {\n    let query: WebGLQuery|WebGLSync;\n    let isFencePassed: () => boolean;\n\n    if (env().getBool('WEBGL_FENCE_API_ENABLED')) {\n      const gl2 = gl as WebGL2RenderingContext;\n\n      const sync = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n      gl.flush();\n\n      isFencePassed = () => {\n        const status = gl2.clientWaitSync(sync, 0, 0);\n        return status === gl2.ALREADY_SIGNALED ||\n            status === gl2.CONDITION_SATISFIED;\n      };\n\n      query = sync;\n    } else if (\n        env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {\n      query = this.beginQuery();\n      this.endQuery();\n      isFencePassed = () => this.isQueryAvailable(\n          query,\n          env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n    } else {\n      // If we have no way to fence, return true immediately. This will fire in\n      // WebGL 1.0 when there is no disjoint query timer. In this case, because\n      // the fence passes immediately, we'll immediately ask for a download of\n      // the texture, which will cause the UI thread to hang.\n      isFencePassed = () => true;\n    }\n\n    return {query, isFencePassed};\n  }\n\n  public downloadMatrixFromPackedTexture(\n      texture: WebGLTexture, physicalRows: number,\n      physicalCols: number): Float32Array {\n    return this.downloadMatrixDriver(\n        texture,\n        () => gpgpu_util.downloadMatrixFromPackedOutputTexture(\n            this.gl, physicalRows, physicalCols));\n  }\n\n  private vertexAttrsAreBound = false;\n\n  public createProgram(fragmentShaderSource: string): WebGLProgram {\n    this.throwIfDisposed();\n    const gl = this.gl;\n    const fragmentShader: WebGLShader =\n        webgl_util.createFragmentShader(gl, fragmentShaderSource);\n    const vertexShader: WebGLShader = gpgpu_util.createVertexShader(gl);\n    const program: WebGLProgram = webgl_util.createProgram(gl);\n    webgl_util.callAndCheck(gl, () => gl.attachShader(program, vertexShader));\n    webgl_util.callAndCheck(gl, () => gl.attachShader(program, fragmentShader));\n    webgl_util.linkProgram(gl, program);\n    if (this.debug) {\n      webgl_util.validateProgram(gl, program);\n    }\n    if (!this.vertexAttrsAreBound) {\n      this.setProgram(program);\n      this.vertexAttrsAreBound = gpgpu_util.bindVertexProgramAttributeStreams(\n          gl, this.program, this.vertexBuffer);\n    }\n    return program;\n  }\n\n  public deleteProgram(program: WebGLProgram) {\n    this.throwIfDisposed();\n    if (program === this.program) {\n      this.program = null;\n    }\n    if (program != null) {\n      webgl_util.callAndCheck(this.gl, () => this.gl.deleteProgram(program));\n    }\n  }\n\n  public setProgram(program: WebGLProgram|null) {\n    this.throwIfDisposed();\n    this.program = program;\n    if ((this.program != null) && this.debug) {\n      webgl_util.validateProgram(this.gl, this.program);\n    }\n    webgl_util.callAndCheck(this.gl, () => this.gl.useProgram(program));\n  }\n\n  public getUniformLocation(\n      program: WebGLProgram, uniformName: string,\n      shouldThrow = true): WebGLUniformLocation {\n    this.throwIfDisposed();\n    if (shouldThrow) {\n      return webgl_util.getProgramUniformLocationOrThrow(\n          this.gl, program, uniformName);\n    } else {\n      return webgl_util.getProgramUniformLocation(\n          this.gl, program, uniformName);\n    }\n  }\n\n  public getAttributeLocation(program: WebGLProgram, attribute: string):\n      number {\n    this.throwIfDisposed();\n    return webgl_util.callAndCheck(\n        this.gl, () => this.gl.getAttribLocation(program, attribute));\n  }\n\n  public getUniformLocationNoThrow(program: WebGLProgram, uniformName: string):\n      WebGLUniformLocation {\n    this.throwIfDisposed();\n    return this.gl.getUniformLocation(program, uniformName);\n  }\n\n  public setInputMatrixTexture(\n      inputMatrixTexture: WebGLTexture, uniformLocation: WebGLUniformLocation,\n      textureUnit: number) {\n    this.throwIfDisposed();\n    this.throwIfNoProgram();\n    webgl_util.bindTextureToProgramUniformSampler(\n        this.gl, inputMatrixTexture, uniformLocation, textureUnit);\n  }\n\n  public setOutputMatrixTexture(\n      outputMatrixTexture: WebGLTexture, rows: number, columns: number) {\n    this.setOutputMatrixTextureDriver(outputMatrixTexture, columns, rows);\n  }\n\n  public setOutputPackedMatrixTexture(\n      outputPackedMatrixTexture: WebGLTexture, rows: number, columns: number) {\n    this.throwIfDisposed();\n    const [width, height] =\n        tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n    this.setOutputMatrixTextureDriver(outputPackedMatrixTexture, width, height);\n  }\n\n  public setOutputMatrixWriteRegion(\n      startRow: number, numRows: number, startColumn: number,\n      numColumns: number) {\n    this.setOutputMatrixWriteRegionDriver(\n        startColumn, startRow, numColumns, numRows);\n  }\n\n  public setOutputPackedMatrixWriteRegion(\n      startRow: number, numRows: number, startColumn: number,\n      numColumns: number) {\n    throw new Error('setOutputPackedMatrixWriteRegion not implemented.');\n  }\n\n  public debugValidate() {\n    if (this.program != null) {\n      webgl_util.validateProgram(this.gl, this.program);\n    }\n    webgl_util.validateFramebuffer(this.gl);\n  }\n\n  public executeProgram() {\n    this.throwIfDisposed();\n    this.throwIfNoProgram();\n    const gl = this.gl;\n    if (this.debug) {\n      this.debugValidate();\n    }\n    webgl_util.callAndCheck(\n        gl, () => gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0));\n  }\n\n  public blockUntilAllProgramsCompleted() {\n    this.throwIfDisposed();\n    webgl_util.callAndCheck(this.gl, () => this.gl.finish());\n  }\n\n  private getQueryTimerExtension(): WebGL1DisjointQueryTimerExtension\n      |WebGL2DisjointQueryTimerExtension {\n    if (this.disjointQueryTimerExtension == null) {\n      this.disjointQueryTimerExtension =\n          webgl_util.getExtensionOrThrow(\n              this.gl,\n              env().getNumber(\n                  'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2 ?\n                  'EXT_disjoint_timer_query_webgl2' :\n                  'EXT_disjoint_timer_query') as\n              WebGL1DisjointQueryTimerExtension |\n          WebGL2DisjointQueryTimerExtension;\n    }\n    return this.disjointQueryTimerExtension;\n  }\n\n  private getQueryTimerExtensionWebGL2(): WebGL2DisjointQueryTimerExtension {\n    return this.getQueryTimerExtension();\n  }\n\n  private getQueryTimerExtensionWebGL1(): WebGL1DisjointQueryTimerExtension {\n    return this.getQueryTimerExtension() as WebGL1DisjointQueryTimerExtension;\n  }\n\n  beginQuery(): WebGLQuery {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n\n      const query = gl2.createQuery();\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    }\n    const ext = this.getQueryTimerExtensionWebGL1();\n    const query = ext.createQueryEXT() as WebGLQuery;\n    ext.beginQueryEXT(ext.TIME_ELAPSED_EXT, query);\n    return query;\n  }\n\n  endQuery() {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\n      return;\n    }\n    const ext = this.getQueryTimerExtensionWebGL1();\n    ext.endQueryEXT(ext.TIME_ELAPSED_EXT);\n  }\n\n  public async waitForQueryAndGetTime(query: WebGLQuery): Promise<number> {\n    await util.repeatedTry(\n        () => this.disposed ||  // while testing contexts are created / disposed\n                                // in rapid succession, so without this check we\n                                // may poll for the query timer indefinitely\n            this.isQueryAvailable(\n                query,\n                env().getNumber(\n                    'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION')));\n    return this.getQueryTime(\n        query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n  }\n\n  private getQueryTime(query: WebGLQuery, queryTimerVersion: number): number {\n    if (queryTimerVersion === 0) {\n      return null;\n    }\n\n    if (queryTimerVersion === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n\n      const timeElapsedNanos = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n      // Return milliseconds.\n      return timeElapsedNanos / 1000000;\n    } else {\n      const ext = this.getQueryTimerExtensionWebGL1();\n\n      const timeElapsedNanos =\n          ext.getQueryObjectEXT(query, ext.QUERY_RESULT_EXT);\n      // Return milliseconds.\n      return timeElapsedNanos / 1000000;\n    }\n  }\n\n  private isQueryAvailable(query: WebGLQuery, queryTimerVersion: number):\n      boolean {\n    if (queryTimerVersion === 0) {\n      return true;\n    }\n\n    if (queryTimerVersion === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n\n      const available =\n          gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n      if (this.disjoint == null) {\n        this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n      }\n\n      return available && !this.disjoint;\n    } else {\n      const ext = this.getQueryTimerExtensionWebGL1();\n\n      const available =\n          ext.getQueryObjectEXT(query, ext.QUERY_RESULT_AVAILABLE_EXT);\n      if (this.disjoint == null) {\n        this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n      }\n\n      return available && !this.disjoint;\n    }\n  }\n\n  pollFence(fenceContext: FenceContext) {\n    return new Promise<void>(resolve => {\n      this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n    });\n  }\n\n  private itemsToPoll: PollItem[] = [];\n\n  pollItems(): void {\n    // Find the last query that has finished.\n    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n    for (let i = 0; i <= index; ++i) {\n      const {resolveFn} = this.itemsToPoll[i];\n      resolveFn();\n    }\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n  }\n\n  private addItemToPoll(isDoneFn: () => boolean, resolveFn: () => void) {\n    this.itemsToPoll.push({isDoneFn, resolveFn});\n    if (this.itemsToPoll.length > 1) {\n      // We already have a running loop that polls.\n      return;\n    }\n    // Start a new loop that polls.\n    util.repeatedTry(() => {\n      this.pollItems();\n      // End the loop if no more items to poll.\n      return this.itemsToPoll.length === 0;\n    });\n  }\n\n  private bindTextureToFrameBuffer(texture: WebGLTexture) {\n    this.throwIfDisposed();\n    webgl_util.bindColorTextureToFramebuffer(\n        this.gl, texture, this.framebuffer);\n    if (this.debug) {\n      webgl_util.validateFramebuffer(this.gl);\n    }\n  }\n\n  private unbindTextureToFrameBuffer() {\n    if (this.outputTexture != null) {\n      webgl_util.bindColorTextureToFramebuffer(\n          this.gl, this.outputTexture, this.framebuffer);\n      if (this.debug) {\n        webgl_util.validateFramebuffer(this.gl);\n      }\n    } else {\n      webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n    }\n  }\n\n  private downloadMatrixDriver(\n      texture: WebGLTexture,\n      downloadAndDecode: () => Float32Array): Float32Array {\n    this.bindTextureToFrameBuffer(texture);\n    const result = downloadAndDecode();\n    this.unbindTextureToFrameBuffer();\n\n    return result;\n  }\n\n  private setOutputMatrixTextureDriver(\n      outputMatrixTextureMaybePacked: WebGLTexture, width: number,\n      height: number) {\n    this.throwIfDisposed();\n    const gl = this.gl;\n    webgl_util.bindColorTextureToFramebuffer(\n        gl, outputMatrixTextureMaybePacked, this.framebuffer);\n    if (this.debug) {\n      webgl_util.validateFramebuffer(gl);\n    }\n    this.outputTexture = outputMatrixTextureMaybePacked;\n    webgl_util.callAndCheck(gl, () => gl.viewport(0, 0, width, height));\n    webgl_util.callAndCheck(gl, () => gl.scissor(0, 0, width, height));\n  }\n\n  private setOutputMatrixWriteRegionDriver(\n      x: number, y: number, width: number, height: number) {\n    this.throwIfDisposed();\n    webgl_util.callAndCheck(\n        this.gl, () => this.gl.scissor(x, y, width, height));\n  }\n\n  private throwIfDisposed() {\n    if (this.disposed) {\n      throw new Error('Attempted to use disposed GPGPUContext.');\n    }\n  }\n\n  private throwIfNoProgram() {\n    if (this.program == null) {\n      throw new Error('No GPU program is currently set.');\n    }\n  }\n}\n\ntype PollItem = {\n  isDoneFn: () => boolean,\n  resolveFn: () => void\n};\n\n/**\n * Finds the index of the last true element using linear search.\n * Note: We can't do binary search because Chrome expects us to explicitly\n * test all fences before download:\n * https://github.com/tensorflow/tfjs/issues/1145\n */\nexport function linearSearchLastTrue(arr: Array<() => boolean>): number {\n  let i = 0;\n  for (; i < arr.length; ++i) {\n    const isDone = arr[i]();\n    if (!isDone) {\n      break;\n    }\n  }\n  return i - 1;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\nconst {getBroadcastDims} = backend_util;\nimport {getGlslDifferences, GLSL} from './glsl_version';\nimport * as shader_util from './shader_compiler_util';\n\nexport type ShapeInfo = {\n  logicalShape: number[],\n  texShape: [number, number],\n  isUniform: boolean,\n  isPacked: boolean,\n  flatOffset: number\n};\n\nexport type InputInfo = {\n  name: string,\n  shapeInfo: ShapeInfo\n};\n\nexport function makeShader(\n    inputsInfo: InputInfo[], outputShape: ShapeInfo, userCode: string,\n    usesPackedTextures: boolean): string {\n  const prefixSnippets: string[] = [];\n  inputsInfo.forEach(x => {\n    const size = util.sizeFromShape(x.shapeInfo.logicalShape);\n\n    // Snippet when we decided to upload the values as uniform.\n    if (x.shapeInfo.isUniform) {\n      prefixSnippets.push(\n          `uniform float ${x.name}${size > 1 ? `[${size}]` : ''};`);\n    } else {\n      prefixSnippets.push(`uniform sampler2D ${x.name};`);\n      prefixSnippets.push(`uniform int offset${x.name};`);\n    }\n  });\n  const inputPrefixSnippet = prefixSnippets.join('\\n');\n\n  const inputSamplingSnippet =\n      inputsInfo\n          .map(x => getInputSamplingSnippet(x, outputShape, usesPackedTextures))\n          .join('\\n');\n  const outTexShape = outputShape.texShape;\n  const glsl = getGlslDifferences();\n  const floatTextureSampleSnippet = getFloatTextureSampleSnippet(glsl);\n  let outputSamplingSnippet: string;\n  let floatTextureSetOutputSnippet: string;\n  let shaderPrefix = getShaderPrefix(glsl);\n\n  if (outputShape.isPacked) {\n    outputSamplingSnippet =\n        getPackedOutputSamplingSnippet(outputShape.logicalShape, outTexShape);\n    floatTextureSetOutputSnippet = getFloatTextureSetRGBASnippet(glsl);\n  } else {\n    outputSamplingSnippet =\n        getOutputSamplingSnippet(outputShape.logicalShape, outTexShape);\n    floatTextureSetOutputSnippet = getFloatTextureSetRSnippet(glsl);\n  }\n\n  if (usesPackedTextures) {\n    shaderPrefix += SHADER_PACKED_PREFIX;\n  }\n\n  const source = [\n    shaderPrefix, floatTextureSampleSnippet, floatTextureSetOutputSnippet,\n    inputPrefixSnippet, outputSamplingSnippet, inputSamplingSnippet, userCode\n  ].join('\\n');\n  return source;\n}\n\nfunction getSamplerFromInInfo(inInfo: InputInfo): string {\n  const shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getSamplerScalar(inInfo);\n    case 1:\n      return getSampler1D(inInfo);\n    case 2:\n      return getSampler2D(inInfo);\n    case 3:\n      return getSampler3D(inInfo);\n    case 4:\n      return getSampler4D(inInfo);\n    case 5:\n      return getSampler5D(inInfo);\n    case 6:\n      return getSampler6D(inInfo);\n    default:\n      throw new Error(\n          `${shape.length}-D input sampling` +\n          ` is not yet supported`);\n  }\n}\n\nfunction getPackedSamplerFromInInfo(inInfo: InputInfo): string {\n  const shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getPackedSamplerScalar(inInfo);\n    case 1:\n      return getPackedSampler1D(inInfo);\n    case 2:\n      return getPackedSampler2D(inInfo);\n    case 3:\n      return getPackedSampler3D(inInfo);\n    default:\n      return getPackedSamplerND(inInfo);\n  }\n}\n\nfunction getInputSamplingSnippet(\n    inInfo: InputInfo, outShapeInfo: ShapeInfo,\n    usesPackedTextures = false): string {\n  let res = '';\n  if (usesPackedTextures) {\n    res += getPackedSamplerFromInInfo(inInfo);\n  } else {\n    res += getSamplerFromInInfo(inInfo);\n  }\n\n  const inShape = inInfo.shapeInfo.logicalShape;\n  const outShape = outShapeInfo.logicalShape;\n  if (inShape.length <= outShape.length) {\n    if (usesPackedTextures) {\n      res += getPackedSamplerAtOutputCoords(inInfo, outShapeInfo);\n    } else {\n      res += getSamplerAtOutputCoords(inInfo, outShapeInfo);\n    }\n  }\n  return res;\n}\n\nfunction getPackedOutputSamplingSnippet(\n    outShape: number[], outTexShape: [number, number]): string {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutputPacked1DCoords(outShape as [number], outTexShape);\n    case 2:\n      return getOutputPacked2DCoords(outShape as [number, number], outTexShape);\n    case 3:\n      return getOutputPacked3DCoords(\n          outShape as [number, number, number], outTexShape);\n    default:\n      return getOutputPackedNDCoords(outShape, outTexShape);\n  }\n}\n\nfunction getOutputSamplingSnippet(\n    outShape: number[], outTexShape: [number, number]): string {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutput1DCoords(outShape as [number], outTexShape);\n    case 2:\n      return getOutput2DCoords(outShape as [number, number], outTexShape);\n    case 3:\n      return getOutput3DCoords(\n          outShape as [number, number, number], outTexShape);\n    case 4:\n      return getOutput4DCoords(\n          outShape as [number, number, number, number], outTexShape);\n    case 5:\n      return getOutput5DCoords(\n          outShape as [number, number, number, number, number], outTexShape);\n    case 6:\n      return getOutput6DCoords(\n          outShape as [number, number, number, number, number, number],\n          outTexShape);\n    default:\n      throw new Error(\n          `${outShape.length}-D output sampling is not yet supported`);\n  }\n}\n\nfunction getFloatTextureSampleSnippet(glsl: GLSL): string {\n  return `\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${glsl.texture2D}(textureSampler, uv).r;\n    }\n  `;\n}\n\nfunction getFloatTextureSetRSnippet(glsl: GLSL): string {\n  return `\n    void setOutput(float val) {\n      ${glsl.output} = vec4(val, 0, 0, 0);\n    }\n  `;\n}\n\nfunction getFloatTextureSetRGBASnippet(glsl: GLSL): string {\n  return `\n    void setOutput(vec4 val) {\n      ${glsl.output} = val;\n    }\n  `;\n}\n\nfunction getShaderPrefix(glsl: GLSL): string {\n  const SHADER_PREFIX = `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFs} vec2 resultUV;\n    ${glsl.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${glsl.defineSpecialNaN}\n    ${glsl.defineSpecialInf}\n    ${glsl.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${SAMPLE_1D_SNIPPET}\n    ${SAMPLE_2D_SNIPPET}\n    ${SAMPLE_3D_SNIPPET}\n  `;\n\n  return SHADER_PREFIX;\n}\n\nconst SAMPLE_1D_SNIPPET = `\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SAMPLE_2D_SNIPPET = `\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SAMPLE_3D_SNIPPET = `\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SHADER_PACKED_PREFIX = `\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n`;\n\nfunction getOutputScalarCoords() {\n  return `\n    int getOutputCoords() {\n      return 0;\n    }\n  `;\n}\n\nfunction getOutputPacked1DCoords(\n    shape: [number], texShape: [number, number]): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (packedTexShape[0] === 1) {\n    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${packedTexShape[1]}.0);\n      }\n    `;\n  }\n\n  if (packedTexShape[1] === 1) {\n    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${packedTexShape[0]}.0);\n      }\n    `;\n  }\n\n  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      return 2 * (resTexRC.x * ${packedTexShape[1]} + resTexRC.y);\n    }\n  `;\n}\n\nfunction getOutput1DCoords(\n    shape: [number], texShape: [number, number]): string {\n  if (texShape[0] === 1) {\n    return `\n      int getOutputCoords() {\n        return int(resultUV.x * ${texShape[1]}.0);\n      }\n    `;\n  }\n  if (texShape[1] === 1) {\n    return `\n      int getOutputCoords() {\n        return int(resultUV.y * ${texShape[0]}.0);\n      }\n    `;\n  }\n  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      return resTexRC.x * ${texShape[1]} + resTexRC.y;\n    }\n  `;\n}\n\nfunction getOutputPacked3DCoords(\n    shape: [number, number, number], texShape: [number, number]): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n\n  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n}\n\nfunction getOutput3DCoords(\n    shape: [number, number, number], texShape: [number, number]): string {\n  const coordsFromIndexSnippet =\n      shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n\n  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\n\nfunction getOutputPackedNDCoords(\n    shape: number[], texShape: [number, number]): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n  const texelsInBatch =\n      texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n  let texelsInBatchN = texelsInBatch;\n  let batches = ``;\n  let coords = 'b, r, c';\n\n  for (let b = 2; b < shape.length - 1; b++) {\n    texelsInBatchN *= shape[shape.length - b - 1];\n    batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n    coords = `b${b}, ` + coords;\n  }\n\n  return `\n    ivec${shape.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      ${batches}\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec${shape.length}(${coords});\n    }\n  `;\n}\n\nfunction getOutput4DCoords(\n    shape: [number, number, number, number],\n    texShape: [number, number]): string {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2'], shape);\n\n  return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n}\n\nfunction getOutput5DCoords(\n    shape: [number, number, number, number, number],\n    texShape: [number, number]): string {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2', 'd3'], shape);\n\n  return `\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${texShape[0]},\n                             ${texShape[1]}));\n\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `;\n}\n\nfunction getOutput6DCoords(\n    shape: [number, number, number, number, number, number],\n    texShape: [number, number]): string {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2', 'd3', 'd4'], shape);\n\n  return `\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `;\n}\n\nfunction getOutputPacked2DCoords(\n    shape: [number, number], texShape: [number, number]): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (util.arraysEqual(shape, texShape)) {\n    return `\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${packedTexShape[0]}, ${\n        packedTexShape[1]}));\n      }\n    `;\n  }\n\n  // texels needed to accommodate a logical row\n  const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n\n  /**\n   * getOutputCoords\n   *\n   * resTexRC: The rows and columns of the texels. If you move over one\n   * texel to the right in the packed texture, you are moving over one column\n   * (not two).\n   *\n   * index: The texel index\n   */\n  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n}\n\nfunction getOutput2DCoords(\n    shape: [number, number], texShape: [number, number]): string {\n  if (util.arraysEqual(shape, texShape)) {\n    return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${texShape[0]}, ${texShape[1]}));\n      }\n    `;\n  }\n  if (shape[1] === 1) {\n    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n  }\n  if (shape[0] === 1) {\n    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n  }\n  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      int r = index / ${shape[1]};\n      int c = index - r * ${shape[1]};\n      return ivec2(r, c);\n    }\n  `;\n}\n\nfunction getFlatOffsetUniformName(texName: string): string {\n  return `offset${texName}`;\n}\n\nfunction getPackedSamplerScalar(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const glsl = getGlslDifferences();\n  return `\n    vec4 ${funcName}() {\n      return ${glsl.texture2D}(${texName}, halfCR);\n    }\n  `;\n}\n\nfunction getSamplerScalar(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  if (inputInfo.shapeInfo.isUniform) {\n    return `float ${funcName}() {return ${texName};}`;\n  }\n  const [texNumR, texNumC] = inputInfo.shapeInfo.texShape;\n  if (texNumR === 1 && texNumC === 1) {\n    return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n  }\n\n  const [tNumR, tNumC] = inputInfo.shapeInfo.texShape;\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getPackedSampler1D(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const glsl = getGlslDifferences();\n\n  return `\n    vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler1D(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int index) {\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texShape = inputInfo.shapeInfo.texShape;\n  const tNumR = texShape[0];\n  const tNumC = texShape[1];\n\n  if (tNumC === 1 && tNumR === 1) {\n    return `\n      float ${funcName}(int index) {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  if (tNumC === 1) {\n    return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / ${tNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (tNumR === 1) {\n    return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / ${tNumC}.0, 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getPackedSampler2D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const glsl = getGlslDifferences();\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n  }\n\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const valuesPerRow = Math.ceil(shape[1] / 2);\n\n  return `\n    vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${valuesPerRow}, ${packedTexShape[0]}, ${\n      packedTexShape[1]}, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler2D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    return `\n    float ${funcName}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${shape[1]}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const offset = getFlatOffsetUniformName(texName);\n  if (texNumC === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  if (texNumR === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  return `\n  float ${funcName}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${shape[1]} + col + ${offset};\n    vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n    return sampleTexture(${texName}, uv);\n  }\n`;\n}\n\nfunction getPackedSampler3D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  if (shape[0] === 1) {\n    const squeezedShape = shape.slice(1);\n    const keptDims = [1, 2];\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['b', 'row', 'col'];\n    return `\n        ${getPackedSamplerFromInInfo(newInputInfo)}\n        vec4 ${funcName}(int b, int row, int col) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n  }\n\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n\n  const valuesPerRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n  const glsl = getGlslDifferences();\n\n  return `\n    vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumR}, ${texNumC}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler3D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride0 = shape[1] * shape[2];\n  const stride1 = shape[2];\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col', 'depth'];\n    return `\n        ${getSamplerFromInInfo(newInputInfo)}\n        float ${funcName}(int row, int col, int depth) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${stride0}, ${stride1}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n        float ${funcName}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${stride1}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${texNumC}.0, ${texNumR}.0);\n          return sampleTexture(${texName}, uv);\n        }\n      `;\n  }\n\n  if (texNumC === stride1 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n    float ${funcName}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${shape[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n      float ${funcName}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${stride0} + col * ${stride1} + depth + ${offset};\n        vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n        return sampleTexture(${texName}, uv);\n      }\n  `;\n}\n\nfunction getPackedSamplerND(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const rank = shape.length;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n\n  const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n  let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n  let params = `int b, int row, int col`;\n  let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n  for (let b = 2; b < rank - 1; b++) {\n    params = `int b${b}, ` + params;\n    texelsInBatch *= shape[rank - b - 1];\n    index = `b${b} * ${texelsInBatch} + ` + index;\n  }\n  const glsl = getGlslDifferences();\n  return `\n    vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler4D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride2 = shape[3];\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${stride0}, ${stride1}, ${stride2}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${stride1}, ${stride2}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (texNumC === stride2 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${shape[1] * shape[2]}, ${shape[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} +\n          depth * ${stride2} + depth2;\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler5D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride3 = shape[4];\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          depth3;\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${stride1}, ${stride2}, ${stride3}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  if (texNumC === stride3 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3]},\n               ${shape[2] * shape[3]}, ${shape[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler6D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  const stride4 = shape[5];\n  const stride3 = shape[4] * stride4;\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${stride4}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${stride1}, ${stride2}, ${stride3}, ${stride4})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (texNumC === stride4 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3] * shape[4]},\n               ${shape[2] * shape[3] * shape[4]},\n               ${shape[3] * shape[4]},\n               ${shape[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 * ${stride4} + depth4 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getUniformSampler(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n\n  if (inSize < 2) {\n    return `return ${texName};`;\n  }\n  return `\n    for (int i = 0; i < ${inSize}; i++) {\n      if (i == index) {\n        return ${texName}[i];\n      }\n    }\n  `;\n}\n\nfunction getPackedSamplerAtOutputCoords(\n    inputInfo: InputInfo, outShapeInfo: ShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n\n  const broadcastDims = getBroadcastDims(\n      inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n\n  const type = getCoordsDataType(outRank);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet: string;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet =\n        broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n            .join('\\n');\n  }\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n                                .map((s, i) => `coords.${fields[i + rankDiff]}`)\n                                .join(', ');\n  }\n\n  let output = `return outputValue;`;\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n  const isInputScalar = inSize === 1;\n  const outSize = util.sizeFromShape(outShapeInfo.logicalShape);\n  const isOutputScalar = outSize === 1;\n\n  if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n    output = `\n      return vec4(outputValue.xy, outputValue.xy);\n    `;\n  } else if (isInputScalar && !isOutputScalar) {\n    if (outRank === 1) {\n      output = `\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      `;\n    } else {\n      output = `\n        return vec4(outputValue.x);\n      `;\n    }\n  } else if (broadcastDims.length) {\n    const rows = inRank - 2;\n    const cols = inRank - 1;\n\n    if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n      output = `return vec4(outputValue.x);`;\n    } else if (broadcastDims.indexOf(rows) > -1) {\n      output = `return vec4(outputValue.x, outputValue.y, ` +\n          `outputValue.x, outputValue.y);`;\n    } else if (broadcastDims.indexOf(cols) > -1) {\n      output = `return vec4(outputValue.xx, outputValue.zz);`;\n    }\n  }\n\n  return `\n    vec4 ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      vec4 outputValue = get${texFuncSnippet}(${unpackedCoordsSnippet});\n      ${output}\n    }\n  `;\n}\n\nfunction getSamplerAtOutputCoords(\n    inputInfo: InputInfo, outShapeInfo: ShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const outTexShape = outShapeInfo.texShape;\n  const inTexShape = inputInfo.shapeInfo.texShape;\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n\n  if (!inputInfo.shapeInfo.isUniform && inRank === outRank &&\n      inputInfo.shapeInfo.flatOffset == null &&\n      util.arraysEqual(inTexShape, outTexShape)) {\n    return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, resultUV);\n      }\n    `;\n  }\n\n  const type = getCoordsDataType(outRank);\n  const broadcastDims = getBroadcastDims(\n      inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet: string;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet =\n        broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n            .join('\\n');\n  }\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n                                .map((s, i) => `coords.${fields[i + rankDiff]}`)\n                                .join(', ');\n  }\n\n  return `\n    float ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      return get${texFuncSnippet}(${unpackedCoordsSnippet});\n    }\n  `;\n}\n\nexport function getCoordsDataType(rank: number): string {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\n\n/** Returns a new input info (a copy) that has a squeezed logical shape. */\nfunction squeezeInputInfo(\n    inInfo: InputInfo, squeezedShape: number[]): InputInfo {\n  // Deep copy.\n  const newInputInfo: InputInfo = JSON.parse(JSON.stringify(inInfo));\n  newInputInfo.shapeInfo.logicalShape = squeezedShape;\n  return newInputInfo;\n}\n\nfunction getSqueezedParams(params: string[], keptDims: number[]): string {\n  return keptDims.map(d => params[d]).join(', ');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, Tensor, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUContext} from './gpgpu_context';\nimport * as shader_compiler from './shader_compiler';\nimport {InputInfo, ShapeInfo} from './shader_compiler';\nimport {PackingScheme, TextureData, TextureUsage} from './tex_util';\n\nexport interface GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[];\n  userCode: string;\n  /** If true, this program expects packed input textures. Defaults to false. */\n  packedInputs?: boolean;\n  /** If true, this program produces a packed texture. Defaults to false. */\n  packedOutput?: boolean;\n  /**\n   * Affects what type of texture we allocate for the output. Defaults to\n   * `TextureUsage.RENDER`.\n   */\n  outTexUsage?: TextureUsage;\n  /**\n   * The type of scheme to use when packing texels for the output values.\n   * See `PackingScheme` for details. Defaults to `PackingScheme.SHARED_BATCH`.\n   */\n  outPackingScheme?: PackingScheme;\n}\n\nexport interface GPGPUBinary {\n  webGLProgram: WebGLProgram;\n  program: GPGPUProgram;\n  uniformLocations: {[name: string]: WebGLUniformLocation};\n  source: string;\n  inShapeInfos: ShapeInfo[];\n  outShapeInfo: ShapeInfo;\n  infLoc: WebGLUniformLocation;\n  nanLoc: WebGLUniformLocation;\n}\n\nexport interface TensorData {\n  shape: number[];\n  texData: TextureData;\n  isUniform: boolean;\n  // Available when we decide to upload as uniform instead of texture.\n  uniformValues?: TypedArray;\n}\n\nexport function compileProgram<T extends Tensor, K extends Tensor>(\n    gpgpu: GPGPUContext, program: GPGPUProgram, inputs: TensorData[],\n    output: TensorData): GPGPUBinary {\n  const userCode = program.userCode;\n  const inputInfos: InputInfo[] = inputs.map((input, i) => {\n    const shapeInfo: ShapeInfo = {\n      logicalShape: input.shape,\n      texShape: input.isUniform ? null : input.texData.texShape,\n      isUniform: input.isUniform,\n      isPacked: input.isUniform ? false : input.texData.isPacked,\n      flatOffset: null\n    };\n    if (input.texData != null && input.texData.slice != null &&\n        input.texData.slice.flatOffset > 0) {\n      shapeInfo.flatOffset = input.texData.slice.flatOffset;\n    }\n    return {name: program.variableNames[i], shapeInfo};\n  });\n  const inShapeInfos = inputInfos.map(x => x.shapeInfo);\n  const outShapeInfo: ShapeInfo = {\n    logicalShape: output.shape,\n    texShape: output.texData.texShape,\n    isUniform: false,\n    isPacked: output.texData.isPacked,\n    flatOffset: null\n  };\n  const source = shader_compiler.makeShader(\n      inputInfos, outShapeInfo, userCode, program.packedInputs);\n\n  const webGLProgram = gpgpu.createProgram(source);\n\n  // Add special uniforms (NAN, INFINITY)\n  let infLoc: WebGLUniformLocation = null;\n  const nanLoc = gpgpu.getUniformLocation(webGLProgram, 'NAN', false);\n  if (env().getNumber('WEBGL_VERSION') === 1) {\n    infLoc = gpgpu.getUniformLocation(webGLProgram, 'INFINITY', false);\n  }\n\n  // Add user-defined uniforms\n  const uniformLocations: {[name: string]: WebGLUniformLocation} = {};\n  for (let i = 0; i < program.variableNames.length; i++) {\n    const varName = program.variableNames[i];\n    const shouldThrow = false;\n    uniformLocations[varName] =\n        gpgpu.getUniformLocation(webGLProgram, varName, shouldThrow);\n    uniformLocations[`offset${varName}`] =\n        gpgpu.getUniformLocation(webGLProgram, `offset${varName}`, shouldThrow);\n  }\n\n  return {\n    program,\n    source,\n    webGLProgram,\n    uniformLocations,\n    inShapeInfos,\n    outShapeInfo,\n    infLoc,\n    nanLoc,\n  };\n}\n\nfunction validateBinaryAndProgram(\n    shapeInfos: ShapeInfo[], inputs: TensorData[]) {\n  if (shapeInfos.length !== inputs.length) {\n    throw Error(\n        `Binary was compiled with ${shapeInfos.length} inputs, but ` +\n        `was executed with ${inputs.length} inputs`);\n  }\n\n  shapeInfos.forEach((s, i) => {\n    const shapeA = s.logicalShape;\n    const input = inputs[i];\n    const shapeB = input.shape;\n\n    if (!util.arraysEqual(shapeA, shapeB)) {\n      throw Error(\n          `Binary was compiled with different shapes than ` +\n          `the current args. Shapes ${shapeA} and ${shapeB} must match`);\n    }\n    // The input is uploaded as uniform.\n    if (s.isUniform && input.isUniform) {\n      return;\n    }\n\n    const texShapeA = s.texShape;\n    const texShapeB = input.isUniform ? null : input.texData.texShape;\n    if (!util.arraysEqual(texShapeA, texShapeB)) {\n      throw Error(\n          `Binary was compiled with different texture shapes than the` +\n          ` current args. Shape ${texShapeA} and ${texShapeB} must match`);\n    }\n  });\n}\n\nexport function runProgram<T extends Tensor, K extends Tensor>(\n    gpgpu: GPGPUContext, binary: GPGPUBinary, inputs: TensorData[],\n    output: TensorData,\n    customSetup?: (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) =>\n        void): void {\n  validateBinaryAndProgram(binary.inShapeInfos, inputs);\n  validateBinaryAndProgram([binary.outShapeInfo], [output]);\n\n  const outTex = output.texData.texture;\n  const outTexShape = output.texData.texShape;\n  if (output.texData.isPacked) {\n    gpgpu.setOutputPackedMatrixTexture(outTex, outTexShape[0], outTexShape[1]);\n  } else {\n    gpgpu.setOutputMatrixTexture(outTex, outTexShape[0], outTexShape[1]);\n  }\n  gpgpu.setProgram(binary.webGLProgram);\n\n  // Set special uniforms (NAN, INFINITY)\n  if (env().getNumber('WEBGL_VERSION') === 1) {\n    if (binary.infLoc !== null) {\n      gpgpu.gl.uniform1f(binary.infLoc, Infinity);\n    }\n  }\n  if (binary.nanLoc !== null) {\n    gpgpu.gl.uniform1f(binary.nanLoc, NaN);\n  }\n\n  // Set user-defined inputs\n  inputs.forEach((input, i) => {\n    const varName = binary.program.variableNames[i];\n    const varLoc = binary.uniformLocations[varName];\n    const varOffsetLoc = binary.uniformLocations[`offset${varName}`];\n\n    if (varLoc == null) {\n      // The compiler inferred that this variable is not used in this shader.\n      return;\n    }\n\n    if (input.isUniform) {\n      // Upload the values of the tensor as uniform.\n      if (util.sizeFromShape(input.shape) < 2) {\n        gpgpu.gl.uniform1f(varLoc, input.uniformValues[0]);\n      } else {\n        let vals = input.uniformValues;\n        if (!(vals instanceof Float32Array)) {\n          vals = new Float32Array(vals);\n        }\n        gpgpu.gl.uniform1fv(varLoc, vals);\n      }\n      return;\n    }\n\n    // If the input was sliced, upload the flat offset index.\n    if (input.texData.slice != null && varOffsetLoc != null) {\n      gpgpu.gl.uniform1i(varOffsetLoc, input.texData.slice.flatOffset);\n    }\n\n    gpgpu.setInputMatrixTexture(input.texData.texture, varLoc, i);\n  });\n\n  if (customSetup != null) {\n    customSetup(gpgpu, binary.webGLProgram);\n  }\n  gpgpu.executeProgram();\n}\n\nexport function makeShaderKey(\n    program: GPGPUProgram, inputs: TensorData[], output: TensorData): string {\n  let keyInputs = '';\n  inputs.concat(output).forEach(x => {\n    const hasOffset = x.texData != null && x.texData.slice != null &&\n        x.texData.slice.flatOffset > 0;\n    const texShape = x.isUniform ? 'uniform' : x.texData.texShape;\n    keyInputs += `${x.shape}_${texShape}_${hasOffset}`;\n  });\n  const keyUserCode = program.userCode;\n  let key = program.constructor.name;\n  // Fast string concat. See https://jsperf.com/string-concatenation/14.\n  key += '_' + keyInputs + '_' + keyUserCode;\n  return key;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\n/**\n * Template that creates implementation for binary ops. Supports broadcast.\n */\nexport function createSimpleBinaryKernelImpl(op) {\n    return (aShape, bShape, aVals, bVals, dtype) => {\n        const newShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n        const resultRank = newShape.length;\n        const resultStrides = util.computeStrides(newShape);\n        const resultSize = util.sizeFromShape(newShape);\n        const result = util.getTypedArrayFromDType(dtype, resultSize);\n        const aRank = aShape.length;\n        const bRank = bShape.length;\n        const aStrides = util.computeStrides(aShape);\n        const bStrides = util.computeStrides(bShape);\n        const aBroadcastDims = backend_util.getBroadcastDims(aShape, newShape);\n        const bBroadcastDims = backend_util.getBroadcastDims(bShape, newShape);\n        if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n            for (let i = 0; i < result.length; ++i) {\n                result[i] = op(aVals[i % aVals.length], bVals[i % bVals.length]);\n            }\n        }\n        else {\n            for (let i = 0; i < result.length; ++i) {\n                const loc = util.indexToLoc(i, resultRank, resultStrides);\n                const aLoc = loc.slice(-aRank);\n                aBroadcastDims.forEach(d => aLoc[d] = 0);\n                const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n                const bLoc = loc.slice(-bRank);\n                bBroadcastDims.forEach(d => bLoc[d] = 0);\n                const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n                result[i] = op(aVals[aIndex], bVals[bIndex]);\n            }\n        }\n        return [result, newShape];\n    };\n}\n//# sourceMappingURL=binary_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Add } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc, createComplexBinaryKernelImpl } from '../utils/binary_utils';\nexport const addImpl = createSimpleBinaryKernelImpl(((a, b) => a + b));\nexport const addComplexImpl = createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n    return { real: aReal + bReal, imag: aImag + bImag };\n}));\nexport const add = binaryKernelFunc(Add, addImpl, addComplexImpl);\nexport const addConfig = {\n    kernelName: Add,\n    backendName: 'cpu',\n    kernelFunc: add\n};\n//# sourceMappingURL=Add.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\n/**\n * Template that creates implementation for unary op.\n */\nexport function createSimpleUnaryImpl(op) {\n    return (values, dtype, attrs) => {\n        const newValues = util.getTypedArrayFromDType(dtype, values.length);\n        for (let i = 0; i < values.length; ++i) {\n            newValues[i] = op(values[i], attrs);\n        }\n        return newValues;\n    };\n}\n//# sourceMappingURL=unary_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Ceil } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFuncFromImpl } from '../utils/unary_utils';\nexport const ceilImpl = createSimpleUnaryImpl((xi) => Math.ceil(xi));\nexport const ceil = unaryKernelFuncFromImpl(Ceil, ceilImpl);\nexport const ceilConfig = {\n    kernelName: Ceil,\n    backendName: 'cpu',\n    kernelFunc: ceil,\n};\n//# sourceMappingURL=Ceil.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Exp } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFuncFromImpl } from '../utils/unary_utils';\nexport const expImpl = createSimpleUnaryImpl((xi) => Math.exp(xi));\nexport const exp = unaryKernelFuncFromImpl(Exp, expImpl);\nexport const expConfig = {\n    kernelName: Exp,\n    backendName: 'cpu',\n    kernelFunc: exp,\n};\n//# sourceMappingURL=Exp.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Expm1 } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFuncFromImpl } from '../utils/unary_utils';\nexport const expm1Impl = createSimpleUnaryImpl((xi) => Math.expm1(xi));\nexport const expm1 = unaryKernelFuncFromImpl(Expm1, expm1Impl);\nexport const expm1Config = {\n    kernelName: Expm1,\n    backendName: 'cpu',\n    kernelFunc: expm1,\n};\n//# sourceMappingURL=Expm1.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Floor } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFuncFromImpl } from '../utils/unary_utils';\nexport const floorImpl = createSimpleUnaryImpl((xi) => Math.floor(xi));\nexport const floor = unaryKernelFuncFromImpl(Floor, floorImpl);\nexport const floorConfig = {\n    kernelName: Floor,\n    backendName: 'cpu',\n    kernelFunc: floor,\n};\n//# sourceMappingURL=Floor.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Greater } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const greaterImpl = createSimpleBinaryKernelImpl((a, b) => (a > b) ? 1 : 0);\nexport const greater = binaryKernelFunc(Greater, greaterImpl, null /* complexImpl */, 'bool');\nexport const greaterConfig = {\n    kernelName: Greater,\n    backendName: 'cpu',\n    kernelFunc: greater\n};\n//# sourceMappingURL=Greater.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Less } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const lessImpl = createSimpleBinaryKernelImpl((a, b) => (a < b) ? 1 : 0);\nexport const less = binaryKernelFunc(Less, lessImpl, null /* complexImpl */, 'bool');\nexport const lessConfig = {\n    kernelName: Less,\n    backendName: 'cpu',\n    kernelFunc: less\n};\n//# sourceMappingURL=Less.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Log } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFuncFromImpl } from '../utils/unary_utils';\nexport const logImpl = createSimpleUnaryImpl((xi) => Math.log(xi));\nexport const log = unaryKernelFuncFromImpl(Log, logImpl);\nexport const logConfig = {\n    kernelName: Log,\n    backendName: 'cpu',\n    kernelFunc: log,\n};\n//# sourceMappingURL=Log.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Maximum } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const maximumImpl = createSimpleBinaryKernelImpl(((aValue, bValue) => Math.max(aValue, bValue)));\nexport const maximum = binaryKernelFunc(Maximum, maximumImpl);\nexport const maximumConfig = {\n    kernelName: Maximum,\n    backendName: 'cpu',\n    kernelFunc: maximum\n};\n//# sourceMappingURL=Maximum.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Minimum } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const minimumImpl = createSimpleBinaryKernelImpl(((aValue, bValue) => Math.min(aValue, bValue)));\nexport const minimum = binaryKernelFunc(Minimum, minimumImpl);\nexport const minimumConfig = {\n    kernelName: Minimum,\n    backendName: 'cpu',\n    kernelFunc: minimum\n};\n//# sourceMappingURL=Minimum.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Multiply } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc, createComplexBinaryKernelImpl } from '../utils/binary_utils';\nexport const multiplyImpl = createSimpleBinaryKernelImpl(((aValue, bValue) => aValue * bValue));\nexport const multiplyComplexImpl = createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n    return {\n        real: aReal * bReal - aImag * bImag,\n        imag: aReal * bImag + aImag * bReal\n    };\n}));\nexport const multiply = binaryKernelFunc(Multiply, multiplyImpl, multiplyComplexImpl);\nexport const multiplyConfig = {\n    kernelName: Multiply,\n    backendName: 'cpu',\n    kernelFunc: multiply\n};\n//# sourceMappingURL=Multiply.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { NotEqual } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const notEqualImpl = createSimpleBinaryKernelImpl(((a, b) => (a !== b) ? 1 : 0));\nexport const notEqual = binaryKernelFunc(NotEqual, notEqualImpl, null /* complexOp */, 'bool');\nexport const notEqualConfig = {\n    kernelName: NotEqual,\n    backendName: 'cpu',\n    kernelFunc: notEqual\n};\n//# sourceMappingURL=NotEqual.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Rsqrt } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFuncFromImpl } from '../utils/unary_utils';\nexport const rsqrtImpl = createSimpleUnaryImpl((xi) => 1 / Math.sqrt(xi));\nexport const rsqrt = unaryKernelFuncFromImpl(Rsqrt, rsqrtImpl);\nexport const rsqrtConfig = {\n    kernelName: Rsqrt,\n    backendName: 'cpu',\n    kernelFunc: rsqrt,\n};\n//# sourceMappingURL=Rsqrt.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { SquaredDifference } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const squaredDifferenceImpl = createSimpleBinaryKernelImpl(((a, b) => {\n    const diff = a - b;\n    return diff * diff;\n}));\nexport const squaredDifference = binaryKernelFunc(SquaredDifference, squaredDifferenceImpl);\nexport const squaredDifferenceConfig = {\n    kernelName: SquaredDifference,\n    backendName: 'cpu',\n    kernelFunc: squaredDifference\n};\n//# sourceMappingURL=SquaredDifference.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Sub } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc, createComplexBinaryKernelImpl } from '../utils/binary_utils';\nexport const subImpl = createSimpleBinaryKernelImpl(((aValue, bValue) => aValue - bValue));\nexport const subComplexImpl = createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n    return { real: aReal - bReal, imag: aImag - bImag };\n}));\nexport const sub = binaryKernelFunc(Sub, subImpl, subComplexImpl);\nexport const subConfig = {\n    kernelName: Sub,\n    backendName: 'cpu',\n    kernelFunc: sub\n};\n//# sourceMappingURL=Sub.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Abs, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function simpleAbsImpl(vals) {\n    const resultValues = new Float32Array(vals.length);\n    for (let i = 0; i < vals.length; ++i) {\n        resultValues[i] = Math.abs(vals[i]);\n    }\n    return resultValues;\n}\nexport const abs = (args) => {\n    const { x } = args.inputs;\n    const cpuBackend = args.backend;\n    assertNotComplex(x, 'abs');\n    let resultValues = new Float32Array(util.sizeFromShape(x.shape));\n    const values = cpuBackend.data.get(x.dataId).values;\n    resultValues = simpleAbsImpl(values);\n    return cpuBackend.makeOutput(resultValues, x.shape, 'float32');\n};\nexport const absConfig = {\n    kernelName: Abs,\n    backendName: 'cpu',\n    kernelFunc: abs,\n};\n//# sourceMappingURL=Abs.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer, util } from '@tensorflow/tfjs-core';\nexport function bincountImpl(xVals, weightsVals, weightsDtype, weightsShape, size) {\n    const weightsSize = util.sizeFromShape(weightsShape);\n    const outVals = util.makeZerosTypedArray(size, weightsDtype);\n    for (let i = 0; i < xVals.length; i++) {\n        const value = xVals[i];\n        if (value < 0) {\n            throw new Error('Input x must be non-negative!');\n        }\n        if (value >= size) {\n            continue;\n        }\n        if (weightsSize > 0) {\n            outVals[value] += weightsVals[i];\n        }\n        else {\n            outVals[value] += 1;\n        }\n    }\n    return outVals;\n}\nexport function bincountReduceImpl(xBuf, weightsBuf, size, binaryOutput = false) {\n    const numRows = xBuf.shape[0];\n    const numCols = xBuf.shape[1];\n    const outBuf = buffer([numRows, size], weightsBuf.dtype);\n    for (let i = 0; i < numRows; i++) {\n        for (let j = 0; j < numCols; j++) {\n            const value = xBuf.get(i, j);\n            if (value < 0) {\n                throw new Error('Input x must be non-negative!');\n            }\n            if (value >= size) {\n                continue;\n            }\n            if (binaryOutput) {\n                outBuf.set(1, i, value);\n            }\n            else {\n                if (weightsBuf.size > 0) {\n                    outBuf.set(outBuf.get(i, value) + weightsBuf.get(i, j), i, value);\n                }\n                else {\n                    outBuf.set(outBuf.get(i, value) + 1, i, value);\n                }\n            }\n        }\n    }\n    return outBuf;\n}\n//# sourceMappingURL=Bincount_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nexport function concatImpl(inputs, outShape, dtype, simplyConcat) {\n    const outVals = util.getArrayFromDType(dtype, util.sizeFromShape(outShape));\n    if (simplyConcat && dtype !== 'string') {\n        // Use built-in TypedArray.set() method for speed.\n        let offset = 0;\n        inputs.forEach(input => {\n            const size = util.sizeFromShape(input.shape);\n            outVals.set(input.vals, offset);\n            offset += size;\n        });\n    }\n    else {\n        let colOffset = 0;\n        inputs.forEach(input => {\n            const decodedData = dtype === 'string' ?\n                backend_util.fromUint8ToStringArray(input.vals) :\n                input.vals;\n            let tIdx = 0;\n            for (let row = 0; row < input.shape[0]; ++row) {\n                const resIdx = row * outShape[1] + colOffset;\n                for (let col = 0; col < input.shape[1]; ++col) {\n                    outVals[resIdx + col] = decodedData[tIdx++];\n                }\n            }\n            colOffset += input.shape[1];\n        });\n    }\n    return outVals;\n}\n//# sourceMappingURL=Concat_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from '@tensorflow/tfjs-core';\nexport function gatherV2Impl(xBuf, indicesBuf, flattenOutputShape) {\n    const outBuf = buffer(flattenOutputShape, xBuf.dtype);\n    for (let i = 0; i < outBuf.size; ++i) {\n        const newLoc = outBuf.indexToLoc(i);\n        const originalLoc = newLoc.slice();\n        const batchIdx = originalLoc[0];\n        const indicesIdx = originalLoc[2];\n        const indicesIndex = indicesBuf.locToIndex([batchIdx, indicesIdx]);\n        originalLoc[2] = indicesBuf.values[indicesIndex];\n        const originalIndex = xBuf.locToIndex(originalLoc);\n        outBuf.values[i] = xBuf.values[originalIndex];\n    }\n    return outBuf;\n}\n//# sourceMappingURL=GatherV2_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function linSpaceImpl(start, stop, num) {\n    const step = (stop - start) / (num - 1);\n    const values = util.makeZerosTypedArray(num, 'float32');\n    values[0] = start;\n    for (let i = 1; i < values.length; i++) {\n        values[i] = values[i - 1] + step;\n    }\n    return values;\n}\n//# sourceMappingURL=LinSpace_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function maxImpl(aVals, reduceSize, outShape, dtype) {\n    const vals = util.getTypedArrayFromDType(dtype, util.sizeFromShape(outShape));\n    for (let i = 0; i < vals.length; ++i) {\n        const offset = i * reduceSize;\n        let max = aVals[offset];\n        for (let j = 0; j < reduceSize; ++j) {\n            const value = aVals[offset + j];\n            if (value > max) {\n                max = value;\n            }\n        }\n        vals[i] = max;\n    }\n    return vals;\n}\n//# sourceMappingURL=Max_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Neg, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { multiplyImpl } from './Multiply';\nexport function negImpl(xVals, xShape, xDtype) {\n    const minusOne = util.createScalarValue(-1, xDtype);\n    return multiplyImpl([], xShape, minusOne, xVals, xDtype);\n}\nexport function neg(args) {\n    const { inputs, backend } = args;\n    const { x } = inputs;\n    assertNotComplex(x, 'neg');\n    const xVals = backend.data.get(x.dataId).values;\n    const [res, newShape] = negImpl(xVals, x.shape, x.dtype);\n    return backend.makeTensorInfo(newShape, x.dtype, res);\n}\nexport const negConfig = {\n    kernelName: Neg,\n    backendName: 'cpu',\n    kernelFunc: neg\n};\n//# sourceMappingURL=Neg.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Prod, upcastType, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { transpose } from './Transpose';\nexport function prodImpl(xShape, xDtype, xVals, reductionAxes) {\n    const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(xShape, reductionAxes);\n    const outDtype = upcastType(xDtype, 'int32');\n    const outVals = util.makeZerosTypedArray(util.sizeFromShape(outShape), outDtype);\n    const reduceSize = util.sizeFromShape(reduceShape);\n    for (let i = 0; i < outVals.length; ++i) {\n        const offset = i * reduceSize;\n        let prod = 1;\n        for (let j = 0; j < reduceSize; ++j) {\n            prod *= xVals[offset + j];\n        }\n        outVals[i] = prod;\n    }\n    return { outVals, outShape, outDtype };\n}\nexport function prod(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { axis, keepDims } = attrs;\n    assertNotComplex(x, 'prod');\n    const xRank = x.shape.length;\n    const axes = util.parseAxisParam(axis, x.shape);\n    const permutation = backend_util.getAxesPermutation(axes, xRank);\n    let reductionAxes = axes;\n    let permutedX = x;\n    const intermediateTensorInfos = [];\n    if (permutation != null) {\n        permutedX = transpose({ inputs: { x }, backend, attrs: { perm: permutation } });\n        intermediateTensorInfos.push(permutedX);\n        reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n    }\n    const xVals = backend.data.get(permutedX.dataId).values;\n    const { outVals, outShape, outDtype } = prodImpl(permutedX.shape, permutedX.dtype, xVals, reductionAxes);\n    let resultShape = outShape;\n    if (keepDims) {\n        resultShape = backend_util.expandShapeToKeepDim(outShape, axes);\n    }\n    intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return backend.makeTensorInfo(resultShape, outDtype, outVals);\n}\nexport const prodConfig = {\n    kernelName: Prod,\n    backendName: 'cpu',\n    kernelFunc: prod\n};\n//# sourceMappingURL=Prod.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function rangeImpl(start, stop, step, dtype) {\n    const sameStartStop = start === stop;\n    const increasingRangeNegativeStep = start < stop && step < 0;\n    const decreasingRangePositiveStep = stop < start && step > 1;\n    if (sameStartStop || increasingRangeNegativeStep ||\n        decreasingRangePositiveStep) {\n        return util.makeZerosTypedArray(0, dtype);\n    }\n    const numElements = Math.abs(Math.ceil((stop - start) / step));\n    const values = util.makeZerosTypedArray(numElements, dtype);\n    if (stop < start && step === 1) {\n        // Auto adjust the step's sign if it hasn't been set\n        // (or was set to 1)\n        step = -1;\n    }\n    values[0] = start;\n    for (let i = 1; i < values.length; i++) {\n        values[i] = values[i - 1] + step;\n    }\n    return values;\n}\n//# sourceMappingURL=Range_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, buffer, Slice, slice_util, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function sliceImpl(vals, begin, size, shape, dtype) {\n    const isContinous = slice_util.isSliceContinous(shape, begin, size);\n    const length = util.sizeFromShape(size);\n    const xStrides = util.computeStrides(shape);\n    if (isContinous) {\n        const flatOffset = slice_util.computeFlatOffset(begin, xStrides);\n        if (dtype === 'string') {\n            return vals.slice(flatOffset, flatOffset + length);\n        }\n        return vals.subarray(flatOffset, flatOffset + length);\n    }\n    const decodedData = dtype === 'string' ?\n        backend_util.fromUint8ToStringArray(vals) :\n        vals;\n    const inBuf = buffer(shape, dtype, decodedData);\n    const outBuf = buffer(size, dtype);\n    for (let i = 0; i < outBuf.size; ++i) {\n        const outLoc = outBuf.indexToLoc(i);\n        const inLoc = outLoc.map((idx, j) => idx + begin[j]);\n        outBuf.set(inBuf.get(...inLoc), ...outLoc);\n    }\n    if (dtype === 'string') {\n        return backend_util.fromStringArrayToUint8(outBuf.values);\n    }\n    return outBuf.values;\n}\nexport function slice(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { begin, size } = attrs;\n    assertNotComplex(x, 'slice');\n    const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n    slice_util.assertParamsValid(x, $begin, $size);\n    const vals = backend.data.get(x.dataId).values;\n    const outVals = sliceImpl(vals, $begin, $size, x.shape, x.dtype);\n    return backend.makeTensorInfo($size, x.dtype, outVals);\n}\nexport const sliceConfig = {\n    kernelName: Slice,\n    backendName: 'cpu',\n    kernelFunc: slice\n};\n//# sourceMappingURL=Slice.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from '@tensorflow/tfjs-core';\nexport function stridedSliceImpl(outShape, xBuf, strides, begin) {\n    const outBuf = buffer(outShape, xBuf.dtype);\n    for (let i = 0; i < outBuf.size; i++) {\n        const loc = outBuf.indexToLoc(i);\n        const newLoc = new Array(loc.length);\n        for (let j = 0; j < newLoc.length; j++) {\n            newLoc[j] = loc[j] * strides[j] + begin[j];\n        }\n        outBuf.set(xBuf.get(...newLoc), ...loc);\n    }\n    return outBuf;\n}\n//# sourceMappingURL=StridedSlice_impl.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from '@tensorflow/tfjs-core';\n/**\n * An implementation of the tile kernel shared between webgl and cpu for string\n * tensors only.\n */\nexport function tileImpl(xBuf, reps) {\n    const newShape = new Array(xBuf.rank);\n    for (let i = 0; i < newShape.length; i++) {\n        newShape[i] = xBuf.shape[i] * reps[i];\n    }\n    const result = buffer(newShape, xBuf.dtype);\n    for (let i = 0; i < result.values.length; ++i) {\n        const newLoc = result.indexToLoc(i);\n        const originalLoc = new Array(xBuf.rank);\n        for (let j = 0; j < originalLoc.length; j++) {\n            originalLoc[j] = newLoc[j] % xBuf.shape[j];\n        }\n        const originalIndex = xBuf.locToIndex(originalLoc);\n        result.values[i] = xBuf.values[originalIndex];\n    }\n    return result;\n}\n//# sourceMappingURL=Tile_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/** An implementation of the TopK kernel shared between webgl and cpu. */\nimport { buffer, util } from '@tensorflow/tfjs-core';\nexport function topKImpl(x, xShape, xDtype, k, sorted) {\n    // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n    const lastDim = xShape[xShape.length - 1];\n    const [batch, size] = [x.length / lastDim, lastDim];\n    const allTopKVals = util.getTypedArrayFromDType(xDtype, batch * k);\n    const allTopKIndices = util.getTypedArrayFromDType('int32', batch * k);\n    for (let b = 0; b < batch; b++) {\n        const offset = b * size;\n        const vals = x.subarray(offset, offset + size);\n        const valAndInd = [];\n        for (let i = 0; i < vals.length; i++) {\n            valAndInd.push({ value: vals[i], index: i });\n        }\n        valAndInd.sort((a, b) => b.value - a.value);\n        const outOffset = b * k;\n        const topKVals = allTopKVals.subarray(outOffset, outOffset + k);\n        const topKIndices = allTopKIndices.subarray(outOffset, outOffset + k);\n        for (let i = 0; i < k; i++) {\n            topKVals[i] = valAndInd[i].value;\n            topKIndices[i] = valAndInd[i].index;\n        }\n    }\n    // Reshape back to the original input shape, except that the last\n    // dimension is k.\n    const outputShape = xShape.slice();\n    outputShape[outputShape.length - 1] = k;\n    return [\n        buffer(outputShape, xDtype, allTopKVals),\n        buffer(outputShape, 'int32', allTopKIndices)\n    ];\n}\n//# sourceMappingURL=TopK_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function transposeImpl(xVals, xShape, dtype, perm, newShape) {\n    const xRank = xShape.length;\n    const xSize = util.sizeFromShape(xShape);\n    const xStrides = util.computeStrides(xShape);\n    const newStrides = util.computeStrides(newShape);\n    const result = util.getTypedArrayFromDType(dtype, util.sizeFromShape(newShape));\n    for (let i = 0; i < xSize; ++i) {\n        const loc = util.indexToLoc(i, xRank, xStrides);\n        // Permute location.\n        const newLoc = new Array(loc.length);\n        for (let i = 0; i < newLoc.length; i++) {\n            newLoc[i] = loc[perm[i]];\n        }\n        const newIndex = util.locToIndex(newLoc, xRank, newStrides);\n        result[newIndex] = xVals[i];\n    }\n    return result;\n}\n//# sourceMappingURL=Transpose_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { TensorBuffer, util } from '@tensorflow/tfjs-core';\nexport function uniqueImpl(values, axis, shape, dtype) {\n    // Normalize and validate axis.\n    const $axis = util.parseAxisParam(axis, shape)[0];\n    // Calculate the new shape that is suitable for extracting data along the\n    // given axis.\n    //\n    // The rank is 3.\n    // The size of the 1st dimension is the size of all the axes < the given axis.\n    // The size of the 2nd dimension is the same as the size of the given axis.\n    // The size of the 3rd dimension is the size of all the axes > the given axis.\n    //\n    // For example, for a 4D tensor with shape=[2, 3, 5, 4] and axis=2, the\n    // newShape would be: [2*3, 5, 4].\n    //\n    // Note that this is not the final output shape. This will be the shape for an\n    // intermediate TensorBuffer (see inputBuffer below) to allow us to extract\n    // values along the given axis. To demonstrate how it works, consider the\n    // following example:\n    //\n    // Input: a 3D tensor, with shape [1, 2, 3]\n    // [\n    //   [\n    //      [1,2,3],\n    //      [4,5,6]\n    //   ]\n    // ]\n    // Axis: 2 (the last axis).\n    // Along axis 2, we expect to extract 3 tensors: [1,4], [2,5], [3,6].\n    //\n    // For this example, newShape would be: [2, 3, 1], where 2 is calculated from\n    // 1*2. The re-shaped data would look like:\n    //\n    // [\n    //   [\n    //     [1], [2], [3]\n    //   ],\n    //   [\n    //     [4], [5], [6]\n    //   ]\n    // ]\n    //\n    // Then, we can construct a 3-level nested loop by the following dimension\n    // order to extract the values along the axis (dimension1):\n    // i: dimension1       // 0,1,2 (newShape[1])\n    //   m: dimension0     // 0,1   (newShape[0])\n    //     n: dimension2   // 0     (newShape[2])\n    //\n    //                       m, i, n\n    //                      ---------\n    // Iteration 0: data at [0, 0, 0] => \"1\"\n    // Iteration 1: data at [1, 0, 0] => \"4\"\n    // We got [1,4].\n    // Iteration 2: data at [0, 1, 0] => \"2\"\n    // Iteration 3: data at [1, 1, 0] => \"5\"\n    // We got [2,5].\n    // Iteration 4: data at [0, 2, 0] => \"3\"\n    // Iteration 5: data at [1, 2, 0] => \"6\"\n    // We got [3,6].\n    const newShape = [1, shape[0], 1];\n    for (let i = 0; i < $axis; i++) {\n        newShape[0] *= shape[i];\n    }\n    newShape[1] = shape[$axis];\n    for (let i = $axis + 1; i < shape.length; i++) {\n        newShape[2] *= shape[i];\n    }\n    // A map from unique elements (their string representations) to their values\n    // in \"indices\" (below).\n    const uniqueElements = {};\n    // The indices of each unique element in the original tensor along the given\n    // axis. It is 1D and has the same size as the given axis.\n    const indices = new Int32Array(shape[$axis]);\n    // Create a buffer so we can easily extract value at a given location.\n    const inputBuffer = new TensorBuffer(newShape, dtype, values);\n    // The indices along the given axis that have unique elements. This is a\n    // de-duped version of \"indices\" above.\n    const uniqueIndices = [];\n    const is1DTensor = newShape[0] === 1 && newShape[2] === 1;\n    for (let i = 0; i < shape[$axis]; i++) {\n        // Extract values along the axis.\n        let element;\n        if (is1DTensor) {\n            // Fast path for 1D tensor input.\n            element = values[i].toString();\n        }\n        else {\n            const axisValues = [];\n            for (let m = 0; m < newShape[0]; m++) {\n                for (let n = 0; n < newShape[2]; n++) {\n                    axisValues.push(inputBuffer.get(m, i, n));\n                }\n            }\n            element = axisValues.join(',');\n        }\n        // Dedup and update various indices.\n        if (uniqueElements[element] !== undefined) {\n            indices[i] = uniqueElements[element];\n        }\n        else {\n            const uniqueIndex = Object.keys(uniqueElements).length;\n            uniqueElements[element] = uniqueIndex;\n            indices[i] = uniqueIndex;\n            uniqueIndices.push(i);\n        }\n    }\n    // Now we know where each of the unique elements are located along the axis\n    // (uniqueIndices). Extract them from input buffer and store them in the\n    // output buffer.\n    const outputTmpShape = newShape.slice();\n    outputTmpShape[1] = Object.keys(uniqueElements).length;\n    const outputBuffer = new TensorBuffer(outputTmpShape, dtype);\n    uniqueIndices.forEach((uniqueElementIndex, i) => {\n        for (let m = 0; m < newShape[0]; m++) {\n            for (let n = 0; n < newShape[2]; n++) {\n                outputBuffer.set(inputBuffer.get(m, uniqueElementIndex, n), m, i, n);\n            }\n        }\n    });\n    // The output shape can be calculated from the input shape with the size of\n    // the given axis replaced by the number of unique elements along that axis.\n    const outputShape = shape.slice();\n    outputShape[$axis] = outputTmpShape[1];\n    return {\n        outputValues: outputBuffer.values,\n        outputShape,\n        indices,\n    };\n}\n//# sourceMappingURL=Unique_impl.js.map","\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Import shared functionality from tfjs-backend-cpu without triggering\n// side effects.\n// tslint:disable-next-line: no-imports-from-dist\nimport * as shared from '@tensorflow/tfjs-backend-cpu/dist/shared';\n// tslint:disable-next-line: no-imports-from-dist\nimport {SimpleBinaryKernelImpl} from '@tensorflow/tfjs-backend-cpu/dist/shared';\n// tslint:disable-next-line: no-imports-from-dist\nimport {SimpleUnaryImpl} from '@tensorflow/tfjs-backend-cpu/dist/utils/unary_types';\n\nexport type SimpleBinaryKernelImplCPU = SimpleBinaryKernelImpl;\nexport type SimpleUnaryKernelImplCPU = SimpleUnaryImpl;\nconst {\n  addImpl: addImplCPU,\n  bincountImpl: bincountImplCPU,\n  bincountReduceImpl: bincountReduceImplCPU,\n  ceilImpl: ceilImplCPU,\n  concatImpl: concatImplCPU,\n  expImpl: expImplCPU,\n  expm1Impl: expm1ImplCPU,\n  floorImpl: floorImplCPU,\n  gatherV2Impl: gatherV2ImplCPU,\n  greaterImpl: greaterImplCPU,\n  lessImpl: lessImplCPU,\n  linSpaceImpl: linSpaceImplCPU,\n  logImpl: logImplCPU,\n  maxImpl: maxImplCPU,\n  maximumImpl: maximumImplCPU,\n  minimumImpl: minimumImplCPU,\n  multiplyImpl: multiplyImplCPU,\n  negImpl: negImplCPU,\n  prodImpl: prodImplCPU,\n  rangeImpl: rangeImplCPU,\n  rsqrtImpl: rsqrtImplCPU,\n  simpleAbsImpl: simpleAbsImplCPU,\n  sliceImpl: sliceImplCPU,\n  stridedSliceImpl: stridedSliceImplCPU,\n  subImpl: subImplCPU,\n  tileImpl: tileImplCPU,\n  topKImpl: topKImplCPU,\n  transposeImpl: transposeImplCPU,\n  uniqueImpl: uniqueImplCPU,\n} = shared;\n\nexport {\n  addImplCPU,\n  bincountImplCPU,\n  bincountReduceImplCPU,\n  ceilImplCPU,\n  concatImplCPU,\n  expImplCPU,\n  expm1ImplCPU,\n  floorImplCPU,\n  gatherV2ImplCPU,\n  greaterImplCPU,\n  lessImplCPU,\n  linSpaceImplCPU,\n  logImplCPU,\n  maxImplCPU,\n  maximumImplCPU,\n  minimumImplCPU,\n  multiplyImplCPU,\n  negImplCPU,\n  prodImplCPU,\n  simpleAbsImplCPU,\n  sliceImplCPU,\n  stridedSliceImplCPU,\n  subImplCPU,\n  rangeImplCPU,\n  rsqrtImplCPU,\n  tileImplCPU,\n  topKImplCPU,\n  transposeImplCPU,\n  uniqueImplCPU,\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport function getVecChannels(name: string, rank: number): string[] {\n  return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank).map(d => `${name}.${d}`);\n}\n\nexport function getChannels(name: string, rank: number): string[] {\n  if (rank === 1) {\n    return [name];\n  }\n  return getVecChannels(name, rank);\n}\n\nexport function getSourceCoords(rank: number, dims: string[]): string {\n  if (rank === 1) {\n    return 'rc';\n  }\n\n  let coords = '';\n  for (let i = 0; i < rank; i++) {\n    coords += dims[i];\n    if (i < rank - 1) {\n      coords += ',';\n    }\n  }\n  return coords;\n}","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class PackProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = false;\n  packedOutput = true;\n\n  constructor(\n      outputShape:\n          number[]) {  // TODO(https://github.com/tensorflow/tfjs/issues/893):\n                       // Only input / output 3D tensors.\n    this.outputShape = outputShape;\n    const rank = outputShape.length;\n\n    if (rank === 0) {\n      this.userCode = `\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      `;\n    } else {\n      const channels = getChannels('rc', rank);\n      const dtype = getCoordsDataType(rank);\n      const outOfBoundsCondition =\n          getOutOfBoundsCondition(rank, outputShape, channels);\n      const setup = getSetup(\n          rank, outputShape[outputShape.length - 1],\n          outputShape[outputShape.length - 2], channels);\n      const output = getOutput(outputShape, channels);\n\n      this.userCode = `\n        void main() {\n          ${dtype} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            setOutput(vec4(0));\n          } else {\n            ${setup}\n\n            setOutput(vec4(${output}));\n          }\n        }\n      `;\n    }\n  }\n}\n\nfunction getSourceCoordsArr(rank: number, dims: string[]): string[] {\n  const coords = [];\n\n  for (let row = 0; row <= 1; row++) {\n    for (let col = 0; col <= 1; col++) {\n      let coord = `${row === 0 ? 'r' : 'rp1'}, ${col === 0 ? 'c' : 'cp1'}`;\n\n      for (let d = 2; d < rank; d++) {\n        coord = `${dims[dims.length - 1 - d]},` + coord;\n      }\n\n      coords.push(coord);\n    }\n  }\n  return coords;\n}\n\nfunction getOutOfBoundsCondition(\n    rank: number, shape: number[], dims: string[]): string {\n  if (rank === 1) {\n    return `rc > ${shape[0]}`;\n  }\n\n  let cond = '';\n  for (let i = rank - 2; i < rank; i++) {\n    cond += `${dims[i]} >= ${shape[i]}`;\n    if (i < rank - 1) {\n      cond += '||';\n    }\n  }\n\n  return cond;\n}\n\nfunction getSetup(\n    rank: number, cols: number, rows: number, dims: string[]): string {\n  if (rank === 1) {\n    return '';\n  }\n\n  const innerDims = dims.slice(-2);\n\n  return `\n    int r = ${innerDims[0]};\n    int c = ${innerDims[1]};\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= ${cols};\n    bool rEdge = rp1 >= ${rows};\n  `;\n}\n\nfunction getOutput(shape: number[], dims: string[]): string {\n  const rank = shape.length;\n  const sourceCoords = getSourceCoordsArr(rank, dims);\n  if (rank === 1) {\n    return `getA(rc),\n            rc + 1 >= ${shape[0]} ? 0. : getA(rc + 1),\n            0, 0`;\n  }\n\n  return `getA(${sourceCoords[0]}),\n          cEdge ? 0. : getA(${sourceCoords[1]}),\n          rEdge ? 0. : getA(${sourceCoords[2]}),\n          rEdge || cEdge ? 0. : getA(${sourceCoords[3]})`;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n\nexport class ReshapePackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(outputShape: [number, number, number], inputShape: [\n    number, number, number\n  ]) {\n    this.outputShape = outputShape;\n\n    let mainLoop = ``;\n    for (let i = 0; i < 4; i++) {\n      let thisRC = `thisRC = rc;`;\n      if (i % 2 === 1) {\n        thisRC += `thisRC.z += 1;`;\n      }\n      if (i > 1) {\n        thisRC += `thisRC.y += 1;`;\n      }\n\n      mainLoop += `\n        ${thisRC}\n        ${i > 0 ? `if(thisRC.y < rows && thisRC.z < cols){` : ''}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${i > 0 ? '}' : ''}\n      `;\n    }\n\n    this.userCode = `\n      ${getReshapedInputCoords(inputShape)}\n      ${shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${outputShape[1]};\n        int cols = ${outputShape[2]};\n\n        ${mainLoop}\n\n        setOutput(result);\n      }\n    `;\n  }\n}\n\nfunction getReshapedInputCoords(shape: [number, number, number]): string {\n  const coordsFromIndexSnippet =\n      shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n\n  return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '@tensorflow/tfjs-core';\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {getInternalFormatForFloat16MatrixTexture, getInternalFormatForFloat16PackedMatrixTexture, getInternalFormatForFloat32MatrixTexture, getInternalFormatForPackedMatrixTexture, getInternalFormatForUnsignedBytesMatrixTexture} from './gpgpu_util';\nimport {getPackedMatrixTextureShapeWidthHeight, getUnpackedMatrixTextureShapeWidthHeight, PhysicalTextureType, TextureConfig, TextureUsage} from './tex_util';\n\nexport class TextureManager {\n  private numUsedTextures = 0;\n  private numFreeTextures = 0;\n  private _numBytesAllocated = 0;\n  private _numBytesFree = 0;  // How many bytes that have been allocated\n                              // are available for reuse.\n  private freeTextures: {[shape: string]: WebGLTexture[]} = {};\n  private logEnabled = false;\n  private usedTextures: {[shape: string]: WebGLTexture[]} = {};\n\n  constructor(private gpgpu: GPGPUContext) {}\n\n  acquireTexture(\n      shapeRC: [number, number], usage: TextureUsage,\n      isPacked: boolean): WebGLTexture {\n    const physicalTexType = getPhysicalFromLogicalTextureType(usage, isPacked);\n\n    const shapeKey = getKeyFromTextureShape(shapeRC, physicalTexType, isPacked);\n    if (!(shapeKey in this.freeTextures)) {\n      this.freeTextures[shapeKey] = [];\n    }\n    if (!(shapeKey in this.usedTextures)) {\n      this.usedTextures[shapeKey] = [];\n    }\n\n    const texBytes = computeBytes(\n        shapeRC, physicalTexType, this.gpgpu.gl, this.gpgpu.textureConfig,\n        isPacked);\n\n    if (this.freeTextures[shapeKey].length > 0) {\n      this.numFreeTextures--;\n      this.numUsedTextures++;\n      this._numBytesFree -= texBytes;\n      this.log();\n      const newTexture = this.freeTextures[shapeKey].shift();\n      this.usedTextures[shapeKey].push(newTexture);\n      return newTexture;\n    }\n\n    let newTexture: WebGLTexture;\n    if (physicalTexType === PhysicalTextureType.PACKED_2X2_FLOAT32) {\n      newTexture = this.gpgpu.createPackedMatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (physicalTexType === PhysicalTextureType.PACKED_2X2_FLOAT16) {\n      newTexture =\n          this.gpgpu.createFloat16PackedMatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (physicalTexType === PhysicalTextureType.UNPACKED_FLOAT32) {\n      newTexture =\n          this.gpgpu.createFloat32MatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (physicalTexType === PhysicalTextureType.UNPACKED_FLOAT16) {\n      newTexture =\n          this.gpgpu.createFloat16MatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (\n        physicalTexType === PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE) {\n      newTexture =\n          this.gpgpu.createUnsignedBytesMatrixTexture(shapeRC[0], shapeRC[1]);\n    }\n    this.usedTextures[shapeKey].push(newTexture);\n\n    this.numUsedTextures++;\n    this._numBytesAllocated += texBytes;\n    this.log();\n\n    return newTexture;\n  }\n\n  releaseTexture(\n      texture: WebGLTexture, shape: [number, number],\n      logicalTexType: TextureUsage, isPacked: boolean): void {\n    if (this.freeTextures == null) {\n      // Already disposed.\n      return;\n    }\n    const physicalTexType =\n        getPhysicalFromLogicalTextureType(logicalTexType, isPacked);\n    const shapeKey = getKeyFromTextureShape(shape, physicalTexType, isPacked);\n    if (!(shapeKey in this.freeTextures)) {\n      this.freeTextures[shapeKey] = [];\n    }\n\n    const texBytes = computeBytes(\n        shape, physicalTexType, this.gpgpu.gl, this.gpgpu.textureConfig,\n        isPacked);\n    const deleteTexThreshold = env().get('WEBGL_DELETE_TEXTURE_THRESHOLD');\n    if (deleteTexThreshold !== -1 &&\n        this._numBytesAllocated > deleteTexThreshold) {\n      this.gpgpu.deleteMatrixTexture(texture);\n      this._numBytesAllocated -= texBytes;\n    } else {\n      this.freeTextures[shapeKey].push(texture);\n      this.numFreeTextures++;\n      this._numBytesFree += texBytes;\n    }\n\n    this.numUsedTextures--;\n\n    const texList = this.usedTextures[shapeKey];\n    const texIndex = texList.indexOf(texture);\n    if (texIndex < 0) {\n      throw new Error(\n          'Cannot release a texture that was never provided by this ' +\n          'texture manager');\n    }\n    texList.splice(texIndex, 1);\n    this.log();\n  }\n\n  private log() {\n    if (!this.logEnabled) {\n      return;\n    }\n    const total = this.numFreeTextures + this.numUsedTextures;\n    console.log(\n        'Free/Used', `${this.numFreeTextures} / ${this.numUsedTextures}`,\n        `(${total})`);\n    const freeRatio = this._numBytesFree / this._numBytesAllocated;\n    console.log(`Bytes allocated: ${this._numBytesAllocated}`);\n    console.log(`Bytes unused: ${this._numBytesFree} (${\n        Math.round(100 * freeRatio)}%)`);\n  }\n\n  get numBytesAllocated(): number {\n    return this._numBytesAllocated;\n  }\n\n  get numBytesFree(): number {\n    return this._numBytesFree;\n  }\n\n  getNumUsedTextures(): number {\n    return this.numUsedTextures;\n  }\n\n  getNumFreeTextures(): number {\n    return this.numFreeTextures;\n  }\n\n  dispose() {\n    if (this.freeTextures == null) {\n      // Already disposed.\n      return;\n    }\n    for (const texShape in this.freeTextures) {\n      this.freeTextures[texShape].forEach(tex => {\n        this.gpgpu.deleteMatrixTexture(tex);\n      });\n    }\n    for (const texShape in this.usedTextures) {\n      this.usedTextures[texShape].forEach(tex => {\n        this.gpgpu.deleteMatrixTexture(tex);\n      });\n    }\n    this.freeTextures = null;\n    this.usedTextures = null;\n    this.numUsedTextures = 0;\n    this.numFreeTextures = 0;\n    this._numBytesAllocated = 0;\n    this._numBytesFree = 0;\n  }\n}\n\nfunction numBytesForInternalFormat(\n    gl: WebGLRenderingContext, internalFormat: number): number {\n  // tslint:disable-next-line:no-any\n  const glany = gl as any;\n  if (internalFormat === glany.R32F) {\n    return 4;\n  } else if (internalFormat === glany.R16F) {\n    return 2;\n  } else if (internalFormat === glany.RGBA32F) {\n    return 16;\n  } else if (internalFormat === gl.RGBA) {\n    return 16;\n  } else if (internalFormat === glany.RGBA16F) {\n    return 8;\n  }\n  throw new Error(`Unknown internal format ${internalFormat}`);\n}\n\nexport function computeBytes(\n    shape: [number, number], physicalTexType: PhysicalTextureType,\n    gl: WebGLRenderingContext, textureConfig: TextureConfig,\n    isPacked: boolean): number {\n  // It is not possible to infer packed status from the texture type because\n  // depending on the textureConfig, different  texture types may resolve to the\n  // same internal format (e.g. in WebGL1, the internal format for\n  // UNPACKED_FLOAT16 textures is gl.RGBA). Therefore we pass in `isPacked`\n  // explicitly.\n  const internalFormat =\n      internalFormatForPhysicalTexType(physicalTexType, textureConfig);\n\n  let numElements: number;\n  if (isPacked) {\n    const [packedWidth, packedHeight] =\n        getPackedMatrixTextureShapeWidthHeight(shape[0], shape[1]);\n    numElements = packedWidth * packedHeight;\n\n  } else {\n    const [width, height] =\n        getUnpackedMatrixTextureShapeWidthHeight(shape[0], shape[1]);\n    numElements = width * height;\n  }\n\n  const bytesPerElement = numBytesForInternalFormat(gl, internalFormat);\n  return numElements * bytesPerElement;\n}\n\nfunction internalFormatForPhysicalTexType(\n    physicalTexType: PhysicalTextureType,\n    textureConfig: TextureConfig): number {\n  switch (physicalTexType) {\n    case PhysicalTextureType.PACKED_2X2_FLOAT32:\n      return getInternalFormatForPackedMatrixTexture(textureConfig);\n    case PhysicalTextureType.PACKED_2X2_FLOAT16:\n      return getInternalFormatForFloat16PackedMatrixTexture(textureConfig);\n    case PhysicalTextureType.UNPACKED_FLOAT32:\n      return getInternalFormatForFloat32MatrixTexture(textureConfig);\n    case PhysicalTextureType.UNPACKED_FLOAT16:\n      return getInternalFormatForFloat16MatrixTexture(textureConfig);\n    case PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE:\n      return getInternalFormatForUnsignedBytesMatrixTexture(textureConfig);\n    default:\n      throw new Error(`Unknown physical texture type ${physicalTexType}`);\n  }\n}\n\nfunction getPhysicalTextureForRendering(isPacked: boolean):\n    PhysicalTextureType {\n  if (env().getBool('WEBGL_RENDER_FLOAT32_ENABLED')) {\n    if (isPacked) {\n      return PhysicalTextureType.PACKED_2X2_FLOAT32;\n    }\n    return PhysicalTextureType.UNPACKED_FLOAT32;\n  }\n\n  if (isPacked) {\n    return PhysicalTextureType.PACKED_2X2_FLOAT16;\n  }\n  return PhysicalTextureType.UNPACKED_FLOAT16;\n}\n\nfunction getPhysicalFromLogicalTextureType(\n    logicalTexType: TextureUsage, isPacked: boolean): PhysicalTextureType {\n  if (logicalTexType === TextureUsage.UPLOAD) {\n    return PhysicalTextureType.PACKED_2X2_FLOAT32;\n  } else if (logicalTexType === TextureUsage.RENDER || logicalTexType == null) {\n    return getPhysicalTextureForRendering(isPacked);\n  } else if (\n      logicalTexType === TextureUsage.DOWNLOAD ||\n      logicalTexType === TextureUsage.PIXELS) {\n    return PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE;\n  }\n  throw new Error(`Unknown logical texture type ${logicalTexType}`);\n}\n\nfunction getKeyFromTextureShape(\n    shapeRowsCol: [number, number], physicalTexType: PhysicalTextureType,\n    isPacked: boolean): string {\n  return `${shapeRowsCol[0]}_${shapeRowsCol[1]}_${physicalTexType}_${isPacked}`;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class UnaryOpProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(aShape: number[], opSnippet: string) {\n    this.outputShape = aShape;\n    this.userCode = `\n      float unaryOperation(float x) {\n        ${opSnippet}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `;\n  }\n}\n\nexport const CHECK_NAN_SNIPPET = `if (isnan(x)) return x;`;\n\nexport const LINEAR = `return x;`;\n\nexport const ABS = `return abs(x);`;\n\nexport function STEP(alpha = 0.0) {\n  return CHECK_NAN_SNIPPET + `\n    return x > 0.0 ? 1.0 : float(${alpha});\n  `;\n}\n\nexport const ELU = `return (x >= 0.0) ? x : (exp(x) - 1.0);`;\n\nexport const RELU = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : x;\n`;\n\nexport const RELU6 = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n`;\n\nexport const CLONE = 'return x;';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport const LINEAR = `return x;`;\n\nexport const ELU = `\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n`;\n\nexport const RELU = `\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\nexport const RELU6 = `\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\nexport class UnaryOpPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(aShape: number[], opSnippet: string) {\n    this.outputShape = aShape;\n    this.userCode = `\n      vec4 unaryOperation(vec4 x) {\n        ${opSnippet}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels, getSourceCoords} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class UnpackProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = false;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(outputShape: number[]) {\n    this.outputShape = outputShape;\n    const rank = outputShape.length;\n\n    const channels = getChannels('rc', rank);\n    const dtype = getCoordsDataType(rank);\n    const sourceCoords = getSourceCoords(rank, channels);\n    const innerDims = channels.slice(-2);\n    const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\n\n    this.userCode = `\n      void main() {\n        ${dtype} rc = getOutputCoords();\n        vec4 packedInput = getA(${sourceCoords});\n\n        setOutput(getChannel(packedInput, ${coords}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Import webgl flags.\nimport './flags_webgl';\n\nimport * as tf from '@tensorflow/tfjs-core';\nimport {backend_util, BackendValues, buffer, DataId, DataStorage, DataType, DataValues, engine, env, kernel_impls, KernelBackend, MemoryInfo, NumericDataType, Rank, RecursiveArray, scalar, ShapeMap, Tensor, Tensor2D, TensorBuffer, TensorInfo, tidy, TimingInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {getWebGLContext} from './canvas_util';\nimport {DecodeMatrixProgram} from './decode_matrix_gpu';\nimport {DecodeMatrixPackedProgram} from './decode_matrix_packed_gpu';\nimport {EncodeFloatProgram} from './encode_float_gpu';\nimport {EncodeFloatPackedProgram} from './encode_float_packed_gpu';\nimport {EncodeMatrixProgram} from './encode_matrix_gpu';\nimport {EncodeMatrixPackedProgram} from './encode_matrix_packed_gpu';\nimport {GPGPUContext} from './gpgpu_context';\nimport * as gpgpu_math from './gpgpu_math';\nimport {GPGPUBinary, GPGPUProgram, TensorData} from './gpgpu_math';\nimport {simpleAbsImplCPU} from './kernel_utils/shared';\nimport {PackProgram} from './pack_gpu';\nimport {ReshapePackedProgram} from './reshape_packed_gpu';\nimport * as tex_util from './tex_util';\nimport {TextureData, TextureUsage} from './tex_util';\nimport {TextureManager} from './texture_manager';\nimport * as unary_op from './unaryop_gpu';\nimport {UnaryOpProgram} from './unaryop_gpu';\nimport {UnaryOpPackedProgram} from './unaryop_packed_gpu';\nimport {UnpackProgram} from './unpack_gpu';\nimport * as webgl_util from './webgl_util';\n\nconst whereImpl = kernel_impls.whereImpl;\n\nexport const EPSILON_FLOAT32 = 1e-7;\nexport const EPSILON_FLOAT16 = 1e-4;\n\ntype KernelInfo = {\n  name: string; query: Promise<number>;\n};\n\nexport type TimerNode = RecursiveArray<KernelInfo>|KernelInfo;\nexport interface CPUTimerQuery {\n  startMs: number;\n  endMs?: number;\n}\n\nexport interface WebGLMemoryInfo extends MemoryInfo {\n  numBytesInGPU: number;\n  // Tracks the total number of bytes allocated on the GPU, accounting for the\n  // physical texture type.\n  numBytesInGPUAllocated: number;\n  // Tracks byte size of textures that were created and then made available for\n  // reuse (disposed).\n  numBytesInGPUFree: number;\n  unreliable: boolean;\n}\n\nexport interface WebGLTimingInfo extends TimingInfo {\n  uploadWaitMs: number;\n  downloadWaitMs: number;\n}\n\nconst binaryCaches: {[webGLVersion: string]: {[key: string]: GPGPUBinary}} = {};\n\nexport function getBinaryCache(webGLVersion: number) {\n  if (webGLVersion in binaryCaches) {\n    return binaryCaches[webGLVersion];\n  }\n  binaryCaches[webGLVersion] = {};\n  return binaryCaches[webGLVersion];\n}\n\n// Empirically determined constant used to determine size threshold for handing\n// off execution to the CPU.\nconst CPU_HANDOFF_SIZE_THRESHOLD = 128;\n\n// Empirically determined constant used to decide the number of MB on GPU\n// before we warn about high memory use. The MB are this constant * screen area\n// * dpi / 1024 / 1024.\nconst BEFORE_PAGING_CONSTANT = 600;\nfunction numMBBeforeWarning(): number {\n  if (env().global.screen == null) {\n    return 1024;  // 1 GB.\n  }\n  return (env().global.screen.height * env().global.screen.width *\n          window.devicePixelRatio) *\n      BEFORE_PAGING_CONSTANT / 1024 / 1024;\n}\n\nexport class MathBackendWebGL extends KernelBackend {\n  texData: DataStorage<TextureData>;\n  gpgpu: GPGPUContext;\n\n  private static nextDataId = 0;\n  private nextDataId(): number {\n    return MathBackendWebGL.nextDataId++;\n  }\n  // Maps data ids that have a pending read operation, to list of subscribers.\n  private pendingRead = new WeakMap<DataId, Array<(arr: TypedArray) => void>>();\n  // List of data ids that are scheduled for disposal, but are waiting on a\n  // pending read operation.\n  private pendingDisposal = new WeakSet<DataId>();\n\n  // Used to count the number of 'shallow' sliced tensors that point to the\n  // same data id.\n  dataRefCount = new WeakMap<DataId, number>();\n  private numBytesInGPU = 0;\n\n  private canvas: HTMLCanvasElement|OffscreenCanvas;\n\n  private programTimersStack: TimerNode[];\n  private activeTimers: TimerNode[];\n  // Accumulated time spent (including blocking) in uploading data to webgl.\n  private uploadWaitMs = 0;\n  // Accumulated time spent (including blocking in downloading data from webgl.\n  private downloadWaitMs = 0;\n  private cpuBackend: KernelBackend;\n\n  // record the last manual GL Flush time.\n  private lastGlFlushTime = 0;\n\n  // Number of bits of precision of this backend.\n  private floatPrecisionValue: 32|16;\n\n  private textureManager: TextureManager;\n  private binaryCache: {[key: string]: GPGPUBinary};\n  private gpgpuCreatedLocally: boolean;\n  private numMBBeforeWarning: number;\n  private warnedAboutMemory = false;\n\n  constructor(gpgpu?: GPGPUContext) {\n    super();\n    if (!env().getBool('HAS_WEBGL')) {\n      throw new Error('WebGL is not supported on this device');\n    }\n\n    if (gpgpu == null) {\n      const gl = getWebGLContext(env().getNumber('WEBGL_VERSION'));\n      this.binaryCache = getBinaryCache(env().getNumber('WEBGL_VERSION'));\n      this.gpgpu = new GPGPUContext(gl);\n      this.canvas = gl.canvas;\n      this.gpgpuCreatedLocally = true;\n    } else {\n      this.gpgpu = gpgpu;\n      this.binaryCache = {};\n      this.gpgpuCreatedLocally = false;\n      this.canvas = gpgpu.gl.canvas;\n    }\n    this.textureManager = new TextureManager(this.gpgpu);\n    this.numMBBeforeWarning = numMBBeforeWarning();\n\n    this.texData = new DataStorage(this, engine());\n  }\n\n  numDataIds() {\n    return this.texData.numDataIds() +\n        (this.cpuBackend ? this.cpuBackend.numDataIds() : 0) -\n        this.pendingDeletes;\n  }\n\n  write(values: BackendValues, shape: number[], dtype: DataType): DataId {\n    if (env().getBool('WEBGL_CHECK_NUMERICAL_PROBLEMS') ||\n        env().getBool('DEBUG')) {\n      this.checkNumericalProblems(values);\n    }\n    if (dtype === 'complex64' && values != null) {\n      throw new Error(\n          `Cannot write to a complex64 dtype. ` +\n          `Please use tf.complex(real, imag).`);\n    }\n    const dataId = {id: this.nextDataId()};\n    this.texData.set(\n        dataId,\n        {shape, dtype, values, usage: TextureUsage.UPLOAD, refCount: 1});\n    return dataId;\n  }\n\n  /** Return refCount of a `TensorData`. */\n  refCount(dataId: DataId): number {\n    if (this.texData.has(dataId)) {\n      const tensorData = this.texData.get(dataId);\n      return tensorData.refCount;\n    }\n    return 0;\n  }\n\n  /** Increase refCount of a `TextureData`. */\n  incRef(dataId: DataId): void {\n    const texData = this.texData.get(dataId);\n    texData.refCount++;\n  }\n\n  /** Decrease refCount of a `TextureData`. */\n  decRef(dataId: DataId): void {\n    if (this.texData.has(dataId)) {\n      const texData = this.texData.get(dataId);\n      texData.refCount--;\n    }\n  }\n\n  move(\n      dataId: DataId, values: BackendValues, shape: number[], dtype: DataType,\n      refCount: number): void {\n    if (env().getBool('DEBUG')) {\n      this.checkNumericalProblems(values);\n    }\n    if (dtype === 'complex64') {\n      throw new Error(\n          `Cannot write to a complex64 dtype. ` +\n          `Please use tf.complex(real, imag).`);\n    }\n    this.texData.set(\n        dataId, {shape, dtype, values, usage: TextureUsage.UPLOAD, refCount});\n  }\n\n  disposeIntermediateTensorInfo(tensorInfo: TensorInfo): void {\n    this.disposeData(tensorInfo.dataId);\n  }\n\n  readSync(dataId: DataId): BackendValues {\n    const texData = this.texData.get(dataId);\n    const {values, dtype, complexTensorInfos, slice, shape, isPacked} = texData;\n\n    // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res =\n          this.runWebGLProgram(program, [{dataId, shape, dtype}], dtype);\n      const data = this.readSync(res.dataId);\n      this.disposeIntermediateTensorInfo(res);\n      return data;\n    }\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n    if (dtype === 'string') {\n      return values;\n    }\n    const shouldTimeProgram = this.activeTimers != null;\n    let start: number;\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n\n    let result: Float32Array;\n    if (dtype === 'complex64') {\n      const realValues =\n          this.readSync(complexTensorInfos.real.dataId) as Float32Array;\n      const imagValues =\n          this.readSync(complexTensorInfos.imag.dataId) as Float32Array;\n      result = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n    } else {\n      result = this.getValuesFromTexture(dataId);\n    }\n\n    if (shouldTimeProgram) {\n      this.downloadWaitMs += util.now() - start;\n    }\n    return this.convertAndCacheOnCPU(dataId, result);\n  }\n\n  async read(dataId: DataId): Promise<BackendValues> {\n    if (this.pendingRead.has(dataId)) {\n      const subscribers = this.pendingRead.get(dataId);\n      return new Promise<TypedArray>(resolve => subscribers.push(resolve));\n    }\n    const texData = this.texData.get(dataId);\n    const {values, shape, slice, dtype, complexTensorInfos, isPacked} = texData;\n\n    // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res =\n          this.runWebGLProgram(program, [{dataId, shape, dtype}], dtype);\n      const data = this.read(res.dataId);\n      this.disposeIntermediateTensorInfo(res);\n      return data;\n    }\n\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n\n    if (!env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') &&\n        env().getNumber('WEBGL_VERSION') === 2) {\n      throw new Error(\n          `tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and ` +\n          `WEBGL_VERSION=2 not yet supported.`);\n    }\n\n    let buffer = null;\n    let tmpDownloadTarget: TensorInfo;\n\n    if (dtype !== 'complex64' && env().get('WEBGL_BUFFER_SUPPORTED')) {\n      // Possibly copy the texture into a buffer before inserting a fence.\n      tmpDownloadTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpDownloadTarget.dataId);\n\n      buffer = this.gpgpu.createBufferFromTexture(\n          tmpData.texture, ...tex_util.getDenseTexShape(shape));\n    }\n\n    this.pendingRead.set(dataId, []);\n\n    if (dtype !== 'complex64') {\n      // Create a fence and wait for it to resolve.\n      await this.gpgpu.createAndWaitForFence();\n    }\n\n    // Download the values from the GPU.\n    let vals: Float32Array;\n    if (dtype === 'complex64') {\n      const ps = await Promise.all([\n        this.read(complexTensorInfos.real.dataId),\n        this.read(complexTensorInfos.imag.dataId)\n      ]);\n\n      const realValues = ps[0];\n      const imagValues = ps[1];\n      vals = backend_util.mergeRealAndImagArrays(\n          realValues as Float32Array, imagValues as Float32Array);\n    } else if (buffer == null) {\n      vals = this.getValuesFromTexture(dataId);\n    } else {\n      const size = util.sizeFromShape(shape);\n      vals = this.gpgpu.downloadFloat32MatrixFromBuffer(buffer, size);\n    }\n    if (tmpDownloadTarget != null) {\n      this.disposeIntermediateTensorInfo(tmpDownloadTarget);\n    }\n    const dTypeVals = this.convertAndCacheOnCPU(dataId, vals);\n\n    const subscribers = this.pendingRead.get(dataId);\n    this.pendingRead.delete(dataId);\n\n    // Notify all pending reads.\n    subscribers.forEach(resolve => resolve(dTypeVals));\n    if (this.pendingDisposal.has(dataId)) {\n      this.pendingDisposal.delete(dataId);\n      if (this.disposeData(dataId)) {\n        engine().removeDataId(dataId, this);\n      }\n      this.pendingDeletes--;\n    }\n    return dTypeVals;\n  }\n\n  bufferSync<R extends Rank>(t: TensorInfo): TensorBuffer<R> {\n    const data = this.readSync(t.dataId);\n    let decodedData = data as DataValues;\n    if (t.dtype === 'string') {\n      try {\n        // Decode the bytes into string.\n        decodedData = (data as Uint8Array[]).map(d => util.decodeString(d));\n      } catch {\n        throw new Error('Failed to decode encoded string bytes into utf-8');\n      }\n    }\n    return buffer(t.shape as ShapeMap[R], t.dtype, decodedData) as\n        TensorBuffer<R>;\n  }\n\n  private checkNumericalProblems(values: BackendValues): void {\n    if (values == null) {\n      return;\n    }\n    for (let i = 0; i < values.length; i++) {\n      const num = values[i] as number;\n      if (!webgl_util.canBeRepresented(num)) {\n        if (env().getBool('WEBGL_RENDER_FLOAT32_CAPABLE')) {\n          throw Error(\n              `The value ${num} cannot be represented with your ` +\n              `current settings. Consider enabling float32 rendering: ` +\n              `'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);\n        }\n        throw Error(`The value ${num} cannot be represented on this device.`);\n      }\n    }\n  }\n\n  private getValuesFromTexture(dataId: DataId): Float32Array {\n    const {shape, dtype, isPacked} = this.texData.get(dataId);\n    const size = util.sizeFromShape(shape);\n    if (env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED')) {\n      const tmpTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpTarget.dataId);\n      const vals = this.gpgpu\n                       .downloadMatrixFromPackedTexture(\n                           tmpData.texture, ...tex_util.getDenseTexShape(shape))\n                       .subarray(0, size);\n\n      this.disposeIntermediateTensorInfo(tmpTarget);\n\n      return vals;\n    }\n\n    const shouldUsePackedProgram =\n        env().getBool('WEBGL_PACK') && isPacked === true;\n    const outputShape =\n        shouldUsePackedProgram ? webgl_util.getShapeAs3D(shape) : shape;\n    const program = shouldUsePackedProgram ?\n        new EncodeFloatPackedProgram(outputShape as [number, number, number]) :\n        new EncodeFloatProgram(outputShape);\n    const output = this.runWebGLProgram(\n        program, [{shape: outputShape, dtype, dataId}], 'float32');\n    const tmpData = this.texData.get(output.dataId);\n    const vals =\n        this.gpgpu\n            .downloadByteEncodedFloatMatrixFromOutputTexture(\n                tmpData.texture, tmpData.texShape[0], tmpData.texShape[1])\n            .subarray(0, size);\n    this.disposeIntermediateTensorInfo(output);\n\n    return vals;\n  }\n\n  timerAvailable(): boolean {\n    return env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0;\n  }\n\n  async time(f: () => void): Promise<WebGLTimingInfo> {\n    const oldActiveTimers = this.activeTimers;\n    const newActiveTimers: TimerNode[] = [];\n\n    let outerMostTime = false;\n    if (this.programTimersStack == null) {\n      this.programTimersStack = newActiveTimers;\n      outerMostTime = true;\n    } else {\n      this.activeTimers.push(newActiveTimers);\n    }\n    this.activeTimers = newActiveTimers;\n\n    f();\n\n    // needing to split these up because util.flatten only accepts certain types\n    const flattenedActiveTimerQueries =\n        util.flatten(this.activeTimers.map((d: KernelInfo) => d.query))\n            .filter(d => d != null);\n    const flattenedActiveTimerNames =\n        util.flatten(this.activeTimers.map((d: KernelInfo) => d.name))\n            .filter(d => d != null);\n\n    this.activeTimers = oldActiveTimers;\n\n    if (outerMostTime) {\n      this.programTimersStack = null;\n    }\n\n    const res: WebGLTimingInfo = {\n      uploadWaitMs: this.uploadWaitMs,\n      downloadWaitMs: this.downloadWaitMs,\n      kernelMs: null,\n      wallMs: null  // will be filled by the engine\n    };\n\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      const kernelMs = await Promise.all(flattenedActiveTimerQueries);\n\n      res['kernelMs'] = util.sum(kernelMs);\n      res['getExtraProfileInfo'] = () =>\n          kernelMs.map((d, i) => ({name: flattenedActiveTimerNames[i], ms: d}))\n              .map(d => `${d.name}: ${d.ms}`)\n              .join(', ');\n    } else {\n      res['kernelMs'] = {\n        error: 'WebGL query timers are not supported in this environment.'\n      };\n    }\n\n    this.uploadWaitMs = 0;\n    this.downloadWaitMs = 0;\n    return res;\n  }\n  memory(): WebGLMemoryInfo {\n    return {\n      unreliable: false,\n      numBytesInGPU: this.numBytesInGPU,\n      numBytesInGPUAllocated: this.textureManager.numBytesAllocated,\n      numBytesInGPUFree: this.textureManager.numBytesFree\n    } as WebGLMemoryInfo;\n  }\n\n  private startTimer(): WebGLQuery|CPUTimerQuery {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      return this.gpgpu.beginQuery();\n    }\n    return {startMs: util.now(), endMs: null};\n  }\n\n  private endTimer(query: WebGLQuery|CPUTimerQuery): WebGLQuery|CPUTimerQuery {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      this.gpgpu.endQuery();\n      return query;\n    }\n    (query as CPUTimerQuery).endMs = util.now();\n    return query;\n  }\n\n  private async getQueryTime(query: WebGLQuery|CPUTimerQuery): Promise<number> {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      return this.gpgpu.waitForQueryAndGetTime(query as WebGLQuery);\n    }\n    const timerQuery = query as CPUTimerQuery;\n    return timerQuery.endMs - timerQuery.startMs;\n  }\n\n  private pendingDeletes = 0;\n\n  /**\n   * Decrease the RefCount on the dataId and dispose the memory if the dataId\n   * has 0 refCount. If there are pending read on the data, the disposal would\n   * added to the pending delete queue. Return true if the dataId is removed\n   * from backend or the backend does not contain the dataId, false if the\n   * dataId is not removed. Memory may or may not be released even when dataId\n   * is removed, which also depends on dataRefCount, see `releaseGPU`.\n   * @param dataId\n   * @oaram force Optional, remove the data regardless of refCount\n   */\n  disposeData(dataId: DataId, force = false): boolean {\n    if (this.pendingDisposal.has(dataId)) {\n      return false;\n    }\n\n    // No-op if already disposed.\n    if (!this.texData.has(dataId)) {\n      return true;\n    }\n\n    // if force flag is set, change refCount to 0, this would ensure disposal\n    // when added to the pendingDisposal queue. Memory may or may not be\n    // released, which also depends on dataRefCount, see `releaseGPU`.\n    if (force) {\n      this.texData.get(dataId).refCount = 0;\n    } else {\n      this.texData.get(dataId).refCount--;\n    }\n\n    if (!force && this.texData.get(dataId).refCount > 0) {\n      return false;\n    }\n\n    if (this.pendingRead.has(dataId)) {\n      this.pendingDisposal.add(dataId);\n      this.pendingDeletes++;\n      return false;\n    }\n\n    this.releaseGPUData(dataId);\n    const {complexTensorInfos} = this.texData.get(dataId);\n    if (complexTensorInfos != null) {\n      this.disposeData(complexTensorInfos.real.dataId, force);\n      this.disposeData(complexTensorInfos.imag.dataId, force);\n    }\n\n    this.texData.delete(dataId);\n\n    return true;\n  }\n\n  private releaseGPUData(dataId: DataId): void {\n    const {texture, dtype, texShape, usage, isPacked, slice} =\n        this.texData.get(dataId);\n    const key = slice && slice.origDataId || dataId;\n    const refCount = this.dataRefCount.get(key);\n\n    if (refCount > 1) {\n      this.dataRefCount.set(key, refCount - 1);\n    } else {\n      this.dataRefCount.delete(key);\n      if (texture != null) {\n        this.numBytesInGPU -= this.computeBytes(texShape, dtype);\n        this.textureManager.releaseTexture(texture, texShape, usage, isPacked);\n      }\n    }\n\n    const texData = this.texData.get(dataId);\n    texData.texture = null;\n    texData.texShape = null;\n    texData.isPacked = false;\n    texData.slice = null;\n  }\n\n  getTexture(dataId: DataId): WebGLTexture {\n    this.uploadToGPU(dataId);\n    return this.texData.get(dataId).texture;\n  }\n\n  /**\n   * Returns internal information for the specific data bucket. Used in unit\n   * tests.\n   */\n  getDataInfo(dataId: DataId): TextureData {\n    return this.texData.get(dataId);\n  }\n\n  /*\n  Tests whether all the inputs to an op are small and on the CPU. This heuristic\n  determines when it would be faster to execute a kernel on the CPU. WebGL\n  kernels opt into running this check and forwarding when appropriate.\n  TODO(https://github.com/tensorflow/tfjs/issues/872): Develop a more\n  sustainable strategy for optimizing backend execution of ops.\n   */\n  shouldExecuteOnCPU(\n      inputs: TensorInfo[],\n      sizeThreshold = CPU_HANDOFF_SIZE_THRESHOLD): boolean {\n    return env().getBool('WEBGL_CPU_FORWARD') &&\n        inputs.every(\n            input => this.texData.get(input.dataId).texture == null &&\n                util.sizeFromShape(input.shape) < sizeThreshold);\n  }\n\n  getGPGPUContext(): GPGPUContext {\n    return this.gpgpu;\n  }\n\n  where(condition: Tensor): Tensor2D {\n    backend_util.warn(\n        'tf.where() in webgl locks the UI thread. ' +\n        'Call tf.whereAsync() instead');\n    const condVals = condition.dataSync();\n    return whereImpl(condition.shape, condVals);\n  }\n\n  private packedUnaryOp(x: TensorInfo, op: string, dtype: DataType) {\n    const program = new UnaryOpPackedProgram(x.shape, op);\n    const outInfo = this.compileAndRun(program, [x], dtype);\n    return engine().makeTensorFromDataId(\n        outInfo.dataId, outInfo.shape, outInfo.dtype);\n  }\n\n  // TODO(msoulanille) remove this once the backend has been modularized\n  // a copy is needed here to break a circular dependency.\n  // Also remove the op from unary_op.\n  abs<T extends Tensor>(x: T): T {\n    // TODO: handle cases when x is complex.\n    if (this.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {\n      const outValues =\n          simpleAbsImplCPU(this.texData.get(x.dataId).values as TypedArray);\n      return this.makeOutput(x.shape, x.dtype, outValues);\n    }\n\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_op.ABS, x.dtype) as T;\n    }\n\n    const program = new UnaryOpProgram(x.shape, unary_op.ABS);\n    const outInfo = this.compileAndRun(program, [x]);\n    return engine().makeTensorFromDataId(\n               outInfo.dataId, outInfo.shape, outInfo.dtype) as T;\n  }\n\n  makeTensorInfo(\n      shape: number[], dtype: DataType,\n      values?: BackendValues|string[]): TensorInfo {\n    let dataId;\n    if (dtype === 'string' && values != null && values.length > 0 &&\n        util.isString(values[0])) {\n      const encodedValues =\n          (values as {} as string[]).map(d => util.encodeString(d));\n\n      dataId = this.write(encodedValues, shape, dtype);\n    } else {\n      dataId = this.write(values as TypedArray, shape, dtype);\n    }\n\n    this.texData.get(dataId).usage = null;\n    return {dataId, shape, dtype};\n  }\n\n  private makeOutput<T extends Tensor>(\n      shape: number[], dtype: DataType, values?: BackendValues): T {\n    const {dataId} = this.makeTensorInfo(shape, dtype, values);\n    return engine().makeTensorFromDataId(dataId, shape, dtype, this) as T;\n  }\n\n  private unpackTensor(input: TensorInfo): TensorInfo {\n    const program = new UnpackProgram(input.shape);\n    return this.runWebGLProgram(program, [input], input.dtype);\n  }\n\n  private packTensor(input: TensorInfo): TensorInfo {\n    const program = new PackProgram(input.shape);\n    const preventEagerUnpackingOutput = true;\n    return this.runWebGLProgram(\n        program, [input], input.dtype, null /* customSetup */,\n        preventEagerUnpackingOutput);\n  }\n\n  private packedReshape(input: TensorInfo, afterShape: number[]): TensorInfo {\n    const input3DShape = [\n      webgl_util.getBatchDim(input.shape),\n      ...webgl_util.getRowsCols(input.shape)\n    ] as [number, number, number];\n    const input3D: TensorInfo = {\n      dtype: input.dtype,\n      shape: input3DShape,\n      dataId: input.dataId\n    };\n    const afterShapeAs3D = [\n      webgl_util.getBatchDim(afterShape), ...webgl_util.getRowsCols(afterShape)\n    ] as [number, number, number];\n\n    const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n    const preventEagerUnpackingOfOutput = true;\n    const output = this.runWebGLProgram(\n        program, [input3D], input.dtype, null /* customSetup */,\n        preventEagerUnpackingOfOutput);\n    return {dataId: output.dataId, shape: afterShape, dtype: output.dtype};\n  }\n\n  private decode(dataId: DataId): TensorInfo {\n    const texData = this.texData.get(dataId);\n    const {isPacked, shape, dtype} = texData;\n    const shapeAs3D =\n        webgl_util.getShapeAs3D(shape) as [number, number, number];\n    let program;\n    if (isPacked) {\n      program = new DecodeMatrixPackedProgram(shapeAs3D);\n    } else {\n      program = new DecodeMatrixProgram(shapeAs3D);\n    }\n    const preventEagerUnpackingOfOutput = true;\n    const out = this.runWebGLProgram(\n        program, [{shape: shapeAs3D, dtype, dataId}], dtype,\n        null /* customSetup */, preventEagerUnpackingOfOutput);\n    return {dtype, shape, dataId: out.dataId};\n  }\n\n  runWebGLProgram(\n      program: GPGPUProgram, inputs: TensorInfo[], outputDtype: DataType,\n      customSetup?: (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => void,\n      preventEagerUnpackingOfOutput = false): TensorInfo {\n    const output = this.makeTensorInfo(program.outputShape, outputDtype);\n    const outData = this.texData.get(output.dataId);\n    if (program.packedOutput) {\n      outData.isPacked = true;\n    }\n    if (program.outPackingScheme === tex_util.PackingScheme.DENSE) {\n      const texelShape = tex_util.getDenseTexShape(program.outputShape);\n      // For a densely packed output, we explicitly set texShape\n      // so it doesn't get assigned later according to our typical packing\n      // scheme wherein a single texel can only contain values from adjacent\n      // rows/cols.\n      outData.texShape = texelShape.map(d => d * 2) as [number, number];\n    }\n    if (program.outTexUsage != null) {\n      outData.usage = program.outTexUsage;\n    }\n    if (util.sizeFromShape(output.shape) === 0) {\n      // Short-circuit the computation since the result is empty (has 0 in its\n      // shape).\n      outData.values =\n          util.getTypedArrayFromDType(output.dtype as 'float32', 0);\n      return output;\n    }\n\n    const dataToDispose: TensorInfo[] = [];\n    const inputsData: TensorData[] = inputs.map(input => {\n      if (input.dtype === 'complex64') {\n        throw new Error(\n            `GPGPUProgram does not support complex64 input. For complex64 ` +\n            `dtypes, please separate the program into real and imaginary ` +\n            `parts.`);\n      }\n\n      let texData = this.texData.get(input.dataId);\n\n      if (texData.texture == null) {\n        if (!program.packedInputs &&\n            util.sizeFromShape(input.shape) <=\n                env().getNumber('WEBGL_SIZE_UPLOAD_UNIFORM')) {\n          // Upload small tensors that live on the CPU as uniforms, not as\n          // textures. Do this only when the environment supports 32bit floats\n          // due to problems when comparing 16bit floats with 32bit floats.\n          // TODO(https://github.com/tensorflow/tfjs/issues/821): Make it\n          // possible for packed shaders to sample from uniforms.\n          return {\n            shape: input.shape,\n            texData: null,\n            isUniform: true,\n            uniformValues: texData.values as TypedArray\n          };\n        }\n\n        // This ensures that if a packed program's inputs have not yet been\n        // uploaded to the GPU, they get uploaded as packed right off the bat.\n        if (program.packedInputs) {\n          texData.isPacked = true;\n          texData.shape = input.shape;\n        }\n      } else if (!!texData.isPacked !== !!program.packedInputs) {\n        input = texData.isPacked ? this.unpackTensor(input) :\n                                   this.packTensor(input);\n        dataToDispose.push(input);\n        texData = this.texData.get(input.dataId);\n      } else if (\n          texData.isPacked &&\n          !webgl_util.isReshapeFree(texData.shape, input.shape)) {\n        // This is a special case where a texture exists for a tensor\n        // but the shapes are incompatible (due to packing constraints) because\n        // the tensor did not have a chance to go through the packed reshape\n        // shader. This only happens when we reshape the *same* tensor to form\n        // *distinct* inputs to an op, e.g. dotting a vector with itself. This\n        // case will disappear once packed uploading is the default.\n\n        const savedInput = input;\n        const targetShape = input.shape;\n\n        input.shape = texData.shape;\n        input = this.packedReshape(input as Tensor, targetShape);\n        dataToDispose.push(input);\n        texData = this.texData.get(input.dataId);\n\n        savedInput.shape = targetShape;\n      }\n\n      this.uploadToGPU(input.dataId);\n      return {shape: input.shape, texData, isUniform: false};\n    });\n\n    this.uploadToGPU(output.dataId);\n    const outputData:\n        TensorData = {shape: output.shape, texData: outData, isUniform: false};\n    const key = gpgpu_math.makeShaderKey(program, inputsData, outputData);\n    const binary = this.getAndSaveBinary(key, () => {\n      return gpgpu_math.compileProgram(\n          this.gpgpu, program, inputsData, outputData);\n    });\n    const shouldTimeProgram = this.activeTimers != null;\n    let query: WebGLQuery|CPUTimerQuery;\n    if (shouldTimeProgram) {\n      query = this.startTimer();\n    }\n\n    gpgpu_math.runProgram(\n        this.gpgpu, binary, inputsData, outputData, customSetup);\n\n    dataToDispose.forEach(info => this.disposeIntermediateTensorInfo(info));\n\n    if (shouldTimeProgram) {\n      query = this.endTimer(query);\n      this.activeTimers.push(\n          {name: program.constructor.name, query: this.getQueryTime(query)});\n    }\n\n    const glFlushThreshold = env().get('WEBGL_FLUSH_THRESHOLD');\n    // Manually GL flush requested\n    if (glFlushThreshold > 0) {\n      const time = util.now();\n      if ((time - this.lastGlFlushTime) > glFlushThreshold) {\n        this.gpgpu.gl.flush();\n        this.lastGlFlushTime = time;\n      }\n    }\n\n    if (!env().getBool('WEBGL_LAZILY_UNPACK') && outData.isPacked &&\n        preventEagerUnpackingOfOutput === false) {\n      const unpacked = this.unpackTensor(output);\n      this.disposeIntermediateTensorInfo(output);\n      return unpacked;\n    }\n    return output;\n  }\n\n  compileAndRun(\n      program: GPGPUProgram, inputs: TensorInfo[], outputDtype?: DataType,\n      customSetup?: (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => void,\n      preventEagerUnpackingOfOutput = false): TensorInfo {\n    outputDtype = outputDtype || inputs[0].dtype;\n    const outInfo = this.runWebGLProgram(\n        program, inputs, outputDtype, customSetup,\n        preventEagerUnpackingOfOutput);\n    return outInfo;\n  }\n\n  private getAndSaveBinary(key: string, getBinary: () => GPGPUBinary):\n      GPGPUBinary {\n    if (!(key in this.binaryCache)) {\n      this.binaryCache[key] = getBinary();\n    }\n    return this.binaryCache[key];\n  }\n\n  getTextureManager(): TextureManager {\n    return this.textureManager;\n  }\n\n  private disposed = false;\n\n  dispose() {\n    if (this.disposed) {\n      return;\n    }\n    // Avoid disposing the compiled webgl programs during unit testing because\n    // it slows down test execution.\n    if (!env().getBool('IS_TEST')) {\n      const allKeys = Object.keys(this.binaryCache);\n      allKeys.forEach(key => {\n        this.gpgpu.deleteProgram(this.binaryCache[key].webGLProgram);\n        delete this.binaryCache[key];\n      });\n    }\n    this.textureManager.dispose();\n    if (this.canvas != null &&\n        (typeof (HTMLCanvasElement) !== 'undefined' &&\n         this.canvas instanceof HTMLCanvasElement)) {\n      this.canvas.remove();\n    } else {\n      this.canvas = null;\n    }\n    if (this.gpgpuCreatedLocally) {\n      this.gpgpu.program = null;\n      this.gpgpu.dispose();\n    }\n    this.disposed = true;\n  }\n\n  floatPrecision(): 16|32 {\n    if (this.floatPrecisionValue == null) {\n      this.floatPrecisionValue = tidy(() => {\n        if (!env().get('WEBGL_RENDER_FLOAT32_ENABLED')) {\n          // Momentarily switching DEBUG flag to false so we don't throw an\n          // error trying to upload a small value.\n          const debugFlag = env().getBool('DEBUG');\n          env().set('DEBUG', false);\n          const underflowCheckValue = this.abs(scalar(1e-8)).dataSync()[0];\n          env().set('DEBUG', debugFlag);\n\n          if (underflowCheckValue > 0) {\n            return 32;\n          }\n        }\n        return 16;\n      });\n    }\n    return this.floatPrecisionValue;\n  }\n\n  /** Returns the smallest representable number.  */\n  epsilon(): number {\n    return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n  }\n\n  uploadToGPU(dataId: DataId): void {\n    const texData = this.texData.get(dataId);\n    const {shape, dtype, values, texture, usage, isPacked} = texData;\n\n    if (texture != null) {\n      // Array is already on GPU. No-op.\n      return;\n    }\n    const shouldTimeProgram = this.activeTimers != null;\n    let start: number;\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n\n    let texShape = texData.texShape;\n    if (texShape == null) {\n      texShape = webgl_util.getTextureShapeFromLogicalShape(shape, isPacked);\n      texData.texShape = texShape;\n    }\n\n    if (values != null) {\n      const shapeAs3D = webgl_util.getShapeAs3D(shape);\n\n      let program;\n      let width = texShape[1], height = texShape[0];\n      const isByteArray = values instanceof Uint8Array;\n\n      if (isPacked) {\n        [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(\n            texShape[0], texShape[1]);\n        program = new EncodeMatrixPackedProgram(\n            shapeAs3D, [height, width], isByteArray);\n      } else {\n        program =\n            new EncodeMatrixProgram(shapeAs3D, [height, width], isByteArray);\n      }\n\n      const tempDenseInputHandle = this.makeTensorInfo([height, width], dtype);\n      if (isByteArray) {\n        this.texData.get(tempDenseInputHandle.dataId).usage =\n            TextureUsage.PIXELS;\n      } else {\n        this.texData.get(tempDenseInputHandle.dataId).usage =\n            TextureUsage.UPLOAD;\n      }\n      this.gpgpu.uploadDenseMatrixToTexture(\n          this.getTexture(tempDenseInputHandle.dataId), width, height,\n          values as TypedArray);\n\n      // We want the output to remain packed regardless of the value of\n      // WEBGL_PACK.\n      const preventEagerUnpacking = true;\n      const encodedOutputTarget = this.runWebGLProgram(\n          program, [tempDenseInputHandle], dtype, null, preventEagerUnpacking);\n\n      // Have the original texture assume the identity of the encoded output.\n      const outputTexData = this.texData.get(encodedOutputTarget.dataId);\n      texData.texture = outputTexData.texture;\n      texData.texShape = outputTexData.texShape;\n      texData.isPacked = outputTexData.isPacked;\n      texData.usage = outputTexData.usage;\n\n      this.disposeIntermediateTensorInfo(tempDenseInputHandle);\n      this.texData.delete(encodedOutputTarget.dataId);\n\n      // Once uploaded, don't store the values on cpu.\n      texData.values = null;\n      if (shouldTimeProgram) {\n        this.uploadWaitMs += util.now() - start;\n      }\n    } else {\n      const newTexture = this.acquireTexture(texShape, usage, dtype, isPacked);\n      texData.texture = newTexture;\n    }\n  }\n\n  private convertAndCacheOnCPU(dataId: DataId, float32Values?: Float32Array):\n      TypedArray {\n    const texData = this.texData.get(dataId);\n    const {dtype} = texData;\n\n    this.releaseGPUData(dataId);\n\n    if (float32Values != null) {\n      texData.values = float32ToTypedArray(float32Values, dtype as 'float32');\n    }\n    return texData.values as TypedArray;\n  }\n\n  private acquireTexture(\n      texShape: [number, number], texType: TextureUsage, dtype: DataType,\n      isPacked: boolean): WebGLTexture {\n    this.numBytesInGPU += this.computeBytes(texShape, dtype);\n    if (!this.warnedAboutMemory &&\n        this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {\n      const mb = (this.numBytesInGPU / 1024 / 1024).toFixed(2);\n      this.warnedAboutMemory = true;\n      console.warn(\n          `High memory usage in GPU: ${mb} MB, ` +\n          `most likely due to a memory leak`);\n    }\n    return this.textureManager.acquireTexture(texShape, texType, isPacked);\n  }\n\n  private computeBytes(shape: [number, number], dtype: DataType) {\n    return shape[0] * shape[1] * util.bytesPerElement(dtype);\n  }\n}\n\nfunction float32ToTypedArray<D extends NumericDataType>(\n    a: Float32Array, dtype: D): tf.DataTypeMap[D] {\n  if (dtype === 'float32' || dtype === 'complex64') {\n    return a as tf.DataTypeMap[D];\n  } else if (dtype === 'int32' || dtype === 'bool') {\n    const result = (dtype === 'int32') ? new Int32Array(a.length) :\n                                         new Uint8Array(a.length);\n    for (let i = 0; i < result.length; ++i) {\n      result[i] = Math.round(a[i]);\n    }\n    return result as tf.DataTypeMap[D];\n  } else {\n    throw new Error(`Unknown dtype ${dtype}`);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '@tensorflow/tfjs-core';\n\nimport * as gpgpu_util from './gpgpu_util';\nimport * as webgl_util from './webgl_util';\n\nexport {MathBackendWebGL, WebGLMemoryInfo, WebGLTimingInfo} from './backend_webgl';\nexport {setWebGLContext} from './canvas_util';\nexport {GPGPUContext} from './gpgpu_context';\nexport {GPGPUProgram} from './gpgpu_math';\n// WebGL specific utils.\nexport {gpgpu_util, webgl_util};\n\n/**\n * Enforce use of half precision textures if available on the platform.\n *\n * @doc {heading: 'Environment', namespace: 'webgl'}\n */\nexport function forceHalfFloat(): void {\n  env().set('WEBGL_FORCE_F16_TEXTURES', true);\n}\n","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// base.ts is the webgl backend without auto kernel registration.\n\nimport {device_util, registerBackend} from '@tensorflow/tfjs-core';\nimport {MathBackendWebGL} from './backend_webgl';\nexport {version as version_webgl} from './version';\n\nif (device_util.isBrowser()) {\n  registerBackend('webgl', () => new MathBackendWebGL(), 2 /* priority */);\n}\n\n// Export webgl utilities\nexport * from './webgl';\n\n// Export forceHalfFlost under webgl namespace for the union bundle.\nimport {forceHalfFloat} from './webgl';\nexport const webgl = {forceHalfFloat};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport const CHECK_NAN_SNIPPET = `\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n`;\n\nexport const SQUARED_DIFFERENCE = 'return (a - b) * (a - b);';\nexport class BinaryOpProgram implements GPGPUProgram {\n  variableNames = ['A', 'B'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(op: string, aShape: number[], bShape: number[]) {\n    this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    this.userCode = `\n      float binaryOperation(float a, float b) {\n        ${op}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport const CHECK_NAN_SNIPPET = `\n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n`;\n\nexport const ELU_DER = `\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n`;\n\nexport const NOT_EQUAL = `\n  return vec4(notEqual(a, b));\n`;\n\nexport class BinaryOpPackedProgram implements GPGPUProgram {\n  variableNames = ['A', 'B'];\n  outputShape: number[];\n  userCode: string;\n  supportsBroadcasting = true;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(\n      op: string, aShape: number[], bShape: number[],\n      checkOutOfBounds = false) {\n    this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    const rank = this.outputShape.length;\n    let checkOutOfBoundsString = '';\n    if (checkOutOfBounds) {\n      if (rank === 0 || util.sizeFromShape(this.outputShape) === 1) {\n        checkOutOfBoundsString = `\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        `;\n      } else {\n        const dtype = getCoordsDataType(rank);\n        checkOutOfBoundsString = `\n          ${dtype} coords = getOutputCoords();\n        `;\n        if (rank === 1) {\n          checkOutOfBoundsString += `\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;\n        } else {\n          const channels = getChannels('coords', rank);\n          checkOutOfBoundsString += `\n            bool nextRowOutOfBounds =\n              (${channels[rank - 2]} + 1) >= ${this.outputShape[rank - 2]};\n            bool nextColOutOfBounds =\n              (${channels[rank - 1]} + 1) >= ${this.outputShape[rank - 1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `;\n        }\n      }\n    }\n\n    this.userCode = `\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${op}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${checkOutOfBoundsString}\n\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Identity, IdentityInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function identity(\n    args: {inputs: IdentityInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  backend.incRef(x.dataId);\n\n  return {dataId: x.dataId, shape: x.shape, dtype: x.dtype};\n}\n\nexport const identityConfig: KernelConfig = {\n  kernelName: Identity,\n  backendName: 'webgl',\n  kernelFunc: identity as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Complex, ComplexInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {identity} from './Identity';\n\n/**\n * In WebGL data is stored in GPU textures which can't be efficiently copied, so\n * complex tensors share data with their real and imaginary components. Complex\n * tensors' reference to the components is tracked by refCount on the individual\n * component. The refCounts are increased by the identity call.\n *\n * When a complex tensor is disposed, it will reduce the refCount on the\n * components by calling disposeData on each.\n */\nexport function complex(\n    args: {inputs: ComplexInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {real, imag} = inputs;\n\n  const complexInfo = backend.makeTensorInfo(real.shape, 'complex64');\n  const complex = backend.texData.get(complexInfo.dataId);\n\n  const realTensorInfo = identity({inputs: {x: real}, backend});\n\n  const imagTensorInfo = identity({inputs: {x: imag}, backend});\n\n  complex.complexTensorInfos = {real: realTensorInfo, imag: imagTensorInfo};\n\n  return complexInfo;\n}\n\nexport const complexConfig: KernelConfig = {\n  kernelName: Complex,\n  backendName: 'webgl',\n  kernelFunc: complex as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, LeakyRelu, LeakyReluAttrs, LeakyReluInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\n\nexport const LEAKYRELU = `return (a < 0.) ? b * a : a;`;\nexport const LEAKYRELU_PACKED = `\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n`;\n\nexport function leakyRelu(args: {\n  inputs: LeakyReluInputs,\n  backend: MathBackendWebGL,\n  attrs: LeakyReluAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {alpha} = attrs;\n\n  const $alpha = backend.makeTensorInfo(\n      [], 'float32',\n      util.createScalarValue(alpha as {} as 'float32', 'float32'));\n\n  const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n      new BinaryOpPackedProgram(LEAKYRELU_PACKED, x.shape, $alpha.shape) :\n      new BinaryOpProgram(LEAKYRELU, x.shape, $alpha.shape);\n  const result = backend.runWebGLProgram(program, [x, $alpha], x.dtype);\n\n  backend.disposeIntermediateTensorInfo($alpha);\n\n  return result;\n}\n\nexport const leakyReluConfig: KernelConfig = {\n  kernelName: LeakyRelu,\n  backendName: 'webgl',\n  kernelFunc: leakyRelu as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, Prelu, PreluInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\n\nexport const PRELU = `return (a < 0.) ? b * a : a;`;\nexport const PRELU_PACKED = `\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n`;\n\nexport function prelu(args: {inputs: PreluInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x, alpha} = inputs;\n\n  const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n      new BinaryOpPackedProgram(PRELU_PACKED, x.shape, alpha.shape) :\n      new BinaryOpProgram(PRELU, x.shape, alpha.shape);\n  return backend.runWebGLProgram(program, [x, alpha], x.dtype);\n}\n\nexport const preluConfig: KernelConfig = {\n  kernelName: Prelu,\n  backendName: 'webgl',\n  kernelFunc: prelu as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BinaryInputs, DataType, env, KernelFunc, TypedArray, UnaryInputs, upcastType} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\nimport {complex} from '../kernels/Complex';\nimport {LEAKYRELU, LEAKYRELU_PACKED} from '../kernels/LeakyRelu';\nimport {PRELU, PRELU_PACKED} from '../kernels/Prelu';\nimport * as unary_op from '../unaryop_gpu';\nimport {UnaryOpProgram} from '../unaryop_gpu';\nimport * as unary_packed_op from '../unaryop_packed_gpu';\nimport {UnaryOpPackedProgram} from '../unaryop_packed_gpu';\n\nimport {SimpleBinaryKernelImplCPU, SimpleUnaryKernelImplCPU} from './shared';\n\nexport const CHECK_NAN_SNIPPET_UNARY = `if (isnan(x)) return x;`;\n\nexport const CHECK_NAN_SNIPPET_BINARY = `\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n`;\n\nexport const CHECK_NAN_SNIPPET_BINARY_PACKED = `\n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n`;\n\ntype UnaryKernelFuncConfig = {\n  opSnippet: string,\n  packedOpSnippet?: string,\n  cpuKernelImpl?: SimpleUnaryKernelImplCPU,\n  dtype?: DataType\n};\n\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param opSnippet Op snippet to create `UnaryOpProgram`.\n * @param packedOpSnippet Op snippet to create `UnaryOpPackedProgram`.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function unaryKernelFunc(\n    {opSnippet, packedOpSnippet, cpuKernelImpl, dtype}: UnaryKernelFuncConfig):\n    KernelFunc {\n  return ({inputs, backend}) => {\n    const {x} = inputs as UnaryInputs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    const $dtype = dtype || x.dtype;\n    if (webglBackend.shouldExecuteOnCPU([x]) && cpuKernelImpl != null) {\n      const xData = webglBackend.texData.get(x.dataId);\n      const outValues = cpuKernelImpl(xData.values as TypedArray, $dtype);\n      return webglBackend.makeTensorInfo(x.shape, $dtype, outValues);\n    }\n\n    const shouldUsePackedProgram =\n        env().getBool('WEBGL_PACK_UNARY_OPERATIONS') && packedOpSnippet != null;\n    let program: UnaryOpProgram|UnaryOpPackedProgram;\n    if (shouldUsePackedProgram) {\n      program = new UnaryOpPackedProgram(x.shape, packedOpSnippet);\n    } else {\n      program = new UnaryOpProgram(x.shape, opSnippet);\n    }\n\n    return webglBackend.runWebGLProgram(program, [x], $dtype);\n  };\n}\n\ntype BinaryKernelFuncConfig = {\n  opSnippet: string,\n  packedOpSnippet?: string,\n  checkOutOfBounds?: boolean,\n  supportsComplex?: boolean,\n  cpuKernelImpl?: SimpleBinaryKernelImplCPU,\n  dtype?: DataType\n};\n\n/**\n * Template that creates a `KernelFunc` for binary ops.\n * @param opSnippet Op snippet to create `BinaryOpProgram`.\n * @param packedOpSnippet Op snippet to create `BinaryOpPackedProgram`.\n * @param checkOutOfBoundsForPackedProgram Whether to set checkOutOfBounds=true\n *     when creating BinaryOpPackedProgram.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function binaryKernelFunc({\n  opSnippet,\n  packedOpSnippet,\n  checkOutOfBounds = false,\n  supportsComplex = false,\n  cpuKernelImpl,\n  dtype\n}: BinaryKernelFuncConfig): KernelFunc {\n  return ({inputs, backend}) => {\n    const {a, b} = inputs as BinaryInputs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    if (supportsComplex && a.dtype === 'complex64') {\n      const aData = webglBackend.texData.get(a.dataId);\n      const bData = webglBackend.texData.get(b.dataId);\n\n      const [real, imag] = [\n        [aData.complexTensorInfos.real, bData.complexTensorInfos.real],\n        [aData.complexTensorInfos.imag, bData.complexTensorInfos.imag]\n      ].map(complexParts => {\n        const [aPart, bPart] = complexParts;\n\n        const aHandle = {\n          dataId: aPart.dataId,\n          dtype: aPart.dtype,\n          shape: a.shape\n        };\n        const bHandle = {\n          dataId: bPart.dataId,\n          dtype: bPart.dtype,\n          shape: b.shape\n        };\n\n        const program = new BinaryOpProgram(opSnippet, a.shape, b.shape);\n        return webglBackend.runWebGLProgram(\n            program, [aHandle, bHandle], upcastType(aPart.dtype, bPart.dtype));\n      });\n\n      const complexOutput =\n          complex({inputs: {real, imag}, backend: webglBackend});\n\n      webglBackend.disposeIntermediateTensorInfo(real);\n      webglBackend.disposeIntermediateTensorInfo(imag);\n\n      // TODO(annxingyuan): Implement CPU forwarding for complex inputs.\n\n      return complexOutput;\n    }\n\n    const $dtype = dtype || upcastType(a.dtype, b.dtype);\n    if (webglBackend.shouldExecuteOnCPU([a, b]) && cpuKernelImpl != null) {\n      const aData = webglBackend.texData.get(a.dataId);\n      const bData = webglBackend.texData.get(b.dataId);\n      const [outValues, outShape] = cpuKernelImpl(\n          a.shape, b.shape, aData.values as TypedArray,\n          bData.values as TypedArray, $dtype);\n\n      const out = webglBackend.makeTensorInfo(outShape, $dtype);\n      const outData = webglBackend.texData.get(out.dataId);\n      outData.values = outValues;\n      return out;\n    }\n\n    const shouldUsePackedProgram =\n        env().getBool('WEBGL_PACK_BINARY_OPERATIONS') &&\n        packedOpSnippet != null;\n    let program: BinaryOpProgram|BinaryOpPackedProgram;\n    if (shouldUsePackedProgram) {\n      program = new BinaryOpPackedProgram(\n          packedOpSnippet, a.shape, b.shape, checkOutOfBounds);\n    } else {\n      program = new BinaryOpProgram(opSnippet, a.shape, b.shape);\n    }\n\n    return webglBackend.runWebGLProgram(program, [a, b], $dtype);\n  };\n}\n\nexport function mapActivationToShaderProgram(\n    activation: backend_util.Activation, packed = false): string {\n  if (activation === 'linear') {\n    if (packed) {\n      return unary_packed_op.LINEAR;\n    }\n    return unary_op.LINEAR;\n  } else if (activation === 'relu') {\n    if (packed) {\n      return unary_packed_op.RELU;\n    }\n    return unary_op.RELU;\n  } else if (activation === 'elu') {\n    if (packed) {\n      return unary_packed_op.ELU;\n    }\n    return unary_op.ELU;\n  } else if (activation === 'relu6') {\n    if (packed) {\n      return unary_packed_op.RELU6;\n    }\n    return unary_op.RELU6;\n  } else if (activation === 'prelu') {\n    if (packed) {\n      return PRELU_PACKED;\n    }\n    return PRELU;\n  } else if (activation === 'leakyrelu') {\n    if (packed) {\n      return LEAKYRELU_PACKED;\n    }\n    return LEAKYRELU;\n  }\n  throw new Error(`Activation ${\n      activation} has not been implemented for the WebGL backend.`);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class MatMulPackedProgram implements GPGPUProgram {\n  variableNames = ['matrixA', 'matrixB'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      aShape: [number, number, number], bShape: [number, number, number],\n      outputShape: [number, number, number], transposeA = false,\n      transposeB = false, addBias = false, activation: string = null,\n      hasPreluActivation = false, hasLeakyreluActivation = false) {\n    this.outputShape = outputShape;\n\n    const sharedDim = transposeA ? aShape[1] : aShape[2];\n    const sharedDimensionPacked = Math.ceil(sharedDim / 2);\n\n    const aSample = transposeA ? 'i * 2, rc.y' : 'rc.y, i * 2';\n    const bSample = transposeB ? 'rc.z, i * 2' : 'i * 2, rc.z';\n    const aSwizzle = transposeA ? ['a.xxyy', 'a.zzww'] : ['a.xxzz', 'a.yyww'];\n    const bSwizzle = transposeB ? ['b.xzxz', 'b.ywyw'] : ['b.xyxy', 'b.zwzw'];\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivation) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else if (hasLeakyreluActivation) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `vec4 activation(vec4 x) {\n          ${activation}\n        }`;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    if (hasLeakyreluActivation) {\n      this.variableNames.push('leakyreluAlpha');\n    }\n\n    let batchASnippet = 'rc.x';\n    let batchBSnippet = 'rc.x';\n    if (aShape[0] < bShape[0]) {\n      batchASnippet = `int(min(float(rc.x), ${aShape[0] - 1}.))`;\n    } else if (bShape[0] < aShape[0]) {\n      batchBSnippet = `int(min(float(rc.x), ${bShape[0] - 1}.))`;\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      const float sharedDimension = ${sharedDimensionPacked}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${sharedDimensionPacked}; i++) {\n          int batchA = ${batchASnippet};\n          int batchB = ${batchBSnippet};\n          vec4 a = getMatrixA(batchA, ${aSample});\n          vec4 b = getMatrixB(batchB, ${bSample});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${aSwizzle[0]} * ${bSwizzle[0]});\n          result += (${aSwizzle[1]} * ${bSwizzle[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${addBiasSnippet}\n\n        ${applyActivationSnippet}\n\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\n// (Ar + Ai)(Br + Bi) =\n// ArBr + ArBi + AiBr + AiBi = ArBr - AB + ArBi + AiBr\n// Yr = ArBr - AB\n// Yi = ArBi + AiBr\nexport const COMPLEX_MULTIPLY = {\n  REAL: 'return areal * breal - aimag * bimag;',\n  IMAG: 'return areal * bimag + aimag * breal;'\n};\n\nexport class BinaryOpComplexProgram implements GPGPUProgram {\n  variableNames = ['AReal', 'AImag', 'BReal', 'BImag'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(op: string, aShape: number[], bShape: number[]) {\n    this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n\n    this.userCode = `\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${op}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BinaryInputs, env, KernelConfig, Multiply, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport * as binaryop_complex_gpu from '../binaryop_complex_gpu';\nimport {BinaryOpComplexProgram} from '../binaryop_complex_gpu';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\nimport {multiplyImplCPU as cpuMultiply} from '../kernel_utils/shared';\n\nimport {complex} from './Complex';\n\nconst MUL = 'return a * b;';\n\nexport function multiply(\n    args: {inputs: BinaryInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {a, b} = inputs;\n  const dtype = backend_util.upcastType(a.dtype, b.dtype);\n\n  if (a.dtype === 'complex64') {\n    const aData = backend.texData.get(a.dataId);\n    const bData = backend.texData.get(b.dataId);\n\n    const realProgram = new BinaryOpComplexProgram(\n        binaryop_complex_gpu.COMPLEX_MULTIPLY.REAL, a.shape, b.shape);\n    const imagProgram = new BinaryOpComplexProgram(\n        binaryop_complex_gpu.COMPLEX_MULTIPLY.IMAG, a.shape, b.shape);\n\n    const inputs = [\n      {\n        dataId: aData.complexTensorInfos.real.dataId,\n        dtype: aData.complexTensorInfos.real.dtype,\n        shape: a.shape\n      },\n      {\n        dataId: aData.complexTensorInfos.imag.dataId,\n        dtype: aData.complexTensorInfos.imag.dtype,\n        shape: a.shape\n      },\n      {\n        dataId: bData.complexTensorInfos.real.dataId,\n        dtype: bData.complexTensorInfos.real.dtype,\n        shape: b.shape\n      },\n      {\n        dataId: bData.complexTensorInfos.imag.dataId,\n        dtype: bData.complexTensorInfos.imag.dtype,\n        shape: b.shape\n      }\n    ];\n\n    const realPart = backend.runWebGLProgram(realProgram, inputs, 'float32');\n    const imagPart = backend.runWebGLProgram(imagProgram, inputs, 'float32');\n\n    const complexOutput =\n        complex({inputs: {real: realPart, imag: imagPart}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(imagPart);\n\n    // TODO(annxingyuan): CPU forwarding for complex inputs.\n    return complexOutput;\n  }\n\n  if (backend.shouldExecuteOnCPU([a, b])) {\n    const aData = backend.texData.get(a.dataId);\n    const bData = backend.texData.get(b.dataId);\n    const [outValues, outShape] = cpuMultiply(\n        a.shape, b.shape, aData.values as TypedArray,\n        bData.values as TypedArray, dtype);\n\n    const out = backend.makeTensorInfo(outShape, dtype);\n    const outData = backend.texData.get(out.dataId);\n    outData.values = outValues;\n    return out;\n  }\n\n  let program: BinaryOpProgram|BinaryOpPackedProgram;\n  if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n    program = new BinaryOpPackedProgram(MUL, a.shape, b.shape);\n  } else {\n    program = new BinaryOpProgram(MUL, a.shape, b.shape);\n  }\n\n  return backend.runWebGLProgram(program, [a, b], dtype);\n}\n\nexport const multiplyConfig: KernelConfig = {\n  kernelName: Multiply,\n  backendName: 'webgl',\n  kernelFunc: multiply\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Reshape, ReshapeAttrs, ReshapeInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {packedReshape} from '../kernel_utils/reshape';\nimport {isReshapeFree} from '../webgl_util';\n\nexport function reshape(args: {\n  inputs: ReshapeInputs,\n  backend: MathBackendWebGL,\n  attrs: ReshapeAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {shape} = attrs;\n  const webglBackend = backend;\n\n  const xSize = util.sizeFromShape(x.shape);\n  const $shape = util.inferFromImplicitShape(shape, xSize);\n  const $xSize = util.sizeFromShape($shape);\n\n  util.assert(\n      xSize === $xSize,\n      () => `The new shape (${$shape}) has ${$xSize} elements and the old ` +\n          `shape (${x.shape}) has ${xSize} elements. The new shape and old ` +\n          `shape must have the same number of elements.`);\n\n  const xTexData = webglBackend.texData.get(x.dataId);\n  if (xTexData.isPacked && !isReshapeFree(x.shape, $shape) &&\n      !(xTexData.texture !== null && isReshapeFree(xTexData.shape, $shape))) {\n    return packedReshape(x, $shape, webglBackend);\n  }\n\n  webglBackend.incRef(x.dataId);\n\n  return {dataId: x.dataId, shape: $shape, dtype: x.dtype};\n}\n\nexport const reshapeConfig: KernelConfig = {\n  kernelName: Reshape,\n  backendName: 'webgl',\n  kernelFunc: reshape as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ReshapePackedProgram} from '../reshape_packed_gpu';\nimport {getBatchDim, getRowsCols} from '../webgl_util';\n\nexport function packedReshape(\n    input: TensorInfo, afterShape: number[],\n    backend: MathBackendWebGL): TensorInfo {\n  const input3DShape =\n      [getBatchDim(input.shape),\n       ...getRowsCols(input.shape)] as [number, number, number];\n  const input3D: TensorInfo = {\n    dtype: input.dtype,\n    shape: input3DShape,\n    dataId: input.dataId\n  };\n  const afterShapeAs3D =\n      [getBatchDim(afterShape),\n       ...getRowsCols(afterShape)] as [number, number, number];\n\n  const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n  const preventEagerUnpackingOfOutput = true;\n  const output = backend.runWebGLProgram(\n      program, [input3D], input.dtype, null /* customSetup */,\n      preventEagerUnpackingOfOutput);\n  return {dataId: output.dataId, shape: afterShape, dtype: output.dtype};\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class MeanProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(reduceInfo: backend_util.ReduceInfo, divisor?: number) {\n    const {windowSize, batchSize, inSize, outSize} = reduceInfo;\n    this.outputShape = [batchSize, outSize];\n\n    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n    const windowSizeVec4Remainder = windowSize % 4;\n\n    let updateSnippet = `sumValue += dot(values, ones);`;\n    if (divisor != null) {\n      const denominator = 1 / divisor;\n      updateSnippet = `sumValue += dot(values * ${\n          util.isInt(denominator) ? denominator.toPrecision(2) :\n                                    denominator}, ones);`;\n    }\n\n    let checkOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return 0.0;\n        }\n      `;\n    }\n\n    this.userCode = `\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${checkOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${updateSnippet}\n        }\n        setOutput(sumValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ReduceProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      reduceInfo: backend_util.ReduceInfo,\n      reduceType: 'all'|'any'|'max'|'min'|'sum'|'prod') {\n    const {windowSize, batchSize, inSize, outSize} = reduceInfo;\n    this.outputShape = [batchSize, outSize];\n\n    let initializationValue = '0.0';\n    let compareOp = ``;\n\n    if (reduceType === 'prod') {\n      initializationValue = '1.0';\n    } else if (reduceType === 'min') {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '1.0 / 1e-20';\n      compareOp = `min`;\n    } else if (reduceType === 'max') {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '-1.0 / 1e-20';\n      compareOp = `max`;\n    }\n\n    let returnValue = `${reduceType}(${reduceType}(${reduceType}(` +\n        'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n\n    if (reduceType === 'sum') {\n      returnValue = `sumValue`;\n    } else if (reduceType === 'prod') {\n      returnValue = `prodValue`;\n    } else if (reduceType === 'all') {\n      returnValue = `allValue`;\n    } else if (reduceType === 'any') {\n      returnValue = `anyValue`;\n    }\n\n    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n    const windowSizeVec4Remainder = windowSize % 4;\n\n    let updateSnippet = `\n      if (${reduceType === 'sum'}) {\n        sumValue += dot(values, ones);\n      } else if (${reduceType === 'prod'}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n      }\n    `;\n\n    let vecType = `vec4`;\n\n    if (reduceType === 'all') {\n      initializationValue = '1.0';\n      updateSnippet = `\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      `;\n      vecType = `bvec4`;\n    } else if (reduceType === 'any') {\n      initializationValue = '0.0';\n      updateSnippet = `\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      `;\n      vecType = `bvec4`;\n    }\n\n    let checkOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return initializationValue;\n        }\n      `;\n    }\n    this.userCode = `\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${checkOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        vec4 minMaxValue = vec4(${initializationValue});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${updateSnippet}\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MeanProgram} from '../mean_gpu';\nimport {ReduceProgram} from '../reduce_gpu';\n\ntype ReduceTypes = 'all'|'any'|'max'|'min'|'sum'|'prod'|'mean';\n\n// Returns an array of configuration objects that describe each stage of the\n// reduction.\nfunction getReductionStages(inShape: number[]):\n    Array<{inSize: number, windowSize: number, outSize: number}> {\n  const stages = [];\n\n  while (stages.length === 0 || stages[stages.length - 1].outSize !== 1) {\n    const outSize: number =\n        stages.length ? stages[stages.length - 1].outSize : inShape[1];\n    const windowSize = backend_util.computeOptimalWindowSize(outSize);\n    stages.push({\n      inSize: outSize,\n      windowSize,\n      outSize: Math.ceil(outSize / windowSize)\n    });\n  }\n\n  return stages;\n}\n\nexport function reduce(\n    x: TensorInfo, dtype: DataType, reductionType: ReduceTypes,\n    backend: MathBackendWebGL): TensorInfo {\n  const reductionStages = getReductionStages(x.shape);\n\n  let result = x;\n  for (let i = 0; i < reductionStages.length; i++) {\n    const {inSize, windowSize, outSize} = reductionStages[i];\n\n    let program: ReduceProgram|MeanProgram;\n    let previousResult: TensorInfo;\n    if (reductionType === 'mean') {\n      program = i === 0 ?\n          new MeanProgram(\n              {windowSize, inSize, batchSize: x.shape[0], outSize}, inSize) :\n          new MeanProgram({windowSize, inSize, batchSize: x.shape[0], outSize});\n    } else {\n      program = new ReduceProgram(\n          {windowSize, inSize, batchSize: x.shape[0], outSize}, reductionType);\n    }\n\n    previousResult = result;\n    result = backend.runWebGLProgram(program, [result], dtype);\n\n    if (previousResult.dataId !== x.dataId) {\n      backend.disposeIntermediateTensorInfo(previousResult);\n    }\n  }\n\n  return result;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class TransposeProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  constructor(aShape: number[], newDim: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[newDim[i]];\n    }\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const switched = getSwitchedCoords(newDim);\n\n    this.userCode = `\n    void main() {\n      ${dtype} resRC = getOutputCoords();\n      setOutput(getA(${switched}));\n    }\n    `;\n  }\n}\n\nfunction getSwitchedCoords(newDim: number[]): string {\n  const rank = newDim.length;\n  if (rank > 6) {\n    throw Error(`Transpose for rank ${rank} is not yet supported`);\n  }\n  const originalOrder =\n      ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u', 'resRC.v'];\n  const switchedCoords = new Array(rank);\n  for (let i = 0; i < newDim.length; i++) {\n    switchedCoords[newDim[i]] = originalOrder[i];\n  }\n  return switchedCoords.join();\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getVecChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class TransposePackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(aShape: number[], newDim: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[newDim[i]];\n    }\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    if (this.rank > 6) {\n      throw Error(\n          `Packed transpose for rank ${this.rank} is not yet supported.`);\n    }\n    const dtype = getCoordsDataType(this.rank);\n\n    const outputOrder = getVecChannels('rc', this.rank);\n    const switchedOrder = new Array(this.rank);\n    for (let i = 0; i < newDim.length; i++) {\n      switchedOrder[newDim[i]] = outputOrder[i];\n    }\n    const innerDims = `vec2(${switchedOrder.slice(-2).join()})`;\n    const nextColumn =\n        `++${outputOrder[this.rank - 1]} < ${outputShape[this.rank - 1]}`;\n    const getc = `getChannel(getA(${switchedOrder.join()}), ${innerDims})`;\n\n    this.userCode = `\n    void main() {\n      ${dtype} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${getc};\n      if(${nextColumn}) {\n        result[1] = ${getc};\n      }\n      --${outputOrder[this.rank - 1]};\n      if(++${outputOrder[this.rank - 2]} < ${outputShape[this.rank - 2]}) {\n        result[2] = ${getc};\n        if(${nextColumn}) {\n          result[3] = ${getc};\n        }\n      }\n      setOutput(result);\n    }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {transposeImplCPU} from '../kernel_utils/shared';\nimport {TransposeProgram} from '../transpose_gpu';\nimport {TransposePackedProgram} from '../transpose_packed_gpu';\n\nexport function transposeImpl(\n    x: TensorInfo, perm: number[], backend: MathBackendWebGL): TensorInfo {\n  const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n      new TransposePackedProgram(x.shape, perm) :\n      new TransposeProgram(x.shape, perm);\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport {transposeImplCPU};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Sum, SumAttrs, SumInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {sumImpl} from './Sum_impl';\n\nexport function sum(\n    args: {inputs: SumInputs, attrs: SumAttrs, backend: MathBackendWebGL}) {\n  const {inputs, backend, attrs} = args;\n\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  return sumImpl(x, axis, keepDims, backend);\n}\n\nexport const sumConfig: KernelConfig = {\n  kernelName: Sum,\n  backendName: 'webgl',\n  kernelFunc: sum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, sumOutType, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {reshape} from './Reshape';\n\nimport {transposeImpl} from './Transpose_impl';\n\nexport function sumImpl(\n    x: TensorInfo, axis: number|number[], keepDims: boolean,\n    backend: MathBackendWebGL): TensorInfo {\n  const reductionIndices = axis;\n\n  const xRank = x.shape.length;\n\n  const origAxes = util.parseAxisParam(reductionIndices, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  const sumInputIsTransposed = permutedAxes != null;\n\n  let sumInput = x;\n  if (sumInputIsTransposed) {\n    sumInput = transposeImpl(x, permutedAxes, backend);\n\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('sum', axes, xRank);\n  const [sumOutShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(sumInput.shape, axes);\n\n  let outShape = sumOutShape;\n  if (keepDims) {\n    // rather than reshape at the end, set the target shape here.\n    outShape = backend_util.expandShapeToKeepDim(sumOutShape, origAxes);\n  }\n\n  const inSize = util.sizeFromShape(reduceShape);\n  const xSize = util.sizeFromShape(x.shape);\n  const batchSize = xSize / inSize;\n  const reshapedInput = reshape(\n      {inputs: {x: sumInput}, attrs: {shape: [batchSize, inSize]}, backend});\n\n  const outType = sumOutType(x.dtype);\n\n  const reduced = reduce(reshapedInput, outType, 'sum', backend);\n  const out =\n      reshape({inputs: {x: reduced}, attrs: {shape: outShape}, backend});\n\n  backend.disposeIntermediateTensorInfo(reshapedInput);\n  backend.disposeIntermediateTensorInfo(reduced);\n  if (sumInputIsTransposed) {\n    backend.disposeIntermediateTensorInfo(sumInput);\n  }\n\n  return out;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Transpose, TransposeAttrs, TransposeInputs, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {transposeImpl} from './Transpose_impl';\nimport {transposeImplCPU as cpuTranspose} from './Transpose_impl';\n\nexport function transpose(args: {\n  inputs: TransposeInputs,\n  attrs: TransposeAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {perm} = attrs;\n  const webglBackend = backend;\n\n  const xRank = x.shape.length;\n\n  const newShape: number[] = new Array(xRank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = x.shape[perm[i]];\n  }\n\n  let out: TensorInfo;\n  if (webglBackend.shouldExecuteOnCPU([x])) {\n    const xTexData = webglBackend.texData.get(x.dataId);\n    const values = xTexData.values as TypedArray;\n    const outValues = cpuTranspose(values, x.shape, x.dtype, perm, newShape);\n\n    out = webglBackend.makeTensorInfo(newShape, x.dtype);\n    const outData = webglBackend.texData.get(out.dataId);\n    outData.values = outValues;\n  } else {\n    out = transposeImpl(x, perm, webglBackend);\n  }\n  return out;\n}\n\nexport const transposeConfig: KernelConfig = {\n  kernelName: Transpose,\n  backendName: 'webgl',\n  kernelFunc: transpose as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, TensorInfo, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {mapActivationToShaderProgram} from '../kernel_utils/kernel_funcs_utils';\nimport {MatMulPackedProgram} from '../mulmat_packed_gpu';\n\nimport {multiply} from './Multiply';\nimport {reshape} from './Reshape';\nimport {sum} from './Sum';\nimport {transpose} from './Transpose';\n\n// Empirically determined minimal shared dimension in matmul before we forward\n// to a.mul(b).sum() in order to take advantage of GPU parallelism. See\n// https://github.com/tensorflow/tfjs-core/pull/1379 for benchmarks.\nexport const MATMUL_SHARED_DIM_THRESHOLD = 1000;\n\ntype BatchMatMulConfig = {\n  a: TensorInfo,\n  b: TensorInfo,\n  transposeA: boolean,\n  transposeB: boolean,\n  backend: MathBackendWebGL,\n  bias?: TensorInfo,\n  preluActivationWeights?: TensorInfo,\n  leakyreluAlpha?: number,\n  activation?: backend_util.Activation\n};\n\nexport function batchMatMulImpl({\n  a,\n  b,\n  transposeA,\n  transposeB,\n  backend,\n  bias = null,\n  preluActivationWeights = null,\n  leakyreluAlpha = 0,\n  activation = null\n}: BatchMatMulConfig): TensorInfo {\n  const aRank = a.shape.length;\n  const bRank = b.shape.length;\n\n  const innerShapeA = transposeA ? a.shape[aRank - 2] : a.shape[aRank - 1];\n  const innerShapeB = transposeB ? b.shape[bRank - 1] : b.shape[bRank - 2];\n\n  const outerShapeA = transposeA ? a.shape[aRank - 1] : a.shape[aRank - 2];\n  const outerShapeB = transposeB ? b.shape[bRank - 2] : b.shape[bRank - 1];\n\n  const outerDimsA = a.shape.slice(0, -2);\n  const outerDimsB = b.shape.slice(0, -2);\n\n  const batchDimA = util.sizeFromShape(outerDimsA);\n  const batchDimB = util.sizeFromShape(outerDimsB);\n\n  const batchDimsCompatible =\n      batchDimA === batchDimB || batchDimA === 1 || batchDimB === 1;\n\n  util.assert(\n      aRank >= 2 && bRank >= 2 && batchDimsCompatible,\n      () => `Error in matMul: the input batch dimensions must either be the ` +\n          `same or at least one input batch dimension must be 1. Got input ` +\n          `batch dimensions of (${outerDimsA}) and (${outerDimsB}).`);\n\n  const outShapeOuterDims =\n      batchDimA > batchDimB ? a.shape.slice(0, -2) : b.shape.slice(0, -2);\n  const outShape = outShapeOuterDims.concat([outerShapeA, outerShapeB]);\n\n  util.assert(\n      innerShapeA === innerShapeB,\n      () => `Error in matMul: inner shapes (${innerShapeA}) and (` +\n          `${innerShapeB}) of Tensors with shapes ${a.shape} and ` +\n          `${b.shape} and transposeA=${transposeA}` +\n          ` and transposeB=${transposeB} must match.`);\n\n  const a3dShape: [number, number, number] = transposeA ?\n      [batchDimA, innerShapeA, outerShapeA] :\n      [batchDimA, outerShapeA, innerShapeA];\n  const b3dShape: [number, number, number] = transposeB ?\n      [batchDimB, outerShapeB, innerShapeB] :\n      [batchDimB, innerShapeB, outerShapeB];\n\n  // The rest of the implementation is designed to operate on rank-3 tensors\n  const a3d = reshape({inputs: {x: a}, backend, attrs: {shape: a3dShape}});\n  const b3d = reshape({inputs: {x: b}, backend, attrs: {shape: b3dShape}});\n\n  const intermediates: TensorInfo[] = [a3d, b3d];\n\n  const batchDim = Math.max(batchDimA, batchDimB);\n  const sharedDim = transposeA ? a3d.shape[1] : a3d.shape[2];\n\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const hasLeakyreluAlpha = activation === 'leakyrelu';\n  const fusedActivation = activation != null ?\n      mapActivationToShaderProgram(activation, true) :\n      null;\n  const containsFusedOps = hasBias || hasPreluActivationWeights ||\n      hasLeakyreluAlpha || fusedActivation != null;\n  let out: TensorInfo;\n\n  // Since the matrices are vectors, it is faster to call mul().sum()\n  // because sum() is O(sqrt(N)) due to divide-and-conquer.\n  if ((outerShapeA === 1 || outerShapeB === 1) &&\n      sharedDim > MATMUL_SHARED_DIM_THRESHOLD && containsFusedOps === false) {\n    let aVec = a3d;\n    let bVec = b3d;\n    if (transposeA) {\n      aVec = transpose({inputs: {x: a3d}, backend, attrs: {perm: [0, 2, 1]}});\n      intermediates.push(aVec);\n    }\n    if (transposeB) {\n      bVec = transpose({inputs: {x: b3d}, backend, attrs: {perm: [0, 2, 1]}});\n      intermediates.push(bVec);\n    }\n\n    const shouldReshapeA = outerShapeB !== 1;\n    const shouldReshapeB = outerShapeB === 1;\n\n    let aVec3d = aVec;\n    if (shouldReshapeA) {\n      aVec3d = reshape({\n        inputs: {x: aVec},\n        backend,\n        attrs: {shape: [batchDim, sharedDim, 1]}\n      });\n\n      intermediates.push(aVec3d);\n    }\n\n    const axis = outerShapeB === 1 ? 2 : 1;\n\n    let bVec3d = bVec;\n    if (shouldReshapeB) {\n      bVec3d = reshape({\n        inputs: {x: bVec},\n        backend,\n        attrs: {shape: [batchDim, 1, sharedDim]}\n      });\n\n      intermediates.push(bVec3d);\n    }\n\n    const product = multiply({inputs: {a: aVec3d, b: bVec3d}, backend});\n    out = sum({inputs: {x: product}, backend, attrs: {axis, keepDims: true}});\n    intermediates.push(product);\n  } else {\n    const dtype = upcastType(a.dtype, b.dtype);\n\n    const program = new MatMulPackedProgram(\n        a3dShape, b3dShape, [batchDim, outerShapeA, outerShapeB], transposeA,\n        transposeB, hasBias, fusedActivation, hasPreluActivationWeights,\n        hasLeakyreluAlpha);\n\n    const inputs: TensorInfo[] = [a3d, b3d];\n    if (bias != null) {\n      inputs.push(bias);\n    }\n    if (hasPreluActivationWeights) {\n      inputs.push(preluActivationWeights);\n    }\n    if (hasLeakyreluAlpha) {\n      const $leakyreluAlpha = backend.makeTensorInfo(\n          [], 'float32',\n          util.createScalarValue(leakyreluAlpha as {} as 'float32', 'float32'));\n      inputs.push($leakyreluAlpha);\n      intermediates.push($leakyreluAlpha);\n    }\n\n    out = backend.runWebGLProgram(program, inputs, dtype);\n  }\n\n  const outReshaped =\n      reshape({inputs: {x: out}, backend, attrs: {shape: outShape}});\n  intermediates.push(out);\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n  return outReshaped;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {_FusedMatMul, _FusedMatMulAttrs, _FusedMatMulInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {batchMatMulImpl} from './BatchMatMul_impl';\n\nexport function _fusedMatMul(args: {\n  inputs: _FusedMatMulInputs,\n  attrs: _FusedMatMulAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b, bias, preluActivationWeights} = inputs;\n  const {transposeA, transposeB, activation, leakyreluAlpha} = attrs;\n\n  return batchMatMulImpl({\n    a,\n    b,\n    transposeA,\n    transposeB,\n    backend,\n    bias,\n    preluActivationWeights,\n    leakyreluAlpha,\n    activation\n  });\n}\n\nexport const _fusedMatMulConfig: KernelConfig = {\n  kernelName: _FusedMatMul,\n  backendName: 'webgl',\n  kernelFunc: _fusedMatMul as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Abs, AbsInputs, env, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {simpleAbsImplCPU} from '../kernel_utils/shared';\nimport {UnaryOpProgram} from '../unaryop_gpu';\nimport {UnaryOpPackedProgram} from '../unaryop_packed_gpu';\n\nconst ABS = `return abs(x);`;\n\nexport function abs(args: {inputs: AbsInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  // TODO: handle cases when x is complex. Once the cpu implementation\n  // can handle complex values, refactor to use unaryKernelFunc.\n  if (backend.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {\n    const xData = backend.texData.get(x.dataId);\n    const outValues = simpleAbsImplCPU(xData.values as TypedArray);\n    return backend.makeTensorInfo(x.shape, x.dtype, outValues);\n  }\n\n  let program: UnaryOpProgram|UnaryOpPackedProgram;\n  if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n    program = new UnaryOpPackedProgram(x.shape, ABS);\n  } else {\n    program = new UnaryOpProgram(x.shape, ABS);\n  }\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const absConfig: KernelConfig = {\n  kernelName: Abs,\n  backendName: 'webgl',\n  kernelFunc: abs as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Acos, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ACOS = CHECK_NAN_SNIPPET + `\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n`;\n\nexport const acos = unaryKernelFunc({opSnippet: ACOS});\n\nexport const acosConfig: KernelConfig = {\n  kernelName: Acos,\n  backendName: 'webgl',\n  kernelFunc: acos,\n};\n","\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Acosh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ACOSH = CHECK_NAN_SNIPPET + `\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));`;\n\nexport const acosh = unaryKernelFunc({opSnippet: ACOSH});\n\nexport const acoshConfig: KernelConfig = {\n  kernelName: Acosh,\n  backendName: 'webgl',\n  kernelFunc: acosh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Add, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {addImplCPU as cpuAdd} from '../kernel_utils/shared';\n\nconst ADD = 'return a + b;';\n\nexport const addKernelFunc = binaryKernelFunc({\n  opSnippet: ADD,\n  packedOpSnippet: ADD,\n  supportsComplex: true,\n  cpuKernelImpl: cpuAdd\n});\n\nexport const addConfig: KernelConfig = {\n  kernelName: Add,\n  backendName: 'webgl',\n  kernelFunc: addKernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class AddNProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(outputShape: number[], shapes: number[][]) {\n    this.outputShape = outputShape;\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const snippets: string[] = [];\n    // Get target elements from every input tensor.\n    this.variableNames.forEach(variable => {\n      snippets.push(`float v${variable} = get${variable}AtOutCoords();`);\n    });\n\n    // Calculate the sum of all elements.\n    const operation = this.variableNames\n                          .map(variable => {\n                            return `v${variable}`;\n                          })\n                          .join(' + ');\n\n    this.userCode = `\n      void main() {\n        ${snippets.join('\\n        ')}\n\n        float result = ${operation};\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class AddNPackedProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(outputShape: number[], shapes: number[][]) {\n    this.outputShape = outputShape;\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const snippets: string[] = [];\n    // Get target elements from every input tensor.\n    this.variableNames.forEach(variable => {\n      snippets.push(`vec4 v${variable} = get${variable}AtOutCoords();`);\n    });\n\n    // Calculate the sum of all elements.\n    const operation = this.variableNames\n                          .map(variable => {\n                            return `v${variable}`;\n                          })\n                          .join(' + ');\n\n    this.userCode = `\n      void main() {\n        ${snippets.join('\\n        ')}\n\n        vec4 result = ${operation};\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AddN, AddNInputs, env, KernelConfig, KernelFunc, TensorInfo, upcastType} from '@tensorflow/tfjs-core';\n\nimport {AddNProgram} from '../addn_gpu';\nimport {AddNPackedProgram} from '../addn_packed_gpu';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {identity} from './Identity';\n\nexport function addN(args: {inputs: AddNInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n\n  const tensors = inputs;\n  if (tensors.length === 1) {\n    return identity({inputs: {x: tensors[0]}, backend});\n  }\n\n  // Limit the number of uploaded textures for optimization.\n  if (tensors.length > env().get('WEBGL_MAX_TEXTURES_IN_SHADER')) {\n    const midIndex = Math.floor(tensors.length / 2);\n    const leftSide = addN({inputs: tensors.slice(0, midIndex), backend});\n    const rightSide = addN({inputs: tensors.slice(midIndex), backend});\n    return addN({inputs: [leftSide, rightSide], backend});\n  }\n\n  const dtype =\n      tensors.map(t => t.dtype).reduce((d1, d2) => upcastType(d1, d2));\n  const shapes = tensors.map(t => t.shape);\n  // We can make sure shapes are identical in op level.\n  const usePackedOp = env().getBool('WEBGL_PACK');\n  const program = usePackedOp ?\n      new AddNPackedProgram(tensors[0].shape, shapes) :\n      new AddNProgram(tensors[0].shape, shapes);\n  return backend.runWebGLProgram(program, tensors, dtype);\n}\n\nexport const addNConfig: KernelConfig = {\n  kernelName: AddN,\n  backendName: 'webgl',\n  kernelFunc: addN as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {All, AllAttrs, AllInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\n\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function all(\n    args: {inputs: AllInputs, backend: MathBackendWebGL, attrs: AllAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const xRank = x.shape.length;\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let permutedX = x;\n  if (permutedAxes != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('all', axes, xRank);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n  const inSize = util.sizeFromShape(reduceShape);\n\n  const a2D =\n      reshape({inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n  const reduced = reduce(a2D, a2D.dtype, 'all', backend);\n\n  let res;\n  if (keepDims) {\n    const newShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: newShape}});\n  } else {\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n  }\n\n  backend.disposeIntermediateTensorInfo(a2D);\n  backend.disposeIntermediateTensorInfo(reduced);\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo(permutedX);\n  }\n\n  return res;\n}\n\nexport const allConfig: KernelConfig = {\n  kernelName: All,\n  backendName: 'webgl',\n  kernelFunc: all as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Any, AnyAttrs, AnyInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function any(\n    args: {inputs: AnyInputs, backend: MathBackendWebGL, attrs: AnyAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const xRank = x.shape.length;\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let permutedX = x;\n  if (permutedAxes != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('any', axes, xRank);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n  const inSize = util.sizeFromShape(reduceShape);\n\n  const a2D =\n      reshape({inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n  const reduced = reduce(a2D, a2D.dtype, 'any', backend);\n\n  let res;\n  if (keepDims) {\n    const newShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: newShape}});\n  } else {\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n  }\n\n  backend.disposeIntermediateTensorInfo(a2D);\n  backend.disposeIntermediateTensorInfo(reduced);\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo(permutedX);\n  }\n\n  return res;\n}\n\nexport const anyConfig: KernelConfig = {\n  kernelName: Any,\n  backendName: 'webgl',\n  kernelFunc: any as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ArgMinMaxProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      reduceInfo: backend_util.ReduceInfo, op: 'max'|'min',\n      firstPass: boolean) {\n    const {windowSize, batchSize, outSize} = reduceInfo;\n    if (!firstPass) {\n      this.variableNames.push('bestIndicesA');\n    }\n    this.outputShape = [batchSize, outSize];\n    const compOp = (op === 'max') ? '>' : '<';\n    const indexSnippet = firstPass ?\n        'inOffset + i;' :\n        'round(getBestIndicesA(batch, inOffset + i));';\n\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${windowSize}; i++) {\n          int inIdx = ${indexSnippet};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${compOp} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ArgMinMaxPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(\n      shape: number[], windowSize: number, op: 'max'|'min',\n      firstPass: boolean) {\n    util.assert(\n        shape.length > 2,\n        () => `Packed arg${\n            op.charAt(0).toUpperCase() +\n            op.slice(1)} supports only inputs with rank above 2.`);\n    const inSize = shape[shape.length - 1];\n    const outSize = Math.ceil(inSize / windowSize);\n    this.outputShape = shape.slice(0, -1);\n    if (outSize > 1) {\n      this.outputShape.push(outSize);\n    }\n    if (!firstPass) {\n      this.variableNames.push('bestIndicesA');\n    }\n    const outShape = this.outputShape;\n    const rank = outShape.length;\n    const dtype = getCoordsDataType(rank);\n    const coords = getChannels('coords', rank);\n\n    let sourceLocSetup;\n    let sourceRank;\n    if (outSize === 1) {\n      sourceRank = rank + 1;\n      const sourceLocDType = getCoordsDataType(sourceRank);\n      sourceLocSetup = `\n        ${sourceLocDType} sourceLocR = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 1]};\n        ${sourceLocDType} sourceLocG = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 2]};\n        ${sourceLocDType} sourceLocA = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 1]};\n        ${sourceLocDType} sourceLocB = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 2]};`;\n    } else {\n      sourceRank = rank;\n      sourceLocSetup = `\n        ${dtype} sourceLocR = coords;\n        ++${coords[rank - 1]};\n        ${dtype} sourceLocG = coords;\n        ++${coords[rank - 2]};\n        ${dtype} sourceLocA = coords;\n        --${coords[rank - 1]};\n        ${dtype} sourceLocB = coords;\n        --${coords[rank - 2]};`;\n    }\n    const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, sourceRank);\n    const inChannel = '.' + channels[sourceRank - 1];  // e.g. \".b\" for rank 3.\n    const intChannels = channels.map(x => 'int ' + x);\n    const srcRCoords =\n        getChannels('sourceLocR', sourceRank - 1).concat('inIdx.r');\n    const srcGCoords =\n        getChannels('sourceLocG', sourceRank - 1).concat('inIdx.g');\n    const srcBCoords =\n        getChannels('sourceLocB', sourceRank - 1).concat('inIdx.b');\n    const srcACoords =\n        getChannels('sourceLocA', sourceRank - 1).concat('inIdx.a');\n\n    const compOp = (op === 'max') ? 'greaterThan' : 'lessThan';\n    const fetchCandidateIdx = firstPass ? '' : `\n          inIdx = round(vec4(getBestIndicesAChannel(${srcRCoords.join()}),\n                             getBestIndicesAChannel(${srcGCoords.join()}),\n                             getBestIndicesAChannel(${srcBCoords.join()}),\n                             getBestIndicesAChannel(${srcACoords.join()})));`;\n\n    const fetchValue = `vec4(\n            getAChannel(${srcRCoords.join()}),\n            hasNextCol ? getAChannel(${srcGCoords.join()}) : 0.,\n            hasNextRow ? getAChannel(${srcBCoords.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${srcACoords.join()}) : 0.)`;\n\n    const getBestIndicesAChannelSnippet = firstPass ? '' : `\n      float getBestIndicesAChannel(${intChannels.join()}) {\n        return getChannel(getBestIndicesA(${channels.join()}),\n                                          vec2(${channels.slice(-2).join()}));\n      }`;\n\n    this.userCode = `\n      float getAChannel(${intChannels.join()}) {\n        return getChannel(getA(${channels.join()}),\n                               vec2(${channels.slice(-2).join()}));\n      }\n      ${getBestIndicesAChannelSnippet}\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        bool hasNextCol = ${coords[rank - 1]} < ${outShape[rank - 1] - 1};\n        bool hasNextRow = ${coords[rank - 2]} < ${outShape[rank - 2] - 1};\n        ${sourceLocSetup}\n        ivec4 srcIdx = ivec4(sourceLocR${inChannel}, sourceLocG${inChannel},\n          sourceLocB${inChannel}, sourceLocA${inChannel}) * ${windowSize};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${fetchValue};\n\n        for (int i = 0; i < ${windowSize}; i++) {\n          inIdx = srcIdx;\n          ${fetchCandidateIdx}\n          vec4 candidate = ${fetchValue};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${compOp}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {ArgMinMaxProgram} from '../argminmax_gpu';\nimport {ArgMinMaxPackedProgram} from '../argminmax_packed_gpu';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reshape} from '../kernels/Reshape';\n\nfunction argReduce(\n    backend: MathBackendWebGL, x: TensorInfo, reduceType: 'max'|'min',\n    bestIndicesA: TensorInfo = null): TensorInfo {\n  let batchSize = x.shape[0];\n  let inSize = x.shape[1];\n  if (bestIndicesA != null) {\n    batchSize = bestIndicesA.shape[0];\n    inSize = bestIndicesA.shape[1];\n  }\n  const windowSize = backend_util.computeOptimalWindowSize(inSize);\n  const reduceInfo =\n      {windowSize, inSize, batchSize, outSize: Math.ceil(inSize / windowSize)};\n  const program =\n      new ArgMinMaxProgram(reduceInfo, reduceType, bestIndicesA == null);\n  const inputs = [x];\n  if (bestIndicesA != null) {\n    inputs.push(bestIndicesA);\n  }\n  const output = backend.runWebGLProgram(program, inputs, 'int32');\n  // No need to run another GPGPU program.\n  if (output.shape[1] === 1) {\n    return output;\n  }\n  const result = argReduce(backend, x, reduceType, output);\n  backend.disposeIntermediateTensorInfo(output);\n  return result;\n}\n\nfunction argReducePacked(\n    backend: MathBackendWebGL, x: TensorInfo, reduceType: 'max'|'min',\n    bestIndicesA: TensorInfo = null): TensorInfo {\n  const inShape = bestIndicesA != null ? bestIndicesA.shape : x.shape;\n  const inSize = inShape[inShape.length - 1];\n  const windowSize = backend_util.computeOptimalWindowSize(inSize);\n  const program = new ArgMinMaxPackedProgram(\n      inShape, windowSize, reduceType, bestIndicesA == null);\n  const inputs = bestIndicesA == null ? [x] : [x, bestIndicesA];\n  const output = backend.runWebGLProgram(program, inputs, 'int32');\n  if (output.shape.length === x.shape.length) {\n    const result = argReducePacked(backend, x, reduceType, output);\n    backend.disposeIntermediateTensorInfo(output);\n    return result;\n  }\n  return output;\n}\n\nexport function argMinMaxReduce(\n    backend: MathBackendWebGL, x: TensorInfo, axis: number,\n    reduceType: 'min'|'max'): TensorInfo {\n  const axes = [axis];\n  backend_util.assertAxesAreInnerMostDims(\n      'arg' + reduceType.charAt(0).toUpperCase() + reduceType.slice(1), axes,\n      x.shape.length);\n  if (!env().getBool('WEBGL_PACK_REDUCE') || x.shape.length <= 2) {\n    const intermediateTensorInfos = [];\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(x.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = reshape({inputs: {x}, backend, attrs: {shape: [-1, inSize]}});\n    intermediateTensorInfos.push(a2D);\n\n    const reduced = argReduce(backend, a2D, reduceType);\n    intermediateTensorInfos.push(reduced);\n    const reshaped =\n        reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n\n    intermediateTensorInfos.forEach(\n        t => backend.disposeIntermediateTensorInfo(t));\n    return reshaped;\n  }\n  return argReducePacked(backend, x, reduceType);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMax, ArgMaxAttrs, ArgMaxInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {argMinMaxReduce} from '../kernel_utils/arg_min_max';\n\nimport {transpose} from './Transpose';\n\nexport function argMax(\n    args:\n        {inputs: ArgMaxInputs, backend: MathBackendWebGL, attrs: ArgMaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('argMax', [axes[0]], $x.shape.length);\n  const out = argMinMaxReduce(backend, $x, axes[0], 'max');\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n  return out;\n}\n\nexport const argMaxConfig: KernelConfig = {\n  kernelName: ArgMax,\n  backendName: 'webgl',\n  kernelFunc: argMax as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMin, ArgMinAttrs, ArgMinInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {argMinMaxReduce} from '../kernel_utils/arg_min_max';\nimport {transpose} from './Transpose';\n\nexport function argMin(\n    args:\n        {inputs: ArgMinInputs, backend: MathBackendWebGL, attrs: ArgMinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('argMin', [axes[0]], $x.shape.length);\n\n  const out = argMinMaxReduce(backend, $x, axes[0], 'min');\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n  return out;\n}\n\nexport const argMinConfig: KernelConfig = {\n  kernelName: ArgMin,\n  backendName: 'webgl',\n  kernelFunc: argMin as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Asin, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ASIN = CHECK_NAN_SNIPPET + `\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n`;\n\nexport const asin = unaryKernelFunc({opSnippet: ASIN});\n\nexport const asinConfig: KernelConfig = {\n  kernelName: Asin,\n  backendName: 'webgl',\n  kernelFunc: asin,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Asinh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ASINH = CHECK_NAN_SNIPPET + `return log(x + sqrt(x * x + 1.0));`;\n\nexport const asinh = unaryKernelFunc({opSnippet: ASINH});\n\nexport const asinhConfig: KernelConfig = {\n  kernelName: Asinh,\n  backendName: 'webgl',\n  kernelFunc: asinh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ATAN = CHECK_NAN_SNIPPET + `\n  return atan(x);\n`;\n\nexport const atan = unaryKernelFunc({opSnippet: ATAN});\n\nexport const atanConfig: KernelConfig = {\n  kernelName: Atan,\n  backendName: 'webgl',\n  kernelFunc: atan,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan2} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc, CHECK_NAN_SNIPPET_BINARY, CHECK_NAN_SNIPPET_BINARY_PACKED} from '../kernel_utils/kernel_funcs_utils';\n\nconst ATAN2 = CHECK_NAN_SNIPPET_BINARY + `\n  return atan(a, b);\n`;\n\nconst ATAN2_PACKED = `\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  ` +\n    CHECK_NAN_SNIPPET_BINARY_PACKED + `\n  return result;\n`;\n\nexport const atan2 =\n    binaryKernelFunc({opSnippet: ATAN2, packedOpSnippet: ATAN2_PACKED});\n\nexport const atan2Config: KernelConfig = {\n  kernelName: Atan2,\n  backendName: 'webgl',\n  kernelFunc: atan2,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atanh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ATANH = CHECK_NAN_SNIPPET + `\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;`;\n\nexport const atanh = unaryKernelFunc({opSnippet: ATANH});\n\nexport const atanhConfig: KernelConfig = {\n  kernelName: Atanh,\n  backendName: 'webgl',\n  kernelFunc: atanh,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Pool2DProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, poolType: 'max'|'avg',\n      computePositions: boolean, flattenPositions = false,\n      includeBatchInIndex = false) {\n    if (poolType === 'avg' && computePositions) {\n      throw new Error('Cannot compute positions for average pool.');\n    }\n\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    this.outputShape = convInfo.outShape;\n\n    const isAvgPool = poolType === 'avg';\n    const batchFlattenPositionStr = `((batch  * ${convInfo.inHeight} + xR) * ${\n        convInfo.inWidth} + xC) * ${convInfo.inChannels} + d`;\n    const flattenPositionStr =\n        `(xR * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + d`;\n\n    let initializationValue = '0.0';\n    if (!isAvgPool) {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '-1.0 / 1e-20';\n    }\n\n    if (computePositions) {\n      const compareOp = '>=';\n\n      this.userCode = `\n        const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n        const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${compareOp} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${\n          flattenPositions ? (includeBatchInIndex ? batchFlattenPositionStr :\n                                                    flattenPositionStr) :\n                             `wR * ${effectiveFilterWidth} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `;\n      return;\n    }\n\n    const compareOp = 'max';\n\n    let returnValue = `${poolType}(${poolType}(${poolType}(` +\n        'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n    if (poolType === 'avg') {\n      returnValue = `avgValue / count`;\n    }\n\n    const filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;\n    const filterWidthVec4Remainder = filterWidth % 4;\n\n    const updateSnippet = `\n      if (${isAvgPool}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n      }\n    `;\n\n    this.userCode = `\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${convInfo.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${initializationValue});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${convInfo.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidthNearestVec4}; wC += 4) {\n            int xC = xCCorner + wC * ${dilationWidth};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              getValue(batch, xR, xC + 2 * ${dilationWidth}, d),\n              getValue(batch, xR, xC + 3 * ${dilationWidth}, d)\n            );\n\n            ${updateSnippet}\n          }\n\n          int xC = xCCorner + ${filterWidthNearestVec4};\n          if (${filterWidthVec4Remainder === 1}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${updateSnippet}\n          } else if (${filterWidthVec4Remainder === 2}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${updateSnippet}\n          } else if (${filterWidthVec4Remainder === 3}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              getValue(batch, xR, xC + 2 * ${dilationWidth}, d),\n              initializationValue\n            );\n\n            ${updateSnippet}\n          }\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n}\n\nexport class Pool3DProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: backend_util.Conv3DInfo, poolType: 'max'|'avg',\n      computePositions: boolean, flattenPositions = false,\n      includeBatchInIndex = false) {\n    if (poolType === 'avg' && computePositions) {\n      throw new Error('Cannot compute positions for average pool.');\n    }\n\n    const filterWidth = convInfo.filterWidth;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    this.outputShape = convInfo.outShape;\n\n    const isAvgPool = poolType === 'avg';\n\n    let initializationValue = '0.0';\n    if (!isAvgPool) {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '-1.0 / 1e-20';\n    }\n\n    if (computePositions) {\n      const compareOp = '>=';\n\n      this.userCode = `\n        const ivec3 strides =\n            ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});\n        const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${effectiveFilterDepth};\n              wD += ${dilationDepth}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${convInfo.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${effectiveFilterHeight};\n                wR += ${dilationHeight}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${convInfo.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${effectiveFilterWidth};\n                  wC += ${dilationWidth}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${compareOp} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${\n          flattenPositions ?\n              (includeBatchInIndex ?\n                   `(((batch * ${convInfo.inDepth} + xD) * ${\n                       convInfo.inHeight} + xR) * ${convInfo.inWidth} + xC) * ${\n                       convInfo.inChannels} + ch` :\n                   `((xD * ${convInfo.inHeight} + xR) * ${\n                       convInfo.inWidth} + xC) * ${convInfo.inChannels} + ch`) :\n              `wD * ${effectiveFilterHeight} * ${effectiveFilterWidth} +\n                      wR * ${effectiveFilterWidth} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `;\n      return;\n    }\n\n    const compareOp = 'max';\n\n    let returnValue = `${poolType}(${poolType}(${poolType}(` +\n        'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n    if (poolType === 'avg') {\n      returnValue = `avgValue / count`;\n    }\n\n    const filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;\n    const filterWidthVec4Remainder = filterWidth % 4;\n\n    const updateSnippet = `\n      if (${isAvgPool}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n      }\n    `;\n\n    this.userCode = `\n      const ivec3 strides =\n        ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${convInfo.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${initializationValue});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n            wD += ${dilationDepth}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${convInfo.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${filterWidthNearestVec4}; wC += 4) {\n              int xC = xCCorner + wC * ${dilationWidth};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${dilationWidth}, ch)\n              );\n\n              ${updateSnippet}\n            }\n\n            int xC = xCCorner + ${filterWidthNearestVec4};\n            if (${filterWidthVec4Remainder === 1}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${updateSnippet}\n            } else if (${filterWidthVec4Remainder === 2}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${updateSnippet}\n            } else if (${filterWidthVec4Remainder === 3}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${dilationWidth}, ch),\n                initializationValue\n              );\n\n              ${updateSnippet}\n            }\n          }\n          setOutput(${returnValue});\n        }\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPool, AvgPoolAttrs, AvgPoolInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool2DProgram} from '../pool_gpu';\nimport {assertNotComplex} from '../webgl_util';\nimport {identity} from './Identity';\n\nexport function avgPool(args: {\n  inputs: AvgPoolInputs,\n  backend: MathBackendWebGL,\n  attrs: AvgPoolAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  assertNotComplex(x, 'avgPool');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in avgPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    return identity({inputs: {x}, backend});\n  }\n  const avgPoolProgram = new Pool2DProgram(convInfo, 'avg', false);\n  return backend.runWebGLProgram(avgPoolProgram, [x], 'float32');\n}\n\nexport const avgPoolConfig: KernelConfig = {\n  kernelName: AvgPool,\n  backendName: 'webgl',\n  kernelFunc: avgPool as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPool3D, AvgPool3DAttrs, AvgPool3DInputs, backend_util, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool3DProgram} from '../pool_gpu';\n\nexport function avgPool3D(args: {\n  inputs: AvgPool3DInputs,\n  backend: MathBackendWebGL,\n  attrs: AvgPool3DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode, dataFormat} = attrs;\n  const dilations: [number, number, number] = [1, 1, 1];\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode, dataFormat);\n  const avgPoolProgram = new Pool3DProgram(convInfo, 'avg', false);\n  return backend.runWebGLProgram(avgPoolProgram, [x], 'float32');\n}\n\nexport const avgPool3DConfig: KernelConfig = {\n  kernelName: AvgPool3D,\n  backendName: 'webgl',\n  kernelFunc: avgPool3D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class AvgPool2DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const avgMultiplier = 1 / (filterHeight * filterWidth);\n\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float avgMultiplier = float(${avgMultiplier});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${effectiveFilterWidth};\n            wC+= ${dilationWidth}) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class AvgPool3DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.inShape;\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);\n\n    this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n      const float avgMultiplier = float(${avgMultiplier});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n            wD += ${dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPool3DGrad, AvgPool3DGradAttrs, AvgPool3DGradInputs, backend_util, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {AvgPool3DBackpropProgram} from '../avg_pool_backprop_gpu';\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function avgPool3DGrad(args: {\n  inputs: AvgPool3DGradInputs,\n  backend: MathBackendWebGL,\n  attrs: AvgPool3DGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations: [number, number, number] = [1, 1, 1];\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  const avgPoolBackpropProgram = new AvgPool3DBackpropProgram(convInfo);\n  return backend.runWebGLProgram(avgPoolBackpropProgram, [dy], x.dtype);\n}\n\nexport const avgPoolGrad3DConfig: KernelConfig = {\n  kernelName: AvgPool3DGrad,\n  backendName: 'webgl',\n  kernelFunc: avgPool3DGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPoolGrad, AvgPoolGradAttrs, AvgPoolGradInputs, backend_util, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {AvgPool2DBackpropProgram} from '../avg_pool_backprop_gpu';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {assertNotComplex} from '../webgl_util';\n\nexport function avgPoolGrad(args: {\n  inputs: AvgPoolGradInputs,\n  backend: MathBackendWebGL,\n  attrs: AvgPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  assertNotComplex([dy, input], 'avgPoolGrad');\n  const {filterSize, strides, pad} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad);\n  const avgPoolBackpropProgram = new AvgPool2DBackpropProgram(convInfo);\n  return backend.runWebGLProgram(avgPoolBackpropProgram, [dy], x.dtype);\n}\n\nexport const avgPoolGradConfig: KernelConfig = {\n  kernelName: AvgPoolGrad,\n  backendName: 'webgl',\n  kernelFunc: avgPoolGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BatchMatMul, BatchMatMulAttrs, BatchMatMulInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {batchMatMulImpl} from './BatchMatMul_impl';\n\nexport function batchMatMul(args: {\n  inputs: BatchMatMulInputs,\n  attrs: BatchMatMulAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b} = inputs;\n  const {transposeA, transposeB} = attrs;\n\n  return batchMatMulImpl({a, b, transposeA, transposeB, backend});\n}\n\nexport const batchMatMulConfig: KernelConfig = {\n  kernelName: BatchMatMul,\n  backendName: 'webgl',\n  kernelFunc: batchMatMul as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class BatchNormProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      xShape: number[], meanShape: number[], varianceShape: number[],\n      offsetShape: number[]|null, scaleShape: number[]|null,\n      varianceEpsilon: number) {\n    this.variableNames = ['x', 'mean', 'variance'];\n    backend_util.assertAndGetBroadcastShape(xShape, meanShape);\n    backend_util.assertAndGetBroadcastShape(xShape, varianceShape);\n\n    let offsetSnippet = '0.0';\n    if (offsetShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, offsetShape);\n      this.variableNames.push('offset');\n      offsetSnippet = 'getOffsetAtOutCoords()';\n    }\n\n    let scaleSnippet = '1.0';\n    if (scaleShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, scaleShape);\n      this.variableNames.push('scale');\n      scaleSnippet = 'getScaleAtOutCoords()';\n    }\n\n    this.outputShape = xShape;\n    this.userCode = `\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${offsetSnippet};\n        float scale = ${scaleSnippet};\n        float inv = scale * inversesqrt(variance + float(${varianceEpsilon}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class BatchNormPackedProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(\n      xShape: number[], meanShape: number[], varianceShape: number[],\n      offsetShape: number[]|null, scaleShape: number[]|null,\n      varianceEpsilon: number) {\n    this.variableNames = ['x', 'mean', 'variance'];\n    backend_util.assertAndGetBroadcastShape(xShape, meanShape);\n    backend_util.assertAndGetBroadcastShape(xShape, varianceShape);\n\n    let offsetSnippet = 'vec4(0.0)';\n    if (offsetShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, offsetShape);\n      this.variableNames.push('offset');\n      offsetSnippet = 'getOffsetAtOutCoords()';\n    }\n\n    let scaleSnippet = 'vec4(1.0)';\n    if (scaleShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, scaleShape);\n      this.variableNames.push('scale');\n      scaleSnippet = 'getScaleAtOutCoords()';\n    }\n\n    this.outputShape = xShape;\n    this.userCode = `\n      void main() {\n        vec4 offset = ${offsetSnippet};\n        vec4 scale = ${scaleSnippet};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${varianceEpsilon}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `;\n  }\n}\n","\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, FusedBatchNorm, FusedBatchNormAttrs, FusedBatchNormInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BatchNormProgram} from '../batchnorm_gpu';\nimport {BatchNormPackedProgram} from '../batchnorm_packed_gpu';\n\nexport const batchNorm: (params: {\n  inputs: FusedBatchNormInputs,\n  backend: MathBackendWebGL,\n  attrs: FusedBatchNormAttrs\n}) => TensorInfo = ({inputs, backend, attrs}) => {\n  const {x, mean, variance, offset, scale} = inputs;\n\n  util.assert(\n      mean.shape.length === variance.shape.length,\n      () => 'Batch normalization gradient requires mean and variance to have ' +\n          'equal ranks.');\n  util.assert(\n      offset == null || mean.shape.length === offset.shape.length,\n      () => 'Batch normalization gradient requires mean and offset to have ' +\n          'equal ranks.');\n  util.assert(\n      scale == null || mean.shape.length === scale.shape.length,\n      () => 'Batch normalization gradient requires mean and scale to have ' +\n          'equal ranks.');\n\n  let {varianceEpsilon} = attrs;\n  if (varianceEpsilon == null) {\n    varianceEpsilon = 0.001;\n  }\n\n  const finalInputs = [x, mean, variance];\n\n  let offsetShape = null;\n  if (offset != null) {\n    offsetShape = offset.shape;\n    finalInputs.push(offset);\n  }\n\n  let scaleShape = null;\n  if (scale != null) {\n    scaleShape = scale.shape;\n    finalInputs.push(scale);\n  }\n\n  const program = env().getBool('WEBGL_PACK_NORMALIZATION') ?\n      new BatchNormPackedProgram(\n          x.shape, mean.shape, variance.shape, offsetShape, scaleShape,\n          varianceEpsilon) :\n      new BatchNormProgram(\n          x.shape, mean.shape, variance.shape, offsetShape, scaleShape,\n          varianceEpsilon);\n  const output =\n      backend.runWebGLProgram(program, finalInputs, finalInputs[0].dtype);\n\n  return output;\n};\n\nexport const batchNormConfig: KernelConfig = {\n  kernelName: FusedBatchNorm,\n  backendName: 'webgl',\n  kernelFunc: batchNorm as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class SliceProgram implements GPGPUProgram {\n  variableNames = ['source'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  // Caching uniform location for speed.\n  startLoc: WebGLUniformLocation;\n\n  constructor(destSize: number[]) {\n    this.outputShape = destSize;\n    this.rank = destSize.length;\n\n    const dtype = getCoordsDataType(this.rank);\n    const uniformPart = `uniform int start[${this.rank}];`;\n    const sourceCoords = getCoords(this.rank);\n\n    let body: string;\n    const coordSum = destSize.map((_, i) => {\n      return `sourceLoc.${coords[i]} = start[${i}] + coords.${coords[i]};`;\n    });\n    body = `\n        ${dtype} sourceLoc;\n        ${dtype} coords = getOutputCoords();\n        ${coordSum.join('\\n')}\n      `;\n    this.userCode = `\n      ${uniformPart}\n      void main() {\n        ${body}\n        setOutput(getSource(${sourceCoords}));\n      }\n    `;\n  }\n\n  getCustomSetupFunc(start: number[]) {\n    if (start.length !== this.rank) {\n      throw Error(\n          `The rank (${this.rank}) of the program must match the ` +\n          `length of start (${start.length})`);\n    }\n    return (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => {\n      if (this.startLoc == null) {\n        this.startLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'start');\n        if (this.startLoc == null) {\n          // This means the compiler has optimized and realized it doesn't need\n          // the uniform.\n          return;\n        }\n      }\n      gpgpu.gl.uniform1iv(this.startLoc, start);\n    };\n  }\n}\n\nconst coords = ['x', 'y', 'z', 'w', 'u', 'v'];\n\nfunction getCoords(rank: number): string {\n  if (rank === 1) {\n    return 'sourceLoc';\n  } else if (rank <= 6) {\n    return coords.slice(0, rank).map(x => 'sourceLoc.' + x).join(',');\n  } else {\n    throw Error(`Slicing for rank ${rank} is not yet supported`);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class SlicePackedProgram implements GPGPUProgram {\n  variableNames = ['source'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  // Caching uniform location for speed.\n  startLoc: WebGLUniformLocation;\n\n  constructor(destSize: number[]) {\n    this.outputShape = destSize;\n    this.rank = destSize.length;\n\n    const dtype = getCoordsDataType(this.rank);\n    const coords = getChannels('coords', this.rank);\n    const sourceLoc = getChannels('sourceLoc', this.rank);\n\n    const innerDims =\n        this.rank === 1 ? 'sourceLoc' : `vec2(${sourceLoc.slice(-2).join()})`;\n    const getChannel =\n        `getChannel(getSource(${sourceLoc.join()}), ${innerDims})`;\n    const upperRow = `\n      result.x = ${getChannel};\n      if (++${coords[this.rank - 1]} < ${destSize[this.rank - 1]}) {\n        ++${sourceLoc[this.rank - 1]};\n        result.y = ${getChannel};\n        --${sourceLoc[this.rank - 1]};\n      }\n    `;\n    const lowerRow = this.rank === 1 ? '' : `\n      --${coords[this.rank - 1]};\n      if (++${coords[this.rank - 2]} < ${destSize[this.rank - 2]}) {\n        ++${sourceLoc[this.rank - 2]};\n        result.z = ${getChannel};\n        if (++${coords[this.rank - 1]} < ${destSize[this.rank - 1]}) {\n          ++${sourceLoc[this.rank - 1]};\n          result.w = ${getChannel};\n        }\n      }\n    `;\n\n    const sourceLocSetup = this.rank <= 4 ?\n        `sourceLoc = coords +\n            ${dtype}(${destSize.map((_, i) => `start[${i}]`).join()});` :\n        destSize.map((_, i) => `${sourceLoc[i]} = ${coords[i]} + start[${i}];`)\n            .join('\\n');\n    this.userCode = `\n      uniform int start[${this.rank}];\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        ${dtype} sourceLoc;\n        ${sourceLocSetup}\n        vec4 result = vec4(0.);\n        ${upperRow}\n        ${lowerRow}\n        setOutput(result);\n      }\n    `;\n  }\n\n  getCustomSetupFunc(start: number[]) {\n    if (start.length !== this.rank) {\n      throw Error(\n          `The rank (${this.rank}) of the program must match the ` +\n          `length of start (${start.length})`);\n    }\n    return (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => {\n      if (this.startLoc == null) {\n        this.startLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'start');\n        if (this.startLoc == null) {\n          // This means the compiler has optimized and realized it doesn't need\n          // the uniform.\n          return;\n        }\n      }\n      gpgpu.gl.uniform1iv(this.startLoc, start);\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, Slice, slice_util, SliceAttrs, SliceInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {sliceImplCPU} from '../kernel_utils/shared';\nimport {SliceProgram} from '../slice_gpu';\nimport {SlicePackedProgram} from '../slice_packed_gpu';\n\nfunction shallowSlice(\n    x: TensorInfo, begin: number[], size: number[], backend: MathBackendWebGL) {\n  const xTexData = backend.texData.get(x.dataId);\n  const t = backend.makeTensorInfo(size, x.dtype);\n  const newTexData = backend.texData.get(t.dataId);\n  // Copy texture data from the original tensor.\n  Object.assign(newTexData, xTexData);\n  newTexData.refCount = 1;\n  newTexData.shape = size;\n  newTexData.dtype = x.dtype;\n  let flatOffset =\n      slice_util.computeFlatOffset(begin, util.computeStrides(x.shape));\n  if (xTexData.slice) {\n    // We are slicing an already sliced tensor, so we have to accumulate\n    // the offset.\n    flatOffset += xTexData.slice.flatOffset;\n  }\n  newTexData.slice = {\n    flatOffset,\n    // Point to the original dataId, which is used to do ref counting.\n    origDataId: xTexData.slice && xTexData.slice.origDataId || x.dataId\n  };\n\n  // Increase the ref count for that data bucket.\n  const refCount = backend.dataRefCount.get(newTexData.slice.origDataId) || 1;\n  backend.dataRefCount.set(newTexData.slice.origDataId, refCount + 1);\n  return t;\n}\n\nexport function slice(\n    args: {inputs: SliceInputs, backend: MathBackendWebGL, attrs: SliceAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {begin, size} = attrs;\n\n  const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n  slice_util.assertParamsValid(x, $begin, $size);\n\n  if (util.sizeFromShape($size) === 0) {\n    return backend.makeTensorInfo($size, x.dtype, []);\n  }\n\n  // Run on cpu if dtype is string. For string, the backend represents it\n  // as Uint8Array[], where each Uint8Array is a character. Given that the\n  // computation is only on the outer array, uploading the whole data onto\n  // gpu is wasteful. Also, currently webgl doesn't have a design to\n  // upload and retrieve Uint8Array[] between cpu and gpu. Therefore, we\n  // just run the kernel on cpu if dtype is string.\n  if (backend.shouldExecuteOnCPU([x]) || x.dtype === 'string') {\n    const xTexData = backend.texData.get(x.dataId);\n    const outValues = sliceImplCPU(\n        xTexData.values as TypedArray, $begin, $size, x.shape, x.dtype);\n    return backend.makeTensorInfo($size, x.dtype, outValues);\n  }\n\n  const {isPacked} = backend.texData.get(x.dataId);\n  const isContinous = slice_util.isSliceContinous(x.shape, $begin, $size);\n  if (isPacked || !isContinous) {\n    const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n        new SlicePackedProgram($size) :\n        new SliceProgram($size);\n    const customSetup = program.getCustomSetupFunc($begin);\n    return backend.runWebGLProgram(program, [x], x.dtype, customSetup);\n  }\n  backend.uploadToGPU(x.dataId);\n  return shallowSlice(x, $begin, $size, backend);\n}\n\nexport const sliceConfig: KernelConfig = {\n  kernelName: Slice,\n  backendName: 'webgl',\n  kernelFunc: slice as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BatchToSpaceND, BatchToSpaceNDAttrs, BatchToSpaceNDInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\nimport {transpose} from './Transpose';\n\nexport const batchToSpaceND = (args: {\n  inputs: BatchToSpaceNDInputs,\n  backend: MathBackendWebGL,\n  attrs: BatchToSpaceNDAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, crops} = attrs;\n\n  util.assert(\n      x.shape.length <= 4,\n      () => 'batchToSpaceND for rank > 4 with a WebGL backend not ' +\n          'implemented yet');\n  const prod = blockShape.reduce((a, b) => a * b);\n\n  const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n  const permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n  const reshapedPermuted =\n      backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n  const sliceBeginCoords =\n      backend_util.getSliceBeginCoords(crops, blockShape.length);\n  const sliceSize =\n      backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n\n  const toDispose = [];\n\n  const reshapedIntermediate =\n      reshape({inputs: {x}, backend, attrs: {shape: reshaped}});\n  const transposedIntermediate = transpose(\n      {inputs: {x: reshapedIntermediate}, backend, attrs: {perm: permuted}});\n  const reshapedIntermediate2 = reshape({\n    inputs: {x: transposedIntermediate},\n    backend,\n    attrs: {shape: reshapedPermuted}\n  });\n  const sliced = slice({\n    inputs: {x: reshapedIntermediate2},\n    backend,\n    attrs: {begin: sliceBeginCoords, size: sliceSize}\n  });\n\n  toDispose.push(reshapedIntermediate);\n  toDispose.push(transposedIntermediate);\n  toDispose.push(reshapedIntermediate2);\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return sliced;\n};\n\nexport const batchToSpaceNDConfig: KernelConfig = {\n  kernelName: BatchToSpaceND,\n  backendName: 'webgl',\n  kernelFunc: batchToSpaceND as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Bincount, BincountAttrs, BincountInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {bincountImplCPU} from '../kernel_utils/shared';\n\nexport function bincount(args: {\n  inputs: BincountInputs,\n  backend: MathBackendWebGL,\n  attrs: BincountAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size} = attrs;\n\n  const xVals = backend.readSync(x.dataId) as TypedArray;\n  const weightsVals = backend.readSync(weights.dataId) as TypedArray;\n\n  const outVals =\n      bincountImplCPU(xVals, weightsVals, weights.dtype, weights.shape, size);\n\n  return backend.makeTensorInfo([size], weights.dtype, outVals);\n}\n\nexport const bincountConfig: KernelConfig = {\n  kernelName: Bincount,\n  backendName: 'webgl',\n  kernelFunc: bincount as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NotEqual} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst NOT_EQUAL = `return float(a != b);`;\n\nexport const notEqual = binaryKernelFunc({opSnippet: NOT_EQUAL, dtype: 'bool'});\n\nexport const notEqualConfig: KernelConfig = {\n  kernelName: NotEqual,\n  backendName: 'webgl',\n  kernelFunc: notEqual,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Real, RealInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {identity} from './Identity';\n\nexport function real(args: {inputs: RealInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n  const inputData = backend.texData.get(input.dataId);\n\n  return identity({inputs: {x: inputData.complexTensorInfos.real}, backend});\n}\n\nexport const realConfig: KernelConfig = {\n  kernelName: Real,\n  backendName: 'webgl',\n  kernelFunc: real as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as tf from '@tensorflow/tfjs-core';\nimport {BinaryInputs, Cast, CastAttrs, CastInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {complex} from './Complex';\nimport {identity} from './Identity';\nimport {notEqual} from './NotEqual';\nimport {real} from './Real';\n\nimport {int} from '../kernel_utils/int';\n\nexport function cast(\n    args: {inputs: CastInputs, backend: MathBackendWebGL, attrs: CastAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dtype} = attrs;\n\n  // Casting to complex64.\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return identity({inputs: {x}, backend});\n    }\n\n    // TODO(annxingyuan): Import kernel function once zeros is modularized.\n    const zerosTensor = tf.zeros(x.shape);\n    const floatX = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n\n    const result =\n        complex({inputs: {real: floatX, imag: zerosTensor}, backend});\n\n    zerosTensor.dispose();\n    backend.disposeIntermediateTensorInfo(floatX);\n\n    return result;\n  }\n\n  // Casting from complex64\n  if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const result = cast({inputs: {x: realPart}, backend, attrs: {dtype}});\n    backend.disposeIntermediateTensorInfo(realPart);\n    return result;\n  }\n\n  if (!util.hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    const result = identity({inputs: {x}, backend});\n    return {dataId: result.dataId, shape: result.shape, dtype};\n  }\n\n  if (dtype === 'int32') {\n    return int(x, backend);\n  }\n\n  if (dtype === 'bool') {\n    const zerosTensorInfo = backend.makeTensorInfo(\n        [], 'bool', util.getTypedArrayFromDType('bool', 1));\n\n    const binaryInputs: BinaryInputs = {a: x, b: zerosTensorInfo};\n\n    const result = notEqual({inputs: binaryInputs, backend}) as TensorInfo;\n    backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n    return result;\n  }\n\n  throw new Error(`Error in Cast: failed to cast ${x.dtype} to ${dtype}`);\n}\n\nexport const castConfig: KernelConfig = {\n  kernelName: Cast,\n  backendName: 'webgl',\n  kernelFunc: cast as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {UnaryOpProgram} from '../unaryop_gpu';\n\nconst TO_INT = `return float(int(x));`;\n\nexport function int(input: TensorInfo, backend: MathBackendWebGL): TensorInfo {\n  const program = new UnaryOpProgram(input.shape, TO_INT);\n  const output = backend.runWebGLProgram(program, [input], 'int32');\n  return {dataId: output.dataId, shape: output.shape, dtype: output.dtype};\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Ceil, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {ceilImplCPU} from '../kernel_utils/shared';\n\nconst CEIL = `return ceil(x);`;\n\nexport const ceil = unaryKernelFunc(\n    {opSnippet: CEIL, packedOpSnippet: CEIL, cpuKernelImpl: ceilImplCPU});\n\nexport const ceilConfig: KernelConfig = {\n  kernelName: Ceil,\n  backendName: 'webgl',\n  kernelFunc: ceil as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ClipProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n\n  // Caching uniform locations for speed.\n  minLoc: WebGLUniformLocation;\n  maxLoc: WebGLUniformLocation;\n\n  constructor(aShape: number[]) {\n    this.outputShape = aShape;\n    this.userCode = `\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    `;\n  }\n\n  getCustomSetupFunc(min: number, max: number) {\n    return (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => {\n      if (this.minLoc == null) {\n        this.minLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'minVal');\n        this.maxLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'maxVal');\n      }\n      gpgpu.gl.uniform1f(this.minLoc, min);\n      gpgpu.gl.uniform1f(this.maxLoc, max);\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ClipPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  userCode: string;\n  outputShape: number[];\n\n  // Caching uniform locations for speed.\n  minLoc: WebGLUniformLocation;\n  maxLoc: WebGLUniformLocation;\n\n  constructor(aShape: number[]) {\n    this.outputShape = aShape;\n    this.userCode = `\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    `;\n  }\n\n  getCustomSetupFunc(min: number, max: number) {\n    return (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => {\n      if (this.minLoc == null) {\n        this.minLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'minVal');\n        this.maxLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'maxVal');\n      }\n      gpgpu.gl.uniform1f(this.minLoc, min);\n      gpgpu.gl.uniform1f(this.maxLoc, max);\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ClipByValue, ClipByValueAttrs, ClipByValueInputs, env, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ClipProgram} from '../clip_gpu';\nimport {ClipPackedProgram} from '../clip_packed_gpu';\n\nexport function clipByValue(args: {\n  inputs: ClipByValueInputs,\n  backend: MathBackendWebGL,\n  attrs: ClipByValueAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {clipValueMin, clipValueMax} = attrs;\n\n  let program;\n  if (env().getBool('WEBGL_PACK_CLIP')) {\n    program = new ClipPackedProgram(x.shape);\n  } else {\n    program = new ClipProgram(x.shape);\n  }\n  const customSetup = program.getCustomSetupFunc(clipValueMin, clipValueMax);\n  return backend.runWebGLProgram(program, [x], x.dtype, customSetup);\n}\n\nexport const clipByValueConfig: KernelConfig = {\n  kernelName: ClipByValue,\n  backendName: 'webgl',\n  kernelFunc: clipByValue as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ComplexAbsProgram implements GPGPUProgram {\n  variableNames = ['real', 'imag'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(shape: number[]) {\n    this.outputShape = shape;\n    this.userCode = `\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ComplexAbs, ComplexAbsInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ComplexAbsProgram} from '../complex_abs_gpu';\n\n// Returns a TensorInfo with the complex shape and the dataId of the\n// underlying part. We need to do this because a reshaped complex tensor is\n// not reflected in its parts.\nfunction makeComplexComponentTensorInfo(\n    complexTensor: TensorInfo, complexPart: TensorInfo): TensorInfo {\n  return {\n    dataId: complexPart.dataId,\n    dtype: complexPart.dtype,\n    shape: complexTensor.shape\n  };\n}\n\nexport function complexAbs(\n    args: {inputs: ComplexAbsInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  const xData = backend.texData.get(x.dataId);\n\n  const program = new ComplexAbsProgram(x.shape);\n  const programInputs = [\n    makeComplexComponentTensorInfo(x, xData.complexTensorInfos.real),\n    makeComplexComponentTensorInfo(x, xData.complexTensorInfos.imag),\n  ];\n\n  return backend.runWebGLProgram(\n      program, programInputs, programInputs[0].dtype);\n}\n\nexport const complexAbsConfig: KernelConfig = {\n  kernelName: ComplexAbs,\n  backendName: 'webgl',\n  kernelFunc: complexAbs as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ConcatProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n\n  // Concats 2d tensors along axis=1. See comments in MathBackendWebGL.concat().\n  constructor(shapes: Array<[number, number]>) {\n    this.outputShape = backend_util.computeOutShape(shapes, 1 /* axis */);\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const offsets: number[] = new Array(shapes.length - 1);\n    offsets[0] = shapes[0][1];\n    for (let i = 1; i < offsets.length; i++) {\n      offsets[i] = offsets[i - 1] + shapes[i][1];\n    }\n\n    const snippets = [`if (yC < ${offsets[0]}) setOutput(getT0(yR, yC));`];\n    for (let i = 1; i < offsets.length; i++) {\n      const shift = offsets[i - 1];\n      snippets.push(\n          `else if (yC < ${offsets[i]}) ` +\n          `setOutput(getT${i}(yR, yC-${shift}));`);\n    }\n    const lastIndex = offsets.length;\n    const lastShift = offsets[offsets.length - 1];\n    snippets.push(`else setOutput(getT${lastIndex}(yR, yC-${lastShift}));`);\n\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${snippets.join('\\n        ')}\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ConcatPackedProgram implements GPGPUProgram {\n  variableNames: string[];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(shapes: number[][], axis: number) {\n    this.outputShape = backend_util.computeOutShape(shapes, axis);\n    const shape = this.outputShape;\n    const rank = shape.length;\n    const dtype = getCoordsDataType(rank);\n    const coords = getChannels('coords', rank);\n    const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const offsets: number[] = new Array(shapes.length - 1);\n    offsets[0] = shapes[0][axis];\n    for (let i = 1; i < offsets.length; i++) {\n      offsets[i] = offsets[i - 1] + shapes[i][axis];\n    }\n\n    const channel = channels[axis];\n    const lastChannels = channels.slice(-2);\n    const allChannels = channels.join();\n\n    let getValueSnippet = `if (${channel} < ${offsets[0]}) {\n        return getChannel(\n            getT0(${allChannels}), vec2(${lastChannels.join()}));\n        }`;\n    for (let i = 1; i < offsets.length; i++) {\n      const shift = offsets[i - 1];\n      // Note: the >= comparison below may seem unnecessary given the check\n      // above but is needed to workaround branch execution issues on some\n      // devices. It makes all the conditions exclusive without relying on\n      // execution order.\n      getValueSnippet += `\n        if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\n          return getChannel(\n            getT${i}(${shiftedChannels(channels, channel, shift)}),\n            vec2(${shiftedChannels(lastChannels, channel, shift)}));\n        }`;\n    }\n    const lastIndex = offsets.length;\n    const shift = offsets[offsets.length - 1];\n    getValueSnippet += `\n        return getChannel(\n          getT${lastIndex}(${shiftedChannels(channels, channel, shift)}),\n          vec2(${shiftedChannels(lastChannels, channel, shift)}));`;\n\n    this.userCode = `\n      float getValue(${channels.map(x => 'int ' + x)}) {\n        ${getValueSnippet}\n      }\n\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\n\n        ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\n        if (${coords[rank - 1]} < ${shape[rank - 1]}) {\n          result.g = getValue(${coords});\n        }\n\n        ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\n        if (${coords[rank - 2]} < ${shape[rank - 2]}) {\n          result.a = getValue(${coords});\n        }\n\n        ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\n        if (${coords[rank - 2]} < ${shape[rank - 2]} &&\n            ${coords[rank - 1]} < ${shape[rank - 1]}) {\n          result.b = getValue(${coords});\n        }\n        setOutput(result);\n      }\n    `;\n  }\n}\n\n/**\n * Return an expression for coordinates into a vector where a given channel\n * will be offset by [shift].\n *\n * @param channels the channels to consider\n * @param channel the channel we want shifted\n * @param shift  the amount to subtract from the channel.\n *\n * @returns a string of the form 'x, y-[shift], z' where any one channel can\n * have the shift applied.\n */\nfunction shiftedChannels(channels: string[], channel: string, shift: number) {\n  const channelIdx = channels.indexOf(channel);\n  const res = channels.map((c, idx) => {\n    if (idx === channelIdx) {\n      return `${c} - ${shift}`;\n    } else {\n      return c;\n    }\n  });\n  return res.join();\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Imag, ImagInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {identity} from './Identity';\n\nexport function imag(args: {inputs: ImagInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n  const inputData = backend.texData.get(input.dataId);\n\n  return identity({inputs: {x: inputData.complexTensorInfos.imag}, backend});\n}\n\nexport const imagConfig: KernelConfig = {\n  kernelName: Imag,\n  backendName: 'webgl',\n  kernelFunc: imag as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, ConcatInputs, env, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ConcatProgram} from '../concat_gpu';\nimport {ConcatPackedProgram} from '../concat_packed_gpu';\nimport {concatImplCPU} from '../kernel_utils/shared';\n\nimport {complex} from './Complex';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {reshape} from './Reshape';\n\nexport function concatImpl(\n    inputs: ConcatInputs, axis: number, backend: MathBackendWebGL): TensorInfo {\n  const dtype = inputs[0].dtype;\n  if (dtype === 'complex64') {\n    const reals = inputs.map((t) => real({inputs: {input: t}, backend}));\n    const imags = inputs.map((t) => imag({inputs: {input: t}, backend}));\n\n    const realConcated = concatImpl(reals, axis, backend);\n    const imagConcated = concatImpl(imags, axis, backend);\n\n    const result =\n        complex({inputs: {real: realConcated, imag: imagConcated}, backend});\n\n    reals.forEach(r => backend.disposeIntermediateTensorInfo(r));\n    imags.forEach(i => backend.disposeIntermediateTensorInfo(i));\n    backend.disposeIntermediateTensorInfo(realConcated);\n    backend.disposeIntermediateTensorInfo(imagConcated);\n\n    return result;\n  }\n\n  // Run on cpu if dtype is string. For string, the backend represents it\n  // as Uint8Array[], where each Uint8Array is a character. Given that the\n  // computation is only on the outer array, uploading the whole data onto\n  // gpu is wasteful. Also, currently webgl doesn't have a design to\n  // upload and retrieve Uint8Array[] between cpu and gpu. Therefore, we\n  // just run the kernel on cpu if dtype is string.\n  if (dtype === 'string') {\n    const {tensors2D, outShape} = computeTensors2D(inputs, axis, backend);\n    const inputsValShapes = tensors2D.map(t => {\n      return {vals: backend.readSync(t.dataId), shape: t.shape};\n    });\n    const simplyConcat = tensors2D[0].shape[0] === 1;\n    const outVals =\n        concatImplCPU(inputsValShapes, outShape, dtype, simplyConcat);\n\n    const finalOutShape =\n        backend_util.computeOutShape(inputs.map(t => t.shape), axis);\n\n    const outInfo = backend.makeTensorInfo(finalOutShape, dtype, outVals);\n\n    tensors2D.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n    return outInfo;\n  }\n\n  if (inputs.length > env().getNumber('WEBGL_MAX_TEXTURES_IN_SHADER')) {\n    const midIndex = Math.floor(inputs.length / 2);\n    const leftSide = concatImpl(inputs.slice(0, midIndex), axis, backend);\n    const rightSide = concatImpl(inputs.slice(midIndex), axis, backend);\n\n    const result = concatImpl([leftSide, rightSide], axis, backend);\n\n    backend.disposeIntermediateTensorInfo(leftSide);\n    backend.disposeIntermediateTensorInfo(rightSide);\n\n    return result;\n  }\n\n  if (env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') &&\n      inputs[0].shape.length > 1) {\n    const program = new ConcatPackedProgram(inputs.map(t => t.shape), axis);\n    return backend.runWebGLProgram(program, inputs, dtype);\n  }\n\n  const {tensors2D, outShape} = computeTensors2D(inputs, axis, backend);\n  const program =\n      new ConcatProgram(tensors2D.map(t => t.shape as [number, number]));\n  const result = backend.runWebGLProgram(program, tensors2D, dtype);\n\n  tensors2D.forEach(r => backend.disposeIntermediateTensorInfo(r));\n  const reshapedResult =\n      reshape({inputs: {x: result}, attrs: {shape: outShape}, backend});\n  backend.disposeIntermediateTensorInfo(result);\n\n  return reshapedResult;\n}\n\nfunction computeTensors2D(\n    inputs: ConcatInputs, axis: number, backend: MathBackendWebGL) {\n  // Any concat of n-dimensional tensors across any axis can be reduced to\n  // a concatenation of two-dimensional tensors across the axis 1 by first\n  // partitioning the axes of the original tensors into those less than the\n  // axis to be concatenated and the rest. Then reshape the tensors\n  // into a two-dimensional tensor by collapsing these two sets of axes and\n  // concatenate the resulting matrices across the axis 1, finally reshaping\n  // the result to have the proper shape.\n  const outShape = backend_util.computeOutShape(inputs.map(t => t.shape), axis);\n  const tensors2D = inputs.map(\n      x => reshape({\n        inputs: {x},\n        attrs: {shape: [-1, util.sizeFromShape(x.shape.slice(axis))]},\n        backend\n      }));\n\n  return {tensors2D, outShape};\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Concat, ConcatAttrs, ConcatInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {concatImpl} from './Concat_impl';\nimport {identity} from './Identity';\n\nexport function concat(\n    args:\n        {inputs: ConcatInputs, attrs: ConcatAttrs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, inputs[0].shape)[0];\n  const outShape =\n      backend_util.computeOutShape(inputs.map(t => t.shape), $axis);\n\n  if (util.sizeFromShape(outShape) === 0) {\n    return backend.makeTensorInfo(outShape, inputs[0].dtype, []);\n  }\n\n  // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n  const $inputs = inputs.filter(t => util.sizeFromShape(t.shape) > 0);\n  if ($inputs.length === 1) {\n    return identity({inputs: {x: $inputs[0]}, backend});\n  }\n\n  const shapes = $inputs.map(t => t.shape);\n  backend_util.assertParamsConsistent(shapes, $axis);\n\n  return concatImpl($inputs, $axis, backend);\n}\n\nexport const concatConfig: KernelConfig = {\n  kernelName: Concat,\n  backendName: 'webgl',\n  kernelFunc: concat as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Conv2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, addBias = false,\n      activation: string = null, hasPreluActivationWeights = false,\n      hasLeakyreluAlpha = false) {\n    this.outputShape = convInfo.outShape;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n\n    const inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;\n    const inputDepthVec4Remainder = convInfo.inChannels % 4;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n    const rowDim = isChannelsLast ? 1 : 2;\n    const colDim = isChannelsLast ? 2 : 3;\n    const channelDim = isChannelsLast ? 3 : 1;\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivationWeights) {\n        activationSnippet = `float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else if (hasLeakyreluAlpha) {\n        activationSnippet = `float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `\n          float activation(float x) {\n            ${activation}\n          }\n        `;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivationWeights) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    if (hasLeakyreluAlpha) {\n      this.variableNames.push('leakyreluAlpha');\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${channelDim}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${rowDim}], coords[${colDim}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          int xR = xRCorner + wR * ${dilationHeight};\n\n          if (xR < 0 || xR >= ${convInfo.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            int xC = xCCorner + wC * ${dilationWidth};\n\n            if (xC < 0 || xC >= ${convInfo.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${inputDepthNearestVec4}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${inputDepthVec4Remainder === 1}) {\n\n              if (${isChannelsLast}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${inputDepthNearestVec4}) *\n                    getW(wR, wC, ${inputDepthNearestVec4}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${inputDepthNearestVec4}, xR, xC) *\n                    getW(wR, wC, ${inputDepthNearestVec4}, d2);\n              }\n\n            } else if (${inputDepthVec4Remainder === 2}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${inputDepthNearestVec4}, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 1, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${inputDepthNearestVec4}, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${inputDepthVec4Remainder === 3}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${inputDepthNearestVec4}, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 1, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 2, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 1),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${inputDepthNearestVec4}, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 1, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n}\n\nexport class Conv3DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.outShape;\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n\n    const inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;\n    const inputDepthVec4Remainder = convInfo.inChannels % 4;\n\n    this.userCode = `\n      const ivec3 strides = ivec3(${strideDepth}, ${strideHeight}, ${\n        strideWidth});\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${filterDepth}; wF++) {\n          int xF = xFCorner + wF * ${dilationDepth};\n\n          if (xF < 0 || xF >= ${convInfo.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${filterHeight}; wR++) {\n            int xR = xRCorner + wR * ${dilationHeight};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${filterWidth}; wC++) {\n              int xC = xCCorner + wC * ${dilationWidth};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${inputDepthNearestVec4}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${inputDepthVec4Remainder === 1}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}) *\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2);\n              } else if (${inputDepthVec4Remainder === 2}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${inputDepthVec4Remainder === 3}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 1),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 1, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Im2ColPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      outputShape: number[], inputShape: number[],\n      convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = outputShape;\n\n    const {\n      filterWidth,\n      inChannels,\n      strideWidth,\n      strideHeight,\n      padInfo,\n      outWidth,\n      dilationWidth,\n      dilationHeight,\n      dataFormat\n    } = convInfo;\n    const {left, top} = padInfo;\n    const itemsPerBlockRow = inChannels * filterWidth;\n    const glsl = getGlslDifferences();\n    const isChannelsLast = dataFormat === 'channelsLast';\n    const rowDim = isChannelsLast ? 0 : 1;\n    const colDim = isChannelsLast ? 1 : 2;\n\n    let unrolled = ``;\n\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        unrolled += `\n          blockIndex = rc.y + ${col};\n          pos = rc.x + ${row};\n\n          if(blockIndex < ${outputShape[1]} && pos < ${outputShape[0]}) {\n            offsetY = int(blockIndex / (${outWidth})) * ${strideHeight} - ${\n            top};\n            d0 = offsetY + ${dilationHeight} * (pos / ${itemsPerBlockRow});\n\n            if(d0 < ${inputShape[rowDim]} && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), ${outWidth}.) * ${\n            strideWidth}. - ${left}.);\n              d1 = offsetX + ${dilationWidth} * (int(mod(float(pos), ${\n            itemsPerBlockRow}.) / ${inChannels}.));\n\n              if(d1 < ${inputShape[colDim]} && d1 >= 0) {\n\n                ch = int(mod(float(pos), ${inChannels}.));\n\n                if (${isChannelsLast}) {\n                  innerDims = vec2(d1, ch);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;\n      }\n    }\n\n    this.userCode = `\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${unrolled}\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Im2ColPackedProgram} from '../im2col_packed_gpu';\nimport {mapActivationToShaderProgram} from '../kernel_utils/kernel_funcs_utils';\nimport {MatMulPackedProgram} from '../mulmat_packed_gpu';\nimport * as webgl_util from '../webgl_util';\n\nimport {batchMatMulImpl, MATMUL_SHARED_DIM_THRESHOLD} from './BatchMatMul_impl';\nimport {identity} from './Identity';\nimport {reshape} from './Reshape';\n\ntype Conv2DConfig = {\n  x: TensorInfo,\n  filter: TensorInfo,\n  convInfo: backend_util.Conv2DInfo,\n  backend: MathBackendWebGL,\n  bias?: TensorInfo,\n  preluActivationWeights?: TensorInfo,\n  leakyreluAlpha?: number,\n  activation?: backend_util.Activation\n};\n\n// For 1x1 kernels that iterate through every point in the input, convolution\n// can be expressed as matrix multiplication (without need for memory\n// remapping).\nexport function conv2dByMatMul({\n  x,\n  filter,\n  convInfo,\n  backend,\n  bias = null,\n  preluActivationWeights = null,\n  leakyreluAlpha = 0,\n  activation = null\n}: Conv2DConfig) {\n  // Reshapes conv2D input to 2D tensors, uses matMul and then reshape the\n  // result from 2D to 4D.\n  const xShape = x.shape;\n  const xTexData = backend.texData.get(x.dataId);\n  const sharedMatMulDim = convInfo.inChannels;\n  const outerShapeX = xShape[0] * xShape[1] * xShape[2];\n  const outerShapeFilter = convInfo.outChannels;\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n  const transposeA = false;\n  const transposeB = false;\n\n  let out: TensorInfo;\n  const intermediates: TensorInfo[] = [];\n\n  // TODO: Once reduction ops are packed, batchMatMul will always be packed\n  // and we can remove this condition.\n  const batchMatMulWillBeUnpacked =\n      (outerShapeX === 1 || outerShapeFilter === 1) &&\n      sharedMatMulDim > MATMUL_SHARED_DIM_THRESHOLD;\n  const reshapeWillBeExpensive = xShape[2] % 2 !== 0 && !!xTexData.isPacked;\n\n  if (batchMatMulWillBeUnpacked || !env().getBool('WEBGL_LAZILY_UNPACK') ||\n      !env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ||\n      !reshapeWillBeExpensive) {\n    const targetShape = isChannelsLast ? xShape[0] * xShape[1] * xShape[2] :\n                                         xShape[0] * xShape[2] * xShape[3];\n    const xReshaped = reshape({\n      inputs: {x},\n      backend,\n      attrs: {shape: [1, targetShape, convInfo.inChannels]}\n    });\n    const filterReshaped = reshape({\n      inputs: {x: filter},\n      backend,\n      attrs: {shape: [1, convInfo.inChannels, convInfo.outChannels]}\n    });\n    const result = batchMatMulImpl({\n      a: xReshaped,\n      b: filterReshaped,\n      transposeA,\n      transposeB,\n      backend,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n\n    out = reshape(\n        {inputs: {x: result}, backend, attrs: {shape: convInfo.outShape}});\n\n    intermediates.push(xReshaped);\n    intermediates.push(filterReshaped);\n    intermediates.push(result);\n  } else {\n    // Following optimization is specific to packed |x| with odd row count\n    // (For example, in channelLast mode, 'row count' refers to x.shape[2]):\n    // we avoid expensive packed 2x2 reshape by padding row count to next,\n    // even number. When x.shape[2] is odd, the result of packed batchMatMul is\n    // the same (has the same texture layout and and values in the texture) as\n    // it is for even x.shape[2] + 1. We make the odd-rows tensor to look like\n    // even-rows tensor before the operation and, after the batchMatMul,\n    // fix the even-rows result to have odd number of rows.\n    const targetShape = isChannelsLast ?\n        xShape[0] * xShape[1] * (xShape[2] + 1) :\n        xShape[0] * xShape[2] * (xShape[3] + 1);\n    const xReshaped: TensorInfo = {\n      dataId: x.dataId,\n      shape: [1, targetShape, convInfo.inChannels],\n      dtype: x.dtype\n    };\n    // xTexData.shape gets referenced from GPGPUBinary.inShapeInfos.\n    // Decrementing row count, after batchMatMul->...->compileProgram leads to\n    // invalid row count within the reference in GPGPUBinary.inShapeInfos.\n    // Alternative fix would be to provide a copy to GPGPUBinary.inShapeInfos\n    // in compileProgram method, but that would affect compilation of all\n    // programs - instead, provide a copy here, with even row count, before\n    // calling batchMatMul->...->compileProgram and after that, the original\n    // xTexData.shape is restored.\n    const originalXTexDataShape = xTexData.shape;\n    xTexData.shape = xTexData.shape.slice();\n    xTexData.shape[xTexData.shape.length - 2]++;\n    util.assert(\n        webgl_util.isReshapeFree(xTexData.shape, xReshaped.shape),\n        () => `packed reshape ${xTexData.shape} to ${\n            xReshaped.shape} isn't free`);\n    const filterReshaped = reshape({\n      inputs: {x: filter},\n      backend,\n      attrs: {shape: [1, convInfo.inChannels, convInfo.outChannels]}\n    });\n    intermediates.push(filterReshaped);\n    const pointwiseConv = batchMatMulImpl({\n      a: xReshaped,\n      b: filterReshaped,\n      backend,\n      transposeA,\n      transposeB,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n\n    const pointwiseConvTexData = backend.texData.get(pointwiseConv.dataId);\n    util.assert(\n        pointwiseConvTexData.isPacked,\n        () => 'batchMatMul result is expected to be packed');\n    // Restore the input shape to original.\n    xTexData.shape = originalXTexDataShape;\n    // Set the output shape - there is no need for expensive reshape as data\n    // layout is already correct.\n    pointwiseConvTexData.shape = convInfo.outShape;\n\n    out = identity({inputs: {x: pointwiseConv}, backend});\n    out.shape = convInfo.outShape;\n\n    intermediates.push(pointwiseConv);\n  }\n\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n\n  return out;\n}\n\n// Implements the im2row algorithm as outlined in \"High Performance\n// Convolutional Neural Networks for Document Processing\" (Suvisoft, 2006)\nexport function conv2dWithIm2Row({\n  x,\n  filter,\n  convInfo,\n  backend,\n  bias = null,\n  preluActivationWeights = null,\n  leakyreluAlpha = 0,\n  activation = null\n}: Conv2DConfig) {\n  // Rearranges conv2d input so each block to be convolved over forms the\n  // column of a new matrix with shape [filterWidth * filterHeight *\n  // inChannels, outHeight * outWidth]. The filter is also rearranged so each\n  // output channel forms a row of a new matrix with shape [outChannels,\n  // filterWidth * filterHeight * inChannels]. The convolution is then\n  // computed by multiplying these matrices and reshaping the result.\n  const {\n    filterWidth,\n    filterHeight,\n    inChannels,\n    outWidth,\n    outHeight,\n    dataFormat\n  } = convInfo;\n\n  const isChannelsLast = dataFormat === 'channelsLast';\n\n  const sharedDim = filterWidth * filterHeight * inChannels;\n  const numCols = outHeight * outWidth;\n  const x2ColShape = [sharedDim, numCols];\n  const transposeA = true;\n  const transposeB = false;\n\n  const intermediates: TensorInfo[] = [];\n\n  const xSqueezed =\n      reshape({inputs: {x}, backend, attrs: {shape: x.shape.slice(1)}});\n  const w2Row = reshape({\n    inputs: {x: filter},\n    backend,\n    attrs: {shape: [1, sharedDim, util.sizeFromShape(filter.shape) / sharedDim]}\n  });\n\n  intermediates.push(xSqueezed);\n  intermediates.push(w2Row);\n\n  const im2ColProgram =\n      new Im2ColPackedProgram(x2ColShape, xSqueezed.shape, convInfo);\n  const im2Col = backend.runWebGLProgram(im2ColProgram, [xSqueezed], 'float32');\n  const im2ColReshaped = reshape({\n    inputs: {x: im2Col},\n    backend,\n    attrs: {shape: [1, x2ColShape[0], x2ColShape[1]]}\n  });\n\n  intermediates.push(im2Col);\n  intermediates.push(im2ColReshaped);\n\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const hasLeakyreluAlpha = activation === 'leakyrelu';\n  const fusedActivation =\n      activation ? mapActivationToShaderProgram(activation, true) : null;\n  const matmulProgram = new MatMulPackedProgram(\n      im2ColReshaped.shape as [number, number, number],\n      w2Row.shape as [number, number, number],\n      [1, numCols, convInfo.outChannels], transposeA, transposeB, hasBias,\n      fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);\n  const inputs: TensorInfo[] = [im2ColReshaped, w2Row];\n  if (bias) {\n    inputs.push(bias);\n  }\n  if (hasPreluActivationWeights) {\n    inputs.push(preluActivationWeights);\n  }\n  if (hasLeakyreluAlpha) {\n    const $leakyreluAlpha = backend.makeTensorInfo(\n        [], 'float32',\n        util.createScalarValue(leakyreluAlpha as {} as 'float32', 'float32'));\n    inputs.push($leakyreluAlpha);\n    intermediates.push($leakyreluAlpha);\n  }\n  const product = backend.runWebGLProgram(matmulProgram, inputs, 'float32');\n\n  const outShape = isChannelsLast ?\n      [1, outHeight, outWidth, convInfo.outChannels] :\n      [1, convInfo.outChannels, outHeight, outWidth];\n  const out =\n      reshape({inputs: {x: product}, backend, attrs: {shape: outShape}});\n\n  intermediates.push(product);\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n\n  return out;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2D, Conv2DAttrs, Conv2DInputs, env, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv2DProgram} from '../conv_gpu';\nimport {conv2dByMatMul, conv2dWithIm2Row} from './Conv2D_impl';\nimport {reshape} from './Reshape';\n\nexport function conv2d(\n    args:\n        {inputs: Conv2DInputs, attrs: Conv2DAttrs, backend: MathBackendWebGL}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dataFormat, dilations, dimRoundingMode} = attrs;\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, dilations, pad,\n      dimRoundingMode, false /* depthwise */, $dataFormat);\n  let out: TensorInfo;\n\n  if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 &&\n      convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n      convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&\n      (convInfo.padInfo.type === 'SAME' || convInfo.padInfo.type === 'VALID')) {\n    out = conv2dByMatMul({x, filter, convInfo, backend});\n  } else if (env().getBool('WEBGL_CONV_IM2COL') && x.shape[0] === 1) {\n    out = conv2dWithIm2Row({x, filter, convInfo, backend});\n  } else {\n    const program = new Conv2DProgram(convInfo);\n    out = backend.runWebGLProgram(program, [x, filter], 'float32');\n  }\n\n  const outReshaped =\n      reshape({inputs: {x: out}, backend, attrs: {shape: convInfo.outShape}});\n  backend.disposeIntermediateTensorInfo(out);\n\n  return outReshaped;\n}\n\nexport const conv2DConfig: KernelConfig = {\n  kernelName: Conv2D,\n  backendName: 'webgl',\n  kernelFunc: conv2d as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Conv2DDerFilterProgram implements GPGPUProgram {\n  variableNames = ['x', 'dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.filterShape;\n\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n            int xR = wR + yR * ${strideHeight} - ${padTop};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n              int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              if (${isChannelsLast}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class Conv2DDerInputProgram implements GPGPUProgram {\n  variableNames = ['dy', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n    const padTop = filterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n\n    const rowDim = isChannelsLast ? 1 : 2;\n    const colDim = isChannelsLast ? 2 : 3;\n    const channelDim = isChannelsLast ? 3 : 1;\n\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${channelDim}];\n\n        ivec2 dyCorner = ivec2(coords[${rowDim}], coords[${colDim}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${filterHeight} - 1 - wR;\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${filterWidth} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${convInfo.outChannels}; d2++) {\n\n              if (${isChannelsLast}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class Conv3DDerFilterProgram implements GPGPUProgram {\n  variableNames = ['x', 'dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.filterShape;\n\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n\n    this.userCode = `\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yF = 0; yF < ${convInfo.outDepth}; yF++) {\n            int xF = wF + yF * ${strideDepth} - ${padFront};\n\n            if (xF < 0 || xF >= ${convInfo.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n              int xR = wR + yR * ${strideHeight} - ${padTop};\n\n              if (xR < 0 || xR >= ${convInfo.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n                int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n                if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class Conv3DDerInputProgram implements GPGPUProgram {\n  variableNames = ['dy', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n\n    const padFront = filterDepth - 1 - convInfo.padInfo.front;\n    const padTop = filterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n\n    this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${filterDepth}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${strideDepth}.0;\n\n          if (dyF < 0.0 || dyF >= ${convInfo.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${filterDepth} - 1 - wF;\n\n          for (int wR = 0; wR < ${filterHeight}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${filterHeight} - 1 - wR;\n\n            for (int wC = 0; wC < ${filterWidth}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${filterWidth} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${convInfo.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropFilter, Conv2DBackpropFilterAttrs, Conv2DBackpropFilterInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv2DDerFilterProgram} from '../conv_backprop_gpu';\n\nexport function conv2DBackpropFilter(args: {\n  inputs: Conv2DBackpropFilterInputs,\n  attrs: Conv2DBackpropFilterAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, dataFormat, dimRoundingMode, filterShape} = attrs;\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad, dimRoundingMode, false /* depthwise */,\n      $dataFormat);\n\n  const program = new Conv2DDerFilterProgram(convInfo);\n  return backend.runWebGLProgram(program, [x, dy], 'float32');\n}\n\nexport const conv2DBackpropFilterConfig: KernelConfig = {\n  kernelName: Conv2DBackpropFilter,\n  backendName: 'webgl',\n  kernelFunc: conv2DBackpropFilter as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropInput, Conv2DBackpropInputAttrs, Conv2DBackpropInputInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv2DDerInputProgram} from '../conv_backprop_gpu';\n\nexport function conv2DBackpropInput(args: {\n  inputs: Conv2DBackpropInputInputs,\n  attrs: Conv2DBackpropInputAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {inputShape, strides, pad, dataFormat, dimRoundingMode} = attrs;\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      1 /* dilations */, pad, dimRoundingMode, false, $dataFormat);\n\n  const program = new Conv2DDerInputProgram(convInfo);\n  return backend.runWebGLProgram(program, [dy, filter], 'float32');\n}\n\nexport const conv2DBackpropInputConfig: KernelConfig = {\n  kernelName: Conv2DBackpropInput,\n  backendName: 'webgl',\n  kernelFunc: conv2DBackpropInput as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3D, Conv3DAttrs, Conv3DInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv3DProgram} from '../conv_gpu';\n\nexport function conv3D(\n    args:\n        {inputs: Conv3DInputs, attrs: Conv3DAttrs, backend: MathBackendWebGL}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations} = attrs;\n\n  const convInfo = backend_util.computeConv3DInfo(\n      x.shape as [number, number, number, number, number],\n      filter.shape as [number, number, number, number, number], strides,\n      dilations, pad);\n\n  const program = new Conv3DProgram(convInfo);\n  return backend.runWebGLProgram(program, [x, filter], 'float32');\n}\n\nexport const conv3DConfig: KernelConfig = {\n  kernelName: Conv3D,\n  backendName: 'webgl',\n  kernelFunc: conv3D as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3DBackpropFilterV2, Conv3DBackpropFilterV2Attrs, Conv3DBackpropFilterV2Inputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv3DDerFilterProgram} from '../conv_backprop_gpu';\n\nexport function conv3DBackpropFilterV2(args: {\n  inputs: Conv3DBackpropFilterV2Inputs,\n  attrs: Conv3DBackpropFilterV2Attrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, filterShape} = attrs;\n\n  const convInfo = backend_util.computeConv3DInfo(\n      x.shape as [number, number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad);\n\n  const program = new Conv3DDerFilterProgram(convInfo);\n  return backend.runWebGLProgram(program, [x, dy], 'float32');\n}\n\nexport const conv3DBackpropFilterV2Config: KernelConfig = {\n  kernelName: Conv3DBackpropFilterV2,\n  backendName: 'webgl',\n  kernelFunc: conv3DBackpropFilterV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3DBackpropInputV2, Conv3DBackpropInputV2Attrs, Conv3DBackpropInputV2Inputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv3DDerInputProgram} from '../conv_backprop_gpu';\n\nexport function conv3DBackpropInput(args: {\n  inputs: Conv3DBackpropInputV2Inputs,\n  attrs: Conv3DBackpropInputV2Attrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {pad, strides, inputShape} = attrs;\n\n  const convInfo = backend_util.computeConv3DInfo(\n      inputShape, filter.shape as [number, number, number, number, number],\n      strides, 1 /* dilations */, pad);\n\n  const program = new Conv3DDerInputProgram(convInfo);\n  return backend.runWebGLProgram(program, [dy, filter], 'float32');\n}\n\nexport const conv3DBackpropInputConfig: KernelConfig = {\n  kernelName: Conv3DBackpropInputV2,\n  backendName: 'webgl',\n  kernelFunc: conv3DBackpropInput as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cos, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst COS = CHECK_NAN_SNIPPET_UNARY + `\n  return cos(x);\n`;\n\nexport const cos = unaryKernelFunc({opSnippet: COS});\n\nexport const cosConfig: KernelConfig = {\n  kernelName: Cos,\n  backendName: 'webgl',\n  kernelFunc: cos,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cosh, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst COSH = `\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n`;\n\nexport const cosh = unaryKernelFunc({opSnippet: COSH});\n\nexport const coshConfig: KernelConfig = {\n  kernelName: Cosh,\n  backendName: 'webgl',\n  kernelFunc: cosh,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class CropAndResizeProgram implements GPGPUProgram {\n  variableNames = ['Image', 'Boxes', 'BoxInd'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      imageShape: [number, number, number, number], boxShape: [number, number],\n      cropSize: [number, number], method: 'bilinear'|'nearest',\n      extrapolationValue: number) {\n    const [batch, imageHeight, imageWidth, depth] = imageShape;\n    const [numBoxes, ] = boxShape;\n    const [cropHeight, cropWidth] = cropSize;\n    this.outputShape = [numBoxes, cropHeight, cropWidth, depth];\n    const methodId = method === 'bilinear' ? 1 : 0;\n\n    const [inputHeightFloat, inputWidthFloat] =\n        [`${imageHeight - 1}.0`, `${imageWidth - 1}.0`];\n\n    const [heightRatio, heightScale, inY] = cropHeight > 1 ?\n        [\n          `${(imageHeight - 1) / (cropHeight - 1)}`,\n          '(y2-y1) * height_ratio',\n          `y1*${inputHeightFloat} + float(y)*(height_scale)`,\n        ] :\n        [\n          '0.0',\n          '0.0',\n          `0.5 * (y1+y2) * ${inputHeightFloat}`,\n        ];\n    const [widthRatio, widthScale, inX] = cropWidth > 1 ?\n        [\n          `${(imageWidth - 1) / (cropWidth - 1)}`,\n          '(x2-x1) * width_ratio',\n          `x1*${inputWidthFloat} + float(x)*(width_scale)`,\n        ] :\n        [\n          '0.0',\n          '0.0',\n          `0.5 * (x1+x2) * ${inputWidthFloat}`,\n        ];\n\n    // Reference implementation\n    // tslint:disable-next-line:max-line-length\n    // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op_gpu.cu.cc\n    this.userCode = `\n      const float height_ratio = float(${heightRatio});\n      const float width_ratio = float(${widthRatio});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${batch}) {\n          return;\n        }\n\n        float height_scale = ${heightScale};\n        float width_scale = ${widthScale};\n\n        float in_y = ${inY};\n        if( in_y < 0.0 || in_y > ${inputHeightFloat} ) {\n          setOutput(float(${extrapolationValue}));\n          return;\n        }\n        float in_x = ${inX};\n        if( in_x < 0.0 || in_x > ${inputWidthFloat} ) {\n          setOutput(float(${extrapolationValue}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${methodId} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {CropAndResize, CropAndResizeAttrs, CropAndResizeInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {CropAndResizeProgram} from '../crop_and_resize_gpu';\n\nexport const cropAndResize = (args: {\n  inputs: CropAndResizeInputs,\n  backend: MathBackendWebGL,\n  attrs: CropAndResizeAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {image, boxes, boxInd} = inputs;\n  const {cropSize, method, extrapolationValue} = attrs;\n\n  const program = new CropAndResizeProgram(\n      image.shape as [number, number, number, number],\n      boxes.shape as [number, number], cropSize, method, extrapolationValue);\n  return backend.runWebGLProgram(program, [image, boxes, boxInd], 'float32');\n};\n\nexport const cropAndResizeConfig: KernelConfig = {\n  kernelName: CropAndResize,\n  backendName: 'webgl',\n  kernelFunc: cropAndResize as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {GPGPUContext} from './gpgpu_context';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class CumSumProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  // Caching uniform location for speed.\n  index: WebGLUniformLocation;\n\n  constructor(shape: number[], exclusive: boolean, reverse: boolean) {\n    this.outputShape = shape;\n    const rank = shape.length;\n    const val = exclusive ? '0.0' : `getX(${getCoords(rank, 'coords')})`;\n    const length = shape[shape.length - 1];\n    let condition = '';\n    let idxString = '';\n    // When exclusive is set, the cumsum op becomes roll op that copies the\n    // value from the previous index based on the direction specified by the\n    // reverse flag.\n    if (exclusive) {\n      condition = reverse ? `end != ${length - 1}` : 'end != 0';\n      idxString = reverse ? 'end + 1' : 'end - 1';\n    } else {\n      condition = reverse ? `end + pow2 < ${length}` : 'end >= pow2';\n      idxString = (reverse ? 'end + pow2' : 'end - pow2');\n    }\n\n    this.userCode = `\n      uniform float index;\n      void main() {\n        ${getCoordsDataType(rank)} coords = getOutputCoords();\n        int end = ${getFinalCoord(rank, 'coords')};\n        float val = ${val};\n        int pow2 = int(pow(2.0, index));\n        if (${condition}) {\n          int idx = ${idxString};\n          ${getFinalCoord(rank, 'coords')} = idx;\n          val += getX(${getCoords(rank, 'coords')});\n        }\n        setOutput(val);\n      }\n    `;\n  }\n\n  getCustomSetupFunc(index: number) {\n    return (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => {\n      if (this.index == null) {\n        this.index = gpgpu.getUniformLocation(webGLProgram, 'index');\n      }\n      gpgpu.gl.uniform1f(this.index, index);\n    };\n  }\n}\n\nfunction getCoords(rank: number, name: string): string {\n  if (rank === 1) {\n    return `${name}`;\n  } else if (rank === 2) {\n    return `${name}.x, ${name}.y`;\n  } else if (rank === 3) {\n    return `${name}.x, ${name}.y, ${name}.z`;\n  } else if (rank === 4) {\n    return `${name}.x, ${name}.y, ${name}.z, ${name}.w`;\n  } else {\n    throw Error(`Cumulative sum for rank ${rank} is not yet supported`);\n  }\n}\n\nfunction getFinalCoord(rank: number, name: string): string {\n  if (rank === 1) {\n    return `${name}`;\n  } else if (rank === 2) {\n    return `${name}.y`;\n  } else if (rank === 3) {\n    return `${name}.z`;\n  } else if (rank === 4) {\n    return `${name}.w`;\n  } else {\n    throw Error(`Cumulative sum for rank ${rank} is not yet supported`);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Cumsum, CumsumAttrs, CumsumInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {CumSumProgram} from '../cumsum_gpu';\n\nimport {identity} from './Identity';\nimport {transpose} from './Transpose';\n\nexport function cumsum(\n    args:\n        {inputs: CumsumInputs, backend: MathBackendWebGL, attrs: CumsumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, exclusive, reverse} = attrs;\n\n  const xRank = x.shape.length;\n  const permutation = backend_util.getAxesPermutation([axis], xRank);\n  let permutedX = x;\n  if (permutation != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n  }\n  const permutedAxis = backend_util.getInnerMostAxes(1, xRank)[0];\n\n  if (permutedAxis !== xRank - 1) {\n    throw new Error(\n        `WebGL cumsum shader expects an inner-most axis=${\n            x.shape.length - 1} ` +\n        `but got axis=${axis}`);\n  }\n  const size = permutedX.shape[permutedAxis];\n  let result = identity({inputs: {x: permutedX}, backend});\n  // Use cumsum parallel algorithm, ref:\n  // https://developer.nvidia.com/gpugems/gpugems3/part-vi-gpu-computing/chapter-39-parallel-prefix-sum-scan-cuda\n\n  for (let i = 0; i <= Math.ceil(Math.log2(size)) - 1; i++) {\n    const program = new CumSumProgram(permutedX.shape, false, reverse);\n    const customSetup = program.getCustomSetupFunc(i);\n    const prevResult = result;\n    result =\n        backend.runWebGLProgram(program, [result], result.dtype, customSetup);\n    backend.disposeIntermediateTensorInfo(prevResult);\n  }\n  // For exclusive cumsum, shift the end result in the direction of sum\n  // and add 0 to the front index.\n  if (exclusive) {\n    const program = new CumSumProgram(permutedX.shape, exclusive, reverse);\n    const prevResult = result;\n    result = backend.runWebGLProgram(program, [result], result.dtype);\n    backend.disposeIntermediateTensorInfo(prevResult);\n  }\n\n  if (permutation != null) {\n    const reversePermutation = backend_util.getUndoAxesPermutation(permutation);\n    const reverseTransposedResult = transpose(\n        {inputs: {x: result}, backend, attrs: {perm: reversePermutation}});\n\n    backend.disposeIntermediateTensorInfo(result);\n    backend.disposeIntermediateTensorInfo(permutedX);\n\n    return reverseTransposedResult;\n  }\n\n  return result;\n}\n\nexport const cumsumConfig: KernelConfig = {\n  kernelName: Cumsum,\n  backendName: 'webgl',\n  kernelFunc: cumsum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DenseBincount, DenseBincountAttrs, DenseBincountInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {bincountImplCPU, bincountReduceImplCPU} from '../kernel_utils/shared';\n\nexport function denseBincount(args: {\n  inputs: DenseBincountInputs,\n  backend: MathBackendWebGL,\n  attrs: DenseBincountAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size, binaryOutput} = attrs;\n\n  if (x.shape.length === 1) {\n    const xVals = backend.readSync(x.dataId) as TypedArray;\n    const weightsVals = backend.readSync(weights.dataId) as TypedArray;\n\n    const outVals =\n        bincountImplCPU(xVals, weightsVals, weights.dtype, weights.shape, size);\n\n    return backend.makeTensorInfo([size], weights.dtype, outVals);\n  } else if (x.shape.length === 2) {\n    const xBuf = backend.bufferSync(x);\n    const weightsBuf = backend.bufferSync(weights);\n\n    const outBuf = bincountReduceImplCPU(xBuf, weightsBuf, size, binaryOutput);\n\n    return backend.makeTensorInfo(outBuf.shape, weights.dtype, outBuf.values);\n  }\n\n  throw new Error(\n      `Error in denseBincount: input must be at most rank 2, but got rank` +\n      `${x.shape.length}.`);\n}\n\nexport const denseBincountConfig: KernelConfig = {\n  kernelName: DenseBincount,\n  backendName: 'webgl',\n  kernelFunc: denseBincount as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DepthToSpaceProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[] = [];\n  userCode: string;\n  blockSize: number;\n  dataFormat: string;\n\n  constructor(\n      outputShape: number[], blockSize: number, dataFormat: 'NHWC'|'NCHW') {\n    this.outputShape = outputShape;\n    this.blockSize = blockSize;\n    this.dataFormat = dataFormat;\n    this.userCode = `\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${blockSize};\n      int offset_h = imod(h, ${blockSize});\n      int in_w = w / ${blockSize};\n      int offset_w = imod(w, ${blockSize});\n      int offset_d = (offset_h * ${blockSize} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `;\n  }\n\n  private getHeightCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[1]`;\n    } else {\n      return `coords[2]`;\n    }\n  }\n\n  private getWidthCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[2]`;\n    } else {\n      return `coords[3]`;\n    }\n  }\n\n  private getDepthCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[3]`;\n    } else {\n      return `coords[1]`;\n    }\n  }\n\n  private getOutputDepthSize(): number {\n    if (this.dataFormat === 'NHWC') {\n      return this.outputShape[3];\n    } else {\n      return this.outputShape[1];\n    }\n  }\n\n  private getInputSamplingString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `getX(b, in_h, in_w, in_d)`;\n    } else {\n      return `getX(b, in_d, in_h, in_w)`;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DepthToSpace, DepthToSpaceAttrs, DepthToSpaceInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthToSpaceProgram} from '../depth_to_space_gpu';\n\nexport function depthToSpace(args: {\n  inputs: DepthToSpaceInputs,\n  backend: MathBackendWebGL,\n  attrs: DepthToSpaceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockSize, dataFormat} = attrs;\n\n  util.assert(\n      blockSize > 1,\n      () => `blockSize should be > 1 for depthToSpace, but was: ${blockSize}`);\n\n  const batchSize = x.shape[0];\n  const inputHeight = (dataFormat === 'NHWC') ? x.shape[1] : x.shape[2];\n  const inputWidth = (dataFormat === 'NHWC') ? x.shape[2] : x.shape[3];\n  const inputDepth = (dataFormat === 'NHWC') ? x.shape[3] : x.shape[1];\n\n  const outputHeight = inputHeight * blockSize;\n  const outputWidth = inputWidth * blockSize;\n  const outputDepth = inputDepth / (blockSize * blockSize);\n\n  const outputShape = (dataFormat === 'NHWC') ?\n      [batchSize, outputHeight, outputWidth, outputDepth] :\n      [batchSize, outputDepth, outputHeight, outputWidth];\n\n  const program = new DepthToSpaceProgram(outputShape, blockSize, dataFormat);\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const depthToSpaceConfig: KernelConfig = {\n  kernelName: DepthToSpace,\n  backendName: 'webgl',\n  kernelFunc: depthToSpace as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DepthwiseConv2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, addBias = false,\n      activation: string = null, hasPreluActivation = false,\n      hasLeakyReluAlpha = false) {\n    this.outputShape = convInfo.outShape;\n\n    const xNumRows = convInfo.inHeight;\n    const xNumCols = convInfo.inWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivation) {\n        activationSnippet = `float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else if (hasLeakyReluAlpha) {\n        activationSnippet = `float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `\n          float activation(float x) {\n            ${activation}\n          }\n        `;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n    if (hasLeakyReluAlpha) {\n      this.variableNames.push('leakyreluAlpha');\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${channelMul};\n        int q = d2 - d1 * ${channelMul};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          int xR = xRCorner + wR * ${dilationHeight};\n\n          if (xR < 0 || xR >= ${xNumRows}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            int xC = xCCorner + wC * ${dilationWidth};\n\n            if (xC < 0 || xC >= ${xNumCols}) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DepthwiseConvPacked2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, addBias = false,\n      activation: string = null, hasPreluActivation = false,\n      hasLeakyReluAlpha = false) {\n    this.outputShape = convInfo.outShape;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n    const xNumRows = convInfo.inHeight;\n    const xNumCols = convInfo.inWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const texelsAcross = filterWidth;\n\n    let mainLoop = `\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;`;\n\n    for (let c = 0; c < filterWidth; c++) {\n      mainLoop += `\n          vec4 xTexelC${c * 2};\n          vec4 xC${c};`;\n    }\n\n    /**\n     * This vectorized implementation works by gathering the values needed for\n     * each output channel's dot product into vec4's and then multiplying them\n     * all together (this happens in the final double for-loop below). Most of\n     * the main loop consists of constructing these vec4's with the minimum\n     * number of texture2D calls, which means making use of all four returned\n     * values from a texture2D call at once.\n     */\n    for (let r = 0; r < filterHeight; r++) {\n      for (let c = 0; c < filterWidth; c++) {\n        mainLoop += `\n          xTexelC${c * 2} = vec4(0.0);\n          xC${c} = vec4(0.0);`;\n      }\n      mainLoop += `\n        xR = xRCorner + ${r * dilationHeight};\n        if (xR >=0 && xR < ${xNumRows}) {\n      `;\n\n      for (let texelC = 0; texelC < (texelsAcross / 2 + 1); texelC++) {\n        const c = texelC * 2;\n\n        mainLoop += `\n          xC = xCCorner + ${c * dilationWidth};\n          `;\n\n        if (strideWidth === 1) {\n          if (c < filterWidth) {\n            // If padding is odd, the outer texels have to be composed.\n            if (padLeft % 2 === 1) {\n              // TODO: Ensure vec4 previous does not result in redundant sample,\n              // and avoid setting xTexelRC's that exceed the boundary in the\n              // first place rather than resetting them to vec4(0)).\n\n              // To compute xCOffset:\n              // - If padding is odd, we must add 1 to ensure we ask for an\n              // even-numbered row.\n              // - We subtract 2 to access the previous texel.\n\n              mainLoop += `\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                  xTexelC${c} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= ${xNumCols}) {\n                    xTexelC${c}.zw = vec2(0.0);\n                  }\n                }\n              `;\n              // This texel has been read in previous iteration if the dilation\n              // is 1.\n              if (dilationWidth === 1 && c > 0) {\n                mainLoop += `\n                xC${c} = vec4(xTexelC${c - 2}.zw, xTexelC${c}.xy);\n                `;\n              } else {\n                mainLoop += `\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= ${xNumCols}) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${c} = vec4(previous.zw, xTexelC${c}.xy);\n                  } else {\n                    xC${c} = vec4(0.0, 0.0, xTexelC${c}.xy);\n                  }\n                  `;\n              }\n            } else {\n              // Padding is even, so xRC corresponds to a single texel.\n              mainLoop += `\n                if (xC >= 0 && xC < ${xNumCols}) {\n                  xTexelC${c} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= ${xNumCols}) {\n                    xTexelC${c}.zw = vec2(0.0);\n                  }\n                }\n\n                xC${c} = xTexelC${c};\n                `;\n            }\n\n            if (c + 1 < filterWidth) {\n              // If dilation is even, the second entry should match the first\n              // (either both are composed or both are single samples). But if\n              // dilation is odd, then the second entry should be the opposite\n              // of the first (if the first is composed, the second is a single\n              // sample, and vice versa.)\n\n              const nextTexelOffset = padLeft % 2 === 0 ?\n                  util.nearestLargerEven(dilationWidth) :\n                  dilationWidth;\n\n              if ((dilationWidth % 2 === 0 && padLeft % 2 === 1) ||\n                  (dilationWidth % 2 !== 0 && padLeft % 2 !== 1)) {\n                mainLoop += `\n                  xCOffset = xC + ${padLeft % 2} + ${nextTexelOffset};\n\n                  if (xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                    xTexelC${c + 2} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= ${xNumCols}) {\n                      xTexelC${c + 2}.zw = vec2(0.0);\n                    }\n                  }\n                  `;\n\n                // If dilation > 1 then the xRC's will not be able to share any\n                // values, so each xRC will require two unique calls to getX.\n                if (dilationWidth > 1) {\n                  mainLoop += `\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                      xTexelC${c} = getX(batch, xR, xCOffset, d1);\n                    }\n                    `;\n                }\n\n                mainLoop += `\n                  xC${c + 1} = vec4(xTexelC${c}.zw, xTexelC${c + 2}.xy);\n                  `;\n              } else {\n                // If dialtion is 1 and padding is odd, we have already read the\n                // texel when constructing the previous x value. Here we can\n                // simply skip the texture read.\n                if (nextTexelOffset === 1) {\n                  mainLoop += `\n                    xC${c + 1} = xTexelC${c};\n                    `;\n                } else {\n                  mainLoop += `\n                    xCOffset = xC + ${nextTexelOffset};\n\n                    if (xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                      xTexelC${c + 2} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= ${xNumCols}) {\n                        xTexelC${c + 2}.zw = vec2(0.0);\n                      }\n                    }\n\n                    xC${c + 1} = xTexelC${c + 2};\n                    `;\n                }\n              }\n            }\n          }\n        } else {  // stride === 2\n          if (c < filterWidth) {\n            // Depending on whether padLeft is even or odd, we want either the\n            // xy or zw channels from X texels for xC${c}. If padLeft is\n            // even, xC${c + 1} is simply the zw channels of texels we've\n            // already sampled. But if padLeft is odd, xC{$c + 1}.zw will\n            // need to come from the xy channels of a new texel, hence the `\n            // vec4\n            // final` initialized below.\n            if (padLeft % 2 === 1) {\n              mainLoop += `\n                xCOffset = xC + 1 - ${strideWidth};\n                if(xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                  xTexelC${c} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= ${xNumCols}) {\n                    xTexelC${c}.zw = vec2(0.0);\n                  }\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < ${xNumCols}) {\n                  xTexelC${c + 2} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= ${xNumCols}) {\n                    xTexelC${c + 2}.zw = vec2(0.0);\n                  }\n                }\n\n                xC${c} = vec4(xTexelC${c}.zw, xTexelC${c + 2}.zw);\n              `;\n\n              if (c + 1 < filterWidth) {\n                mainLoop += `\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + ${strideWidth};\n                  if(xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${c + 1} = vec4(xTexelC${c + 2}.xy, final.xy);\n                `;\n              }\n            } else {\n              mainLoop += `\n                if(xC >= 0 && xC < ${xNumCols}) {\n                  xTexelC${c} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= ${xNumCols}) {\n                    xTexelC${c}.zw = vec2(0.0);\n                  }\n                }\n\n                xCOffset = xC + ${strideWidth};\n                if(xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                  xTexelC${c + 2} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= ${xNumCols}) {\n                    xTexelC${c + 2}.zw = vec2(0.);\n                  }\n                }\n\n                xC${c} = vec4(\n                  xTexelC${c}.xy, xTexelC${c + 2}.xy);\n              `;\n\n              if (c + 1 < filterWidth) {\n                mainLoop += `\n                  xC${c + 1} = vec4(xTexelC${c}.zw, xTexelC${c + 2}.zw);\n                `;\n              }\n            }\n          }\n        }\n\n        // localize the dotProd accumulation within the loop, the theory is for\n        // GPU with limited cache, accumulate sum across large amount of\n        // veriables will cause lots of cache misses. (i.e. 5x5 filter will have\n        // 50 variables)\n        if (c < filterWidth) {\n          mainLoop += `\n            wTexel = getW(${r}, ${c}, d1, q);\n            dotProd += xC${c} * vec4(wTexel.xz, wTexel.xz);\n          `;\n\n          if (c + 1 < filterWidth) {\n            mainLoop += `\n              wTexel = getW(${r}, ${c + 1}, d1, q);\n              dotProd += xC${c + 1} * vec4(wTexel.xz, wTexel.xz);\n            `;\n          }\n        }\n      }\n      mainLoop += `\n        }\n      `;\n    }\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivation) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else if (hasLeakyReluAlpha) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `vec4 activation(vec4 x) {\n          ${activation}\n        }`;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n    if (hasLeakyReluAlpha) {\n      this.variableNames.push('leakyreluAlpha');\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${channelMul};\n        int q = d2 - d1 * ${channelMul};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${mainLoop}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNative, DepthwiseConv2dNativeAttrs, DepthwiseConv2dNativeInputs, env, KernelConfig, KernelFunc, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthwiseConv2DProgram} from '../conv_gpu_depthwise';\nimport {DepthwiseConvPacked2DProgram} from '../conv_packed_gpu_depthwise';\n\nexport function depthwiseConv2dNative(args: {\n  inputs: DepthwiseConv2dNativeInputs,\n  attrs: DepthwiseConv2dNativeAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations, dimRoundingMode} = attrs;\n\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, $dilations),\n      () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n          `1. Got strides ${strides} and dilations '${$dilations}'`);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, $dilations,\n      pad, dimRoundingMode, true /* depthwise */);\n\n  let program: DepthwiseConv2DProgram|DepthwiseConvPacked2DProgram;\n  if (env().getBool('WEBGL_PACK_DEPTHWISECONV') && convInfo.strideWidth <= 2 &&\n      convInfo.outChannels / convInfo.inChannels === 1) {\n    program = new DepthwiseConvPacked2DProgram(convInfo);\n  } else {\n    program = new DepthwiseConv2DProgram(convInfo);\n  }\n\n  return backend.runWebGLProgram(program, [x, filter], 'float32');\n}\n\nexport const depthwiseConv2dNativeConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNative,\n  backendName: 'webgl',\n  kernelFunc: depthwiseConv2dNative as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DepthwiseConv2DDerFilterProgram implements GPGPUProgram {\n  variableNames = ['x', 'dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.filterShape;\n\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${channelMul} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n            int xR = wR + yR * ${strideHeight} - ${padTop};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n              int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class DepthwiseConv2DDerInputProgram implements GPGPUProgram {\n  variableNames = ['dy', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n\n    const padTop = filterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${filterHeight} - 1 - wR;\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${filterWidth} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${channelMul}; dm++) {\n              int d2 = d1 * ${channelMul} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropFilter, DepthwiseConv2dNativeBackpropFilterAttrs, DepthwiseConv2dNativeBackpropFilterInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthwiseConv2DDerFilterProgram} from '../conv_backprop_gpu_depthwise';\n\nexport function depthwiseConv2dNativeBackpropFilter(args: {\n  inputs: DepthwiseConv2dNativeBackpropFilterInputs,\n  attrs: DepthwiseConv2dNativeBackpropFilterAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, filterShape} = attrs;\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const program = new DepthwiseConv2DDerFilterProgram(convInfo);\n  return backend.runWebGLProgram(program, [x, dy], 'float32');\n}\n\nexport const depthwiseConv2dNativeBackpropFilterConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropFilter,\n  backendName: 'webgl',\n  kernelFunc: depthwiseConv2dNativeBackpropFilter as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropInput, DepthwiseConv2dNativeBackpropInputAttrs, DepthwiseConv2dNativeBackpropInputInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthwiseConv2DDerInputProgram} from '../conv_backprop_gpu_depthwise';\n\nexport function depthwiseConv2dNativeBackpropInput(args: {\n  inputs: DepthwiseConv2dNativeBackpropInputInputs,\n  attrs: DepthwiseConv2dNativeBackpropInputAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, inputShape} = attrs;\n\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const program = new DepthwiseConv2DDerInputProgram(convInfo);\n  return backend.runWebGLProgram(program, [dy, filter], 'float32');\n}\n\nexport const depthwiseConv2dNativeBackpropInputConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropInput,\n  backendName: 'webgl',\n  kernelFunc: depthwiseConv2dNativeBackpropInput as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DiagProgram implements GPGPUProgram {\n  variableNames = ['X'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(size: number) {\n    this.outputShape = [size, size];\n    this.userCode = `\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Diag, DiagInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DiagProgram} from '../diag_gpu';\nimport {reshape} from './Reshape';\n\nexport function diag(args: {inputs: DiagInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  const outShape = [...x.shape, ...x.shape];\n  const xSize = util.sizeFromShape(x.shape);\n\n  const flat = reshape({inputs: {x}, backend, attrs: {shape: [xSize]}});\n\n  const program = new DiagProgram(xSize);\n  const res = backend.runWebGLProgram(program, [flat], flat.dtype);\n\n  const out = reshape({inputs: {x: res}, backend, attrs: {shape: outShape}});\n\n  backend.disposeIntermediateTensorInfo(flat);\n  backend.disposeIntermediateTensorInfo(res);\n\n  return out;\n}\n\nexport const diagConfig: KernelConfig = {\n  kernelName: Diag,\n  backendName: 'webgl',\n  kernelFunc: diag as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Dilation2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.outShape;\n\n    const {\n      inHeight,\n      inWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth\n    } = convInfo;\n\n    const {top: padTop, left: padLeft} = padInfo;\n\n    this.userCode = `\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${filterHeight}; h++) {\n          int hIn = hBeg + h * ${dilationHeight};\n\n          if (hIn >= 0 && hIn < ${inHeight}) {\n            for (int w = 0; w < ${filterWidth}; w++) {\n              int wIn = wBeg + w * ${dilationWidth};\n\n              if (wIn >= 0 && wIn < ${inWidth}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2D, Dilation2DAttrs, Dilation2DInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Dilation2DProgram} from '../dilation_gpu';\nimport {reshape} from './Reshape';\n\nexport function dilation2D(args: {\n  inputs: Dilation2DInputs,\n  attrs: Dilation2DAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations} = attrs;\n\n  const convInfo = backend_util.computeDilation2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number], strides, pad,\n      'NHWC' /* dataFormat */, dilations);\n  let out: TensorInfo;\n\n  const program = new Dilation2DProgram(convInfo);\n  out = backend.runWebGLProgram(program, [x, filter], 'float32');\n\n  const outReshaped =\n      reshape({inputs: {x: out}, backend, attrs: {shape: convInfo.outShape}});\n  backend.disposeIntermediateTensorInfo(out);\n\n  return outReshaped;\n}\n\nexport const dilation2DConfig: KernelConfig = {\n  kernelName: Dilation2D,\n  backendName: 'webgl',\n  kernelFunc: dilation2D as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Einsum, EinsumAttrs, EinsumInputs, KernelConfig, KernelFunc, Tensor, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {multiply} from './Multiply';\nimport {reshape} from './Reshape';\nimport {sum} from './Sum';\nimport {transpose} from './Transpose';\n\nexport function einsum(\n    args:\n        {inputs: EinsumInputs, backend: MathBackendWebGL, attrs: EinsumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {equation} = attrs;\n  const tensors = inputs as Tensor[];\n\n  const {allDims, summedDims, idDims} =\n      backend_util.decodeEinsumEquation(equation, tensors.length);\n  backend_util.checkEinsumDimSizes(allDims.length, idDims, tensors);\n  const {path, steps} = backend_util.getEinsumComputePath(summedDims, idDims);\n\n  const nSteps = steps.length;\n  let out: TensorInfo|null = null;\n  let numDimsRemaining = allDims.length;\n  const tensorsToDispose: TensorInfo[] = [];\n  for (let i = 0; i < nSteps; ++i) {\n    for (const idTerm of steps[i]) {\n      const {permutationIndices: perm, expandDims: dimsToExpand} =\n          backend_util.getEinsumPermutation(numDimsRemaining, idDims[idTerm]);\n      let x: TensorInfo;\n      if (backend_util.isIdentityPermutation(perm)) {\n        x = tensors[idTerm];\n      } else {\n        x = transpose({inputs: {x: tensors[idTerm]}, backend, attrs: {perm}});\n        tensorsToDispose.push(x);\n      }\n      const targetShape: number[] = x.shape.slice();\n      for (let k = 0; k < dimsToExpand.length; ++k) {\n        targetShape.splice(dimsToExpand[k], 0, 1);\n      }\n\n      if (!util.arraysEqual(x.shape, targetShape)) {\n        x = reshape({inputs: {x}, backend, attrs: {shape: targetShape}});\n        tensorsToDispose.push(x);\n      }\n      if (out === null) {\n        out = x;\n      } else {\n        // tslint:disable-next-line: no-unnecessary-type-assertion\n        out = multiply({inputs: {a: x, b: out}, backend}) as TensorInfo;\n        tensorsToDispose.push(out);\n      }\n    }\n    if (i < nSteps - 1) {\n      if (path[i] >= 0) {\n        out = sum({\n          inputs: {x: out},\n          backend,\n          attrs: {\n            axis: path[i] - (allDims.length - numDimsRemaining),\n            keepDims: false\n          }\n        });\n        tensorsToDispose.push(out);\n      }\n      numDimsRemaining--;\n    }\n  }\n\n  // Clean up intermediate tensors.\n  for (const tensorInfo of tensorsToDispose) {\n    if (tensorInfo === out) {\n      continue;\n    }\n    backend.disposeIntermediateTensorInfo(tensorInfo);\n  }\n\n  return out;\n}\n\nexport const einsumConfig: KernelConfig = {\n  kernelName: Einsum,\n  backendName: 'webgl',\n  kernelFunc: einsum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Elu, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst ELU = `return (x >= 0.0) ? x : (exp(x) - 1.0);`;\n\nconst ELU_PACKED = `\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n`;\n\nconst elu = unaryKernelFunc({opSnippet: ELU, packedOpSnippet: ELU_PACKED});\n\nexport const eluConfig: KernelConfig = {\n  kernelName: Elu,\n  backendName: 'webgl',\n  kernelFunc: elu as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {EluGrad, EluGradInputs, env, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\n\nconst ELU_DER = `return (b >= 1.0) ? a : a * (b + 1.0);`;\nconst ELU_DER_PACKED = `\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n`;\n\nexport const eluGrad =\n    (args: {inputs: EluGradInputs, backend: MathBackendWebGL}): TensorInfo => {\n      const {inputs, backend} = args;\n      const {dy, y} = inputs;\n\n      const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n          new BinaryOpPackedProgram(ELU_DER_PACKED, dy.shape, y.shape) :\n          new BinaryOpProgram(ELU_DER, dy.shape, y.shape);\n      return backend.runWebGLProgram(program, [dy, y], dy.dtype);\n    };\n\nexport const eluGradConfig: KernelConfig = {\n  kernelName: EluGrad,\n  backendName: 'webgl',\n  kernelFunc: eluGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Equal, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst PACKED_EQUAL = `\n  return vec4(equal(a, b));\n`;\n\nconst EQUAL = `return float(a == b);`;\n\nexport const equal = binaryKernelFunc(\n    {opSnippet: EQUAL, packedOpSnippet: PACKED_EQUAL, dtype: 'bool'});\n\nexport const equalConfig: KernelConfig = {\n  kernelName: Equal,\n  backendName: 'webgl',\n  kernelFunc: equal as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Erf, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst ERF = `\n  // Error function is calculated approximately with elementary function.\n  // See \"Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables\", Abramowitz and Stegun.\n  float p = ${backend_util.ERF_P};\n  float a1 = ${backend_util.ERF_A1};\n  float a2 = ${backend_util.ERF_A2};\n  float a3 = ${backend_util.ERF_A3};\n  float a4 = ${backend_util.ERF_A4};\n  float a5 = ${backend_util.ERF_A5};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`;\n\nexport const erf = unaryKernelFunc({opSnippet: ERF});\n\nexport const erfConfig: KernelConfig = {\n  kernelName: Erf,\n  backendName: 'webgl',\n  kernelFunc: erf,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Exp, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {expImplCPU} from '../kernel_utils/shared';\n\nexport const EXP = `return exp(x);`;\nexport const exp = unaryKernelFunc(\n    {opSnippet: EXP, packedOpSnippet: EXP, cpuKernelImpl: expImplCPU});\n\nexport const expConfig: KernelConfig = {\n  kernelName: Exp,\n  backendName: 'webgl',\n  kernelFunc: exp as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ExpandDims, ExpandDimsAttrs, ExpandDimsInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reshape} from './Reshape';\n\nexport function expandDims(args: {\n  inputs: ExpandDimsInputs,\n  attrs: ExpandDimsAttrs,\n  backend: MathBackendWebGL\n}): TensorInfo {\n  const {inputs, attrs, backend} = args;\n  const {dim} = attrs;\n  const {input} = inputs;\n\n  const inputRank = input.shape.length;\n  const newShape = input.shape.slice();\n  let $dim = dim;\n  if (dim < 0) {\n    // Negative value is counted from the tail of rank.\n    util.assert(\n        -(inputRank + 1) <= dim,\n        () => `Axis must be in the interval [${- (inputRank + 1)}, ${\n            inputRank}]`);\n    $dim = inputRank + dim + 1;\n  }\n  newShape.splice($dim, 0, 1);\n\n  return reshape({inputs: {x: input}, backend, attrs: {shape: newShape}});\n}\n\nexport const expandDimsConfig: KernelConfig = {\n  kernelName: ExpandDims,\n  backendName: 'webgl',\n  kernelFunc: expandDims as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Expm1, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {expm1ImplCPU} from '../kernel_utils/shared';\n\nconst EXPM1 = `return exp(x) - 1.0;`;\n\nexport const expm1 = unaryKernelFunc(\n    {opSnippet: EXPM1, packedOpSnippet: EXPM1, cpuKernelImpl: expm1ImplCPU});\n\nexport const expm1Config: KernelConfig = {\n  kernelName: Expm1,\n  backendName: 'webgl',\n  kernelFunc: expm1 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class FFTProgram implements GPGPUProgram {\n  variableNames = ['real', 'imag'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      component: 'real'|'imag', inputShape: [number, number],\n      inverse: boolean) {\n    const innerDim = inputShape[1];\n    this.outputShape = inputShape;\n\n    const exponentMultiplierSnippet =\n        inverse ? `2.0 * ${Math.PI}` : `-2.0 * ${Math.PI}`;\n    const resultDenominator = inverse ? `${innerDim}.0` : '1.0';\n\n    let opString: string;\n    if (component === 'real') {\n      opString = 'return real * expR - imag * expI;';\n    } else if (component === 'imag') {\n      opString = 'return real * expI + imag * expR;';\n    } else {\n      throw new Error(\n          `FFT component must be either \"real\" or \"imag\", got ${component}.`);\n    }\n\n    this.userCode = `\n      const float exponentMultiplier = ${exponentMultiplierSnippet};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${opString}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${innerDim});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${innerDim}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${resultDenominator};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {FFTProgram} from '../fft_gpu';\n\nimport {complex} from './Complex';\nimport {reshape} from './Reshape';\n\nexport function fftImpl(\n    x: TensorInfo, inverse: boolean, backend: MathBackendWebGL): TensorInfo {\n  const xData = backend.texData.get(x.dataId);\n\n  const inputSize = util.sizeFromShape(x.shape);\n  // Collapse all outer dimensions to a single batch dimension.\n  const innerDimensionSize = x.shape[x.shape.length - 1];\n  const batch = inputSize / innerDimensionSize;\n\n  const input2D = reshape(\n      {inputs: {x}, backend, attrs: {shape: [batch, innerDimensionSize]}});\n\n  const xShape = input2D.shape as [number, number];\n  const realProgram = new FFTProgram('real', xShape, inverse);\n  const imagProgram = new FFTProgram('imag', xShape, inverse);\n\n  const inputs = [\n    {\n      dataId: xData.complexTensorInfos.real.dataId,\n      dtype: xData.complexTensorInfos.real.dtype,\n      shape: xShape\n    },\n    {\n      dataId: xData.complexTensorInfos.imag.dataId,\n      dtype: xData.complexTensorInfos.imag.dtype,\n      shape: xShape\n    }\n  ];\n\n  const realPart = backend.runWebGLProgram(realProgram, inputs, 'float32');\n  const imagPart = backend.runWebGLProgram(imagProgram, inputs, 'float32');\n\n  const complexOutput =\n      complex({inputs: {real: realPart, imag: imagPart}, backend});\n\n  backend.disposeIntermediateTensorInfo(realPart);\n  backend.disposeIntermediateTensorInfo(imagPart);\n\n  const complexOutputReshaped =\n      reshape({inputs: {x: complexOutput}, backend, attrs: {shape: x.shape}});\n\n  backend.disposeIntermediateTensorInfo(input2D);\n  backend.disposeIntermediateTensorInfo(complexOutput);\n  return complexOutputReshaped;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FFT, FFTInputs, KernelConfig, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {fftImpl} from './FFT_impl';\n\nexport function fft(args: {inputs: FFTInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  return fftImpl(input, false /* inverse */, backend);\n}\n\nexport const fftConfig: KernelConfig = {\n  kernelName: FFT,\n  backendName: 'webgl',\n  kernelFunc: fft\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class FillProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n\n  valueLoc: WebGLUniformLocation;\n\n  constructor(shape: number[], value: number) {\n    this.variableNames = ['x'];\n    this.outputShape = shape;\n\n    this.userCode = `\n      uniform float value;\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    `;\n  }\n\n  getCustomSetupFunc(value: number) {\n    return (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => {\n      if (this.valueLoc == null) {\n        this.valueLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'value');\n      }\n      gpgpu.gl.uniform1f(this.valueLoc, value);\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Fill, FillAttrs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {FillProgram} from '../fill_gpu';\n\nexport function fill(args: {backend: MathBackendWebGL, attrs: FillAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {shape, value} = attrs;\n  let {dtype} = attrs;\n\n  dtype = dtype || util.inferDtype(value);\n\n  if (dtype === 'string') {\n    // String type should be handled in CPU memory.\n    const values = util.getArrayFromDType(dtype, util.sizeFromShape(shape));\n    values.fill(value as string);\n    return backend.makeTensorInfo(shape, dtype, values);\n  } else {\n    const program = new FillProgram(shape, value as number);\n    const customSetup = program.getCustomSetupFunc(value as number);\n    return backend.runWebGLProgram(program, [], dtype, customSetup);\n  }\n}\n\nexport const fillConfig: KernelConfig = {\n  kernelName: Fill,\n  backendName: 'webgl',\n  kernelFunc: fill as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class FlipLeftRightProgram implements GPGPUProgram {\n  variableNames = ['Image'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(imageShape: [number, number, number, number]) {\n    const imageWidth = imageShape[2];\n    this.outputShape = imageShape;\n\n    this.userCode = `\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${imageWidth} - x;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${imageWidth}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tensor4D} from '@tensorflow/tfjs-core';\nimport {FlipLeftRight, FlipLeftRightInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {FlipLeftRightProgram} from '../flip_left_right_gpu';\n\nexport const flipLeftRightConfig: KernelConfig = {\n  kernelName: FlipLeftRight,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, backend}) => {\n    const {image} = inputs as FlipLeftRightInputs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    const program = new FlipLeftRightProgram((image as Tensor4D).shape);\n    const output = webglBackend.runWebGLProgram(program, [image], image.dtype);\n    return output;\n  }\n};\n","\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Floor, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {floorImplCPU} from '../kernel_utils/shared';\n\nconst FLOOR = `return floor(x);`;\n\nexport const floor = unaryKernelFunc(\n    {opSnippet: FLOOR, packedOpSnippet: FLOOR, cpuKernelImpl: floorImplCPU});\n\nexport const floorConfig: KernelConfig = {\n  kernelName: Floor,\n  backendName: 'webgl',\n  kernelFunc: floor,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FloorDiv, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\n// We use native integer division to deal with floating point imprecision. Since\n// we implement floor division and glsl implements truncated division, we\n// correct for this by subtracting 1 from result when the result is negative and\n// there is a remainder.\nconst INT_DIV = `\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n`;\n\nconst INT_DIV_PACKED = `\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n`;\n\nexport const floorDiv = binaryKernelFunc(\n    {opSnippet: INT_DIV, packedOpSnippet: INT_DIV_PACKED, dtype: 'int32'});\n\nexport const floorDivConfig: KernelConfig = {\n  kernelName: FloorDiv,\n  backendName: 'webgl',\n  kernelFunc: floorDiv as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from '../../glsl_version';\nimport {GPGPUProgram} from '../../gpgpu_math';\n\nexport class FromPixelsProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(outputShape: number[]) {\n    const glsl = getGlslDifferences();\n    const [height, width, ] = outputShape;\n    this.outputShape = outputShape;\n    this.userCode = `\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${width}.0, ${height}.0);\n\n        vec4 values = ${glsl.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from '../../glsl_version';\nimport {GPGPUProgram} from '../../gpgpu_math';\n\nexport class FromPixelsPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  packedInputs = false;\n  packedOutput = true;\n\n  constructor(outputShape: number[]) {\n    const glsl = getGlslDifferences();\n    const [height, width, ] = outputShape;\n    this.outputShape = outputShape;\n    this.userCode = `\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${width}.0, ${height}.0);\n            vec4 values = ${glsl.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\nimport {FromPixels, FromPixelsAttrs, FromPixelsInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {TextureUsage} from '../tex_util';\n\nimport {FromPixelsProgram} from './FromPixels_utils/from_pixels_gpu';\nimport {FromPixelsPackedProgram} from './FromPixels_utils/from_pixels_packed_gpu';\n\nexport const fromPixelsConfig: KernelConfig = {\n  kernelName: FromPixels,\n  backendName: 'webgl',\n  kernelFunc: fromPixels as {} as KernelFunc,\n};\n\nlet fromPixels2DContext: CanvasRenderingContext2D;\n\nfunction fromPixels(args: {\n  inputs: FromPixelsInputs,\n  backend: MathBackendWebGL,\n  attrs: FromPixelsAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  let {pixels} = inputs;\n  const {numChannels} = attrs;\n\n  const isVideo = typeof (HTMLVideoElement) !== 'undefined' &&\n      pixels instanceof HTMLVideoElement;\n  const isImage = typeof (HTMLImageElement) !== 'undefined' &&\n      pixels instanceof HTMLImageElement;\n  const [width, height] = isVideo ?\n      [\n        (pixels as HTMLVideoElement).videoWidth,\n        (pixels as HTMLVideoElement).videoHeight\n      ] :\n      [pixels.width, pixels.height];\n\n  const texShape: [number, number] = [height, width];\n  const outShape = [height, width, numChannels];\n\n  if (isImage || isVideo) {\n    if (fromPixels2DContext == null) {\n      fromPixels2DContext = document.createElement('canvas').getContext('2d');\n    }\n\n    fromPixels2DContext.canvas.width = width;\n    fromPixels2DContext.canvas.height = height;\n    fromPixels2DContext.drawImage(\n        pixels as HTMLVideoElement | HTMLImageElement | ImageBitmap,\n        0, 0, width, height);\n    pixels = fromPixels2DContext.canvas;\n  }\n\n  const tempPixelHandle = backend.makeTensorInfo(texShape, 'int32');\n  // This is a byte texture with pixels.\n  backend.texData.get(tempPixelHandle.dataId).usage = TextureUsage.PIXELS;\n  backend.gpgpu.uploadPixelDataToTexture(\n      backend.getTexture(tempPixelHandle.dataId), pixels as ImageData);\n  const program = env().getBool('WEBGL_PACK') ?\n      new FromPixelsPackedProgram(outShape) :\n      new FromPixelsProgram(outShape);\n  const res = backend.runWebGLProgram(program, [tempPixelHandle], 'int32');\n  backend.disposeData(tempPixelHandle.dataId);\n  return res;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, FusedConv2D, FusedConv2DAttrs, FusedConv2DInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv2DProgram} from '../conv_gpu';\nimport {mapActivationToShaderProgram} from '../kernel_utils/kernel_funcs_utils';\n\nimport {conv2dByMatMul, conv2dWithIm2Row} from './Conv2D_impl';\nimport {reshape} from './Reshape';\n\nexport function fusedConv2d(args: {\n  inputs: FusedConv2DInputs,\n  attrs: FusedConv2DAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, dilations, pad,\n      dimRoundingMode, false /* depthwise */, $dataFormat);\n  let out: TensorInfo;\n  const intermediates: TensorInfo[] = [];\n\n  if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 &&\n      convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n      convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&\n      (convInfo.padInfo.type === 'SAME' || convInfo.padInfo.type === 'VALID')) {\n    out = conv2dByMatMul({\n      x,\n      filter,\n      convInfo,\n      backend,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n  } else if (env().getBool('WEBGL_CONV_IM2COL') && x.shape[0] === 1) {\n    out = conv2dWithIm2Row({\n      x,\n      filter,\n      convInfo,\n      backend,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n  } else {\n    const hasBias = bias != null;\n    const hasPreluActivationWeights = preluActivationWeights != null;\n    const hasLeakyreluAlpha = activation === 'leakyrelu';\n    const fusedActivation =\n        activation ? mapActivationToShaderProgram(activation, false) : null;\n    const program = new Conv2DProgram(\n        convInfo, hasBias, fusedActivation, hasPreluActivationWeights,\n        hasLeakyreluAlpha);\n    const inputs: TensorInfo[] = [x, filter];\n    if (bias) {\n      inputs.push(bias);\n    }\n    if (preluActivationWeights) {\n      inputs.push(preluActivationWeights);\n    }\n    if (hasLeakyreluAlpha) {\n      const $leakyreluAlpha = backend.makeTensorInfo(\n          [], 'float32',\n          util.createScalarValue(leakyreluAlpha as {} as 'float32', 'float32'));\n      inputs.push($leakyreluAlpha);\n      intermediates.push($leakyreluAlpha);\n    }\n    out = backend.runWebGLProgram(program, inputs, 'float32');\n  }\n\n  const outReshaped =\n      reshape({inputs: {x: out}, backend, attrs: {shape: convInfo.outShape}});\n\n  intermediates.push(out);\n  intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return outReshaped;\n}\n\nexport const fusedConv2DConfig: KernelConfig = {\n  kernelName: FusedConv2D,\n  backendName: 'webgl',\n  kernelFunc: fusedConv2d as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, FusedDepthwiseConv2D, FusedDepthwiseConv2DAttrs, FusedDepthwiseConv2DInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthwiseConv2DProgram} from '../conv_gpu_depthwise';\nimport {DepthwiseConvPacked2DProgram} from '../conv_packed_gpu_depthwise';\nimport {mapActivationToShaderProgram} from '../kernel_utils/kernel_funcs_utils';\n\nexport function fusedDepthwiseConv2D(args: {\n  inputs: FusedDepthwiseConv2DInputs,\n  attrs: FusedDepthwiseConv2DAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {strides, pad, dilations, dimRoundingMode, activation, leakyreluAlpha} =\n      attrs;\n\n  const intermediates: TensorInfo[] = [];\n\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, $dilations),\n      () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n          `1. Got strides ${strides} and dilations '${$dilations}'`);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, $dilations,\n      pad, dimRoundingMode, true /* depthwise */);\n\n  const shouldPackDepthwiseConv = env().getBool('WEBGL_PACK_DEPTHWISECONV') &&\n      convInfo.strideWidth <= 2 &&\n      convInfo.outChannels / convInfo.inChannels === 1;\n  const fusedActivation = activation ?\n      mapActivationToShaderProgram(activation, shouldPackDepthwiseConv) :\n      null;\n  const programInputs: TensorInfo[] = [x, filter];\n\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const hasLeakyreluAlpha = activation === 'leakyrelu';\n\n  if (hasBias) {\n    programInputs.push(bias);\n  }\n  if (hasPreluActivationWeights) {\n    programInputs.push(preluActivationWeights);\n  }\n  if (hasLeakyreluAlpha) {\n    const $leakyreluAlpha = backend.makeTensorInfo(\n        [], 'float32',\n        util.createScalarValue(leakyreluAlpha as {} as 'float32', 'float32'));\n    programInputs.push($leakyreluAlpha);\n    intermediates.push($leakyreluAlpha);\n  }\n\n  let program: DepthwiseConv2DProgram|DepthwiseConvPacked2DProgram;\n  if (shouldPackDepthwiseConv) {\n    program = new DepthwiseConvPacked2DProgram(\n        convInfo, hasBias, fusedActivation, hasPreluActivationWeights,\n        hasLeakyreluAlpha);\n  } else {\n    program = new DepthwiseConv2DProgram(\n        convInfo, hasBias, fusedActivation, hasPreluActivationWeights,\n        hasLeakyreluAlpha);\n  }\n\n  const result = backend.runWebGLProgram(program, programInputs, 'float32');\n\n  intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const fusedDepthwiseConv2DConfig: KernelConfig = {\n  kernelName: FusedDepthwiseConv2D,\n  backendName: 'webgl',\n  kernelFunc: fusedDepthwiseConv2D as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class GatherNDProgram implements GPGPUProgram {\n  variableNames = ['x', 'indices'];\n  outputShape: number[];\n  userCode: string;\n  constructor(\n      private sliceDim: number, private strides: number[], shape: number[]) {\n    this.outputShape = shape;\n    const stridesType = getCoordsDataType(strides.length);\n    const dtype = getCoordsDataType(shape.length);\n    const strideString = this.sliceDim > 1 ? 'strides[j]' : 'strides';\n    this.userCode = `\n        ${stridesType} strides = ${stridesType}(${this.strides});\n         void main() {\n          ${dtype} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${strideString};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherNd, GatherNdInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {GatherNDProgram} from '../gather_nd_gpu';\nimport {reshape} from './Reshape';\n\nexport function gatherNd(\n    args: {inputs: GatherNdInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {params, indices} = inputs;\n\n  const indicesShape = indices.shape;\n  const sliceRank = indicesShape[indicesShape.length - 1];\n\n  const [resultShape, numSlices, sliceSize, strides] =\n      backend_util.prepareAndValidate(params, indices);\n\n  const flattenIndices = reshape(\n      {inputs: {x: indices}, backend, attrs: {shape: [numSlices, sliceRank]}});\n  const flattenX = reshape({\n    inputs: {x: params},\n    backend,\n    attrs: {shape: [(util.sizeFromShape(params.shape) / sliceSize), sliceSize]}\n  });\n\n  const program =\n      new GatherNDProgram(sliceRank, strides, [numSlices, sliceSize]);\n  const res = backend.runWebGLProgram(\n      program, [flattenX, flattenIndices], flattenX.dtype);\n\n  const reshaped =\n      reshape({inputs: {x: res}, backend, attrs: {shape: resultShape}});\n\n  backend.disposeIntermediateTensorInfo(flattenIndices);\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(res);\n\n  return reshaped;\n}\n\nexport const gatherNdConfig: KernelConfig = {\n  kernelName: GatherNd,\n  backendName: 'webgl',\n  kernelFunc: gatherNd as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class GatherProgram implements GPGPUProgram {\n  variableNames = ['A', 'indices'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  constructor(aShape: number[], outputShape: number[]) {\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const sourceCoords = getSourceCoords(aShape, 2);\n\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        setOutput(getA(${sourceCoords}));\n      }\n    `;\n  }\n}\n\n// The input and output are always flattened into rank 4 tensors.\nfunction getSourceCoords(aShape: number[], axis: number): string {\n  const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n\n  const sourceCoords = [];\n  for (let i = 0; i < aShape.length; i++) {\n    if (i === 2) {\n      sourceCoords.push('int(getIndices(resRC.x, resRC.z))');\n    } else {\n      sourceCoords.push(`${currentCoords[i]}`);\n    }\n  }\n  return sourceCoords.join();\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherV2, GatherV2Attrs, GatherV2Inputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {GatherProgram} from '../gather_gpu';\nimport {gatherV2ImplCPU} from '../kernel_utils/shared';\n\nimport {reshape} from './Reshape';\n\nexport function gatherV2(args: {\n  inputs: GatherV2Inputs,\n  backend: MathBackendWebGL,\n  attrs: GatherV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, indices} = inputs;\n  const {axis, batchDims} = attrs;\n\n  const parsedAxis = util.parseAxisParam(axis, x.shape)[0];\n  const shapeInfo = backend_util.segment_util.collectGatherOpShapeInfo(\n      x, indices, parsedAxis, batchDims);\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n\n  const toDispose = [];\n\n  const flattenX = reshape({\n    inputs: {x},\n    backend,\n    attrs: {\n      shape: [\n        shapeInfo.batchSize, shapeInfo.outerSize, shapeInfo.dimSize,\n        shapeInfo.sliceSize\n      ]\n    }\n  });\n\n  const flattenIndex = reshape({\n    inputs: {x: indices},\n    backend,\n    attrs: {shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize]}\n  });\n\n  toDispose.push(flattenX);\n  toDispose.push(flattenIndex);\n\n  const flattenOutputShape = [\n    shapeInfo.batchSize, shapeInfo.outerSize, indicesSize / shapeInfo.batchSize,\n    shapeInfo.sliceSize\n  ];\n\n  if (backend.shouldExecuteOnCPU([x, indices]) || x.dtype === 'string') {\n    const indicesBuf = backend.bufferSync(flattenIndex);\n    const xBuf = backend.bufferSync(flattenX);\n    const outBuf = gatherV2ImplCPU(xBuf, indicesBuf, flattenOutputShape);\n\n    toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n    return backend.makeTensorInfo(\n        shapeInfo.outputShape, outBuf.dtype, outBuf.values as TypedArray);\n  }\n\n  const program = new GatherProgram(flattenX.shape, flattenOutputShape);\n  const res = backend.runWebGLProgram(\n      program, [flattenX, flattenIndex], flattenX.dtype);\n  toDispose.push(res);\n\n  const reshaped = reshape(\n      {inputs: {x: res}, backend, attrs: {shape: shapeInfo.outputShape}});\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return reshaped;\n}\n\nexport const gatherV2Config: KernelConfig = {\n  kernelName: GatherV2,\n  backendName: 'webgl',\n  kernelFunc: gatherV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Greater, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {greaterImplCPU} from '../kernel_utils/shared';\n\nconst GREATER = `return float(a > b);`;\nconst GREATER_PACKED = `\n  return vec4(greaterThan(a, b));\n`;\n\nexport const greater = binaryKernelFunc({\n  opSnippet: GREATER,\n  packedOpSnippet: GREATER_PACKED,\n  cpuKernelImpl: greaterImplCPU,\n  dtype: 'bool'\n});\n\nexport const greaterConfig: KernelConfig = {\n  kernelName: Greater,\n  backendName: 'webgl',\n  kernelFunc: greater as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GreaterEqual, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst GREATER_EQUAL = `return float(a >= b);`;\nconst GREATER_EQUAL_PACKED = `\n  return vec4(greaterThanEqual(a, b));\n`;\n\nexport const greaterEqual = binaryKernelFunc({\n  opSnippet: GREATER_EQUAL,\n  packedOpSnippet: GREATER_EQUAL_PACKED,\n  dtype: 'bool'\n});\n\nexport const greaterEqualConfig: KernelConfig = {\n  kernelName: GreaterEqual,\n  backendName: 'webgl',\n  kernelFunc: greaterEqual as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IFFT, IFFTInputs, KernelConfig, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {fftImpl} from './FFT_impl';\n\nexport function ifft(args: {inputs: IFFTInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  return fftImpl(input, true /* inverse */, backend);\n}\n\nexport const ifftConfig: KernelConfig = {\n  kernelName: IFFT,\n  backendName: 'webgl',\n  kernelFunc: ifft\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsFinite, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst IS_FINITE = `return float(!isnan(x) && !isinf(x));`;\n\nexport const isFinite = unaryKernelFunc({opSnippet: IS_FINITE, dtype: 'bool'});\n\nexport const isFiniteConfig: KernelConfig = {\n  kernelName: IsFinite,\n  backendName: 'webgl',\n  kernelFunc: isFinite,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsInf, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst IS_INF = `return float(isinf(x));`;\n\nexport const isInf = unaryKernelFunc({opSnippet: IS_INF, dtype: 'bool'});\n\nexport const isInfConfig: KernelConfig = {\n  kernelName: IsInf,\n  backendName: 'webgl',\n  kernelFunc: isInf,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsNan, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst IS_NAN = `return float(isnan(x));`;\n\nexport const isNaN = unaryKernelFunc({opSnippet: IS_NAN, dtype: 'bool'});\n\nexport const isNaNConfig: KernelConfig = {\n  kernelName: IsNan,\n  backendName: 'webgl',\n  kernelFunc: isNaN,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Less} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {lessImplCPU} from '../kernel_utils/shared';\n\nconst LESS = `return float(a < b);`;\nconst LESS_PACKED = `\n  return vec4(lessThan(a, b));\n`;\n\nexport const less = binaryKernelFunc({\n  opSnippet: LESS,\n  packedOpSnippet: LESS_PACKED,\n  cpuKernelImpl: lessImplCPU,\n  dtype: 'bool'\n});\n\nexport const lessConfig: KernelConfig = {\n  kernelName: Less,\n  backendName: 'webgl',\n  kernelFunc: less as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LessEqual} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nexport const LESS_EQUAL = `return float(a <= b);`;\nexport const LESS_EQUAL_PACKED = `\n  return vec4(lessThanEqual(a, b));\n`;\n\nexport const lessEqual = binaryKernelFunc(\n    {opSnippet: LESS_EQUAL, packedOpSnippet: LESS_EQUAL_PACKED, dtype: 'bool'});\n\nexport const lessEqualConfig: KernelConfig = {\n  kernelName: LessEqual,\n  backendName: 'webgl',\n  kernelFunc: lessEqual as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LinSpace, LinSpaceAttrs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {linSpaceImplCPU} from '../kernel_utils/shared';\n\nexport function linSpace(\n    args: {backend: MathBackendWebGL, attrs: LinSpaceAttrs}): TensorInfo {\n  const {backend, attrs} = args;\n  const {start, stop, num} = attrs;\n\n  // TODO: Use CPU implementation due to the precision problem in Safari.\n  const outVals = linSpaceImplCPU(start, stop, num);\n  return backend.makeTensorInfo([outVals.length], 'float32', outVals);\n}\n\nexport const linSpaceConfig: KernelConfig = {\n  kernelName: LinSpace,\n  backendName: 'webgl',\n  kernelFunc: linSpace as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Log} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {logImplCPU} from '../kernel_utils/shared';\n\nconst LOG = `if (x < 0.0) return NAN;\n  return log(x);`;\n\nconst LOG_PACKED = `\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n`;\n\nexport const log = unaryKernelFunc(\n    {opSnippet: LOG, packedOpSnippet: LOG_PACKED, cpuKernelImpl: logImplCPU});\n\nexport const logConfig: KernelConfig = {\n  kernelName: Log,\n  backendName: 'webgl',\n  kernelFunc: log as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Log1p} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst LOG1P = `return log(1.0 + x);`;\n\nexport const log1p = unaryKernelFunc({opSnippet: LOG1P});\n\nexport const log1pConfig: KernelConfig = {\n  kernelName: Log1p,\n  backendName: 'webgl',\n  kernelFunc: log1p,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LogicalAnd} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst LOGICAL_AND = `return float(a >= 1.0 && b >= 1.0);`;\nconst LOGICAL_AND_PACKED = `\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n`;\n\nexport const logicalAnd = binaryKernelFunc({\n  opSnippet: LOGICAL_AND,\n  packedOpSnippet: LOGICAL_AND_PACKED,\n  dtype: 'bool'\n});\n\nexport const logicalAndConfig: KernelConfig = {\n  kernelName: LogicalAnd,\n  backendName: 'webgl',\n  kernelFunc: logicalAnd as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalNot} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst LOGICAL_NOT = `return float(!(x >= 1.0));`;\n\nexport const logicalNot = unaryKernelFunc({opSnippet: LOGICAL_NOT});\n\nexport const logicalNotConfig: KernelConfig = {\n  kernelName: LogicalNot,\n  backendName: 'webgl',\n  kernelFunc: logicalNot,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LogicalOr} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst LOGICAL_OR = `return float(a >= 1.0 || b >= 1.0);`;\nconst LOGICAL_OR_PACKED = `\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n`;\n\nexport const logicalOr = binaryKernelFunc(\n    {opSnippet: LOGICAL_OR, packedOpSnippet: LOGICAL_OR_PACKED, dtype: 'bool'});\n\nexport const logicalOrConfig: KernelConfig = {\n  kernelName: LogicalOr,\n  backendName: 'webgl',\n  kernelFunc: logicalOr as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class LRNProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      xShape: number[], radius: number, bias: number, alpha: number,\n      beta: number) {\n    const rad = radius;\n    const maxD = xShape[3] - 1;\n    this.outputShape = xShape;\n\n    // optimize pow(bias + alpha * sum, -beta)\n    // src: https://github.com/tensorflow/tensorflow/..\n    // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..\n    // tensorflow/core/kernels/mkl_lrn_op.cc#L320\n    let powOperator;\n    const basis = `float(${bias}) + float(${alpha}) * sum`;\n    if (beta === 0.5) {\n      powOperator = `inversesqrt(${basis})`;\n    } else if (beta === 1.0) {\n      powOperator = `1.0/(${basis})`;\n    } else {\n      powOperator = `exp(log(${basis}) * float(-${beta}));`;\n    }\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${rad}; j <= ${rad}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${maxD}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${powOperator};\n        setOutput(val);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class LRNPackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[] = [];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(\n      xShape: number[], radius: number, bias: number, alpha: number,\n      beta: number) {\n    const rad = radius;\n    const maxD = xShape[3] - 1;\n    this.outputShape = xShape;\n\n    // optimize pow(bias + alpha * sum, -beta)\n    // src: https://github.com/tensorflow/tensorflow/..\n    // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..\n    // tensorflow/core/kernels/mkl_lrn_op.cc#L320\n    let powOperator;\n    const basis = `float(${bias}) + float(${alpha}) * sum`;\n    if (beta === 0.5) {\n      powOperator = `inversesqrt(${basis})`;\n    } else if (beta === 1.0) {\n      powOperator = `1.0/(${basis})`;\n    } else {\n      powOperator = `exp(log(${basis}) * float(-${beta}));`;\n    }\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${rad};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${rad}; j <= ${rad}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${maxD}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${powOperator};\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, LRN, LRNAttrs, LRNInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {LRNProgram} from '../lrn_gpu';\nimport {LRNPackedProgram} from '../lrn_packed_gpu';\n\nexport const lrn =\n    (args: {inputs: LRNInputs, backend: MathBackendWebGL, attrs: LRNAttrs}):\n        TensorInfo => {\n          const {inputs, backend, attrs} = args;\n          const {x} = inputs;\n          const {depthRadius, bias, alpha, beta} = attrs;\n\n          const program = env().getBool('WEBGL_PACK_NORMALIZATION') ?\n              new LRNPackedProgram(x.shape, depthRadius, bias, alpha, beta) :\n              new LRNProgram(x.shape, depthRadius, bias, alpha, beta);\n          return backend.runWebGLProgram(program, [x], x.dtype);\n        };\n\n// tslint:disable-next-line: variable-name\nexport const LRNConfig: KernelConfig = {\n  kernelName: LRN,\n  backendName: 'webgl',\n  kernelFunc: lrn as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class LRNGradProgram implements GPGPUProgram {\n  variableNames = ['inputImage', 'outputImage', 'dy'];\n  outputShape: number[] = [];\n  userCode: string;\n  depthRadius: number;\n  bias: number;\n  alpha: number;\n  beta: number;\n  depth: number;\n\n  constructor(\n      inputShape: number[], depthRadius: number, bias: number, alpha: number,\n      beta: number) {\n    this.outputShape = inputShape;\n    this.depth = inputShape[3];\n    this.depthRadius = depthRadius;\n    this.bias = bias;\n    this.alpha = alpha;\n    this.beta = beta;\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${depthRadius})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${depthRadius} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${alpha}) * norm + float(${bias});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${alpha})\n                * float(${beta})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${beta});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LRNGrad, LRNGradAttrs, LRNGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {LRNGradProgram} from '../lrn_grad_gpu';\n\nexport const lrnGrad = (args: {\n  inputs: LRNGradInputs,\n  backend: MathBackendWebGL,\n  attrs: LRNGradAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {x, y, dy} = inputs;\n  const {depthRadius, bias, alpha, beta} = attrs;\n\n  const program = new LRNGradProgram(x.shape, depthRadius, bias, alpha, beta);\n  return backend.runWebGLProgram(program, [x, y, dy], x.dtype);\n};\n\n// tslint:disable-next-line: variable-name\nexport const LRNGradConfig: KernelConfig = {\n  kernelName: LRNGrad,\n  backendName: 'webgl',\n  kernelFunc: lrnGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelFunc, Max, MaxAttrs, MaxInputs, TensorInfo} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {maxImplCPU} from '../kernel_utils/shared';\n\nimport {maxImpl} from './Max_impl';\nimport {transposeImpl, transposeImplCPU} from './Transpose_impl';\n\nexport function max(\n    args: {inputs: MaxInputs, backend: MathBackendWebGL, attrs: MaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {reductionIndices, keepDims} = attrs;\n\n  const xRank = x.shape.length;\n\n  const origAxes = util.parseAxisParam(reductionIndices, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  const maxInputIsTransposed = permutedAxes != null;\n  const shouldExecuteOnCPU = backend.shouldExecuteOnCPU([x]);\n\n  let maxInput = x;\n  if (maxInputIsTransposed) {\n    if (shouldExecuteOnCPU) {\n      const xTexData = backend.texData.get(maxInput.dataId);\n      const values = xTexData.values as TypedArray;\n\n      const newShape: number[] = new Array(xRank);\n      for (let i = 0; i < newShape.length; i++) {\n        newShape[i] = x.shape[permutedAxes[i]];\n      }\n      const maxInputValues =\n          transposeImplCPU(values, x.shape, x.dtype, permutedAxes, newShape);\n\n      maxInput = backend.makeTensorInfo(newShape, x.dtype);\n      const maxInputData = backend.texData.get(maxInput.dataId);\n      maxInputData.values = maxInputValues;\n    } else {\n      maxInput = transposeImpl(x, permutedAxes, backend);\n    }\n\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('max', axes, xRank);\n  const [maxOutShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(maxInput.shape, axes);\n\n  let outShape = maxOutShape;\n  if (keepDims) {\n    // rather than reshape at the end, set the target shape here.\n    outShape = backend_util.expandShapeToKeepDim(maxOutShape, origAxes);\n  }\n\n  let out;\n  if (shouldExecuteOnCPU) {\n    const xTexData = backend.texData.get(maxInput.dataId);\n    const values = xTexData.values as TypedArray;\n\n    const outValues =\n        maxImplCPU(values, util.sizeFromShape(reduceShape), outShape, x.dtype);\n\n    out = backend.makeTensorInfo(outShape, x.dtype);\n    const outData = backend.texData.get(out.dataId);\n    outData.values = outValues;\n  } else {\n    out = maxImpl(maxInput, reduceShape, outShape, backend);\n  }\n\n  if (maxInputIsTransposed) {\n    backend.disposeIntermediateTensorInfo(maxInput);\n  }\n\n  return out;\n}\n\nexport const maxConfig: KernelConfig = {\n  kernelName: Max,\n  backendName: 'webgl',\n  kernelFunc: max as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {reshape} from '../kernels/Reshape';\n\nexport function maxImpl(\n    x: TensorInfo, reduceShape: number[], outShape: number[],\n    backend: MathBackendWebGL): TensorInfo {\n  const inSize = util.sizeFromShape(reduceShape);\n  const xSize = util.sizeFromShape(x.shape);\n  const batchSize = xSize / inSize;\n  const reshapedInput =\n      reshape({inputs: {x}, attrs: {shape: [batchSize, inSize]}, backend});\n\n  const reduced = reduce(reshapedInput, x.dtype, 'max', backend);\n  const reshapedOutput =\n      reshape({inputs: {x: reduced}, attrs: {shape: outShape}, backend});\n\n  backend.disposeIntermediateTensorInfo(reshapedInput);\n  backend.disposeIntermediateTensorInfo(reduced);\n\n  return reshapedOutput;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Maximum} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET} from '../binaryop_gpu';\nimport {CHECK_NAN_SNIPPET as CHECK_NAN_SNIPPET_PACKED} from '../binaryop_packed_gpu';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {maximumImplCPU} from '../kernel_utils/shared';\n\nconst MAXIMUM = CHECK_NAN_SNIPPET + `\n  return max(a, b);\n`;\n\nconst MAXIMUM_PACKED = `\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  ` +\n    CHECK_NAN_SNIPPET_PACKED + `\n  return result;\n`;\n\nexport const maximum = binaryKernelFunc({\n  opSnippet: MAXIMUM,\n  packedOpSnippet: MAXIMUM_PACKED,\n  cpuKernelImpl: maximumImplCPU\n});\n\nexport const maximumConfig: KernelConfig = {\n  kernelName: Maximum,\n  backendName: 'webgl',\n  kernelFunc: maximum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPool, MaxPoolAttrs, MaxPoolInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool2DProgram} from '../pool_gpu';\nimport {assertNotComplex} from '../webgl_util';\nimport {identity} from './Identity';\n\nexport function maxPool(args: {\n  inputs: MaxPoolInputs,\n  backend: MathBackendWebGL,\n  attrs: MaxPoolAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  assertNotComplex(x, 'maxPool');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    return identity({inputs: {x}, backend});\n  }\n  const maxPoolProgram = new Pool2DProgram(convInfo, 'max', false);\n  return backend.runWebGLProgram(maxPoolProgram, [x], x.dtype);\n}\n\nexport const maxPoolConfig: KernelConfig = {\n  kernelName: MaxPool,\n  backendName: 'webgl',\n  kernelFunc: maxPool as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPool3D, MaxPool3DAttrs, MaxPool3DInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool3DProgram} from '../pool_gpu';\n\nexport function maxPool3d(args: {\n  inputs: MaxPool3DInputs,\n  backend: MathBackendWebGL,\n  attrs: MaxPool3DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dataFormat, dimRoundingMode} = attrs;\n  const dilations: [number, number, number] = [1, 1, 1];\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode, dataFormat);\n  const maxPoolProgram = new Pool3DProgram(convInfo, 'max', false);\n  return backend.runWebGLProgram(maxPoolProgram, [x], x.dtype);\n}\n\nexport const maxPool3DConfig: KernelConfig = {\n  kernelName: MaxPool3D,\n  backendName: 'webgl',\n  kernelFunc: maxPool3d as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class MaxPool2DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy', 'maxPos'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const lastIndex = effectiveFilterHeight * effectiveFilterWidth - 1;\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n          wR += ${dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${effectiveFilterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${lastIndex} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${effectiveFilterWidth} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class MaxPool3DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy', 'maxPos'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.inShape;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const lastIndex =\n        effectiveFilterDepth * effectiveFilterHeight * effectiveFilterWidth - 1;\n    this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n           wD += ${dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${lastIndex} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${effectiveFilterHeight} * ${effectiveFilterWidth} +\n                  wR * ${effectiveFilterWidth} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPool3DGrad, MaxPool3DGradAttrs, MaxPool3DGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MaxPool3DBackpropProgram} from '../max_pool_backprop_gpu';\nimport {Pool3DProgram} from '../pool_gpu';\n\nexport function maxPool3DGrad(args: {\n  inputs: MaxPool3DGradInputs,\n  backend: MathBackendWebGL,\n  attrs: MaxPool3DGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations: [number, number, number] = [1, 1, 1];\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n\n  const maxPool3dPositionsProgram =\n      new Pool3DProgram(convInfo, 'max', true /* get positions */);\n  const maxPool3dPositions =\n      backend.runWebGLProgram(maxPool3dPositionsProgram, [x], x.dtype);\n  const maxPoolBackpropProgram = new MaxPool3DBackpropProgram(convInfo);\n  const result = backend.runWebGLProgram(\n      maxPoolBackpropProgram, [dy, maxPool3dPositions], x.dtype);\n  backend.disposeIntermediateTensorInfo(maxPool3dPositions);\n  return result;\n}\n\nexport const maxPoolGrad3DConfig: KernelConfig = {\n  kernelName: MaxPool3DGrad,\n  backendName: 'webgl',\n  kernelFunc: maxPool3DGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPoolGrad, MaxPoolGradAttrs, MaxPoolGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MaxPool2DBackpropProgram} from '../max_pool_backprop_gpu';\nimport {Pool2DProgram} from '../pool_gpu';\nimport {assertNotComplex} from '../webgl_util';\n\nexport function maxPoolGrad(args: {\n  inputs: MaxPoolGradInputs,\n  backend: MathBackendWebGL,\n  attrs: MaxPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input, output} = inputs;\n  const x = input;\n  assertNotComplex([input, output], 'maxPoolGrad');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode);\n  const getPositions = true;\n  const maxPoolPositionsProgram =\n      new Pool2DProgram(convInfo, 'max', getPositions);\n  const maxPoolPositions: TensorInfo =\n      backend.runWebGLProgram(maxPoolPositionsProgram, [x], x.dtype);\n\n  const maxPoolBackPropProgram = new MaxPool2DBackpropProgram(convInfo);\n  const result = backend.runWebGLProgram(\n      maxPoolBackPropProgram, [dy, maxPoolPositions], x.dtype);\n  backend.disposeIntermediateTensorInfo(maxPoolPositions);\n  return result;\n}\n\nexport const maxPoolGradConfig: KernelConfig = {\n  kernelName: MaxPoolGrad,\n  backendName: 'webgl',\n  kernelFunc: maxPoolGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {MaxPoolWithArgmax, MaxPoolWithArgmaxAttrs, MaxPoolWithArgmaxInputs} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {maxPoolWithArgmaxImpl} from './MaxPoolWithArgmax_impl';\n\nexport const maxPoolWithArgmaxConfig: KernelConfig = {\n  kernelName: MaxPoolWithArgmax,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as MaxPoolWithArgmaxInputs;\n    const {filterSize, strides, pad, includeBatchInIndex} =\n        attrs as {} as MaxPoolWithArgmaxAttrs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    util.assert(\n        x.shape.length === 4,\n        () => `Error in maxPool: input must be rank 4 but got rank ${\n            x.shape.length}.`);\n    const dilations: [number, number] = [1, 1];\n    util.assert(\n        backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n        () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n            `Got strides ${strides} and dilations '${dilations}'`);\n\n    const convInfo = backend_util.computePool2DInfo(\n        x.shape as [number, number, number, number], filterSize, strides,\n        dilations, pad);\n\n    const [result, indexes] =\n        maxPoolWithArgmaxImpl(x, includeBatchInIndex, convInfo, webglBackend);\n    return [result, indexes];\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool2DProgram} from '../pool_gpu';\n\nexport function maxPoolWithArgmaxImpl(\n    x: TensorInfo, includeBatchInIndex: boolean,\n    convInfo: backend_util.Conv2DInfo,\n    backend: MathBackendWebGL): TensorInfo[] {\n  let program = new Pool2DProgram(convInfo, 'max', false);\n  const poolOutput = backend.runWebGLProgram(program, [x], 'float32');\n\n  program = new Pool2DProgram(convInfo, 'max', true, true, includeBatchInIndex);\n  const indexOutput = backend.runWebGLProgram(program, [x], 'float32');\n  return [poolOutput, indexOutput];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, Mean, MeanAttrs, MeanInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {meanImpl} from './Mean_impl';\nimport {transposeImpl, transposeImplCPU} from './Transpose_impl';\n\nexport const meanConfig: KernelConfig = {\n  kernelName: Mean,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as MeanInputs;\n    const {keepDims, axis} = attrs as {} as MeanAttrs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    const xRank = x.shape.length;\n    const origAxes = util.parseAxisParam(axis, x.shape);\n\n    let axes = origAxes;\n    const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n    const meanInputIsTransposed = permutedAxes != null;\n    const shouldExecuteOnCPU = webglBackend.shouldExecuteOnCPU([x]);\n\n    const intermediates: TensorInfo[] = [];\n\n    let meanInput = x;\n    if (meanInputIsTransposed) {\n      if (shouldExecuteOnCPU) {\n        const xTexData = webglBackend.texData.get(meanInput.dataId);\n        const values = xTexData.values as TypedArray;\n\n        const newShape: number[] = new Array(xRank);\n        for (let i = 0; i < newShape.length; i++) {\n          newShape[i] = x.shape[permutedAxes[i]];\n        }\n        const meanInputValues =\n            transposeImplCPU(values, x.shape, x.dtype, permutedAxes, newShape);\n\n        meanInput = webglBackend.makeTensorInfo(newShape, x.dtype);\n        const meanInputData = webglBackend.texData.get(meanInput.dataId);\n        meanInputData.values = meanInputValues;\n      } else {\n        meanInput = transposeImpl(x, permutedAxes, webglBackend);\n      }\n\n      intermediates.push(meanInput);\n      axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    }\n\n    backend_util.assertAxesAreInnerMostDims('sum', axes, xRank);\n    const [meanOutShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(meanInput.shape, axes);\n\n    let outShape = meanOutShape;\n    if (keepDims) {\n      // rather than reshape at the end, set the target shape here.\n      outShape = backend_util.expandShapeToKeepDim(meanOutShape, origAxes);\n    }\n\n    const out = meanImpl(meanInput, reduceShape, outShape, webglBackend);\n    for (const i of intermediates) {\n      webglBackend.disposeIntermediateTensorInfo(i);\n    }\n\n    return out;\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {reshape} from '../kernels/Reshape';\n\nexport function meanImpl(\n    x: TensorInfo, reduceShape: number[], outShape: number[],\n    backend: MathBackendWebGL): TensorInfo {\n  const inSize = util.sizeFromShape(reduceShape);\n  const xSize = util.sizeFromShape(x.shape);\n  const batchSize = xSize / inSize;\n  const reshapedInput =\n      reshape({inputs: {x}, attrs: {shape: [batchSize, inSize]}, backend});\n\n  const reduced = reduce(reshapedInput, 'float32', 'mean', backend);\n  const reshapedOutput =\n      reshape({inputs: {x: reduced}, attrs: {shape: outShape}, backend});\n\n  backend.disposeIntermediateTensorInfo(reshapedInput);\n  backend.disposeIntermediateTensorInfo(reduced);\n\n  return reshapedOutput;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Min, MinAttrs, MinInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\n\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function min(\n    args: {inputs: MinInputs, backend: MathBackendWebGL, attrs: MinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const xRank = x.shape.length;\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let permutedX = x;\n  if (permutedAxes != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('min', axes, xRank);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n  const inSize = util.sizeFromShape(reduceShape);\n  const a2D =\n      reshape({inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n  const reduced = reduce(a2D, a2D.dtype, 'min', backend);\n\n  let res;\n  if (keepDims) {\n    const newShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: newShape}});\n  } else {\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n  }\n\n  backend.disposeIntermediateTensorInfo(a2D);\n  backend.disposeIntermediateTensorInfo(reduced);\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo(permutedX);\n  }\n\n  return res;\n}\n\nexport const minConfig: KernelConfig = {\n  kernelName: Min,\n  backendName: 'webgl',\n  kernelFunc: min as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Minimum} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET} from '../binaryop_gpu';\nimport {CHECK_NAN_SNIPPET as CHECK_NAN_SNIPPET_PACKED} from '../binaryop_packed_gpu';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {minimumImplCPU} from '../kernel_utils/shared';\n\nconst MINIMUM = CHECK_NAN_SNIPPET + `\n  return min(a, b);\n`;\n\nconst MINIMUM_PACKED = `\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  ` +\n    CHECK_NAN_SNIPPET_PACKED + `\n  return result;\n`;\n\nexport const minimum = binaryKernelFunc({\n  opSnippet: MINIMUM,\n  packedOpSnippet: MINIMUM_PACKED,\n  cpuKernelImpl: minimumImplCPU\n});\n\nexport const minimumConfig: KernelConfig = {\n  kernelName: Minimum,\n  backendName: 'webgl',\n  kernelFunc: minimum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class MirrorPadProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      mode: 'reflect'|'symmetric') {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const dtype = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const unpackedCoords =\n        ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);\n    const offset = mode === 'reflect' ? 0 : 1;\n\n    if (rank === 1) {\n      this.userCode = `\n        int start = ${start};\n        int end = ${end};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${offset};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${offset};\n          }\n          setOutput(getX(outC - start));\n        }\n      `;\n      return;\n    }\n    this.userCode = `\n      ${dtype} start = ${dtype}(${start});\n      ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outC = getOutputCoords();\n        for (int i = 0; i < ${rank}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${offset};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${offset};\n          }\n        }\n        ${dtype} coords = outC - start;\n        setOutput(getX(${unpackedCoords}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\n/**\n * Example shader code for\n * `mirrorPad(tf.tensor1d([1, 2, 3], 'int32'), [[2, 2]], 'reflect')`\n * ```\n *    const int start = int(2);\n *    const int end = int(5);\n *\n *    void main() {\n *       int outputLoc = getOutputCoords();\n *       vec4 result = vec4(0.);\n *\n *       int rc = outputLoc;\n *\n *       int source = rc;\n *       if (source < start) {\n *         source = start * 2 - source - 0;\n *       } else if (source >= end) {\n *         source = (end - 1) * 2 - source + 0;\n *       }\n *       source -= start;\n *\n *       result[0] = getChannel(getX(source), source);\n *       rc += 1;\n *       if(rc < 6) {\n *          int source = rc;\n *          if (source < start) {\n *            source = start * 2 - source - 0;\n *          } else if (source >= end) {\n *            source = (end - 1) * 2 - source + 0;\n *          }\n *          source -= start;\n *\n *         result[1] = getChannel(getX(source), source);\n *       }\n *\n *       setOutput(result);\n *     }\n * ```\n */\nexport class MirrorPadPackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      mode: 'reflect'|'symmetric') {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const dtype = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const coords = getChannels('rc', rank);\n    const source = getChannels('source', rank);\n    const cLimit = `${coords[rank - 1]} < ${this.outputShape[rank - 1]}`;\n    const innerDims =\n        rank === 1 ? 'source' : `vec2(${source.slice(-2).join()})`;\n    const offset = mode === 'reflect' ? 0 : 1;\n\n    let mainLoop = '';\n    if (rank === 1) {\n      const padSetup = `\n        ${dtype} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${offset};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${offset};\n        }\n        source -= start;\n      `;\n      mainLoop = `\n        ${dtype} rc = outputLoc;\n        ${padSetup}\n        result[0] = getChannel(getX(${source.join()}), ${innerDims});\n        ${coords[rank - 1]} += 1;\n        if(${cLimit}) {\n          ${padSetup}\n          result[1] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n      `;\n    } else {\n      const padSetup = `\n        ${dtype} source = rc;\n        ${dtype} lt = ${dtype}(lessThan(source, start));\n        ${dtype} gte = ${dtype}(greaterThanEqual(source, end));\n        ${dtype} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${offset}) +\n                gte * ((end - 1) * 2 - source + ${offset});\n        source -= start;\n      `;\n\n      mainLoop = `\n        ${dtype} rc = outputLoc;\n        ${padSetup}\n        result[0] = getChannel(getX(${source.join()}), ${innerDims});\n        ${coords[rank - 1]} += 1;\n        if(${cLimit}) {\n          ${padSetup}\n          result[1] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n        rc = outputLoc;\n        ${coords[rank - 2]} += 1;\n        if(${coords[rank - 2]} < ${this.outputShape[rank - 2]}) {\n          ${padSetup}\n          result[2] = getChannel(getX(${source.join()}), ${innerDims});\n          ${coords[rank - 1]} += 1;\n          if(${cLimit}) {\n            ${padSetup}\n            result[3] = getChannel(getX(${source.join()}), ${innerDims});\n          }\n        }\n      `;\n    }\n\n    this.userCode = `\n      const ${dtype} start = ${dtype}(${start});\n      const ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${mainLoop}\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, MirrorPad, MirrorPadAttrs, MirrorPadInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MirrorPadProgram} from '../mirror_pad_gpu';\nimport {MirrorPadPackedProgram} from '../mirror_pad_packed_gpu';\n\nexport const mirrorPadKernelFunc: (params: {\n  inputs: MirrorPadInputs,\n  backend: MathBackendWebGL,\n  attrs: MirrorPadAttrs\n}) => TensorInfo = ({inputs, backend, attrs}) => {\n  const {x} = inputs;\n  const {paddings, mode} = attrs;\n\n  const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n      new MirrorPadPackedProgram(x.shape, paddings, mode) :\n      new MirrorPadProgram(x.shape, paddings, mode);\n\n  const output = backend.runWebGLProgram(program, [x], x.dtype);\n\n  return output;\n};\n\nexport const mirrorPadConfig: KernelConfig = {\n  kernelName: MirrorPad,\n  backendName: 'webgl',\n  kernelFunc: mirrorPadKernelFunc as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Mod} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET} from '../binaryop_packed_gpu';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst MOD = `if (b == 0.0) return NAN;\n  return mod(a, b);`;\n\nconst MOD_PACKED = `\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  ` +\n    CHECK_NAN_SNIPPET + `\n  return result;\n`;\n\nexport const mod = binaryKernelFunc({\n  opSnippet: MOD,\n  packedOpSnippet: MOD_PACKED,\n});\n\nexport const modConfig: KernelConfig = {\n  kernelName: Mod,\n  backendName: 'webgl',\n  kernelFunc: mod as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class MultinomialProgram implements GPGPUProgram {\n  variableNames = ['probs'];\n  outputShape: number[];\n  userCode: string;\n\n  // Caching uniform location for speed.\n  seedLoc: WebGLUniformLocation;\n\n  constructor(batchSize: number, numOutcomes: number, numSamples: number) {\n    this.outputShape = [batchSize, numSamples];\n\n    this.userCode = `\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${numOutcomes - 1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${numOutcomes - 1}));\n      }\n    `;\n  }\n\n  getCustomSetupFunc(seed: number) {\n    return (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => {\n      if (this.seedLoc == null) {\n        this.seedLoc = gpgpu.getUniformLocation(webGLProgram, 'seed');\n      }\n      gpgpu.gl.uniform1f(this.seedLoc, seed);\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {RealDiv} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\n// Without the equality check div produces 0.9999 for a = b, which when\n// floored can cause errors.\nconst DIV = `\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;`;\n\n// We do the same as in ./binaryop_gpu, with vec4 and ivec4.\n// On Linux, the vectorized implementation produces NaNs when a and b are 0.\nconst DIV_PACKED = `\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n`;\n\nexport const realDiv = binaryKernelFunc(\n    {opSnippet: DIV, packedOpSnippet: DIV_PACKED, checkOutOfBounds: true});\n\nexport const realDivConfig: KernelConfig = {\n  kernelName: RealDiv,\n  backendName: 'webgl',\n  kernelFunc: realDiv,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sub} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {subImplCPU as cpuSub} from '../kernel_utils/shared';\n\nconst SUB = 'return a - b;';\n\nexport const sub = binaryKernelFunc({\n  opSnippet: SUB,\n  packedOpSnippet: SUB,\n  supportsComplex: true,\n  cpuKernelImpl: cpuSub\n});\n\nexport const subConfig: KernelConfig = {\n  kernelName: Sub,\n  backendName: 'webgl',\n  kernelFunc: sub\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Softmax, SoftmaxAttrs, SoftmaxInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {exp} from './Exp';\nimport {max} from './Max';\nimport {realDiv} from './RealDiv';\nimport {reshape} from './Reshape';\nimport {sub} from './Sub';\nimport {sum} from './Sum';\n\nexport function softmax(args: {\n  inputs: SoftmaxInputs,\n  backend: MathBackendWebGL,\n  attrs: SoftmaxAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {dim} = attrs;\n\n  const axes = util.parseAxisParam([dim], logits.shape);\n\n  const maxLogit = max({\n    inputs: {x: logits},\n    backend,\n    attrs: {reductionIndices: axes, keepDims: false}\n  });\n\n  const expandedShape = backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n\n  const maxLogitsReshaped =\n      reshape({inputs: {x: maxLogit}, backend, attrs: {shape: expandedShape}});\n  const a =\n      sub({inputs: {a: logits, b: maxLogitsReshaped}, backend}) as TensorInfo;\n  const b = exp({inputs: {x: a}, backend}) as TensorInfo;\n  const sumExp =\n      sum({inputs: {x: b}, backend, attrs: {axis: axes, keepDims: false}});\n  const sumExpReshaped =\n      reshape({inputs: {x: sumExp}, backend, attrs: {shape: expandedShape}});\n\n  const res =\n      realDiv({inputs: {a: b, b: sumExpReshaped}, backend}) as TensorInfo;\n\n  backend.disposeIntermediateTensorInfo(maxLogit);\n  backend.disposeIntermediateTensorInfo(maxLogitsReshaped);\n  backend.disposeIntermediateTensorInfo(a);\n  backend.disposeIntermediateTensorInfo(b);\n  backend.disposeIntermediateTensorInfo(sumExp);\n  backend.disposeIntermediateTensorInfo(sumExpReshaped);\n\n  return res;\n}\n\nexport const softmaxConfig: KernelConfig = {\n  kernelName: Softmax,\n  backendName: 'webgl',\n  kernelFunc: softmax as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Multinomial, MultinomialAttrs, MultinomialInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MultinomialProgram} from '../multinomial_gpu';\n\nimport {softmax} from './Softmax';\n\nexport function multinomial(args: {\n  inputs: MultinomialInputs,\n  backend: MathBackendWebGL,\n  attrs: MultinomialAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {numSamples, seed, normalized} = attrs;\n\n  const probs = normalized ?\n      logits :\n      softmax(\n          {inputs: {logits}, backend, attrs: {dim: logits.shape.length - 1}});\n  const batchSize = probs.shape[0];\n  const numOutcomes = probs.shape[1];\n  const program = new MultinomialProgram(batchSize, numOutcomes, numSamples);\n  const customSetup = program.getCustomSetupFunc(seed);\n\n  const res = backend.runWebGLProgram(program, [probs], 'int32', customSetup);\n  if (!normalized) {\n    backend.disposeIntermediateTensorInfo(probs);\n  }\n  return res;\n}\n\nexport const multinomialConfig: KernelConfig = {\n  kernelName: Multinomial,\n  backendName: 'webgl',\n  kernelFunc: multinomial as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, Neg, NegInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {negImplCPU} from '../kernel_utils/shared';\nimport {UnaryOpProgram} from '../unaryop_gpu';\nimport {UnaryOpPackedProgram} from '../unaryop_packed_gpu';\n\nconst NEG = `return -x;`;\n\n// This doesn't use unaryKernelFunc because negImplCPU is not of type\n// SimpleUnaryKernelImplCPU.\nexport function neg(args: {inputs: NegInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (backend.shouldExecuteOnCPU([x])) {\n    const xData = backend.texData.get(x.dataId);\n    const [outValues, newShape] =\n        negImplCPU(xData.values as TypedArray, x.shape, x.dtype);\n    return backend.makeTensorInfo(newShape, x.dtype, outValues);\n  }\n\n  let program: UnaryOpProgram|UnaryOpPackedProgram;\n  if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n    program = new UnaryOpPackedProgram(x.shape, NEG);\n  } else {\n    program = new UnaryOpProgram(x.shape, NEG);\n  }\n\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const negConfig: KernelConfig = {\n  kernelName: Neg,\n  backendName: 'webgl',\n  kernelFunc: neg as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV3, NonMaxSuppressionV3Attrs, NonMaxSuppressionV3Inputs, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV3Impl = kernel_impls.nonMaxSuppressionV3Impl;\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function nonMaxSuppressionV3(args: {\n  inputs: NonMaxSuppressionV3Inputs,\n  backend: MathBackendWebGL,\n  attrs: NonMaxSuppressionV3Attrs\n}) {\n  backend_util.warn(\n      'tf.nonMaxSuppression() in webgl locks the UI thread. ' +\n      'Call tf.nonMaxSuppressionAsync() instead');\n\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold} = attrs;\n\n  const boxesVals = backend.readSync(boxes.dataId) as TypedArray;\n  const scoresVals = backend.readSync(scores.dataId) as TypedArray;\n\n  const {selectedIndices} = nonMaxSuppressionV3Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n\n  return backend.makeTensorInfo(\n      [selectedIndices.length], 'int32', new Int32Array(selectedIndices));\n}\n\nexport const nonMaxSuppressionV3Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV3,\n  backendName: 'webgl',\n  kernelFunc: nonMaxSuppressionV3 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV4, NonMaxSuppressionV4Attrs, NonMaxSuppressionV4Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\nconst nonMaxSuppressionV4Impl = kernel_impls.nonMaxSuppressionV4Impl;\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function nonMaxSuppressionV4(args: {\n  inputs: NonMaxSuppressionV4Inputs,\n  backend: MathBackendWebGL,\n  attrs: NonMaxSuppressionV4Attrs\n}): [TensorInfo, TensorInfo] {\n  backend_util.warn(\n      'tf.nonMaxSuppression() in webgl locks the UI thread. ' +\n      'Call tf.nonMaxSuppressionAsync() instead');\n\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize} =\n      attrs;\n\n  const boxesVals = backend.readSync(boxes.dataId) as TypedArray;\n  const scoresVals = backend.readSync(scores.dataId) as TypedArray;\n\n  const {selectedIndices, validOutputs} = nonMaxSuppressionV4Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold,\n      padToMaxOutputSize);\n\n  return [\n    backend.makeTensorInfo(\n        [selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n    backend.makeTensorInfo([], 'int32', new Int32Array([validOutputs]))\n  ];\n}\n\nexport const nonMaxSuppressionV4Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV4,\n  backendName: 'webgl',\n  kernelFunc: nonMaxSuppressionV4 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV5, NonMaxSuppressionV5Attrs, NonMaxSuppressionV5Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV5Impl = kernel_impls.nonMaxSuppressionV5Impl;\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function nonMaxSuppressionV5(args: {\n  inputs: NonMaxSuppressionV5Inputs,\n  backend: MathBackendWebGL,\n  attrs: NonMaxSuppressionV5Attrs\n}): [TensorInfo, TensorInfo] {\n  backend_util.warn(\n      'tf.nonMaxSuppression() in webgl locks the UI thread. ' +\n      'Call tf.nonMaxSuppressionAsync() instead');\n\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma} = attrs;\n\n  const boxesVals = backend.readSync(boxes.dataId) as TypedArray;\n  const scoresVals = backend.readSync(scores.dataId) as TypedArray;\n\n  const maxOutputSizeVal = maxOutputSize;\n  const iouThresholdVal = iouThreshold;\n  const scoreThresholdVal = scoreThreshold;\n  const softNmsSigmaVal = softNmsSigma;\n\n  const {selectedIndices, selectedScores} = nonMaxSuppressionV5Impl(\n      boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal,\n      scoreThresholdVal, softNmsSigmaVal);\n\n  return [\n    backend.makeTensorInfo(\n        [selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n    backend.makeTensorInfo(\n        [selectedScores.length], 'float32', new Float32Array(selectedScores))\n  ];\n}\n\nexport const nonMaxSuppressionV5Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV5,\n  backendName: 'webgl',\n  kernelFunc: nonMaxSuppressionV5 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class OneHotProgram implements GPGPUProgram {\n  variableNames = ['indices'];\n  outputShape: number[];\n  userCode: string;\n\n  // Caching uniform location for speed.\n  seedLoc: WebGLUniformLocation;\n\n  constructor(\n      numIndices: number, depth: number, onValue: number, offValue: number) {\n    this.outputShape = [numIndices, depth];\n\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${offValue}), float(${onValue}),\n                      float(index == coords.y)));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OneHot, OneHotAttrs, OneHotInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {OneHotProgram} from '../onehot_gpu';\nimport {reshape} from './Reshape';\n\nexport const oneHot = (args: {\n  inputs: OneHotInputs,\n  backend: MathBackendWebGL,\n  attrs: OneHotAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {indices} = inputs;\n  const {depth, onValue, offValue} = attrs;\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n  const program = new OneHotProgram(indicesSize, depth, onValue, offValue);\n  const reshaped =\n      reshape({inputs: {x: indices}, backend, attrs: {shape: [indicesSize]}});\n  const result = backend.runWebGLProgram(program, [reshaped], indices.dtype);\n  backend.disposeIntermediateTensorInfo(reshaped);\n\n  const outShape = [...indices.shape, depth];\n  const out = reshape({inputs: {x: result}, backend, attrs: {shape: outShape}});\n  backend.disposeIntermediateTensorInfo(result);\n  return out;\n};\n\nexport const oneHotConfig: KernelConfig = {\n  kernelName: OneHot,\n  backendName: 'webgl',\n  kernelFunc: oneHot as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, ZerosLike, ZerosLikeInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\n\nexport function zerosLike(\n    args: {inputs: ZerosLikeInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = zerosLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(r);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    backend.disposeIntermediateTensorInfo(i);\n\n    return result;\n  } else {\n    return fill({\n      attrs: {\n        shape: x.shape,\n        dtype: x.dtype,\n        value: x.dtype === 'string' ? '' : 0\n      },\n      backend\n    });\n  }\n}\n\nexport const zerosLikeConfig: KernelConfig = {\n  kernelName: ZerosLike,\n  backendName: 'webgl',\n  kernelFunc: zerosLike as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OnesLike, OnesLikeInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {zerosLike} from './ZerosLike';\n\nexport function onesLike(\n    args: {inputs: OnesLikeInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (x.dtype === 'string') {\n    throw new Error('onesLike is not supported under string dtype');\n  } else if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = onesLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(r);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    backend.disposeIntermediateTensorInfo(i);\n\n    return result;\n  } else {\n    // TODO(cais, smilkov): Add WebGL shader for onesLike:\n    //   https://github.com/tensorflow/tfjs/issues/1293\n    return fill({attrs: {shape: x.shape, dtype: x.dtype, value: 1}, backend});\n  }\n}\n\nexport const onesLikeConfig: KernelConfig = {\n  kernelName: OnesLike,\n  backendName: 'webgl',\n  kernelFunc: onesLike as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Pack, PackAttrs, PackInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {concat} from './Concat';\nimport {expandDims} from './ExpandDims';\n\nexport function pack(\n    args: {inputs: PackInputs, backend: MathBackendWebGL, attrs: PackAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  if (inputs.length === 1) {\n    return expandDims(\n        {inputs: {input: inputs[0]}, backend, attrs: {dim: axis}});\n  }\n\n  const shape = inputs[0].shape;\n  const dtype = inputs[0].dtype;\n\n  inputs.forEach(t => {\n    util.assertShapesMatch(\n        shape, t.shape,\n        'All tensors passed to stack must have matching shapes');\n    util.assert(\n        dtype === t.dtype,\n        () => 'All tensors passed to stack must have matching dtypes');\n  });\n\n  const intermediateTensorInfos: TensorInfo[] = [];\n  const expandedTensors = inputs.map(t => {\n    const expandedT =\n        expandDims({inputs: {input: t}, backend, attrs: {dim: axis}});\n    intermediateTensorInfos.push(expandedT);\n    return expandedT;\n  });\n\n  const result = concat({inputs: expandedTensors, backend, attrs: {axis}});\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const packConfig: KernelConfig = {\n  kernelName: Pack,\n  backendName: 'webgl',\n  kernelFunc: pack as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class PadProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n  valueLoc: WebGLUniformLocation;\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      constantValue: number) {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const type = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const unpackedCoords =\n        ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);\n\n    if (rank === 1) {\n      this.userCode = `\n        int start = ${start};\n        int end = ${end};\n        uniform float value;\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `;\n      return;\n    }\n    this.userCode = `\n      ${type} start = ${type}(${start});\n      ${type} end = ${type}(${end});\n      uniform float value;\n\n      void main() {\n        ${type} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${type} coords = outC - start;\n          setOutput(getX(${unpackedCoords}));\n        }\n      }\n    `;\n  }\n\n  getCustomSetupFunc(value: number) {\n    return (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => {\n      if (this.valueLoc == null) {\n        this.valueLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'value');\n      }\n      gpgpu.gl.uniform1f(this.valueLoc, value);\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class PadPackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  valueLoc: WebGLUniformLocation;\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      constantValue: number) {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const dtype = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const coords = getChannels('rc', rank);\n    const source = getChannels('source', rank);\n    const cLimit = `${coords[rank - 1]} < ${this.outputShape[rank - 1]}`;\n    const innerDims =\n        rank === 1 ? 'source' : `vec2(${source.slice(-2).join()})`;\n\n    const componentSetup = [\n      `${dtype} rc = outputLoc;`, `${coords[rank - 1]} += 1;\n       if(${cLimit}) {\n      `,\n      rank === 1 ? '' : `}\n       rc = outputLoc;\n       ${coords[rank - 2]} += 1;\n       if(${coords[rank - 2]} < ${this.outputShape[rank - 2]}) {`,\n      rank === 1 ? '' : `  ${coords[rank - 1]} += 1;\n         if(${cLimit}) {`\n    ];\n\n    const paddingArea = rank === 1 ?\n        'rc < start || rc >= end' :\n        'any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))';\n    let mainLoop = '';\n    for (let i = 0, j = rank === 1 ? 2 : 4; i < j; i++) {\n      mainLoop += `\n        ${componentSetup[i]}\n        if (${paddingArea}) {\n          result[${i}] = float(value);\n        } else {\n          ${dtype} source = rc - start;\n          result[${i}] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n      `;\n    }\n    mainLoop += (rank === 1 ? `} ` : `}}`);\n\n    this.userCode = `\n      const ${dtype} start = ${dtype}(${start});\n      const ${dtype} end = ${dtype}(${end});\n      uniform float value;\n\n      void main() {\n        ${dtype} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${mainLoop}\n        setOutput(result);\n      }\n    `;\n  }\n\n  getCustomSetupFunc(value: number) {\n    return (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => {\n      if (this.valueLoc == null) {\n        this.valueLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'value');\n      }\n      gpgpu.gl.uniform1f(this.valueLoc, value);\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, PadV2, PadV2Attrs, PadV2Inputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {PadProgram} from '../pad_gpu';\nimport {PadPackedProgram} from '../pad_packed_gpu';\n\nexport const padV2 =\n    (args: {inputs: PadV2Inputs, backend: MathBackendWebGL, attrs: PadV2Attrs}):\n        TensorInfo => {\n          const {inputs, backend, attrs} = args;\n          const {x} = inputs;\n          const {paddings, constantValue} = attrs;\n\n          const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n              new PadPackedProgram(x.shape, paddings, constantValue) :\n              new PadProgram(x.shape, paddings, constantValue);\n          const customSetup = program.getCustomSetupFunc(constantValue);\n          return backend.runWebGLProgram(program, [x], x.dtype, customSetup);\n        };\n\nexport const padV2Config: KernelConfig = {\n  kernelName: PadV2,\n  backendName: 'webgl',\n  kernelFunc: padV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Pow} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET} from '../binaryop_packed_gpu';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst POW = `\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n`;\n\nconst POW_PACKED = `\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  ` +\n    CHECK_NAN_SNIPPET + `\n  return result;\n`;\n\nexport const pow =\n    binaryKernelFunc({opSnippet: POW, packedOpSnippet: POW_PACKED});\n\nexport const powConfig: KernelConfig = {\n  kernelName: Pow,\n  backendName: 'webgl',\n  kernelFunc: pow as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Prod, ProdAttrs, ProdInputs, sumOutType, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {prodImplCPU} from '../kernel_utils/shared';\n\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function prod(\n    args: {inputs: ProdInputs, backend: MathBackendWebGL, attrs: ProdAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const xRank = x.shape.length;\n  const toDispose = [];\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let permutedX = x;\n  if (permutedAxes != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    toDispose.push(permutedX);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('prod', axes, xRank);\n\n  let res;\n  if (backend.shouldExecuteOnCPU([permutedX])) {\n    const xVals = backend.texData.get(permutedX.dataId).values as TypedArray;\n    const {outVals, outShape, outDtype} =\n        prodImplCPU(permutedX.shape, permutedX.dtype, xVals, axes);\n    res = backend.makeTensorInfo(outShape, outDtype, outVals);\n  } else {\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = reshape(\n        {inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n    const outputDType = sumOutType(x.dtype);\n    const reduced = reduce(a2D, outputDType, 'prod', backend);\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n\n    toDispose.push(a2D);\n    toDispose.push(reduced);\n  }\n\n  if (keepDims) {\n    toDispose.push(res);\n    const newShape = backend_util.expandShapeToKeepDim(res.shape, origAxes);\n    res = reshape({inputs: {x: res}, backend, attrs: {shape: newShape}});\n  }\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return res;\n}\n\nexport const prodConfig: KernelConfig = {\n  kernelName: Prod,\n  backendName: 'webgl',\n  kernelFunc: prod as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Range, RangeAttrs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {rangeImplCPU} from '../kernel_utils/shared';\n\nexport const range =\n    (args: {backend: MathBackendWebGL, attrs: RangeAttrs}): TensorInfo => {\n      const {backend, attrs} = args;\n      const {start, stop, step, dtype} = attrs;\n      const values = rangeImplCPU(start, stop, step, dtype);\n      return backend.makeTensorInfo([values.length], dtype, values);\n    };\n\nexport const rangeConfig: KernelConfig = {\n  kernelName: Range,\n  backendName: 'webgl',\n  kernelFunc: range as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Reciprocal} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst RECIPROCAL = `return 1.0 / x;`;\n\nexport const reciprocal = unaryKernelFunc({opSnippet: RECIPROCAL});\n\nexport const reciprocalConfig: KernelConfig = {\n  kernelName: Reciprocal,\n  backendName: 'webgl',\n  kernelFunc: reciprocal,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Relu} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst RELU = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : x;\n`;\n\nconst RELU_PACKED = `\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\nexport const relu =\n    unaryKernelFunc({opSnippet: RELU, packedOpSnippet: RELU_PACKED});\n\nexport const reluConfig: KernelConfig = {\n  kernelName: Relu,\n  backendName: 'webgl',\n  kernelFunc: relu as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Relu6} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst RELU6 = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n`;\n\nconst RELU6_PACKED = `\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\nexport const relu6 =\n    unaryKernelFunc({opSnippet: RELU6, packedOpSnippet: RELU6_PACKED});\n\nexport const relu6Config: KernelConfig = {\n  kernelName: Relu6,\n  backendName: 'webgl',\n  kernelFunc: relu6 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeBilinearProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean, halfPixelCenters: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    let sourceFracIndexRC: string;\n    if (halfPixelCenters) {\n      sourceFracIndexRC =\n          `(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC` +\n          ` - vec2(0.5)`;\n    } else {\n      sourceFracIndexRC = `vec2(yRC) * effectiveInputOverOutputRatioRC`;\n    }\n\n    this.userCode = `\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec2 inputShapeRC = vec2(${oldHeight}.0, ${oldWidth}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeBilinearPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean, halfPixelCenters: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    let sourceFracIndexRC: string;\n    if (halfPixelCenters) {\n      sourceFracIndexRC = `(vec3(yRC) + vec3(0.5)) * ` +\n          `effectiveInputOverOutputRatioRC - vec3(0.5)`;\n    } else {\n      sourceFracIndexRC = `vec3(yRC) * effectiveInputOverOutputRatioRC`;\n    }\n\n    this.userCode = `\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec3 inputShapeRC = vec3(${oldHeight}.0, ${oldWidth}.0,\n                                     ${oldWidth}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${depth - 1};\n        bool hasNextRow = coords.z < ${newWidth - 1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, ResizeBilinear, ResizeBilinearAttrs, ResizeBilinearInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ResizeBilinearProgram} from '../resize_bilinear_gpu';\nimport {ResizeBilinearPackedProgram} from '../resize_bilinear_packed_gpu';\n\nexport function resizeBilinear(args: {\n  inputs: ResizeBilinearInputs,\n  backend: MathBackendWebGL,\n  attrs: ResizeBilinearAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n\n  const [newHeight, newWidth] = size;\n\n  const program = env().getBool('WEBGL_PACK_IMAGE_OPERATIONS') ?\n      new ResizeBilinearPackedProgram(\n          images.shape as [number, number, number, number], newHeight, newWidth,\n          alignCorners, halfPixelCenters) :\n      new ResizeBilinearProgram(\n          images.shape as [number, number, number, number], newHeight, newWidth,\n          alignCorners, halfPixelCenters);\n  return backend.runWebGLProgram(program, [images], 'float32');\n}\n\nexport const resizeBilinearConfig: KernelConfig = {\n  kernelName: ResizeBilinear,\n  backendName: 'webgl',\n  kernelFunc: resizeBilinear as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeBilinearBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      dyShape: [number, number, number, number],\n      inputShape: [number, number, number, number], alignCorners: boolean) {\n    this.outputShape = inputShape;\n    const [, xHeight, xWidth, ] = inputShape;\n    const [, yHeight, yWidth] = dyShape;\n\n    // In the backwards pass, we want to find the pixels that were generated for\n    // each pixel in the input image the forward pass and add the corresponding\n    // coefficient from dy to the gradient (with some interpolation).\n\n    const effectiveXSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n      (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n    ];\n\n    const effectiveYSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n      (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n    ];\n\n    const heightScale = effectiveXSize[0] / effectiveYSize[0];\n    const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n    const invHeightScale = 1 / heightScale;\n    const invWidthScale = 1 / widthScale;\n\n    // This defines the size of the window of values around a particular\n    // index in dy that we want to search for contributions to dx.\n    const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n    const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${heightScale});\n        const float widthScale = float(${widthScale});\n\n        const float invHeightScale = float(${invHeightScale});\n        const float invWidthScale = float(${invWidthScale});\n\n        const int winHeight = int(${winHeight});\n        const int winWidth = int(${winWidth});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${yHeight}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${yWidth}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${xHeight - 1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${xWidth - 1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeBilinearGrad, ResizeBilinearGradAttrs, ResizeBilinearGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ResizeBilinearBackpropProgram} from '../resize_bilinear_backprop_gpu';\n\nexport function resizeBilinearGrad(args: {\n  inputs: ResizeBilinearGradInputs,\n  backend: MathBackendWebGL,\n  attrs: ResizeBilinearGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images, dy} = inputs;\n  const {alignCorners} = attrs;\n\n  const program = new ResizeBilinearBackpropProgram(\n      dy.shape as [number, number, number, number],\n      images.shape as [number, number, number, number], alignCorners);\n\n  return backend.runWebGLProgram(program, [dy], dy.dtype);\n}\n\nexport const resizeBilinearGradConfig: KernelConfig = {\n  kernelName: ResizeBilinearGrad,\n  backendName: 'webgl',\n  kernelFunc: resizeBilinearGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeNearestNeighborProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean, halfPixelCenters: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    // When align corners is false, we rounds the value with floor.\n    const roundBase = alignCorners ? '0.5' : '0.0';\n\n    let sourceFracIndexRC: string;\n    if (halfPixelCenters) {\n      sourceFracIndexRC =\n          `max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC` +\n          `, vec2(0.0))`;\n    } else {\n      sourceFracIndexRC = `vec2(yRC) * effectiveInputOverOutputRatioRC`;\n    }\n    this.userCode = `\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec2 inputShapeRC = vec2(${oldHeight}.0, ${oldWidth}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${roundBase})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeNearestNeighbor, ResizeNearestNeighborAttrs, ResizeNearestNeighborInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ResizeNearestNeighborProgram} from '../resize_nearest_neighbor_gpu';\n\nexport function resizeNearestNeighbor(args: {\n  inputs: ResizeNearestNeighborInputs,\n  backend: MathBackendWebGL,\n  attrs: ResizeNearestNeighborAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n\n  const [newHeight, newWidth] = size;\n\n  const program = new ResizeNearestNeighborProgram(\n      images.shape as [number, number, number, number], newHeight, newWidth,\n      alignCorners, halfPixelCenters);\n  return backend.runWebGLProgram(program, [images], images.dtype);\n}\n\nexport const resizeNearestNeighborConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighbor,\n  backendName: 'webgl',\n  kernelFunc: resizeNearestNeighbor as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeNearestNeigborBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      dyShape: [number, number, number, number],\n      inputShape: [number, number, number, number], alignCorners: boolean) {\n    this.outputShape = inputShape;\n    const [, xHeight, xWidth, ] = inputShape;\n    const [, yHeight, yWidth] = dyShape;\n\n    // In the backwards pass, we want to find the pixels that were generated for\n    // each pixel in the input image the forward pass and add the corresponding\n    // coefficient from dy to the gradient (with some interpolation).\n\n    const effectiveXSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n      (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n    ];\n\n    const effectiveYSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n      (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n    ];\n\n    const heightScale = effectiveXSize[0] / effectiveYSize[0];\n    const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n    const invHeightScale = 1 / heightScale;\n    const invWidthScale = 1 / widthScale;\n\n    // This defines the size of the window of values around a particular\n    // index in dy that we want to search for contributions to dx.\n    const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n    const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${heightScale});\n        const float widthScale = float(${widthScale});\n\n        const float invHeightScale = float(${invHeightScale});\n        const float invWidthScale = float(${invWidthScale});\n\n        const int winHeight = int(${winHeight});\n        const int winWidth = int(${winWidth});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${yHeight}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${yWidth}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${effectiveXSize[0]}) *\n                (float(dyR) / float(${effectiveYSize[0]}));\n\n            float sourceFracCol =\n                float(${effectiveXSize[1]}) *\n                  (float(dyC) / float(${effectiveYSize[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${xHeight}) - 1),\n                ${alignCorners} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${xWidth}) - 1),\n                ${alignCorners} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeNearestNeighborGrad, ResizeNearestNeighborGradAttrs, ResizeNearestNeighborGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ResizeNearestNeigborBackpropProgram} from '../resize_nearest_neighbor_backprop_gpu';\n\nexport function resizeNearestNeighborGrad(args: {\n  inputs: ResizeNearestNeighborGradInputs,\n  backend: MathBackendWebGL,\n  attrs: ResizeNearestNeighborGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images, dy} = inputs;\n  const {alignCorners} = attrs;\n\n  const program = new ResizeNearestNeigborBackpropProgram(\n      dy.shape as [number, number, number, number],\n      images.shape as [number, number, number, number], alignCorners);\n  return backend.runWebGLProgram(program, [dy], dy.dtype);\n}\n\nexport const resizeNearestNeighborGradConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighborGrad,\n  backendName: 'webgl',\n  kernelFunc: resizeNearestNeighborGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ReverseProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(xShape: number[], axis: number[]) {\n    const rank = xShape.length;\n    if (rank > 4) {\n      throw new Error(\n          `WebGL backend: Reverse of rank-${rank} tensor is not yet supported`);\n    }\n    this.outputShape = xShape;\n\n    if (rank === 1) {\n      this.userCode = `\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${xShape[0]} - coord - 1));\n        }\n      `;\n      return;\n    }\n    const getInCoord = (i: number) => {\n      if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {\n        return `${xShape[i]} - coords[${i}] - 1`;\n      }\n      return `coords[${i}]`;\n    };\n    const inCoords = xShape.map((_, i) => getInCoord(i)).join(',');\n    const type = getCoordsDataType(rank);\n\n    this.userCode = `\n      void main() {\n        ${type} coords = getOutputCoords();\n        setOutput(getX(${inCoords}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ReversePackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(xShape: number[], axis: number[]) {\n    const rank = xShape.length;\n    if (rank > 4) {\n      throw new Error(\n          `WebGL backend: Reverse of rank-${rank} tensor is not yet supported`);\n    }\n    this.outputShape = xShape;\n    const channels = getChannels('rc', rank);\n    const nextColumn =\n        `${channels[rank - 1]} + 1 < ${this.outputShape[rank - 1]}`;\n    const nextRow = `${channels[rank - 2]} + 1 < ${this.outputShape[rank - 2]}`;\n    const type = getCoordsDataType(rank);\n    if (rank === 1) {\n      this.userCode = `\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${xShape[0]} - rc - 1),\n            ${xShape[0]} - rc - 1);\n          if(${nextColumn}){\n              result.g = getChannel(getX(${xShape[0]} - (rc  + 1) - 1),\n                ${xShape[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `;\n    } else {\n      this.userCode = `\n        void main() {\n          ${type} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${getR(channels.slice())};\n          if(${nextColumn}){\n            result.g = ${getG(channels.slice())};\n          }\n          if(${nextRow}) {\n            result.b = ${getB(channels.slice())};\n            if(${nextColumn}) {\n              result.a = ${getA(channels.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `;\n    }\n\n    function getR(channels: string[]): string {\n      return getChannel(channels);\n    }\n\n    function getG(channels: string[]): string {\n      channels[rank - 1] = '(' + channels[rank - 1] + ` + 1)`;\n      return getChannel(channels);\n    }\n\n    function getB(channels: string[]): string {\n      channels[rank - 2] = '(' + channels[rank - 2] + ` + 1)`;\n      return getChannel(channels);\n    }\n\n    function getA(channels: string[]): string {\n      channels[rank - 1] = '(' + channels[rank - 1] + ` + 1)`;\n      channels[rank - 2] = '(' + channels[rank - 2] + ` + 1)`;\n      return getChannel(channels);\n    }\n\n    function getChannel(channels: string[]): string {\n      const inCoordsArray = xShape.map((_, i) => getInCoord(i, channels));\n      const inCoords = inCoordsArray.join(',');\n      const innerDims = inCoordsArray.slice(-2).join(',');\n      return `getChannel(getX(${inCoords}), vec2(${innerDims}))`;\n    }\n\n    function getInCoord(i: number, channels1: string[]): string {\n      if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {\n        return `${xShape[i]} - ${channels1[i]} - 1`;\n      } else {\n        return `${channels1[i]}`;\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, Reverse, ReverseAttrs, ReverseInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ReverseProgram} from '../reverse_gpu';\nimport {ReversePackedProgram} from '../reverse_packed_gpu';\n\nimport {identity} from './Identity';\n\nexport function reverse(args: {\n  inputs: ReverseInputs,\n  backend: MathBackendWebGL,\n  attrs: ReverseAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dims} = attrs;\n\n  const xRank = x.shape.length;\n\n  const $dims = util.parseAxisParam(dims, x.shape);\n  if (xRank === 0) {\n    return identity({inputs: {x}, backend});\n  }\n\n  const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n      new ReversePackedProgram(x.shape, $dims) :\n      new ReverseProgram(x.shape, $dims);\n\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const reverseConfig: KernelConfig = {\n  kernelName: Reverse,\n  backendName: 'webgl',\n  kernelFunc: reverse as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class RotateProgram implements GPGPUProgram {\n  variableNames = ['Image'];\n  outputShape: number[] = [];\n  userCode: string;\n  paramsLoc: WebGLUniformLocation;\n  constructor(\n      imageShape: [number, number, number, number],\n      fillValue: number|[number, number, number]) {\n    const imageHeight = imageShape[1];\n    const imageWidth = imageShape[2];\n    this.outputShape = imageShape;\n\n    let fillSnippet = '';\n    if (typeof fillValue === 'number') {\n      fillSnippet = `float outputValue = ${fillValue.toFixed(2)};`;\n    } else {\n      fillSnippet = `\n        vec3 fill = vec3(${fillValue.join(',')});\n        float outputValue = fill[coords[3]];`;\n    }\n\n    this.userCode = `\n        uniform vec4 params;\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${fillSnippet}\n          if(coordX >= 0 && coordX < ${imageWidth} && coordY >= 0 && coordY < ${\n        imageHeight}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `;\n  }\n\n  getCustomSetupFunc(\n      centerX: number, centerY: number, sinFactor: number, cosFactor: number) {\n    return (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => {\n      if (this.paramsLoc == null) {\n        this.paramsLoc =\n            gpgpu.getUniformLocationNoThrow(webGLProgram, 'params');\n      }\n      gpgpu.gl.uniform4f(\n          this.paramsLoc, centerX, centerY, sinFactor, cosFactor);\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, Tensor4D} from '@tensorflow/tfjs-core';\nimport {RotateWithOffset, RotateWithOffsetAttrs, RotateWithOffsetInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {RotateProgram} from '../rotate_gpu';\n\nexport const rotateWithOffsetConfig: KernelConfig = {\n  kernelName: RotateWithOffset,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {image} = inputs as RotateWithOffsetInputs;\n    const {radians, fillValue, center} = attrs as {} as RotateWithOffsetAttrs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    const program = new RotateProgram((image as Tensor4D).shape, fillValue);\n    const [centerX, centerY] =\n        backend_util.getImageCenter(center, image.shape[1], image.shape[2]);\n    const customSetup = program.getCustomSetupFunc(\n        centerX, centerY, Math.sin(radians), Math.cos(radians));\n    const output = webglBackend.runWebGLProgram(\n        program, [image], image.dtype, customSetup);\n    return output;\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Round} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst ROUND = `\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n`;\n\nexport const round = unaryKernelFunc({opSnippet: ROUND});\n\nexport const roundConfig: KernelConfig = {\n  kernelName: Round,\n  backendName: 'webgl',\n  kernelFunc: round,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Rsqrt} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {rsqrtImplCPU} from '../kernel_utils/shared';\n\nconst RSQRT = `return inversesqrt(x);`;\n\nexport const rsqrt =\n    unaryKernelFunc({opSnippet: RSQRT, cpuKernelImpl: rsqrtImplCPU});\n\nexport const rsqrtConfig: KernelConfig = {\n  kernelName: Rsqrt,\n  backendName: 'webgl',\n  kernelFunc: rsqrt as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ScatterProgram implements GPGPUProgram {\n  variableNames = ['updates', 'indices', 'defaultValue'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      updateSize: number, sliceDim: number, indicesRank: number,\n      updatesRank: number, strides: number[], shape: number[],\n      summingDupeIndex = true) {\n    this.outputShape = shape;\n    const stridesType = getCoordsDataType(strides.length);\n    const dtype = getCoordsDataType(shape.length);\n    let indicesString = '';\n    if (indicesRank === 1) {\n      indicesString = 'i';\n    } else if (indicesRank === 2) {\n      indicesString = 'i, j';\n    }\n    const indicesSnippet = `getIndices(${indicesString})`;\n\n    let updatesString = '';\n    if (updatesRank === 1) {\n      updatesString = 'i';\n    } else if (updatesRank === 2) {\n      updatesString = 'i, coords[1]';\n    }\n    const updatesSnippet = `getUpdates(${updatesString})`;\n\n    const strideString = sliceDim > 1 ? 'strides[j]' : 'strides';\n    this.userCode = `\n        ${stridesType} strides = ${stridesType}(${strides});\n\n        void main() {\n          ${dtype} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${updateSize}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${sliceDim}; j++) {\n              int index = round(${indicesSnippet});\n              flattenedIndex += index * ${strideString};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${updatesSnippet};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, ScatterNd, ScatterNdAttrs, ScatterNdInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ScatterProgram} from '../scatter_gpu';\nimport {reshape} from './Reshape';\n\nexport function scatterNd(args: {\n  inputs: ScatterNdInputs,\n  backend: MathBackendWebGL,\n  attrs: ScatterNdAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {indices, updates} = inputs;\n  const {shape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(updates, indices, shape);\n\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n\n  if (outputSize === 0) {\n    return backend.makeTensorInfo(shape, indices.dtype);\n  }\n\n  const flattenIndices = reshape(\n      {inputs: {x: indices}, backend, attrs: {shape: [numUpdates, sliceRank]}});\n  const flattenX = reshape(\n      {inputs: {x: updates}, backend, attrs: {shape: [numUpdates, sliceSize]}});\n\n  const defaultValue = backend.makeTensorInfo(\n      [], 'float32', new Float32Array([0]));  // scalar(0)\n  const program = new ScatterProgram(\n      numUpdates, sliceRank, flattenIndices.shape.length, flattenX.shape.length,\n      strides, flattenShape);\n  const res = backend.runWebGLProgram(\n      program, [flattenX, flattenIndices, defaultValue], flattenX.dtype);\n\n  const reshaped = reshape({inputs: {x: res}, backend, attrs: {shape}});\n\n  backend.disposeIntermediateTensorInfo(flattenIndices);\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(res);\n  backend.disposeIntermediateTensorInfo(defaultValue);\n\n  return reshaped;\n}\n\nexport const scatterNdConfig: KernelConfig = {\n  kernelName: ScatterNd,\n  backendName: 'webgl',\n  kernelFunc: scatterNd as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class SelectProgram implements GPGPUProgram {\n  variableNames = ['c', 'a', 'b'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(cRank: number, shape: number[], rank: number) {\n    this.outputShape = shape;\n\n    let cCoords;\n    let abCoords;\n    if (rank > 4) {\n      throw Error(`Where for rank ${rank} is not yet supported`);\n    }\n\n    if (rank === 1) {\n      abCoords = `resRC`;\n      cCoords = `resRC`;\n    } else {\n      const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n      const cCoordVars = [];\n      const abCoordVars = [];\n      for (let i = 0; i < shape.length; i++) {\n        abCoordVars.push(`${currentCoords[i]}`);\n        if (i < cRank) {\n          cCoordVars.push(`${currentCoords[i]}`);\n        }\n      }\n      cCoords = cCoordVars.join();\n      abCoords = abCoordVars.join();\n    }\n\n    const dtype = getCoordsDataType(rank);\n\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        float cVal = getC(${cCoords});\n        if (cVal >= 1.0) {\n          setOutput(getA(${abCoords}));\n        } else {\n          setOutput(getB(${abCoords}));\n        }\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Select, SelectInputs, TensorInfo, upcastType} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {SelectProgram} from '../select_gpu';\n\nexport function select(args: {inputs: SelectInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {condition, t, e} = inputs;\n\n  const program =\n      new SelectProgram(condition.shape.length, t.shape, t.shape.length);\n  return backend.runWebGLProgram(\n      program, [condition, t, e], upcastType(t.dtype, e.dtype));\n}\n\nexport const selectConfig: KernelConfig = {\n  kernelName: Select,\n  backendName: 'webgl',\n  kernelFunc: select as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, Selu} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SELU = `\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${backend_util.SELU_SCALEALPHA};\n  float scale = ${backend_util.SELU_SCALE};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`;\n\nexport const selu = unaryKernelFunc({opSnippet: SELU});\n\nexport const seluConfig: KernelConfig = {\n  kernelName: Selu,\n  backendName: 'webgl',\n  kernelFunc: selu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sigmoid} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SIGMOID = `return 1.0 / (1.0 + exp(-1.0 * x));`;\n\nexport const sigmoid = unaryKernelFunc({opSnippet: SIGMOID});\n\nexport const sigmoidConfig: KernelConfig = {\n  kernelName: Sigmoid,\n  backendName: 'webgl',\n  kernelFunc: sigmoid,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sign} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\n// Sign does not propagate NANs.\nconst SIGN = `\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n`;\n\nexport const sign = unaryKernelFunc({opSnippet: SIGN});\n\nexport const signConfig: KernelConfig = {\n  kernelName: Sign,\n  backendName: 'webgl',\n  kernelFunc: sign,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sin} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SIN = CHECK_NAN_SNIPPET_UNARY + `\n  return sin(x);\n`;\n\nexport const sin = unaryKernelFunc({opSnippet: SIN});\n\nexport const sinConfig: KernelConfig = {\n  kernelName: Sin,\n  backendName: 'webgl',\n  kernelFunc: sin,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sinh} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SINH = `\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n`;\n\nexport const sinh = unaryKernelFunc({opSnippet: SINH});\n\nexport const sinhConfig: KernelConfig = {\n  kernelName: Sinh,\n  backendName: 'webgl',\n  kernelFunc: sinh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Softplus} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SOFTPLUS = `\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n`;\n\nexport const softplus = unaryKernelFunc({opSnippet: SOFTPLUS});\n\nexport const softplusConfig: KernelConfig = {\n  kernelName: Softplus,\n  backendName: 'webgl',\n  kernelFunc: softplus,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, SpaceToBatchND, SpaceToBatchNDAttrs, SpaceToBatchNDInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {padV2} from './PadV2';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport const spaceToBatchND = (args: {\n  inputs: SpaceToBatchNDInputs,\n  backend: MathBackendWebGL,\n  attrs: SpaceToBatchNDAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, paddings} = attrs;\n\n  util.assert(\n      x.shape.length <= 4,\n      () => 'spaceToBatchND for rank > 4 with a WebGL backend not ' +\n          'implemented yet');\n\n  const prod = blockShape.reduce((a, b) => a * b);\n\n  const completePaddings: Array<[number, number]> = [[0, 0]];\n  completePaddings.push(...paddings as Array<[number, number]>);\n  for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n    completePaddings.push([0, 0]);\n  }\n\n  const toDispose = [];\n\n  const paddedX = padV2({\n    inputs: {x},\n    backend,\n    attrs: {paddings: completePaddings, constantValue: 0}\n  });\n\n  const reshapedPaddedShape =\n      backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n\n  const permutedReshapedPaddedPermutation = backend_util.getPermuted(\n      reshapedPaddedShape.length, blockShape.length, false);\n\n  const flattenShape =\n      backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);\n\n  const reshapedPaddedX = reshape(\n      {inputs: {x: paddedX}, backend, attrs: {shape: reshapedPaddedShape}});\n\n  const paddedXT = transpose({\n    inputs: {x: reshapedPaddedX},\n    backend,\n    attrs: {perm: permutedReshapedPaddedPermutation}\n  });\n\n  const result =\n      reshape({inputs: {x: paddedXT}, backend, attrs: {shape: flattenShape}});\n\n  toDispose.push(paddedX);\n  toDispose.push(reshapedPaddedX);\n  toDispose.push(paddedXT);\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n};\n\nexport const spaceToBatchNDConfig: KernelConfig = {\n  kernelName: SpaceToBatchND,\n  backendName: 'webgl',\n  kernelFunc: spaceToBatchND as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, SparseToDense, SparseToDenseAttrs, SparseToDenseInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ScatterProgram} from '../scatter_gpu';\nimport {reshape} from './Reshape';\n\nexport function sparseToDense(args: {\n  inputs: SparseToDenseInputs,\n  backend: MathBackendWebGL,\n  attrs: SparseToDenseAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {sparseIndices, sparseValues, defaultValue} = inputs;\n  const {outputShape} = attrs;\n\n  const {sliceRank, numUpdates, strides, outputSize} =\n      backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n\n  const sumDupeIndices = false;\n  const program = new ScatterProgram(\n      numUpdates, sliceRank, sparseIndices.shape.length,\n      sparseValues.shape.length, strides, [outputSize, 1], sumDupeIndices);\n\n  const res = backend.runWebGLProgram(\n      program, [sparseValues, sparseIndices, defaultValue], sparseValues.dtype);\n\n  const reshaped =\n      reshape({inputs: {x: res}, backend, attrs: {shape: outputShape}});\n\n  backend.disposeIntermediateTensorInfo(res);\n  return reshaped;\n}\n\nexport const sparseToDenseConfig: KernelConfig = {\n  kernelName: SparseToDense,\n  backendName: 'webgl',\n  kernelFunc: sparseToDense as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, SplitV, SplitVAttrs, SplitVInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {slice} from './Slice';\n\nexport function splitV(\n    args:\n        {inputs: SplitVInputs, backend: MathBackendWebGL, attrs: SplitVAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {numOrSizeSplits, axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, x.shape)[0];\n  const splitSizes = backend_util.prepareSplitSize(x, numOrSizeSplits, $axis);\n\n  const xRank = x.shape.length;\n  const begin = new Array(xRank).fill(0);\n  const size = x.shape.slice();\n\n  return splitSizes.map(s => {\n    const sliceSize = [...size];\n    sliceSize[$axis] = s;\n    const sliceT =\n        slice({inputs: {x}, backend, attrs: {begin, size: sliceSize}});\n    begin[$axis] += s;\n    return sliceT;\n  });\n}\n\nexport const splitVConfig: KernelConfig = {\n  kernelName: SplitV,\n  backendName: 'webgl',\n  kernelFunc: splitV as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Sqrt} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SQRT = `return sqrt(x);`;\n\nexport const sqrt = unaryKernelFunc({opSnippet: SQRT});\n\nexport const sqrtConfig: KernelConfig = {\n  kernelName: Sqrt,\n  backendName: 'webgl',\n  kernelFunc: sqrt as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Square} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SQUARE = `return x * x;`;\n\nexport const square = unaryKernelFunc({opSnippet: SQUARE});\n\nexport const squareConfig: KernelConfig = {\n  kernelName: Square,\n  backendName: 'webgl',\n  kernelFunc: square,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SquaredDifference} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SQUARED_DIFFERENCE = 'return (a - b) * (a - b);';\n\nexport const squaredDifference = binaryKernelFunc(\n    {opSnippet: SQUARED_DIFFERENCE, packedOpSnippet: SQUARED_DIFFERENCE});\n\nexport const squaredDifferenceConfig: KernelConfig = {\n  kernelName: SquaredDifference,\n  backendName: 'webgl',\n  kernelFunc: squaredDifference,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Step, StepAttrs, TensorInfo, UnaryInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {CHECK_NAN_SNIPPET, UnaryOpProgram} from '../unaryop_gpu';\n\nexport function step(\n    {inputs, attrs, backend}:\n        {inputs: UnaryInputs, attrs: StepAttrs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {x} = inputs;\n  const opSnippet = CHECK_NAN_SNIPPET + `\n    return x > 0.0 ? 1.0 : float(${attrs.alpha});\n  `;\n\n  const program = new UnaryOpProgram(x.shape, opSnippet);\n\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const stepConfig: KernelConfig = {\n  kernelName: Step,\n  backendName: 'webgl',\n  kernelFunc: step as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class StridedSliceProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(begin: number[], strides: number[], size: number[]) {\n    this.outputShape = size;\n    const rank = size.length;\n    const inputDtype = getCoordsDataType(size.length);\n    const dtype = getCoordsDataType(size.length);\n\n    let newCoords = '';\n    if (rank === 1) {\n      newCoords = 'coords * strides + begin';\n    } else {\n      let outputAxis = 0;\n      newCoords =\n          size.map((_, i) => {\n                outputAxis++;\n                return size.length === 1 ?\n                    `coords * strides[${i}] + begin[${i}]` :\n                    `coords[${outputAxis - 1}] * strides[${i}] + begin[${i}]`;\n              })\n              .join(',');\n    }\n\n    this.userCode = `\n      ${inputDtype} begin = ${inputDtype}(${begin});\n      ${inputDtype} strides = ${inputDtype}(${strides});\n\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        setOutput(getX(${newCoords}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, KernelConfig, KernelFunc, Rank, slice_util, StridedSlice, StridedSliceAttrs, StridedSliceInputs, TensorBuffer, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {stridedSliceImplCPU} from '../kernel_utils/shared';\nimport {StridedSliceProgram} from '../strided_slice_gpu';\n\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\n\nexport function stridedSlice(args: {\n  inputs: StridedSliceInputs,\n  backend: MathBackendWebGL,\n  attrs: StridedSliceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {\n    begin,\n    end,\n    strides,\n    beginMask,\n    endMask,\n    ellipsisMask,\n    newAxisMask,\n    shrinkAxisMask\n  } = attrs;\n\n  const {nonStrided, $begin, $strides, size, newShape, outShape} =\n      slice_util.sliceInfo(\n          x.shape, begin, end, strides, beginMask, endMask, ellipsisMask,\n          newAxisMask, shrinkAxisMask);\n\n  const $x = reshape({inputs: {x}, backend, attrs: {shape: newShape}});\n\n  let result;\n  if (nonStrided) {\n    const sliced =\n        slice({inputs: {x: $x}, backend, attrs: {begin: $begin, size}});\n    result = reshape({inputs: {x: sliced}, backend, attrs: {shape: outShape}});\n\n    backend.disposeIntermediateTensorInfo(sliced);\n  } else if (outShape.some(axis => axis === 0)) {\n    result = backend.makeTensorInfo(outShape, x.dtype, []);\n  } else {\n    const shouldExecuteOnCPU = backend.shouldExecuteOnCPU([$x]);\n    if (shouldExecuteOnCPU) {\n      const xTexData = backend.texData.get($x.dataId);\n      const values = xTexData.values as TypedArray;\n      const xBuf = buffer($x.shape, $x.dtype, values) as TensorBuffer<Rank>;\n      const resultValues =\n          stridedSliceImplCPU(outShape, xBuf, $strides, $begin);\n      result = backend.makeTensorInfo(outShape, $x.dtype, resultValues.values);\n    } else {\n      const program = new StridedSliceProgram($begin, $strides, outShape);\n      result = backend.runWebGLProgram(program, [$x], $x.dtype);\n    }\n  }\n\n  const resultReshaped =\n      reshape({inputs: {x: result}, backend, attrs: {shape: outShape}});\n\n  backend.disposeIntermediateTensorInfo($x);\n  backend.disposeIntermediateTensorInfo(result);\n\n  return resultReshaped;\n}\n\nexport const stridedSliceConfig: KernelConfig = {\n  kernelName: StridedSlice,\n  backendName: 'webgl',\n  kernelFunc: stridedSlice as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tan} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst TAN = `return tan(x);`;\n\nexport const tan = unaryKernelFunc({opSnippet: TAN});\n\nexport const tanConfig: KernelConfig = {\n  kernelName: Tan,\n  backendName: 'webgl',\n  kernelFunc: tan,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tanh} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst TANH = `\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n`;\n\nexport const tanh = unaryKernelFunc({opSnippet: TANH});\n\nexport const tanhConfig: KernelConfig = {\n  kernelName: Tanh,\n  backendName: 'webgl',\n  kernelFunc: tanh,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class TileProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  constructor(aShape: number[], reps: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[i] * reps[i];\n    }\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const sourceCoords = getSourceCoords(aShape);\n\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        setOutput(getA(${sourceCoords}));\n      }\n    `;\n  }\n}\n\nfunction getSourceCoords(aShape: number[]): string {\n  const rank = aShape.length;\n  if (rank > 5) {\n    throw Error(`Tile for rank ${rank} is not yet supported`);\n  }\n  if (rank === 1) {\n    return `imod(resRC, ${aShape[0]})`;\n  }\n\n  const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u'];\n\n  const sourceCoords = [];\n  for (let i = 0; i < aShape.length; i++) {\n    sourceCoords.push(`imod(${currentCoords[i]}, ${aShape[i]})`);\n  }\n  return sourceCoords.join();\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, KernelConfig, KernelFunc, TensorInfo, Tile, TileAttrs, TileInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {tileImplCPU} from '../kernel_utils/shared';\nimport {TileProgram} from '../tile_gpu';\n\nexport function tile(\n    params: {inputs: TileInputs, backend: MathBackendWebGL, attrs: TileAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = params;\n  const {x} = inputs;\n  const {reps} = attrs;\n\n  if (x.dtype === 'string') {\n    // Even thought string tensor is always on CPU, just to be consistent on how\n    // to access tensor data.\n    const data = backend.readSync(x.dataId) as Uint8Array[];\n    const decodedData = data.map(d => util.decodeString(d));\n    const buf = buffer(x.shape, x.dtype, decodedData);\n    const outBuf = tileImplCPU(buf, reps);\n    return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n  }\n\n  const program = new TileProgram(x.shape, reps);\n  const output = backend.runWebGLProgram(program, [x], x.dtype);\n\n  return output;\n}\n\nexport const tileConfig: KernelConfig = {\n  kernelName: Tile,\n  backendName: 'webgl',\n  kernelFunc: tile as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, NumericDataType, TensorInfo, TopK, TopKAttrs, TopKInputs, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {topKImplCPU} from '../kernel_utils/shared';\n\nexport function topK(\n    args: {inputs: TopKInputs, backend: MathBackendWebGL, attrs: TopKAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {k, sorted} = attrs;\n\n  const xVals = backend.readSync(x.dataId) as TypedArray;\n  const [allTopKVals, allTopKIndices] =\n      topKImplCPU(xVals, x.shape, x.dtype as NumericDataType, k, sorted);\n\n  return [\n    backend.makeTensorInfo(\n        allTopKVals.shape, allTopKVals.dtype, allTopKVals.values),\n    backend.makeTensorInfo(\n        allTopKIndices.shape, allTopKIndices.dtype, allTopKIndices.values)\n  ];\n}\n\nexport const topKConfig: KernelConfig = {\n  kernelName: TopK,\n  backendName: 'webgl',\n  kernelFunc: topK as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class TransformProgram implements GPGPUProgram {\n  variableNames = ['Image', 'Transforms'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      imageHeight: number, imageWidth: number,\n      interpolation: 'nearest'|'bilinear',\n      fillMode: 'constant'|'reflect'|'wrap'|'nearest', fillValue: number,\n      outShape: [number, number, number, number]) {\n    this.outputShape = outShape;\n    const interpolationModeId = interpolation === 'nearest' ? 1 : 2;\n    let fillModeId;\n    switch (fillMode) {\n      case 'constant':\n        fillModeId = 1;\n        break;\n      case 'reflect':\n        fillModeId = 2;\n        break;\n      case 'wrap':\n        fillModeId = 3;\n        break;\n      case 'nearest':\n        fillModeId = 4;\n        break;\n      default:\n        fillModeId = 1;\n        break;\n    }\n    this.userCode = `\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${fillModeId} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${fillModeId} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${fillModeId} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${\n        imageHeight} && 0 <= coordX && coordX < ${imageWidth}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${fillValue});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${fillValue});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${imageWidth}));\n                float mapY = mapCoord(inY, float(${imageHeight}));\n\n                if (${interpolationModeId} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Transform, TransformAttrs, TransformInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {TransformProgram} from '../transform_gpu';\n\nexport function transform(args: {\n  inputs: TransformInputs,\n  backend: MathBackendWebGL,\n  attrs: TransformAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {image, transforms} = inputs;\n  const {interpolation, fillMode, fillValue, outputShape} = attrs;\n\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n  const [outHeight, outWidth] =\n      outputShape != null ? outputShape : [imageHeight, imageWidth];\n  const outShape =\n      [batch, outHeight, outWidth,\n       numChannels] as [number, number, number, number];\n\n  const program = new TransformProgram(\n      imageHeight, imageWidth, interpolation, fillMode, fillValue, outShape);\n  return backend.runWebGLProgram(program, [image, transforms], 'float32');\n}\n\nexport const transformConfig: KernelConfig = {\n  kernelName: Transform,\n  backendName: 'webgl',\n  kernelFunc: transform as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unique, UniqueAttrs, UniqueInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {uniqueImplCPU} from '../kernel_utils/shared';\nimport {assertNotComplex} from '../webgl_util';\n\nexport function unique(\n    args:\n        {inputs: UniqueInputs, attrs: UniqueAttrs, backend: MathBackendWebGL}):\n    TensorInfo[] {\n  const {inputs, attrs, backend} = args;\n  const {axis} = attrs;\n  const {x} = inputs;\n  assertNotComplex(x, 'unique');\n\n  // For now, always forward calculation to the CPU backend.\n  console.warn(\n      'WARNING: ',\n      'UI might be locked temporarily as data is being downloaded');\n  const values = backend.readSync(x.dataId);\n  const {outputValues, outputShape, indices} =\n      uniqueImplCPU(values, axis, x.shape, x.dtype);\n  return [\n    backend.makeTensorInfo(outputShape, x.dtype, outputValues),\n    backend.makeTensorInfo([indices.length], 'int32', indices),\n  ];\n}\n\nexport const uniqueConfig: KernelConfig = {\n  kernelName: Unique,\n  backendName: 'webgl',\n  kernelFunc: unique as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unpack, UnpackAttrs, UnpackInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\n\nexport function unpack(\n    args:\n        {inputs: UnpackInputs, backend: MathBackendWebGL, attrs: UnpackAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {value} = inputs;\n  let {axis} = attrs;\n\n  if (axis < 0) {\n    axis += value.shape.length;\n  }\n\n  const x = value;\n  const xRank = x.shape.length;\n\n  const num = value.shape[axis];\n  const outShape: number[] = new Array(xRank - 1);\n  let outIndex = 0;\n  for (let i = 0; i < xRank; i++) {\n    if (i !== axis) {\n      outShape[outIndex++] = x.shape[i];\n    }\n  }\n\n  const toDispose = [];\n\n  const begin = new Array(xRank).fill(0);\n  const size = x.shape.slice();\n  size[axis] = 1;\n  const res: TensorInfo[] = new Array(num);\n  for (let i = 0; i < res.length; i++) {\n    begin[axis] = i;\n    const sliced = slice({inputs: {x}, backend, attrs: {begin, size}});\n    const reshaped =\n        reshape({inputs: {x: sliced}, backend, attrs: {shape: outShape}});\n    res[i] = reshaped;\n\n    toDispose.push(sliced);\n  }\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return res;\n}\n\nexport const unpackConfig: KernelConfig = {\n  kernelName: Unpack,\n  backendName: 'webgl',\n  kernelFunc: unpack as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class SegmentOpProgram implements GPGPUProgram {\n  variableNames = ['x', 'segmentIds'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      segOpInfo: backend_util.segment_util.SegOpInfo,\n      segOpType: 'unsortedSegmentSum') {\n    const windowSize = segOpInfo.windowSize;\n    const batchSize = segOpInfo.batchSize;\n    const inSize = segOpInfo.inSize;\n    const numSegments = segOpInfo.numSegments;\n    const outSize = numSegments * Math.ceil(inSize / windowSize);\n    this.outputShape = [batchSize, outSize];\n\n    const initializationValue = '0.0';\n    const returnValue = `sumValue`;\n\n    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n    const windowSizeVec4Remainder = windowSize % 4;\n\n    const updateSnippet = `\n        sumValue += dot(values, segFilter);\n    `;\n\n    let checkValueOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkValueOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return initializationValue;\n        }\n      `;\n    }\n\n    let checkSegmentIdOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkSegmentIdOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return -1.0;\n        }\n      `;\n    }\n\n    this.userCode = `\n      const float initializationValue = ${initializationValue};\n\n      float getValue(int batch, int inIdx) {\n        ${checkValueOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${checkSegmentIdOutOfBounds}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${numSegments})) * float(${windowSize}));\n        int currentSeg = int(mod(float(outIdx), float(${numSegments})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${updateSnippet}\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, KernelConfig, KernelFunc, sumOutType, TensorInfo, UnsortedSegmentSum, UnsortedSegmentSumAttrs, UnsortedSegmentSumInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {SegmentOpProgram} from '../segment_gpu';\n\nimport {range} from './Range';\nimport {reshape} from './Reshape';\nimport {tile} from './Tile';\nimport {transpose} from './Transpose';\n\nexport function unsortedSegmentSum(args: {\n  inputs: UnsortedSegmentSumInputs,\n  backend: MathBackendWebGL,\n  attrs: UnsortedSegmentSumAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, segmentIds} = inputs;\n  const {numSegments} = attrs;\n\n  const xRank = x.shape.length;\n\n  const toDispose = [];\n\n  let axis = 0;\n  const permutation = backend_util.getAxesPermutation([axis], xRank);\n  let permutedX = x;\n  if (permutation != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n    toDispose.push(permutedX);\n    axis = backend_util.getInnerMostAxes(1, xRank)[0];\n  }\n\n  const outShape = backend_util.segment_util.computeOutShape(\n      permutedX.shape, axis, numSegments);\n  const inSize = util.sizeFromShape([permutedX.shape[axis]]);\n  const a2D =\n      reshape({inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n  toDispose.push(a2D);\n\n  const outputDType = sumOutType(x.dtype);\n\n  const segOpCompute =\n      (x: TensorInfo, segOpType: 'unsortedSegmentSum', segmentIds: TensorInfo,\n       dtype: DataType, numSegments: number): TensorInfo => {\n        const batchSize = x.shape[0];\n        const inSize = x.shape[1];\n        const windowSize =\n            backend_util.segment_util.segOpComputeOptimalWindowSize(\n                inSize, numSegments);\n        const segOpInfo = {windowSize, inSize, batchSize, numSegments};\n        const program = new SegmentOpProgram(segOpInfo, segOpType);\n        const output = backend.compileAndRun(program, [x, segmentIds], dtype);\n        toDispose.push(output);\n        // No need to run another GPGPU program.\n        if (output.shape[1] === numSegments) {\n          return output;\n        }\n        const rangeInfo = range({\n          backend,\n          attrs: {start: 0, stop: numSegments, step: 1, dtype: 'float32'}\n        });\n        const tileInfo = tile({\n          inputs: {x: rangeInfo},\n          backend,\n          attrs: {reps: [inSize / windowSize]}\n        });\n\n        toDispose.push(rangeInfo);\n        toDispose.push(tileInfo);\n\n        const result =\n            segOpCompute(output, segOpType, tileInfo, dtype, numSegments);\n        return result;\n      };\n\n  const segOpResult = segOpCompute(\n      a2D, 'unsortedSegmentSum', segmentIds, outputDType, numSegments);\n\n  const reshaped =\n      reshape({inputs: {x: segOpResult}, backend, attrs: {shape: outShape}});\n\n  let result = reshaped;\n  if (permutation != null) {\n    toDispose.push(reshaped);\n    const perm = backend_util.getUndoAxesPermutation(permutation);\n    result = transpose({inputs: {x: result}, backend, attrs: {perm}});\n  }\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return result;\n}\n\nexport const unsortedSegmentSumConfig: KernelConfig = {\n  kernelName: UnsortedSegmentSum,\n  backendName: 'webgl',\n  kernelFunc: unsortedSegmentSum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {KernelConfig, registerKernel} from '@tensorflow/tfjs-core';\n\nimport {_fusedMatMulConfig} from './kernels/_FusedMatMul';\nimport {absConfig} from './kernels/Abs';\nimport {acosConfig} from './kernels/Acos';\nimport {acoshConfig} from './kernels/Acosh';\nimport {addConfig} from './kernels/Add';\nimport {addNConfig} from './kernels/AddN';\nimport {allConfig} from './kernels/All';\nimport {anyConfig} from './kernels/Any';\nimport {argMaxConfig} from './kernels/ArgMax';\nimport {argMinConfig} from './kernels/ArgMin';\nimport {asinConfig} from './kernels/Asin';\nimport {asinhConfig} from './kernels/Asinh';\nimport {atanConfig} from './kernels/Atan';\nimport {atan2Config} from './kernels/Atan2';\nimport {atanhConfig} from './kernels/Atanh';\nimport {avgPoolConfig} from './kernels/AvgPool';\nimport {avgPool3DConfig} from './kernels/AvgPool3D';\nimport {avgPoolGrad3DConfig} from './kernels/AvgPool3DGrad';\nimport {avgPoolGradConfig} from './kernels/AvgPoolGrad';\nimport {batchMatMulConfig} from './kernels/BatchMatMul';\nimport {batchNormConfig} from './kernels/BatchNorm';\nimport {batchToSpaceNDConfig} from './kernels/BatchToSpaceND';\nimport {bincountConfig} from './kernels/Bincount';\nimport {castConfig} from './kernels/Cast';\nimport {ceilConfig} from './kernels/Ceil';\nimport {clipByValueConfig} from './kernels/ClipByValue';\nimport {complexConfig} from './kernels/Complex';\nimport {complexAbsConfig} from './kernels/ComplexAbs';\nimport {concatConfig} from './kernels/Concat';\nimport {conv2DConfig} from './kernels/Conv2D';\nimport {conv2DBackpropFilterConfig} from './kernels/Conv2DBackpropFilter';\nimport {conv2DBackpropInputConfig} from './kernels/Conv2DBackpropInput';\nimport {conv3DConfig} from './kernels/Conv3D';\nimport {conv3DBackpropFilterV2Config} from './kernels/Conv3DBackpropFilterV2';\nimport {conv3DBackpropInputConfig} from './kernels/Conv3DBackpropInputV2';\nimport {cosConfig} from './kernels/Cos';\nimport {coshConfig} from './kernels/Cosh';\nimport {cropAndResizeConfig} from './kernels/CropAndResize';\nimport {cumsumConfig} from './kernels/Cumsum';\nimport {denseBincountConfig} from './kernels/DenseBincount';\nimport {depthToSpaceConfig} from './kernels/DepthToSpace';\nimport {depthwiseConv2dNativeConfig} from './kernels/DepthwiseConv2dNative';\nimport {depthwiseConv2dNativeBackpropFilterConfig} from './kernels/DepthwiseConv2dNativeBackpropFilter';\nimport {depthwiseConv2dNativeBackpropInputConfig} from './kernels/DepthwiseConv2dNativeBackpropInput';\nimport {diagConfig} from './kernels/Diag';\nimport {dilation2DConfig} from './kernels/Dilation2D';\nimport {einsumConfig} from './kernels/Einsum';\nimport {eluConfig} from './kernels/Elu';\nimport {eluGradConfig} from './kernels/EluGrad';\nimport {equalConfig} from './kernels/Equal';\nimport {erfConfig} from './kernels/Erf';\nimport {expConfig} from './kernels/Exp';\nimport {expandDimsConfig} from './kernels/ExpandDims';\nimport {expm1Config} from './kernels/Expm1';\nimport {fftConfig} from './kernels/FFT';\nimport {fillConfig} from './kernels/Fill';\nimport {flipLeftRightConfig} from './kernels/FlipLeftRight';\nimport {floorConfig} from './kernels/Floor';\nimport {floorDivConfig} from './kernels/FloorDiv';\nimport {fromPixelsConfig} from './kernels/FromPixels';\nimport {fusedConv2DConfig} from './kernels/FusedConv2D';\nimport {fusedDepthwiseConv2DConfig} from './kernels/FusedDepthwiseConv2D';\nimport {gatherNdConfig} from './kernels/GatherNd';\nimport {gatherV2Config} from './kernels/GatherV2';\nimport {greaterConfig} from './kernels/Greater';\nimport {greaterEqualConfig} from './kernels/GreaterEqual';\nimport {identityConfig} from './kernels/Identity';\nimport {ifftConfig} from './kernels/IFFT';\nimport {imagConfig} from './kernels/Imag';\nimport {isFiniteConfig} from './kernels/IsFinite';\nimport {isInfConfig} from './kernels/IsInf';\nimport {isNaNConfig} from './kernels/IsNaN';\nimport {leakyReluConfig} from './kernels/LeakyRelu';\nimport {lessConfig} from './kernels/Less';\nimport {lessEqualConfig} from './kernels/LessEqual';\nimport {linSpaceConfig} from './kernels/LinSpace';\nimport {logConfig} from './kernels/Log';\nimport {log1pConfig} from './kernels/Log1p';\nimport {logicalAndConfig} from './kernels/LogicalAnd';\nimport {logicalNotConfig} from './kernels/LogicalNot';\nimport {logicalOrConfig} from './kernels/LogicalOr';\nimport {LRNConfig} from './kernels/LRN';\nimport {LRNGradConfig} from './kernels/LRNGrad';\nimport {maxConfig} from './kernels/Max';\nimport {maximumConfig} from './kernels/Maximum';\nimport {maxPoolConfig} from './kernels/MaxPool';\nimport {maxPool3DConfig} from './kernels/MaxPool3D';\nimport {maxPoolGrad3DConfig} from './kernels/MaxPool3DGrad';\nimport {maxPoolGradConfig} from './kernels/MaxPoolGrad';\nimport {maxPoolWithArgmaxConfig} from './kernels/MaxPoolWithArgmax';\nimport {meanConfig} from './kernels/Mean';\nimport {minConfig} from './kernels/Min';\nimport {minimumConfig} from './kernels/Minimum';\nimport {mirrorPadConfig} from './kernels/MirrorPad';\nimport {modConfig} from './kernels/Mod';\nimport {multinomialConfig} from './kernels/Multinomial';\nimport {multiplyConfig} from './kernels/Multiply';\nimport {negConfig} from './kernels/Neg';\nimport {nonMaxSuppressionV3Config} from './kernels/NonMaxSuppressionV3';\nimport {nonMaxSuppressionV4Config} from './kernels/NonMaxSuppressionV4';\nimport {nonMaxSuppressionV5Config} from './kernels/NonMaxSuppressionV5';\nimport {notEqualConfig} from './kernels/NotEqual';\nimport {oneHotConfig} from './kernels/OneHot';\nimport {onesLikeConfig} from './kernels/OnesLike';\nimport {packConfig} from './kernels/Pack';\nimport {padV2Config} from './kernels/PadV2';\nimport {powConfig} from './kernels/Pow';\nimport {preluConfig} from './kernels/Prelu';\nimport {prodConfig} from './kernels/Prod';\nimport {rangeConfig} from './kernels/Range';\nimport {realConfig} from './kernels/Real';\nimport {realDivConfig} from './kernels/RealDiv';\nimport {reciprocalConfig} from './kernels/Reciprocal';\nimport {reluConfig} from './kernels/Relu';\nimport {relu6Config} from './kernels/Relu6';\nimport {reshapeConfig} from './kernels/Reshape';\nimport {resizeBilinearConfig} from './kernels/ResizeBilinear';\nimport {resizeBilinearGradConfig} from './kernels/ResizeBilinearGrad';\nimport {resizeNearestNeighborConfig} from './kernels/ResizeNearestNeighbor';\nimport {resizeNearestNeighborGradConfig} from './kernels/ResizeNearestNeighborGrad';\nimport {reverseConfig} from './kernels/Reverse';\nimport {rotateWithOffsetConfig} from './kernels/RotateWithOffset';\nimport {roundConfig} from './kernels/Round';\nimport {rsqrtConfig} from './kernels/Rsqrt';\nimport {scatterNdConfig} from './kernels/ScatterNd';\nimport {selectConfig} from './kernels/Select';\nimport {seluConfig} from './kernels/Selu';\nimport {sigmoidConfig} from './kernels/Sigmoid';\nimport {signConfig} from './kernels/Sign';\nimport {sinConfig} from './kernels/Sin';\nimport {sinhConfig} from './kernels/Sinh';\nimport {sliceConfig} from './kernels/Slice';\nimport {softmaxConfig} from './kernels/Softmax';\nimport {softplusConfig} from './kernels/Softplus';\nimport {spaceToBatchNDConfig} from './kernels/SpaceToBatchND';\nimport {sparseToDenseConfig} from './kernels/SparseToDense';\nimport {splitVConfig} from './kernels/SplitV';\nimport {sqrtConfig} from './kernels/Sqrt';\nimport {squareConfig} from './kernels/Square';\nimport {squaredDifferenceConfig} from './kernels/SquaredDifference';\nimport {stepConfig} from './kernels/Step';\nimport {stridedSliceConfig} from './kernels/StridedSlice';\nimport {subConfig} from './kernels/Sub';\nimport {sumConfig} from './kernels/Sum';\nimport {tanConfig} from './kernels/Tan';\nimport {tanhConfig} from './kernels/Tanh';\nimport {tileConfig} from './kernels/Tile';\nimport {topKConfig} from './kernels/TopK';\nimport {transformConfig} from './kernels/Transform';\nimport {transposeConfig} from './kernels/Transpose';\nimport {uniqueConfig} from './kernels/Unique';\nimport {unpackConfig} from './kernels/Unpack';\nimport {unsortedSegmentSumConfig} from './kernels/UnsortedSegmentSum';\nimport {zerosLikeConfig} from './kernels/ZerosLike';\n\n// List all kernel configs here\nconst kernelConfigs: KernelConfig[] = [\n  LRNConfig,\n  LRNGradConfig,\n  _fusedMatMulConfig,\n  absConfig,\n  acosConfig,\n  acoshConfig,\n  addConfig,\n  addNConfig,\n  allConfig,\n  anyConfig,\n  argMaxConfig,\n  argMinConfig,\n  asinConfig,\n  asinhConfig,\n  atan2Config,\n  atanConfig,\n  atanhConfig,\n  avgPool3DConfig,\n  avgPoolConfig,\n  avgPoolGrad3DConfig,\n  avgPoolGradConfig,\n  batchMatMulConfig,\n  batchNormConfig,\n  batchToSpaceNDConfig,\n  bincountConfig,\n  castConfig,\n  ceilConfig,\n  clipByValueConfig,\n  complexAbsConfig,\n  complexConfig,\n  concatConfig,\n  conv2DBackpropFilterConfig,\n  conv2DBackpropInputConfig,\n  conv2DConfig,\n  conv3DBackpropFilterV2Config,\n  conv3DBackpropInputConfig,\n  conv3DConfig,\n  cosConfig,\n  coshConfig,\n  cropAndResizeConfig,\n  cumsumConfig,\n  denseBincountConfig,\n  depthToSpaceConfig,\n  depthwiseConv2dNativeBackpropFilterConfig,\n  depthwiseConv2dNativeBackpropInputConfig,\n  depthwiseConv2dNativeConfig,\n  diagConfig,\n  dilation2DConfig,\n  einsumConfig,\n  eluConfig,\n  eluGradConfig,\n  equalConfig,\n  erfConfig,\n  expConfig,\n  expandDimsConfig,\n  expm1Config,\n  fftConfig,\n  fillConfig,\n  flipLeftRightConfig,\n  floorConfig,\n  floorDivConfig,\n  fromPixelsConfig,\n  fusedConv2DConfig,\n  fusedDepthwiseConv2DConfig,\n  gatherNdConfig,\n  gatherV2Config,\n  greaterConfig,\n  greaterEqualConfig,\n  identityConfig,\n  ifftConfig,\n  imagConfig,\n  isFiniteConfig,\n  isInfConfig,\n  isNaNConfig,\n  leakyReluConfig,\n  lessConfig,\n  lessEqualConfig,\n  linSpaceConfig,\n  log1pConfig,\n  logConfig,\n  logicalAndConfig,\n  logicalNotConfig,\n  logicalOrConfig,\n  maxConfig,\n  maxPool3DConfig,\n  maxPoolConfig,\n  maxPoolGrad3DConfig,\n  maxPoolGradConfig,\n  maxPoolWithArgmaxConfig,\n  maximumConfig,\n  meanConfig,\n  minConfig,\n  minimumConfig,\n  mirrorPadConfig,\n  modConfig,\n  multinomialConfig,\n  multiplyConfig,\n  negConfig,\n  nonMaxSuppressionV3Config,\n  nonMaxSuppressionV4Config,\n  nonMaxSuppressionV5Config,\n  notEqualConfig,\n  oneHotConfig,\n  onesLikeConfig,\n  packConfig,\n  padV2Config,\n  powConfig,\n  preluConfig,\n  prodConfig,\n  rangeConfig,\n  realConfig,\n  realDivConfig,\n  reciprocalConfig,\n  relu6Config,\n  reluConfig,\n  reshapeConfig,\n  resizeBilinearConfig,\n  resizeBilinearGradConfig,\n  resizeNearestNeighborConfig,\n  resizeNearestNeighborGradConfig,\n  reverseConfig,\n  rotateWithOffsetConfig,\n  roundConfig,\n  rsqrtConfig,\n  scatterNdConfig,\n  selectConfig,\n  seluConfig,\n  sigmoidConfig,\n  signConfig,\n  sinConfig,\n  sinhConfig,\n  sliceConfig,\n  softmaxConfig,\n  softplusConfig,\n  spaceToBatchNDConfig,\n  sparseToDenseConfig,\n  splitVConfig,\n  sqrtConfig,\n  squareConfig,\n  squaredDifferenceConfig,\n  stepConfig,\n  stridedSliceConfig,\n  subConfig,\n  sumConfig,\n  tanConfig,\n  tanhConfig,\n  tileConfig,\n  topKConfig,\n  transformConfig,\n  transposeConfig,\n  uniqueConfig,\n  unpackConfig,\n  unsortedSegmentSumConfig,\n  zerosLikeConfig\n];\n\nfor (const kernelConfig of kernelConfigs) {\n  registerKernel(kernelConfig);\n}\n","/** @license See the LICENSE file. */\n\n// This code is auto-generated, do not modify this file!\nconst version = '3.4.0';\nexport {version};\n"],"names":["contexts","WEBGL_ATTRIBUTES","alpha","antialias","premultipliedAlpha","preserveDrawingBuffer","depth","stencil","failIfMajorPerformanceCaveat","setWebGLContext","webGLVersion","gl","getWebGLContext","newCtx","Error","canvas","OffscreenCanvas","document","createElement","createCanvas","addEventListener","ev","preventDefault","getContext","getWebGLRenderingContext","console","log","isContextLost","disable","DEPTH_TEST","STENCIL_TEST","BLEND","DITHER","POLYGON_OFFSET_FILL","SAMPLE_COVERAGE","enable","SCISSOR_TEST","CULL_FACE","cullFace","BACK","PackingScheme","TextureUsage","PhysicalTextureType","getUnpackedMatrixTextureShapeWidthHeight","rows","columns","getDenseTexShape","shape","size","util","sizeFromShape","texelsNeeded","Math","ceil","sizeToSquarishShape","getPackedMatrixTextureShapeWidthHeight","max","getTextureConfig","textureHalfFloatExtension","glany","internalFormatFloat","internalFormatHalfFloat","internalFormatPackedHalfFloat","internalFormatPackedFloat","textureFormatFloat","downloadTextureFormat","downloadUnpackNumChannels","defaultNumChannels","textureTypeHalfFloat","textureTypeFloat","env","getNumber","R32F","R16F","RGBA16F","RGBA32F","RED","HALF_FLOAT","FLOAT","RGBA","HALF_FLOAT_OES","callAndCheck","func","returnValue","getBool","error","getError","NO_ERROR","getWebGLErrorMessage","checkWebGLError","canBeRepresented","num","abs","status","INVALID_ENUM","INVALID_VALUE","INVALID_OPERATION","INVALID_FRAMEBUFFER_OPERATION","OUT_OF_MEMORY","CONTEXT_LOST_WEBGL","getExtensionOrThrow","extensionName","throwIfNull","getExtension","createVertexShader","vertexShaderSource","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","createFragmentShader","fragmentShaderSource","fragmentShader","FRAGMENT_SHADER","shaderInfoLog","lineNumberRegexResult","lineNumberRegex","exec","lineNumber","shaderLines","split","pad","length","toString","linesWithLineNumbers","map","line","rightPad","maxLineLength","i","beforeErrorLines","slice","errorLine","afterErrorLines","join","logShaderSourceAndInfoLog","createProgram","linkProgram","program","getProgramParameter","LINK_STATUS","getProgramInfoLog","validateProgram","VALIDATE_STATUS","createStaticVertexBuffer","data","buffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","createStaticIndexBuffer","ELEMENT_ARRAY_BUFFER","createTexture","validateTextureSize","width","height","maxTextureSize","createFramebuffer","bindVertexBufferToProgramAttribute","attribute","arrayEntriesPerItem","itemStrideInBytes","itemOffsetInBytes","loc","getAttribLocation","vertexAttribPointer","enableVertexAttribArray","bindTextureUnit","texture","textureUnit","validateTextureUnit","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","getProgramUniformLocationOrThrow","uniformName","getUniformLocation","getProgramUniformLocation","bindTextureToProgramUniformSampler","uniformSamplerLocation","uniform1i","bindColorTextureToFramebuffer","framebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","unbindColorTextureFromFramebuffer","validateFramebuffer","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","getFramebufferErrorMessage","FRAMEBUFFER_INCOMPLETE_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_DIMENSIONS","FRAMEBUFFER_UNSUPPORTED","returnTOrNull","failureMessage","tOrNull","maxTextureUnit","MAX_COMBINED_TEXTURE_IMAGE_UNITS","glTextureUnit","getBatchDim","dimsToSkip","getRowsCols","getShapeAs3D","shapeAs3D","getTextureShapeFromLogicalShape","logShape","isPacked","maxTexSize","d","nearestLargerEven","squeezeResult","squeezeShape","newShape","batchDim","cols","isEven","n","isReshapeFree","shape1","shape2","arraysEqual","shape1Cols","shape2Cols","MAX_TEXTURE_SIZE","MAX_TEXTURES_IN_SHADER","getWebGLMaxTextureSize","getParameter","getMaxTexturesInShader","MAX_TEXTURE_IMAGE_UNITS","min","getWebGLDisjointQueryTimerVersion","queryTimerVersion","hasExtension","isWebGLVersionEnabled","e","isCapableOfRenderingToFloatTexture","createFloatTextureAndBindToFramebuffer","isDownloadFloatTextureEnabled","COLOR_BUFFER_HALF_FLOAT","texConfig","texImage2D","frameBuffer","isFrameBufferComplete","deleteTexture","deleteFramebuffer","createHalfFloatTextureAndBindToFramebuffer","isWebGLFenceEnabled","fenceSync","assertNotComplex","tensor","opName","Array","isArray","forEach","t","assert","dtype","viewport","scissor","ENV","getGlslDifferences","version","varyingVs","varyingFs","texture2D","output","defineOutput","defineSpecialNaN","defineSpecialInf","defineRound","getLogicalCoordinatesFromFlatIndex","coords","index","strides","computeStrides","stride","getFlatIndexFrom3D","registerFlag","get","device_util","isMobile","threshold","ENCODE_FLOAT_SNIPPET","DecodeMatrixProgram","[object Object]","outputShape","this","DENSE","texShape","glsl","userCode","shader_util.getLogicalCoordinatesFromFlatIndex","DecodeMatrixPackedProgram","EncodeFloatProgram","DOWNLOAD","EncodeFloatPackedProgram","EncodeMatrixProgram","inputIsUnsignedByte","shader_util.getFlatIndexFrom3D","EncodeMatrixPackedProgram","mainLoop","row","col","channel","webgl_util.createVertexShader","createVertexBuffer","webgl_util.createStaticVertexBuffer","Float32Array","createIndexBuffer","webgl_util.createStaticIndexBuffer","Uint16Array","createAndConfigureTexture","internalFormat","textureFormat","textureType","webgl_util.validateTextureSize","webgl_util.createTexture","tex2d","webgl_util.callAndCheck","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","getInternalFormatForFloat32MatrixTexture","textureConfig","createFloat32MatrixTexture","tex_util.getUnpackedMatrixTextureShapeWidthHeight","getInternalFormatForFloat16MatrixTexture","createFloat16MatrixTexture","getInternalFormatForUnsignedBytesMatrixTexture","createUnsignedBytesMatrixTexture","UNSIGNED_BYTE","getInternalFormatForPackedMatrixTexture","createPackedMatrixTexture","tex_util.getPackedMatrixTextureShapeWidthHeight","getInternalFormatForFloat16PackedMatrixTexture","createFloat16PackedMatrixTexture","bindVertexProgramAttributeStreams","vertexBuffer","webgl_util.bindVertexBufferToProgramAttribute","uploadDenseMatrixToTexture","dataForUpload","texelDataType","Uint8Array","set","uploadPixelDataToTexture","pixels","createBufferFromOutputTexture","gl2","PIXEL_PACK_BUFFER","bufferSizeBytes","bytesPerFloat","STREAM_READ","readPixels","downloadFloat32MatrixFromBuffer","downloadTarget","getBufferSubData","downloadByteEncodedFloatMatrixFromOutputTexture","w","h","downloadPackedMatrixFromBuffer","batch","physicalRows","physicalCols","tex_util.getPackedRGBAArraySizeFromMatrixShape","downloadMatrixFromPackedOutputTexture","packedRGBA","GPGPUContext","glVersion","COLOR_BUFFER_FLOAT","TEXTURE_FLOAT","TEXTURE_HALF_FLOAT","textureFloatExtension","webgl_util.getExtensionOrThrow","webgl_util.hasExtension","colorBufferFloatExtension","colorBufferHalfFloatExtension","gpgpu_util.createVertexBuffer","indexBuffer","gpgpu_util.createIndexBuffer","webgl_util.createFramebuffer","tex_util.getTextureConfig","debug","disposed","warn","outputTexture","finish","deleteBuffer","throwIfDisposed","gpgpu_util.createFloat32MatrixTexture","gpgpu_util.createFloat16MatrixTexture","gpgpu_util.createUnsignedBytesMatrixTexture","gpgpu_util.uploadPixelDataToTexture","gpgpu_util.uploadDenseMatrixToTexture","gpgpu_util.createFloat16PackedMatrixTexture","gpgpu_util.createPackedMatrixTexture","webgl_util.unbindColorTextureFromFramebuffer","downloadMatrixDriver","gpgpu_util.downloadByteEncodedFloatMatrixFromOutputTexture","gpgpu_util.downloadPackedMatrixFromBuffer","gpgpu_util.downloadFloat32MatrixFromBuffer","bindTextureToFrameBuffer","result","gpgpu_util.createBufferFromOutputTexture","unbindTextureToFrameBuffer","fenceContext","createFence","pollFence","query","isFencePassed","sync","SYNC_GPU_COMMANDS_COMPLETE","flush","clientWaitSync","ALREADY_SIGNALED","CONDITION_SATISFIED","beginQuery","endQuery","isQueryAvailable","gpgpu_util.downloadMatrixFromPackedOutputTexture","webgl_util.createFragmentShader","gpgpu_util.createVertexShader","webgl_util.createProgram","attachShader","webgl_util.linkProgram","webgl_util.validateProgram","vertexAttrsAreBound","setProgram","gpgpu_util.bindVertexProgramAttributeStreams","deleteProgram","useProgram","shouldThrow","webgl_util.getProgramUniformLocationOrThrow","webgl_util.getProgramUniformLocation","inputMatrixTexture","uniformLocation","throwIfNoProgram","webgl_util.bindTextureToProgramUniformSampler","outputMatrixTexture","setOutputMatrixTextureDriver","outputPackedMatrixTexture","startRow","numRows","startColumn","numColumns","setOutputMatrixWriteRegionDriver","webgl_util.validateFramebuffer","debugValidate","drawElements","TRIANGLES","UNSIGNED_SHORT","disjointQueryTimerExtension","getQueryTimerExtension","ext","getQueryTimerExtensionWebGL2","createQuery","TIME_ELAPSED_EXT","getQueryTimerExtensionWebGL1","createQueryEXT","beginQueryEXT","endQueryEXT","repeatedTry","getQueryTime","getQueryParameter","QUERY_RESULT","getQueryObjectEXT","QUERY_RESULT_EXT","available","QUERY_RESULT_AVAILABLE","disjoint","GPU_DISJOINT_EXT","QUERY_RESULT_AVAILABLE_EXT","Promise","resolve","addItemToPoll","arr","linearSearchLastTrue","itemsToPoll","x","isDoneFn","resolveFn","push","pollItems","webgl_util.bindColorTextureToFramebuffer","downloadAndDecode","outputMatrixTextureMaybePacked","y","getBroadcastDims","backend_util","makeShader","inputsInfo","usesPackedTextures","prefixSnippets","shapeInfo","logicalShape","isUniform","name","inputPrefixSnippet","inputSamplingSnippet","inInfo","outShapeInfo","res","getPackedSamplerFromInInfo","getSamplerFromInInfo","inShape","outShape","inputInfo","texName","texFuncSnippet","charAt","toUpperCase","funcName","inRank","outRank","broadcastDims","type","getCoordsDataType","rankDiff","coordsSnippet","fields","unpackedCoordsSnippet","s","isInputScalar","isOutputScalar","indexOf","getPackedSamplerAtOutputCoords","outTexShape","inTexShape","flatOffset","getSamplerAtOutputCoords","getInputSamplingSnippet","floatTextureSampleSnippet","getFloatTextureSampleSnippet","outputSamplingSnippet","floatTextureSetOutputSnippet","shaderPrefix","SAMPLE_1D_SNIPPET","SAMPLE_2D_SNIPPET","SAMPLE_3D_SNIPPET","getShaderPrefix","getOutputScalarCoords","packedTexShape","getOutputPacked1DCoords","texelsInLogicalRow","getOutputPacked2DCoords","texelsInBatch","getOutputPacked3DCoords","texelsInBatchN","batches","b","getOutputPackedNDCoords","getPackedOutputSamplingSnippet","getFloatTextureSetRGBASnippet","getOutput1DCoords","getOutput2DCoords","coordsFromIndexSnippet","getOutput3DCoords","getOutput4DCoords","getOutput5DCoords","getOutput6DCoords","getOutputSamplingSnippet","getFloatTextureSetRSnippet","SHADER_PACKED_PREFIX","texNumR","texNumC","tNumR","tNumC","offset","getFlatOffsetUniformName","getSamplerScalar","getUniformSampler","getSampler1D","keptDims","squeezedShape","params","squeezeInputInfo","getSqueezedParams","getSampler2D","stride0","stride1","getSampler3D","stride2","getSampler4D","stride3","getSampler5D","stride4","getSampler6D","getPackedSamplerScalar","getPackedSampler1D","valuesPerRow","getPackedSampler2D","getPackedSampler3D","rank","getPackedSamplerND","inSize","newInputInfo","JSON","parse","stringify","validateBinaryAndProgram","shapeInfos","inputs","shapeA","input","shapeB","texShapeA","texShapeB","texData","createSimpleBinaryKernelImpl","op","aShape","bShape","aVals","bVals","assertAndGetBroadcastShape","resultRank","resultStrides","resultSize","getTypedArrayFromDType","aRank","bRank","aStrides","bStrides","aBroadcastDims","bBroadcastDims","indexToLoc","aLoc","aIndex","locToIndex","bLoc","bIndex","addImpl","a","createSimpleUnaryImpl","values","attrs","newValues","ceilImpl","xi","expImpl","exp","expm1Impl","expm1","floorImpl","floor","greaterImpl","lessImpl","logImpl","maximumImpl","aValue","bValue","minimumImpl","multiplyImpl","notEqualImpl","rsqrtImpl","sqrt","squaredDifferenceImpl","diff","subImpl","vals","resultValues","xVals","weightsVals","weightsDtype","weightsShape","weightsSize","outVals","makeZerosTypedArray","value","xBuf","weightsBuf","binaryOutput","numCols","outBuf","j","simplyConcat","getArrayFromDType","colOffset","decodedData","fromUint8ToStringArray","tIdx","resIdx","indicesBuf","flattenOutputShape","originalLoc","batchIdx","indicesIdx","indicesIndex","originalIndex","start","stop","step","reduceSize","xShape","xDtype","minusOne","createScalarValue","reductionAxes","reduceShape","computeOutAndReduceShapes","outDtype","upcastType","prod","numElements","begin","isContinous","slice_util","isSliceContinous","xStrides","computeFlatOffset","subarray","inBuf","outLoc","inLoc","idx","fromStringArrayToUint8","newLoc","reps","k","sorted","lastDim","allTopKVals","allTopKIndices","valAndInd","sort","outOffset","topKVals","topKIndices","perm","xRank","xSize","newStrides","axis","$axis","parseAxisParam","uniqueElements","indices","Int32Array","inputBuffer","TensorBuffer","uniqueIndices","is1DTensor","element","axisValues","m","undefined","uniqueIndex","Object","keys","outputTmpShape","outputBuffer","uniqueElementIndex","outputValues","addImplCPU","bincountImpl","bincountImplCPU","bincountReduceImpl","bincountReduceImplCPU","ceilImplCPU","concatImpl","concatImplCPU","expImplCPU","expm1ImplCPU","floorImplCPU","gatherV2Impl","gatherV2ImplCPU","greaterImplCPU","lessImplCPU","linSpaceImpl","linSpaceImplCPU","logImplCPU","maxImpl","maxImplCPU","maximumImplCPU","minimumImplCPU","multiplyImplCPU","negImpl","negImplCPU","prodImpl","prodImplCPU","rangeImpl","rangeImplCPU","rsqrtImplCPU","simpleAbsImpl","simpleAbsImplCPU","sliceImpl","sliceImplCPU","stridedSliceImpl","stridedSliceImplCPU","subImplCPU","tileImpl","tileImplCPU","topKImpl","topKImplCPU","transposeImpl","transposeImplCPU","uniqueImpl","uniqueImplCPU","shared","getVecChannels","getChannels","PackProgram","channels","outOfBoundsCondition","dims","cond","getOutOfBoundsCondition","setup","innerDims","getSetup","sourceCoords","coord","getSourceCoordsArr","getOutput","ReshapePackedProgram","inputShape","thisRC","TextureManager","gpgpu","shapeRC","usage","physicalTexType","getPhysicalFromLogicalTextureType","shapeKey","getKeyFromTextureShape","freeTextures","usedTextures","texBytes","computeBytes","numFreeTextures","numUsedTextures","_numBytesFree","newTexture","shift","PACKED_2X2_FLOAT32","PACKED_2X2_FLOAT16","UNPACKED_FLOAT32","UNPACKED_FLOAT16","PACKED_4X1_UNSIGNED_BYTE","_numBytesAllocated","logicalTexType","deleteTexThreshold","deleteMatrixTexture","texList","texIndex","splice","logEnabled","total","freeRatio","round","numBytesAllocated","numBytesFree","tex","internalFormatForPhysicalTexType","packedWidth","packedHeight","numBytesForInternalFormat","UPLOAD","RENDER","getPhysicalTextureForRendering","PIXELS","shapeRowsCol","UnaryOpProgram","opSnippet","ABS","CLONE","UnaryOpPackedProgram","UnpackProgram","getSourceCoords","whereImpl","kernel_impls","binaryCaches","MathBackendWebGL","KernelBackend","super","WeakMap","WeakSet","binaryCache","gpgpuCreatedLocally","textureManager","numMBBeforeWarning","global","screen","window","devicePixelRatio","DataStorage","engine","nextDataId","numDataIds","cpuBackend","pendingDeletes","checkNumericalProblems","dataId","id","refCount","has","tensorInfo","disposeData","complexTensorInfos","unary_op.CLONE","runWebGLProgram","readSync","disposeIntermediateTensorInfo","convertAndCacheOnCPU","shouldTimeProgram","activeTimers","now","realValues","real","imagValues","imag","mergeRealAndImagArrays","getValuesFromTexture","downloadWaitMs","pendingRead","subscribers","read","tmpDownloadTarget","decode","tmpData","createBufferFromTexture","tex_util.getDenseTexShape","createAndWaitForFence","ps","all","dTypeVals","delete","pendingDisposal","removeDataId","decodeString","webgl_util.canBeRepresented","tmpTarget","downloadMatrixFromPackedTexture","shouldUsePackedProgram","webgl_util.getShapeAs3D","f","oldActiveTimers","newActiveTimers","outerMostTime","programTimersStack","flattenedActiveTimerQueries","flatten","filter","flattenedActiveTimerNames","uploadWaitMs","kernelMs","wallMs","sum","ms","unreliable","numBytesInGPU","numBytesInGPUAllocated","numBytesInGPUFree","startMs","endMs","waitForQueryAndGetTime","timerQuery","force","add","releaseGPUData","key","origDataId","dataRefCount","releaseTexture","uploadToGPU","sizeThreshold","every","condition","condVals","dataSync","outInfo","compileAndRun","makeTensorFromDataId","shouldExecuteOnCPU","outValues","makeOutput","packedUnaryOp","unary_op.ABS","isString","encodedValues","encodeString","write","makeTensorInfo","afterShape","input3DShape","webgl_util.getBatchDim","webgl_util.getRowsCols","input3D","afterShapeAs3D","outputDtype","customSetup","preventEagerUnpackingOfOutput","outData","packedOutput","outPackingScheme","tex_util.PackingScheme","texelShape","outTexUsage","dataToDispose","inputsData","packedInputs","uniformValues","unpackTensor","packTensor","webgl_util.isReshapeFree","savedInput","targetShape","packedReshape","outputData","keyInputs","concat","hasOffset","keyUserCode","constructor","gpgpu_math.makeShaderKey","binary","getAndSaveBinary","inputInfos","variableNames","inShapeInfos","source","shader_compiler.makeShader","webGLProgram","infLoc","nanLoc","uniformLocations","varName","gpgpu_math.compileProgram","startTimer","outTex","setOutputPackedMatrixTexture","setOutputMatrixTexture","uniform1f","Infinity","NaN","varLoc","varOffsetLoc","uniform1fv","setInputMatrixTexture","executeProgram","gpgpu_math.runProgram","info","endTimer","glFlushThreshold","time","lastGlFlushTime","unpacked","getBinary","dispose","HTMLCanvasElement","remove","floatPrecisionValue","tidy","debugFlag","underflowCheckValue","scalar","floatPrecision","webgl_util.getTextureShapeFromLogicalShape","isByteArray","tempDenseInputHandle","getTexture","preventEagerUnpacking","encodedOutputTarget","outputTexData","acquireTexture","float32Values","float32ToTypedArray","texType","warnedAboutMemory","mb","toFixed","bytesPerElement","forceHalfFloat","isBrowser","registerBackend","webgl","BinaryOpProgram","BinaryOpPackedProgram","checkOutOfBounds","checkOutOfBoundsString","identity","args","backend","incRef","identityConfig","kernelName","Identity","backendName","kernelFunc","complex","complexInfo","realTensorInfo","imagTensorInfo","complexConfig","Complex","LEAKYRELU","LEAKYRELU_PACKED","leakyReluConfig","LeakyRelu","$alpha","PRELU","PRELU_PACKED","preluConfig","Prelu","unaryKernelFunc","packedOpSnippet","cpuKernelImpl","webglBackend","$dtype","xData","binaryKernelFunc","supportsComplex","aData","bData","complexParts","aPart","bPart","aHandle","bHandle","complexOutput","out","mapActivationToShaderProgram","activation","packed","CHECK_NAN_SNIPPET","MatMulPackedProgram","transposeA","transposeB","addBias","hasPreluActivation","hasLeakyreluActivation","sharedDim","sharedDimensionPacked","aSample","bSample","aSwizzle","bSwizzle","activationSnippet","applyActivationSnippet","addBiasSnippet","batchASnippet","batchBSnippet","COMPLEX_MULTIPLY","BinaryOpComplexProgram","MUL","multiply","realProgram","binaryop_complex_gpu.COMPLEX_MULTIPLY","imagProgram","realPart","imagPart","cpuMultiply","multiplyConfig","Multiply","reshape","$shape","inferFromImplicitShape","$xSize","xTexData","reshapeConfig","Reshape","MeanProgram","reduceInfo","divisor","windowSize","batchSize","outSize","windowSizeNearestVec4","windowSizeVec4Remainder","updateSnippet","denominator","isInt","toPrecision","ReduceProgram","reduceType","initializationValue","compareOp","vecType","reduce","reductionType","reductionStages","stages","computeOptimalWindowSize","getReductionStages","previousResult","TransposeProgram","newDim","switched","originalOrder","switchedCoords","getSwitchedCoords","TransposePackedProgram","outputOrder","switchedOrder","nextColumn","getc","keepDims","reductionIndices","origAxes","axes","permutedAxes","getAxesPermutation","sumInputIsTransposed","sumInput","getInnerMostAxes","assertAxesAreInnerMostDims","sumOutShape","expandShapeToKeepDim","reshapedInput","reduced","sumOutType","sumImpl","sumConfig","Sum","transpose","cpuTranspose","transposeConfig","Transpose","batchMatMulImpl","bias","preluActivationWeights","leakyreluAlpha","innerShapeA","innerShapeB","outerShapeA","outerShapeB","outerDimsA","outerDimsB","batchDimA","batchDimB","batchDimsCompatible","a3dShape","b3dShape","a3d","b3d","intermediates","hasBias","hasPreluActivationWeights","hasLeakyreluAlpha","fusedActivation","aVec","bVec","shouldReshapeB","aVec3d","bVec3d","product","$leakyreluAlpha","outReshaped","_fusedMatMulConfig","_FusedMatMul","absConfig","Abs","acos","acosConfig","Acos","acosh","acoshConfig","Acosh","ADD","addKernelFunc","cpuAdd","addConfig","Add","AddNProgram","shapes","_","snippets","variable","operation","AddNPackedProgram","addNConfig","AddN","addN","tensors","midIndex","leftSide","rightSide","d1","d2","allConfig","All","permutedX","a2D","anyConfig","Any","ArgMinMaxProgram","firstPass","compOp","indexSnippet","ArgMinMaxPackedProgram","sourceLocSetup","sourceRank","sourceLocDType","inChannel","intChannels","srcRCoords","srcGCoords","srcBCoords","srcACoords","fetchCandidateIdx","fetchValue","getBestIndicesAChannelSnippet","argReduce","bestIndicesA","argReducePacked","argMinMaxReduce","intermediateTensorInfos","reshaped","argMaxConfig","ArgMax","$x","argMinConfig","ArgMin","asin","asinConfig","Asin","asinh","asinhConfig","Asinh","atan","atanConfig","Atan","atan2","CHECK_NAN_SNIPPET_BINARY","atan2Config","Atan2","atanh","atanhConfig","Atanh","Pool2DProgram","convInfo","poolType","computePositions","flattenPositions","includeBatchInIndex","filterWidth","strideHeight","strideWidth","dilationHeight","dilationWidth","effectiveFilterHeight","effectiveFilterWidth","padTop","padInfo","top","padLeft","left","isAvgPool","batchFlattenPositionStr","inHeight","inWidth","inChannels","flattenPositionStr","filterWidthNearestVec4","filterWidthVec4Remainder","Pool3DProgram","strideDepth","dilationDepth","effectiveFilterDepth","padFront","front","inDepth","avgPoolConfig","AvgPool","filterSize","dimRoundingMode","eitherStridesOrDilationsAreOne","computePool2DInfo","filterHeight","avgPoolProgram","avgPool3DConfig","AvgPool3D","dataFormat","computePool3DInfo","AvgPool2DBackpropProgram","avgMultiplier","outHeight","outWidth","AvgPool3DBackpropProgram","filterDepth","outDepth","avgPoolGrad3DConfig","AvgPool3DGrad","dy","avgPoolBackpropProgram","avgPoolGradConfig","AvgPoolGrad","batchMatMulConfig","BatchMatMul","BatchNormProgram","meanShape","varianceShape","offsetShape","scaleShape","varianceEpsilon","offsetSnippet","scaleSnippet","BatchNormPackedProgram","batchNormConfig","FusedBatchNorm","mean","variance","scale","finalInputs","SliceProgram","destSize","uniformPart","getCoords","body","startLoc","getUniformLocationNoThrow","uniform1iv","SlicePackedProgram","sourceLoc","getChannel","upperRow","lowerRow","$begin","$size","parseSliceParams","assertParamsValid","getCustomSetupFunc","newTexData","assign","shallowSlice","sliceConfig","Slice","batchToSpaceNDConfig","BatchToSpaceND","blockShape","crops","getReshaped","permuted","getPermuted","reshapedPermuted","getReshapedPermuted","sliceBeginCoords","getSliceBeginCoords","sliceSize","getSliceSize","toDispose","reshapedIntermediate","transposedIntermediate","reshapedIntermediate2","sliced","bincountConfig","Bincount","weights","notEqual","notEqualConfig","NotEqual","realConfig","Real","castConfig","Cast","cast","zerosTensor","tf.zeros","floatX","hasEncodingLoss","int","zerosTensorInfo","CEIL","ceilConfig","Ceil","ClipProgram","minLoc","maxLoc","ClipPackedProgram","clipByValueConfig","ClipByValue","clipValueMin","clipValueMax","ComplexAbsProgram","makeComplexComponentTensorInfo","complexTensor","complexPart","complexAbsConfig","ComplexAbs","programInputs","ConcatProgram","computeOutShape","offsets","lastIndex","lastShift","ConcatPackedProgram","lastChannels","allChannels","getValueSnippet","shiftedChannels","channelIdx","c","imagConfig","Imag","reals","imags","realConcated","imagConcated","r","tensors2D","computeTensors2D","inputsValShapes","finalOutShape","reshapedResult","$inputs","assertParamsConsistent","concatConfig","Concat","Conv2DProgram","inputDepthNearestVec4","inputDepthVec4Remainder","isChannelsLast","rowDim","colDim","channelDim","Conv3DProgram","Im2ColPackedProgram","itemsPerBlockRow","unrolled","conv2dByMatMul","sharedMatMulDim","outerShapeX","outerShapeFilter","outChannels","batchMatMulWillBeUnpacked","reshapeWillBeExpensive","xReshaped","originalXTexDataShape","filterReshaped","pointwiseConv","pointwiseConvTexData","conv2dWithIm2Row","x2ColShape","xSqueezed","w2Row","im2ColProgram","im2Col","im2ColReshaped","matmulProgram","conv2DConfig","Conv2D","dilations","$dataFormat","convertConv2DDataFormat","computeConv2DInfo","Conv2DDerFilterProgram","filterShape","Conv2DDerInputProgram","Conv3DDerFilterProgram","Conv3DDerInputProgram","conv2DBackpropFilterConfig","Conv2DBackpropFilter","conv2DBackpropInputConfig","Conv2DBackpropInput","conv3DConfig","Conv3D","computeConv3DInfo","conv3DBackpropFilterV2Config","Conv3DBackpropFilterV2","conv3DBackpropInputConfig","Conv3DBackpropInputV2","cos","CHECK_NAN_SNIPPET_UNARY","cosConfig","Cos","cosh","coshConfig","Cosh","CropAndResizeProgram","imageShape","boxShape","cropSize","method","extrapolationValue","imageHeight","imageWidth","numBoxes","cropHeight","cropWidth","methodId","inputHeightFloat","inputWidthFloat","heightRatio","heightScale","inY","widthRatio","widthScale","inX","cropAndResizeConfig","CropAndResize","image","boxes","boxInd","CumSumProgram","exclusive","reverse","val","idxString","getFinalCoord","cumsumConfig","Cumsum","permutation","permutedAxis","log2","prevResult","reverseTransposedResult","getUndoAxesPermutation","denseBincountConfig","DenseBincount","bufferSync","DepthToSpaceProgram","blockSize","getHeightCoordString","getWidthCoordString","getDepthCoordString","getOutputDepthSize","getInputSamplingString","depthToSpaceConfig","DepthToSpace","inputHeight","inputWidth","inputDepth","outputHeight","outputWidth","outputDepth","DepthwiseConv2DProgram","hasLeakyReluAlpha","xNumRows","xNumCols","channelMul","DepthwiseConvPacked2DProgram","texelsAcross","texelC","nextTexelOffset","depthwiseConv2dNativeConfig","DepthwiseConv2dNative","$dilations","DepthwiseConv2DDerFilterProgram","DepthwiseConv2DDerInputProgram","depthwiseConv2dNativeBackpropFilterConfig","DepthwiseConv2dNativeBackpropFilter","depthwiseConv2dNativeBackpropInputConfig","DepthwiseConv2dNativeBackpropInput","DiagProgram","diagConfig","Diag","flat","Dilation2DProgram","dilation2DConfig","Dilation2D","computeDilation2DInfo","einsumConfig","Einsum","equation","allDims","summedDims","idDims","decodeEinsumEquation","checkEinsumDimSizes","path","steps","getEinsumComputePath","nSteps","numDimsRemaining","tensorsToDispose","idTerm","permutationIndices","expandDims","dimsToExpand","getEinsumPermutation","isIdentityPermutation","elu","eluConfig","Elu","eluGradConfig","EluGrad","equal","equalConfig","Equal","erf","ERF_P","ERF_A1","ERF_A2","ERF_A3","ERF_A4","ERF_A5","erfConfig","Erf","EXP","expConfig","Exp","dim","inputRank","$dim","expandDimsConfig","ExpandDims","EXPM1","expm1Config","Expm1","FFTProgram","component","inverse","innerDim","exponentMultiplierSnippet","PI","resultDenominator","opString","fftImpl","inputSize","innerDimensionSize","input2D","complexOutputReshaped","fftConfig","FFT","FillProgram","valueLoc","fill","inferDtype","fillConfig","Fill","FlipLeftRightProgram","flipLeftRightConfig","FlipLeftRight","FLOOR","floorConfig","Floor","floorDiv","floorDivConfig","FloorDiv","FromPixelsProgram","FromPixelsPackedProgram","fromPixelsConfig","FromPixels","numChannels","isVideo","HTMLVideoElement","isImage","HTMLImageElement","videoWidth","videoHeight","fromPixels2DContext","drawImage","tempPixelHandle","fusedConv2DConfig","FusedConv2D","fusedDepthwiseConv2DConfig","FusedDepthwiseConv2D","shouldPackDepthwiseConv","GatherNDProgram","sliceDim","stridesType","strideString","gatherNdConfig","GatherNd","indicesShape","sliceRank","resultShape","numSlices","prepareAndValidate","flattenIndices","flattenX","GatherProgram","currentCoords","gatherV2Config","GatherV2","batchDims","parsedAxis","segment_util","collectGatherOpShapeInfo","indicesSize","outerSize","dimSize","flattenIndex","greater","greaterConfig","Greater","greaterEqual","greaterEqualConfig","GreaterEqual","ifftConfig","IFFT","isFinite","isFiniteConfig","IsFinite","isInf","isInfConfig","IsInf","isNaN","isNaNConfig","IsNan","less","lessConfig","Less","lessEqual","lessEqualConfig","LessEqual","linSpaceConfig","LinSpace","logConfig","Log","log1p","log1pConfig","Log1p","logicalAnd","logicalAndConfig","LogicalAnd","logicalNot","logicalNotConfig","LogicalNot","logicalOr","logicalOrConfig","LogicalOr","LRNProgram","radius","beta","rad","maxD","powOperator","basis","LRNPackedProgram","LRNConfig","LRN","depthRadius","LRNGradProgram","LRNGradConfig","LRNGrad","maxInputIsTransposed","maxInput","maxInputValues","maxOutShape","reshapedOutput","maxConfig","Max","maximum","maximumConfig","Maximum","maxPoolConfig","MaxPool","maxPoolProgram","maxPool3DConfig","MaxPool3D","MaxPool2DBackpropProgram","MaxPool3DBackpropProgram","maxPoolGrad3DConfig","MaxPool3DGrad","maxPool3dPositionsProgram","maxPool3dPositions","maxPoolBackpropProgram","maxPoolGradConfig","MaxPoolGrad","maxPoolPositionsProgram","maxPoolPositions","maxPoolBackPropProgram","maxPoolWithArgmaxConfig","MaxPoolWithArgmax","indexes","poolOutput","maxPoolWithArgmaxImpl","meanConfig","Mean","meanInputIsTransposed","meanInput","meanInputValues","meanOutShape","meanImpl","minConfig","Min","minimum","minimumConfig","Minimum","MirrorPadProgram","paddings","mode","p","end","unpackedCoords","MirrorPadPackedProgram","cLimit","padSetup","mirrorPadConfig","MirrorPad","mod","modConfig","Mod","MultinomialProgram","numOutcomes","numSamples","seed","seedLoc","realDiv","realDivConfig","RealDiv","SUB","sub","cpuSub","subConfig","Sub","softmax","logits","maxLogit","expandedShape","maxLogitsReshaped","sumExp","sumExpReshaped","softmaxConfig","Softmax","multinomialConfig","Multinomial","normalized","probs","NEG","negConfig","Neg","nonMaxSuppressionV3Impl","nonMaxSuppressionV3Config","NonMaxSuppressionV3","scores","maxOutputSize","iouThreshold","scoreThreshold","boxesVals","scoresVals","selectedIndices","nonMaxSuppressionV4Impl","nonMaxSuppressionV4Config","NonMaxSuppressionV4","padToMaxOutputSize","validOutputs","nonMaxSuppressionV5Impl","nonMaxSuppressionV5Config","NonMaxSuppressionV5","softNmsSigma","maxOutputSizeVal","iouThresholdVal","scoreThresholdVal","softNmsSigmaVal","selectedScores","OneHotProgram","numIndices","onValue","offValue","oneHotConfig","OneHot","zerosLike","zerosLikeConfig","ZerosLike","onesLikeConfig","OnesLike","onesLike","packConfig","Pack","assertShapesMatch","expandedT","PadProgram","constantValue","PadPackedProgram","componentSetup","paddingArea","padV2","padV2Config","PadV2","pow","powConfig","Pow","prodConfig","Prod","range","rangeConfig","Range","reciprocal","reciprocalConfig","Reciprocal","relu","reluConfig","Relu","relu6","relu6Config","Relu6","ResizeBilinearProgram","newHeight","newWidth","alignCorners","halfPixelCenters","oldHeight","oldWidth","effectiveInSize","effectiveOutSize","sourceFracIndexRC","ResizeBilinearPackedProgram","resizeBilinearConfig","ResizeBilinear","images","ResizeBilinearBackpropProgram","dyShape","xHeight","xWidth","yHeight","yWidth","effectiveXSize","effectiveYSize","invHeightScale","invWidthScale","winHeight","winWidth","resizeBilinearGradConfig","ResizeBilinearGrad","ResizeNearestNeighborProgram","roundBase","resizeNearestNeighborConfig","ResizeNearestNeighbor","ResizeNearestNeigborBackpropProgram","resizeNearestNeighborGradConfig","ResizeNearestNeighborGrad","ReverseProgram","inCoords","getInCoord","ReversePackedProgram","nextRow","inCoordsArray","channels1","getR","getG","getB","getA","reverseConfig","Reverse","$dims","RotateProgram","fillValue","fillSnippet","centerX","centerY","sinFactor","cosFactor","paramsLoc","uniform4f","rotateWithOffsetConfig","RotateWithOffset","radians","center","getImageCenter","sin","roundConfig","Round","rsqrt","rsqrtConfig","Rsqrt","ScatterProgram","updateSize","indicesRank","updatesRank","summingDupeIndex","indicesString","indicesSnippet","updatesString","updatesSnippet","scatterNdConfig","ScatterNd","updates","numUpdates","outputSize","calculateShapes","flattenShape","defaultValue","SelectProgram","cRank","cCoords","abCoords","cCoordVars","abCoordVars","selectConfig","Select","selu","SELU_SCALEALPHA","SELU_SCALE","seluConfig","Selu","sigmoid","sigmoidConfig","Sigmoid","sign","signConfig","Sign","sinConfig","Sin","sinh","sinhConfig","Sinh","softplus","softplusConfig","Softplus","spaceToBatchNDConfig","SpaceToBatchND","completePaddings","paddedX","reshapedPaddedShape","permutedReshapedPaddedPermutation","reshapedPaddedX","paddedXT","sparseToDenseConfig","SparseToDense","sparseIndices","sparseValues","splitVConfig","SplitV","numOrSizeSplits","splitSizes","prepareSplitSize","sliceT","sqrtConfig","Sqrt","square","squareConfig","Square","SQUARED_DIFFERENCE","squaredDifference","squaredDifferenceConfig","SquaredDifference","stepConfig","Step","StridedSliceProgram","inputDtype","newCoords","outputAxis","stridedSliceConfig","StridedSlice","beginMask","endMask","ellipsisMask","newAxisMask","shrinkAxisMask","nonStrided","$strides","sliceInfo","some","resultReshaped","tan","tanConfig","Tan","tanh","tanhConfig","Tanh","TileProgram","tile","buf","tileConfig","Tile","topKConfig","TopK","TransformProgram","interpolation","fillMode","interpolationModeId","fillModeId","transformConfig","Transform","transforms","uniqueConfig","Unique","unpackConfig","Unpack","outIndex","SegmentOpProgram","segOpInfo","segOpType","numSegments","checkValueOutOfBounds","checkSegmentIdOutOfBounds","kernelConfigs","UnsortedSegmentSum","segmentIds","outputDType","segOpCompute","segOpComputeOptimalWindowSize","rangeInfo","tileInfo","kernelConfig","registerKernel"],"mappings":"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AE,GACAW,GACA6B,GACAkB,GACAQ,GACAU,GACAM,GACAQ,GACAhY,GACA6Z,GACA4C,GACAE,GACAb,GACAkB,GACAE,GACAL,GACAS,GACAG,GACAsB,GACAW,GACAQ,GACAU,GACAsB,GACAE,GACAP,GACAU,GACAI,GACAG,GACAqB,GACAE,GACAG,GACAS,GACAG,GACAK,GACAG,GACAe,GACAM,GACAG,GACAG,GACAG,GACAI,GACAY,GACAE,GACAO,GACAW,GACAW,GACAG,GACArrB,GACAurB,GACA/R,GACAkS,GACAG,GACAG,GACAnrB,GACAsrB,GACAG,GACAE,GACAK,GACAH,GACAM,GACAG,GACAG,GACAqB,GACAQ,GACAH,GACAO,GACAK,GACAK,GACAnB,GACAwB,GACAO,GACAG,GACAW,GACAG,GACAwB,GACAlvB,GACAuvB,GACAG,GACAU,GACAK,GACAhe,GACA4e,GACAK,GACAG,GACAU,GACAG,GACA51B,GACA81B,GACAG,GACApgB,GACAub,GACAgF,GACAM,GACAH,GACA9yB,GACA8zB,GACAe,GACAI,GACAG,GACAa,GACAY,GACAM,GACAG,GACAW,GACAc,GACAK,GACAG,GACAG,GACAE,GACAG,GACArpB,GACA+d,GACAyL,GACAE,GACAQ,GACAI,GACAM,GACAG,GACAI,GACAE,GACAM,GACArO,GACA3qB,GACA65B,GACAG,GACAK,GACAE,GACAO,GACA16B,GACA66B,GACAE,GDzNoD,CACpDljC,WAAY4jC,qBACZ1jC,YAAa,QACbC,oBArFiCP,GAKjC,MAAMhe,OAACA,EAAMie,QAAEA,EAAO/b,MAAEA,GAAS8b,GAC3B3lB,EAACA,EAAC4pD,WAAEA,GAAcjiD,GAClB4hD,YAACA,GAAe1/C,EAEhB8F,EAAQ3P,EAAE5b,MAAM+E,OAEhB+yC,EAAY,GAElB,IAAIpsB,EAAO,EACX,MAAMq2B,EAAczlC,eAAaysB,mBAAmB,CAACrd,GAAOH,GAC5D,IAAIwiB,EAAYnyB,EACG,MAAfmmC,IACFhU,EAAYnE,GAAU,CAACrmB,OAAQ,CAAC3H,EAAAA,GAAI4lB,QAAAA,EAAS/b,MAAO,CAAC6F,KAAMy2B,KAC3DjK,EAAU/7B,KAAKgyB,GACfriB,EAAOpP,eAAa4sB,iBAAiB,EAAG3d,GAAO,IAGjD,MAAMhO,EAAWjB,eAAa+vC,aAAa9R,gBACvCxM,EAAU/tC,MAAO0rB,EAAMy5C,GACrBniD,EAAS9iB,OAAKC,cAAc,CAAC4tC,EAAU/tC,MAAM0rB,KAC7CsiB,EACFhI,GAAQ,CAACziB,OAAQ,CAAC3H,EAAGmyB,GAAYvM,QAAAA,EAAS/b,MAAO,CAACzlB,MAAO,EAAE,EAAGgjB,MAClE80B,EAAU/7B,KAAKiyB,GAEf,MAAMy3B,EAAcj8B,aAAW5tB,EAAEjO,OAE3B+3D,EACF,CAAC9pD,EAAespD,EAAiCM,EAChD73D,EAAiBw3D,KAChB,MAAMx+B,EAAY/qB,EAAE5b,MAAM,GACpBgjB,EAASpH,EAAE5b,MAAM,GACjB0mC,EACFpqB,eAAa+vC,aAAasZ,8BACtB3iD,EAAQmiD,GAEVp/D,EAAU,IAAIi/D,GADF,CAACt+B,WAAAA,EAAY1jB,OAAAA,EAAQ2jB,UAAAA,EAAWw+B,YAAAA,GACFD,GAC1C92D,EAASozB,EAAQ/G,cAAc10B,EAAS,CAAC6V,EAAG4pD,GAAa73D,GAG/D,GAFAmqC,EAAU/7B,KAAK3N,GAEXA,EAAOpO,MAAM,KAAOmlE,EACtB,OAAO/2D,EAET,MAAMw3D,EAAYhN,GAAM,CACtBp3B,QAAAA,EACA/b,MAAO,CAACsD,MAAO,EAAGC,KAAMm8C,EAAal8C,KAAM,EAAGtb,MAAO,aAEjDk4D,EAAWhC,GAAK,CACpBtgD,OAAQ,CAAC3H,EAAGgqD,GACZpkC,QAAAA,EACA/b,MAAO,CAACkF,KAAM,CAAC3H,EAAS0jB,MAG1BoR,EAAU/7B,KAAK6pD,GACf9tB,EAAU/7B,KAAK8pD,GAIf,OADIH,EAAat3D,EAAQ82D,EAAWW,EAAUl4D,EAAOw3D,IAOrD11B,EACFzJ,GAAQ,CAACziB,OAAQ,CAAC3H,EAJF8pD,EAChB13B,EAAK,qBAAsBw3B,EAAYC,EAAaN,IAGjB3jC,QAAAA,EAAS/b,MAAO,CAACzlB,MAAOud,KAE/D,IAAIvG,EAASy4B,EACb,GAAmB,MAAfsS,EAAqB,CACvBjK,EAAU/7B,KAAK0zB,GACf,MAAMnkB,EAAOhP,eAAa8lC,uBAAuBL,GACjD/qC,EAAS4yB,GAAU,CAACrmB,OAAQ,CAAC3H,EAAG5E,GAASwqB,QAAAA,EAAS/b,MAAO,CAAC6F,KAAAA,KAI5D,OADAwsB,EAAUtqC,SAAQC,GAAK+zB,EAAQpL,8BAA8B3oB,KACtDuJ,IC8NPsgD,IAGF,IAAK,MAAMwO,KAAgBR,GACzBS,iBAAeD,mHCzUD"}