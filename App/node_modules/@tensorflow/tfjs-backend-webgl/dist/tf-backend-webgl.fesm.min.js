/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
import{util as e,env as n,device_util as t,backend_util as a,buffer as r,upcastType as o,slice_util as s,TensorBuffer as i,kernel_impls as u,KernelBackend as l,DataStorage as c,engine as d,tidy as p,scalar as h,registerBackend as f,Identity as x,Complex as m,LeakyRelu as g,Prelu as b,Multiply as C,Reshape as v,sumOutType as $,Sum as I,Transpose as y,_FusedMatMul as R,Abs as w,Acos as k,Acosh as T,Add as E,AddN as N,All as S,Any as A,ArgMax as F,ArgMin as O,Asin as _,Asinh as D,Atan as L,Atan2 as P,Atanh as B,AvgPool as V,AvgPool3D as W,AvgPool3DGrad as M,AvgPoolGrad as G,BatchMatMul as U,FusedBatchNorm as z,Slice as X,BatchToSpaceND as H,Bincount as j,NotEqual as K,Real as Y,Cast as q,zeros as Q,Ceil as Z,ClipByValue as J,ComplexAbs as ee,Imag as ne,Concat as te,Conv2D as ae,Conv2DBackpropFilter as re,Conv2DBackpropInput as oe,Conv3D as se,Conv3DBackpropFilterV2 as ie,Conv3DBackpropInputV2 as ue,Cos as le,Cosh as ce,CropAndResize as de,Cumsum as pe,DenseBincount as he,DepthToSpace as fe,DepthwiseConv2dNative as xe,DepthwiseConv2dNativeBackpropFilter as me,DepthwiseConv2dNativeBackpropInput as ge,Diag as be,Dilation2D as Ce,Einsum as ve,Elu as $e,EluGrad as Ie,Equal as ye,Erf as Re,Exp as we,ExpandDims as ke,Expm1 as Te,FFT as Ee,Fill as Ne,FlipLeftRight as Se,Floor as Ae,FloorDiv as Fe,FromPixels as Oe,FusedConv2D as _e,FusedDepthwiseConv2D as De,GatherNd as Le,GatherV2 as Pe,Greater as Be,GreaterEqual as Ve,IFFT as We,IsFinite as Me,IsInf as Ge,IsNan as Ue,Less as ze,LessEqual as Xe,LinSpace as He,Log as je,Log1p as Ke,LogicalAnd as Ye,LogicalNot as qe,LogicalOr as Qe,LRN as Ze,LRNGrad as Je,Max as en,Maximum as nn,MaxPool as tn,MaxPool3D as an,MaxPool3DGrad as rn,MaxPoolGrad as on,MaxPoolWithArgmax as sn,Mean as un,Min as ln,Minimum as cn,MirrorPad as dn,Mod as pn,RealDiv as hn,Sub as fn,Softmax as xn,Multinomial as mn,Neg as gn,NonMaxSuppressionV3 as bn,NonMaxSuppressionV4 as Cn,NonMaxSuppressionV5 as vn,OneHot as $n,ZerosLike as In,OnesLike as yn,Pack as Rn,PadV2 as wn,Pow as kn,Prod as Tn,Range as En,Reciprocal as Nn,Relu as Sn,Relu6 as An,ResizeBilinear as Fn,ResizeBilinearGrad as On,ResizeNearestNeighbor as _n,ResizeNearestNeighborGrad as Dn,Reverse as Ln,RotateWithOffset as Pn,Round as Bn,Rsqrt as Vn,ScatterNd as Wn,Select as Mn,Selu as Gn,Sigmoid as Un,Sign as zn,Sin as Xn,Sinh as Hn,Softplus as jn,SpaceToBatchND as Kn,SparseToDense as Yn,SplitV as qn,Sqrt as Qn,Square as Zn,SquaredDifference as Jn,Step as et,StridedSlice as nt,Tan as tt,Tanh as at,Tile as rt,TopK as ot,Transform as st,Unique as it,Unpack as ut,UnsortedSegmentSum as lt,registerKernel as ct}from"@tensorflow/tfjs-core";const dt={},pt={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function ht(e,n){dt[e]=n}function ft(e){if(!(e in dt)){const n=function(e){if(1!==e&&2!==e)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const n=function(e){if("undefined"!=typeof OffscreenCanvas&&2===e)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(e);if(n.addEventListener("webglcontextlost",(n=>{n.preventDefault(),delete dt[e]}),!1),1===e)return n.getContext("webgl",pt)||n.getContext("experimental-webgl",pt);return n.getContext("webgl2",pt)}(e);if(null===n)return console.log("Could not get context for WebGL version",e),null;dt[e]=n}const n=dt[e];return n.isContextLost()?(delete dt[e],ft(e)):(n.disable(n.DEPTH_TEST),n.disable(n.STENCIL_TEST),n.disable(n.BLEND),n.disable(n.DITHER),n.disable(n.POLYGON_OFFSET_FILL),n.disable(n.SAMPLE_COVERAGE),n.enable(n.SCISSOR_TEST),n.enable(n.CULL_FACE),n.cullFace(n.BACK),dt[e])}var xt,mt,gt;function bt(e,n){return[n,e]}function Ct(n){const t=e.sizeFromShape(n),a=Math.ceil(t/4);return e.sizeToSquarishShape(a)}function vt(e,n){return[Math.max(1,Math.ceil(n/2)),Math.max(1,Math.ceil(e/2))]}function $t(e,t){const a=e;let r,o,s,i,u,l,c,d,p,h;return 2===n().getNumber("WEBGL_VERSION")?(r=a.R32F,o=a.R16F,s=a.RGBA16F,i=a.RGBA32F,u=a.RED,c=4,d=1,p=a.HALF_FLOAT,h=a.FLOAT):(r=e.RGBA,o=e.RGBA,s=e.RGBA,i=a.RGBA,u=e.RGBA,c=4,d=4,p=null!=t?t.HALF_FLOAT_OES:null,h=e.FLOAT),l=e.RGBA,{internalFormatFloat:r,internalFormatHalfFloat:o,internalFormatPackedHalfFloat:s,internalFormatPackedFloat:i,textureFormatFloat:u,downloadTextureFormat:l,downloadUnpackNumChannels:c,defaultNumChannels:d,textureTypeHalfFloat:p,textureTypeFloat:h}}function It(e,t){const a=t();return n().getBool("DEBUG")&&function(e){const n=e.getError();if(n!==e.NO_ERROR)throw new Error("WebGL Error: "+Rt(e,n))}(e),a}!function(e){e[e.DENSE=0]="DENSE",e[e.SHARED_BATCH=1]="SHARED_BATCH"}(xt||(xt={})),function(e){e[e.RENDER=0]="RENDER",e[e.UPLOAD=1]="UPLOAD",e[e.PIXELS=2]="PIXELS",e[e.DOWNLOAD=3]="DOWNLOAD"}(mt||(mt={})),function(e){e[e.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",e[e.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",e[e.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",e[e.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",e[e.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(gt||(gt={}));function yt(e){return!!(n().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===e||5.96e-8<Math.abs(e)&&Math.abs(e)<65504)}function Rt(e,n){switch(n){case e.NO_ERROR:return"NO_ERROR";case e.INVALID_ENUM:return"INVALID_ENUM";case e.INVALID_VALUE:return"INVALID_VALUE";case e.INVALID_OPERATION:return"INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${n}`}}function wt(e,n){return Ht(e,(()=>e.getExtension(n)),'Extension "'+n+'" not supported on this browser.')}function kt(e,n){const t=Ht(e,(()=>e.createShader(e.VERTEX_SHADER)),"Unable to create vertex WebGLShader.");if(It(e,(()=>e.shaderSource(t,n))),It(e,(()=>e.compileShader(t))),!1===e.getShaderParameter(t,e.COMPILE_STATUS))throw console.log(e.getShaderInfoLog(t)),new Error("Failed to compile vertex shader.");return t}function Tt(n,t){const a=Ht(n,(()=>n.createShader(n.FRAGMENT_SHADER)),"Unable to create fragment WebGLShader.");if(It(n,(()=>n.shaderSource(a,t))),It(n,(()=>n.compileShader(a))),!1===n.getShaderParameter(a,n.COMPILE_STATUS))throw function(n,t){const a=Et.exec(t);if(null==a)return console.log(`Couldn't parse line number in error: ${t}`),void console.log(n);const r=+a[1],o=n.split("\n"),s=o.length.toString().length+2,i=o.map(((n,t)=>e.rightPad((t+1).toString(),s)+n));let u=0;for(let e=0;e<i.length;e++)u=Math.max(i[e].length,u);const l=i.slice(0,r-1),c=i.slice(r-1,r),d=i.slice(r);console.log(l.join("\n")),console.log(t.split("\n")[0]),console.log(`%c ${e.rightPad(c[0],u)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(d.join("\n"))}(t,n.getShaderInfoLog(a)),new Error("Failed to compile fragment shader.");return a}const Et=/ERROR: [0-9]+:([0-9]+):/g;function Nt(e){return Ht(e,(()=>e.createProgram()),"Unable to create WebGLProgram.")}function St(e,n){if(It(e,(()=>e.linkProgram(n))),!1===e.getProgramParameter(n,e.LINK_STATUS))throw console.log(e.getProgramInfoLog(n)),new Error("Failed to link vertex and fragment shaders.")}function At(e,n){if(It(e,(()=>e.validateProgram(n))),!1===e.getProgramParameter(n,e.VALIDATE_STATUS))throw console.log(e.getProgramInfoLog(n)),new Error("Shader program validation failed.")}function Ft(e,n){const t=Ht(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return It(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,t))),It(e,(()=>e.bufferData(e.ARRAY_BUFFER,n,e.STATIC_DRAW))),t}function Ot(e,n){const t=Ht(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return It(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,t))),It(e,(()=>e.bufferData(e.ELEMENT_ARRAY_BUFFER,n,e.STATIC_DRAW))),t}function _t(e){return Ht(e,(()=>e.createTexture()),"Unable to create WebGLTexture.")}function Dt(e,t){const a=n().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e<=0||t<=0){throw new Error("Requested texture size "+`[${e}x${t}]`+" is invalid.")}if(e>a||t>a){throw new Error("Requested texture size "+`[${e}x${t}]`+" greater than WebGL maximum on this browser / GPU "+`[${a}x${a}]`+".")}}function Lt(e){return Ht(e,(()=>e.createFramebuffer()),"Unable to create WebGLFramebuffer.")}function Pt(e,n,t,a,r,o,s){const i=e.getAttribLocation(n,t);return-1!==i&&(It(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,a))),It(e,(()=>e.vertexAttribPointer(i,r,e.FLOAT,!1,o,s))),It(e,(()=>e.enableVertexAttribArray(i))),!0)}function Bt(e,n,t){jt(e,t),It(e,(()=>e.activeTexture(e.TEXTURE0+t))),It(e,(()=>e.bindTexture(e.TEXTURE_2D,n)))}function Vt(e,n,t){return Ht(e,(()=>e.getUniformLocation(n,t)),'uniform "'+t+'" not present in program.')}function Wt(e,n,t){return e.getUniformLocation(n,t)}function Mt(e,n,t,a){It(e,(()=>Bt(e,n,a))),It(e,(()=>e.uniform1i(t,a)))}function Gt(e,n,t){It(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,t))),It(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0)))}function Ut(e,n){It(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,n))),It(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,null,0)))}function zt(e){const n=e.checkFramebufferStatus(e.FRAMEBUFFER);if(n!==e.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+Xt(e,n))}function Xt(e,n){switch(n){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${n}`}}function Ht(e,n,t){const a=It(e,(()=>n()));if(null==a)throw new Error(t);return a}function jt(e,n){const t=e.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,a=n+e.TEXTURE0;if(a<e.TEXTURE0||a>t){throw new Error(`textureUnit must be in ${`[gl.TEXTURE0, gl.TEXTURE${t}]`}.`)}}function Kt(n,t=2){return e.sizeFromShape(n.slice(0,n.length-t))}function Yt(e){if(0===e.length)throw Error("Cannot get rows and columns of an empty shape array.");return[e.length>1?e[e.length-2]:1,e[e.length-1]]}function qt(e){let n=[1,1,1];return 0===e.length||1===e.length&&1===e[0]||(n=[Kt(e),...Yt(e)]),n}function Qt(t,a=!1){let r=n().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(a&&(r*=2,1===(t=t.map(((n,a)=>a>=t.length-2?e.nearestLargerEven(t[a]):t[a]))).length&&(t=[2,t[0]])),2!==t.length){const n=e.squeezeShape(t);t=n.newShape}let o=e.sizeFromShape(t);if(t.length<=1&&o<=r)return[1,o];if(2===t.length&&t[0]<=r&&t[1]<=r)return t;if(3===t.length&&t[0]*t[1]<=r&&t[2]<=r)return[t[0]*t[1],t[2]];if(3===t.length&&t[0]<=r&&t[1]*t[2]<=r)return[t[0],t[1]*t[2]];if(4===t.length&&t[0]*t[1]*t[2]<=r&&t[3]<=r)return[t[0]*t[1]*t[2],t[3]];if(4===t.length&&t[0]<=r&&t[1]*t[2]*t[3]<=r)return[t[0],t[1]*t[2]*t[3]];if(a){const n=Kt(t);let a=2,r=2;return t.length&&([a,r]=Yt(t)),o=n*(a/2)*(r/2),e.sizeToSquarishShape(o).map((e=>2*e))}return e.sizeToSquarishShape(o)}function Zt(e){return e%2==0}function Jt(n,t){if(n=n.slice(-2),t=t.slice(-2),e.arraysEqual(n,t))return!0;if(!n.length||!t.length)return!0;if(0===n[0]||0===n[1]||0===t[0]||0===t[1])return!0;if(n.length!==t.length){const e=n.slice(-1)[0],a=t.slice(-1)[0];if(e===a)return!0;if(Zt(e)&&Zt(a)&&(1===n[0]||1===t[0]))return!0}return n[1]===t[1]&&Zt(n[0])&&Zt(t[0])}let ea,na;function ta(e){if(null==ea){const n=ft(e);ea=n.getParameter(n.MAX_TEXTURE_SIZE)}return ea}function aa(e){if(null==na){const n=ft(e);na=n.getParameter(n.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,na)}function ra(e){if(0===e)return 0;let n;const t=ft(e);return n=oa(t,"EXT_disjoint_timer_query_webgl2")&&2===e?2:oa(t,"EXT_disjoint_timer_query")?1:0,n}function oa(e,n){return null!=e.getExtension(n)}function sa(e){try{if(null!=ft(e))return!0}catch(e){return console.log("Error when getting WebGL context: ",e),!1}return!1}function ia(e){if(0===e)return!1;const n=ft(e);if(1===e){if(!oa(n,"OES_texture_float"))return!1}else if(!oa(n,"EXT_color_buffer_float"))return!1;return la(n)}function ua(e){if(0===e)return!1;const n=ft(e);if(1!==e){if(oa(n,"EXT_color_buffer_float"))return la(n);const e="EXT_color_buffer_half_float";if(oa(n,e)){const t=n.getExtension(e);return function(e,n){const t=$t(e,n),a=e.createTexture();e.bindTexture(e.TEXTURE_2D,a);const r=1,o=1;e.texImage2D(e.TEXTURE_2D,0,t.internalFormatHalfFloat,r,o,0,t.textureFormatFloat,t.textureTypeHalfFloat,null);const s=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,s),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,a,0);const i=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(a),e.deleteFramebuffer(s),i}(n,t)}return!1}if(!oa(n,"OES_texture_float"))return!1;if(!oa(n,"WEBGL_color_buffer_float"))return!1;return la(n)}function la(e){const n=$t(e),t=e.createTexture();e.bindTexture(e.TEXTURE_2D,t);e.texImage2D(e.TEXTURE_2D,0,n.internalFormatFloat,1,1,0,n.textureFormatFloat,n.textureTypeFloat,null);const a=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,a),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0);const r=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(t),e.deleteFramebuffer(a),r}function ca(e){if(2!==e)return!1;return null!=ft(e).fenceSync}function da(n,t){Array.isArray(n)||(n=[n]),n.forEach((n=>{null!=n&&e.assert("complex64"!==n.dtype,(()=>`${t} does not support complex64 tensors in the WebGL backend.`))}))}var pa=Object.freeze({__proto__:null,callAndCheck:It,canBeRepresented:yt,getWebGLErrorMessage:Rt,getExtensionOrThrow:wt,createVertexShader:kt,createFragmentShader:Tt,createProgram:Nt,linkProgram:St,validateProgram:At,createStaticVertexBuffer:Ft,createStaticIndexBuffer:Ot,getNumChannels:function(){return 2===n().getNumber("WEBGL_VERSION")?1:4},createTexture:_t,validateTextureSize:Dt,createFramebuffer:Lt,bindVertexBufferToProgramAttribute:Pt,bindTextureUnit:Bt,unbindTextureUnit:function(e,n){jt(e,n),It(e,(()=>e.activeTexture(e.TEXTURE0+n))),It(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))},getProgramUniformLocationOrThrow:Vt,getProgramUniformLocation:Wt,bindTextureToProgramUniformSampler:Mt,bindCanvasToFramebuffer:function(e){It(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,null))),It(e,(()=>e.viewport(0,0,e.canvas.width,e.canvas.height))),It(e,(()=>e.scissor(0,0,e.canvas.width,e.canvas.height)))},bindColorTextureToFramebuffer:Gt,unbindColorTextureFromFramebuffer:Ut,validateFramebuffer:zt,getFramebufferErrorMessage:Xt,getBatchDim:Kt,getRowsCols:Yt,getShapeAs3D:qt,getTextureShapeFromLogicalShape:Qt,isReshapeFree:Jt,getWebGLMaxTextureSize:ta,resetMaxTextureSize:function(){ea=null},resetMaxTexturesInShader:function(){na=null},getMaxTexturesInShader:aa,getWebGLDisjointQueryTimerVersion:ra,hasExtension:oa,isWebGLVersionEnabled:sa,isCapableOfRenderingToFloatTexture:ia,isDownloadFloatTextureEnabled:ua,isWebGLFenceEnabled:ca,assertNotComplex:da});const ha=n();function fa(){let e,t,a,r,o,s,i,u,l,c;return 2===n().getNumber("WEBGL_VERSION")?(e="#version 300 es",t="in",a="out",r="in",o="texture",s="outputColor",i="out vec4 outputColor;",u="\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ",l="",c="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(e="",t="attribute",a="varying",r="varying",o="texture2D",s="gl_FragColor",i="",u="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",l="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",c="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:e,attribute:t,varyingVs:a,varyingFs:r,texture2D:o,output:s,defineOutput:i,defineSpecialNaN:u,defineSpecialInf:l,defineRound:c}}function xa(n,t,a="index"){const r=e.computeStrides(t);return r.map(((e,t)=>`${`int ${n[t]} = ${a} / ${e}`}; ${t===r.length-1?`int ${n[t+1]} = ${a} - ${n[t]} * ${e}`:`index -= ${n[t]} * ${e}`};`)).join("")}function ma(n){const t=e.computeStrides(n).map((e=>e.toString()));return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;\n  }\n`}ha.registerFlag("HAS_WEBGL",(()=>ha.getNumber("WEBGL_VERSION")>0)),ha.registerFlag("WEBGL_VERSION",(()=>sa(2)?2:sa(1)?1:0)),ha.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",(()=>!1)),ha.registerFlag("WEBGL_BUFFER_SUPPORTED",(()=>2===ha.get("WEBGL_VERSION"))),ha.registerFlag("WEBGL_CPU_FORWARD",(()=>!0)),ha.registerFlag("WEBGL_FORCE_F16_TEXTURES",(()=>!1)),ha.registerFlag("WEBGL_PACK",(()=>ha.getBool("HAS_WEBGL"))),ha.registerFlag("WEBGL_PACK_NORMALIZATION",(()=>ha.getBool("WEBGL_PACK"))),ha.registerFlag("WEBGL_PACK_CLIP",(()=>ha.getBool("WEBGL_PACK"))),ha.registerFlag("WEBGL_PACK_DEPTHWISECONV",(()=>!0)),ha.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",(()=>ha.getBool("WEBGL_PACK"))),ha.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",(()=>ha.getBool("WEBGL_PACK"))),ha.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",(()=>ha.getBool("WEBGL_PACK"))),ha.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",(()=>ha.getBool("WEBGL_PACK"))),ha.registerFlag("WEBGL_PACK_REDUCE",(()=>ha.getBool("WEBGL_PACK"))),ha.registerFlag("WEBGL_LAZILY_UNPACK",(()=>ha.getBool("WEBGL_PACK"))),ha.registerFlag("WEBGL_CONV_IM2COL",(()=>ha.getBool("WEBGL_PACK"))),ha.registerFlag("WEBGL_MAX_TEXTURE_SIZE",(()=>ta(ha.getNumber("WEBGL_VERSION")))),ha.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",(()=>aa(ha.getNumber("WEBGL_VERSION")))),ha.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",(()=>{const e=ha.getNumber("WEBGL_VERSION");return 0===e?0:ra(e)})),ha.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",(()=>ha.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!t.isMobile())),ha.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",(()=>ia(ha.getNumber("WEBGL_VERSION")))),ha.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",(()=>!ha.getBool("WEBGL_FORCE_F16_TEXTURES")&&ha.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))),ha.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",(()=>ua(ha.getNumber("WEBGL_VERSION")))),ha.registerFlag("WEBGL_FENCE_API_ENABLED",(()=>ca(ha.getNumber("WEBGL_VERSION")))),ha.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",(()=>ha.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0)),ha.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",(()=>-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${e}.`)})),ha.registerFlag("WEBGL_FLUSH_THRESHOLD",(()=>t.isMobile()&&ha.getBool("IS_CHROME")?1:-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${e}.`)}));const ga="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n";class ba{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=xt.DENSE;const n=Ct(e),t=fa();this.outputShape=e,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${xa(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${n[0]}, ${n[1]}));\n        int index = 4 * (resTexRC.x * ${n[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${t.output} = result;\n      }\n    `}}class Ca{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=xt.DENSE;const n=Ct(e),t=fa();this.outputShape=e,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${xa(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${n[0]}, ${n[1]}));\n        int index = 4 * (resTexRC.x * ${n[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${t.output} = result;\n      }\n    `}}class va{constructor(e){this.variableNames=["A"],this.outTexUsage=mt.DOWNLOAD;const n=fa();this.outputShape=e,this.userCode=`\n      ${ga}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${n.output} = encode_float(x);\n      }\n    `}}class $a{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=mt.DOWNLOAD;const n=fa();this.outputShape=e,this.userCode=`\n      ${ga}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${n.output} = encode_float(x);\n      }\n    `}}class Ia{constructor(e,n,t=!1){this.variableNames=["A"];const a=fa(),[r,o]=n;this.outputShape=e;let s="result";t&&(s="floor(result * 255. + 0.5)"),this.userCode=`\n      ${ma(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / ${o};\n        int c = imod(flatIndex, ${o});\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(${o}.0, ${r}.0);\n        vec4 values = ${a.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${a.output} = vec4(${s}, 0., 0., 0.);\n      }\n    `}}class ya{constructor(e,n,t=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const a=fa(),[r,o]=n;this.outputShape=e;let s="",i="result";t&&(i="floor(result * 255. + 0.5)");for(let n=0;n<=1;n++)for(let t=0;t<=1;t++){const i=2*n+t;s+=`\n          localCoords = coords;\n          if(localCoords[2] + ${t} < ${e[2]}) {\n            localCoords[2] += ${t};\n            if(localCoords[1] + ${n} < ${e[1]}) {\n              localCoords[1] += ${n};\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n\n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / ${o};\n              c = imod(flatIndex, ${o});\n              uv = (vec2(c, r) + halfCR) / vec2(${o}.0, ${r}.0);\n              values = ${a.texture2D}(A, uv);\n\n              if(offset == 0) {\n                result[${i}] = values[0];\n              } else if(offset == 1) {\n                result[${i}] = values[1];\n              } else if(offset == 2) {\n                result[${i}] = values[2];\n              } else {\n                result[${i}] = values[3];\n              }\n            }\n          }\n        `}this.userCode=`\n      ${ma(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n\n        ${s}\n\n        ${a.output} = ${i};\n      }\n    `}}function Ra(e){const n=fa();return kt(e,`${n.version}\n    precision highp float;\n    ${n.attribute} vec3 clipSpacePos;\n    ${n.attribute} vec2 uv;\n    ${n.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}function wa(e){return Ft(e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}function ka(e){return Ot(e,new Uint16Array([0,1,2,2,1,3]))}function Ta(e,n,t,a,r,o){Dt(n,t);const s=_t(e),i=e.TEXTURE_2D;return It(e,(()=>e.bindTexture(i,s))),It(e,(()=>e.texParameteri(i,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE))),It(e,(()=>e.texParameteri(i,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE))),It(e,(()=>e.texParameteri(i,e.TEXTURE_MIN_FILTER,e.NEAREST))),It(e,(()=>e.texParameteri(i,e.TEXTURE_MAG_FILTER,e.NEAREST))),It(e,(()=>e.texImage2D(i,0,a,n,t,0,r,o,null))),It(e,(()=>e.bindTexture(e.TEXTURE_2D,null))),s}function Ea(e){return e.internalFormatFloat}function Na(e,n,t,a){const[r,o]=bt(n,t);return Ta(e,r,o,Ea(a),a.textureFormatFloat,e.FLOAT)}function Sa(e){return e.internalFormatHalfFloat}function Aa(e,n,t,a){const[r,o]=bt(n,t);return Ta(e,r,o,Sa(a),a.textureFormatFloat,a.textureTypeHalfFloat)}function Fa(e){return e.downloadTextureFormat}function Oa(e,n,t,a){const[r,o]=bt(n,t);return Ta(e,r,o,Fa(a),e.RGBA,e.UNSIGNED_BYTE)}function _a(e){return e.internalFormatPackedFloat}function Da(e,n,t,a){const[r,o]=vt(n,t);return Ta(e,r,o,_a(a),e.RGBA,e.FLOAT)}function La(e){return e.internalFormatPackedHalfFloat}function Pa(e,n,t,a){const[r,o]=vt(n,t);return Ta(e,r,o,La(a),e.RGBA,a.textureTypeHalfFloat)}function Ba(e,n,t){It(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,t)));return Pt(e,n,"clipSpacePos",t,3,20,0)&&Pt(e,n,"uv",t,2,20,12)}function Va(e,n,t,a,r,o){let s,i,u;It(e,(()=>e.bindTexture(e.TEXTURE_2D,n))),r instanceof Uint8Array?(s=new Uint8Array(t*a*4),i=e.UNSIGNED_BYTE,u=e.RGBA):(s=new Float32Array(t*a*4),i=e.FLOAT,u=o.internalFormatPackedFloat),s.set(r),It(e,(()=>e.texImage2D(e.TEXTURE_2D,0,u,t,a,0,e.RGBA,i,s))),It(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}function Wa(e,n,t){It(e,(()=>e.bindTexture(e.TEXTURE_2D,n))),t.data instanceof Uint8Array?It(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,t.width,t.height,0,e.RGBA,e.UNSIGNED_BYTE,t.data))):It(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,t))),It(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}function Ma(e,n,t,a){const r=e.createBuffer();It(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,r)));const o=16*n*t;return It(e,(()=>e.bufferData(e.PIXEL_PACK_BUFFER,o,e.STREAM_READ))),It(e,(()=>e.readPixels(0,0,t,n,e.RGBA,e.FLOAT,0))),It(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,null))),r}function Ga(e,n,t){const a=e,r=new Float32Array(t);return a.bindBuffer(a.PIXEL_PACK_BUFFER,n),a.getBufferSubData(a.PIXEL_PACK_BUFFER,0,r),a.bindBuffer(a.PIXEL_PACK_BUFFER,null),r}function Ua(e,n,t,a){const[r,o]=bt(n,t),s=new Uint8Array(n*t*4);return It(e,(()=>e.readPixels(0,0,r,o,a.downloadTextureFormat,e.UNSIGNED_BYTE,s))),new Float32Array(s.buffer)}function za(e,n,t,a,r,o,s,i){const u=e,l=new Float32Array(function(e,n){const[t,a]=vt(e,n);return t*a*4}(o,s));return u.bindBuffer(u.PIXEL_PACK_BUFFER,n),u.getBufferSubData(u.PIXEL_PACK_BUFFER,0,l),u.bindBuffer(u.PIXEL_PACK_BUFFER,null),l}function Xa(e,n,t){const a=new Float32Array(n*t*4);return It(e,(()=>e.readPixels(0,0,t,n,e.RGBA,e.FLOAT,a))),a}var Ha=Object.freeze({__proto__:null,createVertexShader:Ra,createVertexBuffer:wa,createIndexBuffer:ka,getInternalFormatForFloat32MatrixTexture:Ea,createFloat32MatrixTexture:Na,getInternalFormatForFloat16MatrixTexture:Sa,createFloat16MatrixTexture:Aa,getInternalFormatForUnsignedBytesMatrixTexture:Fa,createUnsignedBytesMatrixTexture:Oa,getInternalFormatForPackedMatrixTexture:_a,createPackedMatrixTexture:Da,getInternalFormatForFloat16PackedMatrixTexture:La,createFloat16PackedMatrixTexture:Pa,bindVertexProgramAttributeStreams:Ba,uploadDenseMatrixToTexture:Va,uploadPixelDataToTexture:Wa,createBufferFromOutputTexture:Ma,downloadFloat32MatrixFromBuffer:Ga,downloadByteEncodedFloatMatrixFromOutputTexture:Ua,downloadPackedMatrixFromBuffer:za,downloadMatrixFromPackedOutputTexture:Xa});class ja{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];const t=n().getNumber("WEBGL_VERSION");null!=e?(this.gl=e,ht(t,e)):this.gl=ft(t);let a="WEBGL_color_buffer_float";const r="EXT_color_buffer_half_float";if(1===n().getNumber("WEBGL_VERSION")){const e="OES_texture_float",t="OES_texture_half_float";if(this.textureFloatExtension=wt(this.gl,e),oa(this.gl,t))this.textureHalfFloatExtension=wt(this.gl,t);else if(n().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(a),oa(this.gl,r))this.colorBufferHalfFloatExtension=wt(this.gl,r);else if(n().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(a="EXT_color_buffer_float",oa(this.gl,a))this.colorBufferFloatExtension=this.gl.getExtension(a);else{if(!oa(this.gl,r))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(r)}this.vertexBuffer=wa(this.gl),this.indexBuffer=ka(this.gl),this.framebuffer=Lt(this.gl),this.textureConfig=$t(this.gl,this.textureHalfFloatExtension)}get debug(){return n().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const e=this.gl;It(e,(()=>e.finish())),It(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,null))),It(e,(()=>e.deleteFramebuffer(this.framebuffer))),It(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,null))),It(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null))),It(e,(()=>e.deleteBuffer(this.indexBuffer))),this.disposed=!0}createFloat32MatrixTexture(e,n){return this.throwIfDisposed(),Na(this.gl,e,n,this.textureConfig)}createFloat16MatrixTexture(e,n){return this.throwIfDisposed(),Aa(this.gl,e,n,this.textureConfig)}createUnsignedBytesMatrixTexture(e,n){return this.throwIfDisposed(),Oa(this.gl,e,n,this.textureConfig)}uploadPixelDataToTexture(e,n){this.throwIfDisposed(),Wa(this.gl,e,n)}uploadDenseMatrixToTexture(e,n,t,a){this.throwIfDisposed(),Va(this.gl,e,n,t,a,this.textureConfig)}createFloat16PackedMatrixTexture(e,n){return this.throwIfDisposed(),Pa(this.gl,e,n,this.textureConfig)}createPackedMatrixTexture(e,n){return this.throwIfDisposed(),Da(this.gl,e,n,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(Ut(this.gl,this.framebuffer),this.outputTexture=null),It(this.gl,(()=>this.gl.deleteTexture(e)))}downloadByteEncodedFloatMatrixFromOutputTexture(e,n,t){return this.downloadMatrixDriver(e,(()=>Ua(this.gl,n,t,this.textureConfig)))}downloadPackedMatrixFromBuffer(e,n,t,a,r,o){return za(this.gl,e,0,0,0,r,o,this.textureConfig)}downloadFloat32MatrixFromBuffer(e,n){return Ga(this.gl,e,n)}createBufferFromTexture(e,n,t){this.bindTextureToFrameBuffer(e);const a=Ma(this.gl,n,t,this.textureConfig);return this.unbindTextureToFrameBuffer(),a}createAndWaitForFence(){const e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let t,a;if(n().getBool("WEBGL_FENCE_API_ENABLED")){const n=e,r=n.fenceSync(n.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),a=()=>{const e=n.clientWaitSync(r,0,0);return e===n.ALREADY_SIGNALED||e===n.CONDITION_SATISFIED},t=r}else n().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),a=()=>this.isQueryAvailable(t,n().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):a=()=>!0;return{query:t,isFencePassed:a}}downloadMatrixFromPackedTexture(e,n,t){return this.downloadMatrixDriver(e,(()=>Xa(this.gl,n,t)))}createProgram(e){this.throwIfDisposed();const n=this.gl,t=Tt(n,e),a=Ra(n),r=Nt(n);return It(n,(()=>n.attachShader(r,a))),It(n,(()=>n.attachShader(r,t))),St(n,r),this.debug&&At(n,r),this.vertexAttrsAreBound||(this.setProgram(r),this.vertexAttrsAreBound=Ba(n,this.program,this.vertexBuffer)),r}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),null!=e&&It(this.gl,(()=>this.gl.deleteProgram(e)))}setProgram(e){this.throwIfDisposed(),this.program=e,null!=this.program&&this.debug&&At(this.gl,this.program),It(this.gl,(()=>this.gl.useProgram(e)))}getUniformLocation(e,n,t=!0){return this.throwIfDisposed(),t?Vt(this.gl,e,n):Wt(this.gl,e,n)}getAttributeLocation(e,n){return this.throwIfDisposed(),It(this.gl,(()=>this.gl.getAttribLocation(e,n)))}getUniformLocationNoThrow(e,n){return this.throwIfDisposed(),this.gl.getUniformLocation(e,n)}setInputMatrixTexture(e,n,t){this.throwIfDisposed(),this.throwIfNoProgram(),Mt(this.gl,e,n,t)}setOutputMatrixTexture(e,n,t){this.setOutputMatrixTextureDriver(e,t,n)}setOutputPackedMatrixTexture(e,n,t){this.throwIfDisposed();const[a,r]=vt(n,t);this.setOutputMatrixTextureDriver(e,a,r)}setOutputMatrixWriteRegion(e,n,t,a){this.setOutputMatrixWriteRegionDriver(t,e,a,n)}setOutputPackedMatrixWriteRegion(e,n,t,a){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&At(this.gl,this.program),zt(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const e=this.gl;this.debug&&this.debugValidate(),It(e,(()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0)))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),It(this.gl,(()=>this.gl.finish()))}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=wt(this.gl,2===n().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===n().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,n=this.getQueryTimerExtensionWebGL2(),t=e.createQuery();return e.beginQuery(n.TIME_ELAPSED_EXT,t),t}const e=this.getQueryTimerExtensionWebGL1(),t=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,t),t}endQuery(){if(2===n().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,n=this.getQueryTimerExtensionWebGL2();return void e.endQuery(n.TIME_ELAPSED_EXT)}const e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(t){return await e.repeatedTry((()=>this.disposed||this.isQueryAvailable(t,n().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")))),this.getQueryTime(t,n().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,n){if(0===n)return null;if(2===n){const n=this.gl;return n.getQueryParameter(e,n.QUERY_RESULT)/1e6}{const n=this.getQueryTimerExtensionWebGL1();return n.getQueryObjectEXT(e,n.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,n){if(0===n)return!0;if(2===n){const n=this.gl,t=this.getQueryTimerExtensionWebGL2(),a=n.getQueryParameter(e,n.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(t.GPU_DISJOINT_EXT)),a&&!this.disjoint}{const n=this.getQueryTimerExtensionWebGL1(),t=n.getQueryObjectEXT(e,n.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),t&&!this.disjoint}}pollFence(e){return new Promise((n=>{this.addItemToPoll((()=>e.isFencePassed()),(()=>n()))}))}pollItems(){const e=function(e){let n=0;for(;n<e.length;++n){if(!e[n]())break}return n-1}(this.itemsToPoll.map((e=>e.isDoneFn)));for(let n=0;n<=e;++n){const{resolveFn:e}=this.itemsToPoll[n];e()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(n,t){this.itemsToPoll.push({isDoneFn:n,resolveFn:t}),this.itemsToPoll.length>1||e.repeatedTry((()=>(this.pollItems(),0===this.itemsToPoll.length)))}bindTextureToFrameBuffer(e){this.throwIfDisposed(),Gt(this.gl,e,this.framebuffer),this.debug&&zt(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(Gt(this.gl,this.outputTexture,this.framebuffer),this.debug&&zt(this.gl)):Ut(this.gl,this.framebuffer)}downloadMatrixDriver(e,n){this.bindTextureToFrameBuffer(e);const t=n();return this.unbindTextureToFrameBuffer(),t}setOutputMatrixTextureDriver(e,n,t){this.throwIfDisposed();const a=this.gl;Gt(a,e,this.framebuffer),this.debug&&zt(a),this.outputTexture=e,It(a,(()=>a.viewport(0,0,n,t))),It(a,(()=>a.scissor(0,0,n,t)))}setOutputMatrixWriteRegionDriver(e,n,t,a){this.throwIfDisposed(),It(this.gl,(()=>this.gl.scissor(e,n,t,a)))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}const{getBroadcastDims:Ka}=a;function Ya(n,t,a,r){const o=[];n.forEach((n=>{const t=e.sizeFromShape(n.shapeInfo.logicalShape);n.shapeInfo.isUniform?o.push(`uniform float ${n.name}${t>1?`[${t}]`:""};`):(o.push(`uniform sampler2D ${n.name};`),o.push(`uniform int offset${n.name};`))}));const s=o.join("\n"),i=n.map((n=>function(n,t,a=!1){let r="";r+=a?Qa(n):qa(n);const o=n.shapeInfo.logicalShape,s=t.logicalShape;o.length<=s.length&&(r+=a?function(n,t){const a=n.name,r=a.charAt(0).toUpperCase()+a.slice(1),o="get"+r+"AtOutCoords",s=n.shapeInfo.logicalShape.length,i=t.logicalShape.length,u=Ka(n.shapeInfo.logicalShape,t.logicalShape),l=or(i),c=i-s;let d;const p=["x","y","z","w","u","v"];d=0===s?"":i<2&&u.length>=1?"coords = 0;":u.map((e=>`coords.${p[e+c]} = 0;`)).join("\n");let h="";h=i<2&&s>0?"coords":n.shapeInfo.logicalShape.map(((e,n)=>`coords.${p[n+c]}`)).join(", ");let f="return outputValue;";const x=1===e.sizeFromShape(n.shapeInfo.logicalShape),m=1===e.sizeFromShape(t.logicalShape);if(1!==s||x||m){if(x&&!m)f=1===i?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(u.length){const e=s-2,n=s-1;u.indexOf(e)>-1&&u.indexOf(n)>-1?f="return vec4(outputValue.x);":u.indexOf(e)>-1?f="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":u.indexOf(n)>-1&&(f="return vec4(outputValue.xx, outputValue.zz);")}}else f="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${o}() {\n      ${l} coords = getOutputCoords();\n      ${d}\n      vec4 outputValue = get${r}(${h});\n      ${f}\n    }\n  `}(n,t):function(n,t){const a=n.name,r=a.charAt(0).toUpperCase()+a.slice(1),o="get"+r+"AtOutCoords",s=t.texShape,i=n.shapeInfo.texShape,u=n.shapeInfo.logicalShape.length,l=t.logicalShape.length;if(!n.shapeInfo.isUniform&&u===l&&null==n.shapeInfo.flatOffset&&e.arraysEqual(i,s))return`\n      float ${o}() {\n        return sampleTexture(${a}, resultUV);\n      }\n    `;const c=or(l),d=Ka(n.shapeInfo.logicalShape,t.logicalShape),p=l-u;let h;const f=["x","y","z","w","u","v"];h=0===u?"":l<2&&d.length>=1?"coords = 0;":d.map((e=>`coords.${f[e+p]} = 0;`)).join("\n");let x="";x=l<2&&u>0?"coords":n.shapeInfo.logicalShape.map(((e,n)=>`coords.${f[n+p]}`)).join(", ");return`\n    float ${o}() {\n      ${c} coords = getOutputCoords();\n      ${h}\n      return get${r}(${x});\n    }\n  `}(n,t));return r}(n,t,r))).join("\n"),u=t.texShape,l=fa(),c=function(e){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${e.texture2D}(textureSampler, uv).r;\n    }\n  `}(l);let d,p,h=function(e){return`${e.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${e.varyingFs} vec2 resultUV;\n    ${e.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${e.defineSpecialNaN}\n    ${e.defineSpecialInf}\n    ${e.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${Za}\n    ${Ja}\n    ${er}\n  `}(l);t.isPacked?(d=function(n,t){switch(n.length){case 0:return tr();case 1:return function(e,n){const t=[Math.ceil(n[0]/2),Math.ceil(n[1]/2)];if(1===t[0])return`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${t[1]}.0);\n      }\n    `;if(1===t[1])return`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${t[0]}.0);\n      }\n    `;return`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      return 2 * (resTexRC.x * ${t[1]} + resTexRC.y);\n    }\n  `}(0,t);case 2:return function(n,t){const a=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(e.arraysEqual(n,t))return`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${a[0]}, ${a[1]}));\n      }\n    `;const r=Math.ceil(n[1]/2);return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${a[0]}, ${a[1]}));\n\n      int index = resTexRC.x * ${a[1]} + resTexRC.y;\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(n,t);case 3:return function(e,n){const t=[Math.ceil(n[0]/2),Math.ceil(n[1]/2)],a=Math.ceil(e[2]/2),r=a*Math.ceil(e[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      int b = index / ${r};\n      index -= b * ${r};\n\n      int r = 2 * (index / ${a});\n      int c = imod(index, ${a}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(n,t);default:return function(e,n){const t=[Math.ceil(n[0]/2),Math.ceil(n[1]/2)],a=Math.ceil(e[e.length-1]/2),r=a*Math.ceil(e[e.length-2]/2);let o=r,s="",i="b, r, c";for(let n=2;n<e.length-1;n++)o*=e[e.length-n-1],s=`\n      int b${n} = index / ${o};\n      index -= b${n} * ${o};\n    `+s,i=`b${n}, `+i;return`\n    ivec${e.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${s}\n\n      int b = index / ${r};\n      index -= b * ${r};\n\n      int r = 2 * (index / ${a});\n      int c = imod(index, ${a}) * 2;\n\n      return ivec${e.length}(${i});\n    }\n  `}(n,t)}}(t.logicalShape,u),p=function(e){return`\n    void setOutput(vec4 val) {\n      ${e.output} = val;\n    }\n  `}(l)):(d=function(n,t){switch(n.length){case 0:return tr();case 1:return function(e,n){if(1===n[0])return`\n      int getOutputCoords() {\n        return int(resultUV.x * ${n[1]}.0);\n      }\n    `;if(1===n[1])return`\n      int getOutputCoords() {\n        return int(resultUV.y * ${n[0]}.0);\n      }\n    `;return`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      return resTexRC.x * ${n[1]} + resTexRC.y;\n    }\n  `}(0,t);case 2:return function(n,t){if(e.arraysEqual(n,t))return`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));\n      }\n    `;if(1===n[1])return`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;if(1===n[0])return`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      int r = index / ${n[1]};\n      int c = index - r * ${n[1]};\n      return ivec2(r, c);\n    }\n  `}(n,t);case 3:return function(e,n){const t=xa(["r","c","d"],e);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n      ${t}\n      return ivec3(r, c, d);\n    }\n  `}(n,t);case 4:return function(e,n){const t=xa(["r","c","d","d2"],e);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n      ${t}\n      return ivec4(r, c, d, d2);\n    }\n  `}(n,t);case 5:return function(e,n){const t=xa(["r","c","d","d2","d3"],e);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${n[0]},\n                             ${n[1]}));\n\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      ${t}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(n,t);case 6:return function(e,n){const t=xa(["r","c","d","d2","d3","d4"],e);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      ${t}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(n,t);default:throw new Error(`${n.length}-D output sampling is not yet supported`)}}(t.logicalShape,u),p=function(e){return`\n    void setOutput(float val) {\n      ${e.output} = vec4(val, 0, 0, 0);\n    }\n  `}(l)),r&&(h+=nr);return[h,c,p,s,d,i,a].join("\n")}function qa(n){const t=n.shapeInfo.logicalShape;switch(t.length){case 0:return function(e){const n=e.name,t="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`float ${t}() {return ${n};}`;const[a,r]=e.shapeInfo.texShape;if(1===a&&1===r)return`\n      float ${t}() {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const[o,s]=e.shapeInfo.texShape,i=ar(n);return`\n    float ${t}() {\n      vec2 uv = uvFromFlat(${o}, ${s}, ${i});\n      return sampleTexture(${n}, uv);\n    }\n  `}(n);case 1:return function(e){const n=e.name,t="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`\n      float ${t}(int index) {\n        ${rr(e)}\n      }\n    `;const a=e.shapeInfo.texShape,r=a[0],o=a[1];if(1===o&&1===r)return`\n      float ${t}(int index) {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const s=ar(n);if(1===o)return`\n      float ${t}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${s}) + 0.5) / ${r}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(1===r)return`\n      float ${t}(int index) {\n        vec2 uv = vec2((float(index + ${s}) + 0.5) / ${o}.0, 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `;return`\n    float ${t}(int index) {\n      vec2 uv = uvFromFlat(${r}, ${o}, index + ${s});\n      return sampleTexture(${n}, uv);\n    }\n  `}(n);case 2:return function(n){const t=n.shapeInfo.logicalShape,a=n.name,r="get"+a.charAt(0).toUpperCase()+a.slice(1),o=n.shapeInfo.texShape;if(null!=o&&e.arraysEqual(t,o)){const e=o[0];return`\n    float ${r}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${o[1]}.0, ${e}.0);\n      return sampleTexture(${a}, uv);\n    }\n  `}const{newShape:s,keptDims:i}=e.squeezeShape(t),u=s;if(u.length<t.length){const e=["row","col"];return`\n      ${qa(sr(n,u))}\n      float ${r}(int row, int col) {\n        return ${r}(${ir(e,i)});\n      }\n    `}if(n.shapeInfo.isUniform)return`\n      float ${r}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${t[1]}, 1)));\n        ${rr(n)}\n      }\n    `;const l=o[0],c=o[1],d=ar(a);if(1===c)return`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${d}), vec3(${t[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${l}.0);\n      return sampleTexture(${a}, uv);\n    }\n  `;if(1===l)return`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${d}), vec3(${t[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${c}.0, 0.5);\n      return sampleTexture(${a}, uv);\n    }\n  `;return`\n  float ${r}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${t[1]} + col + ${d};\n    vec2 uv = uvFromFlat(${l}, ${c}, index);\n    return sampleTexture(${a}, uv);\n  }\n`}(n);case 3:return function(n){const t=n.shapeInfo.logicalShape,a=n.name,r="get"+a.charAt(0).toUpperCase()+a.slice(1),o=t[1]*t[2],s=t[2],{newShape:i,keptDims:u}=e.squeezeShape(t),l=i;if(l.length<t.length){const e=["row","col","depth"];return`\n        ${qa(sr(n,l))}\n        float ${r}(int row, int col, int depth) {\n          return ${r}(${ir(e,u)});\n        }\n      `}if(n.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${o}, ${s}, 1)));\n        ${rr(n)}\n      }\n    `;const c=n.shapeInfo.texShape,d=c[0],p=c[1],h=n.shapeInfo.flatOffset;if(p===o&&null==h)return`\n        float ${r}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${s}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${p}.0, ${d}.0);\n          return sampleTexture(${a}, uv);\n        }\n      `;if(p===s&&null==h)return`\n    float ${r}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${t[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${p}.0, ${d}.0);\n      return sampleTexture(${a}, uv);\n    }\n  `;const f=ar(a);return`\n      float ${r}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${o} + col * ${s} + depth + ${f};\n        vec2 uv = uvFromFlat(${d}, ${p}, index);\n        return sampleTexture(${a}, uv);\n      }\n  `}(n);case 4:return function(n){const t=n.shapeInfo.logicalShape,a=n.name,r="get"+a.charAt(0).toUpperCase()+a.slice(1),o=t[3],s=t[2]*o,i=t[1]*s,{newShape:u,keptDims:l}=e.squeezeShape(t);if(u.length<t.length){const e=["row","col","depth","depth2"];return`\n      ${qa(sr(n,u))}\n      float ${r}(int row, int col, int depth, int depth2) {\n        return ${r}(${ir(e,l)});\n      }\n    `}if(n.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${i}, ${s}, ${o}, 1)));\n        ${rr(n)}\n      }\n    `;const c=n.shapeInfo.flatOffset,d=n.shapeInfo.texShape,p=d[0],h=d[1];if(h===i&&null==c)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${s}, ${o}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${h}.0, ${p}.0);\n        return sampleTexture(${a}, uv);\n      }\n    `;if(h===o&&null==c)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${t[1]*t[2]}, ${t[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${h}.0, ${p}.0);\n        return sampleTexture(${a}, uv);\n      }\n    `;const f=ar(a);return`\n    float ${r}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${i} + col * ${s} +\n          depth * ${o} + depth2;\n      vec2 uv = uvFromFlat(${p}, ${h}, index + ${f});\n      return sampleTexture(${a}, uv);\n    }\n  `}(n);case 5:return function(n){const t=n.shapeInfo.logicalShape,a=n.name,r="get"+a.charAt(0).toUpperCase()+a.slice(1),o=t[4],s=t[3]*o,i=t[2]*s,u=t[1]*i,{newShape:l,keptDims:c}=e.squeezeShape(t);if(l.length<t.length){const e=["row","col","depth","depth2","depth3"];return`\n      ${qa(sr(n,l))}\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        return ${r}(${ir(e,c)});\n      }\n    `}if(n.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${u}, ${i}, ${s}, ${o})) +\n          depth3;\n        ${rr(n)}\n      }\n    `;const d=n.shapeInfo.flatOffset,p=n.shapeInfo.texShape,h=p[0],f=p[1];if(f===u&&null==d)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${i}, ${s}, ${o}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${h}.0);\n        return sampleTexture(${a}, uv);\n      }\n    `;if(f===o&&null==d)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]},\n               ${t[2]*t[3]}, ${t[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${h}.0);\n        return sampleTexture(${a}, uv);\n      }\n    `;const x=ar(a);return`\n    float ${r}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${u} + col * ${i} + depth * ${s} +\n          depth2 * ${o} + depth3 + ${x};\n      vec2 uv = uvFromFlat(${h}, ${f}, index);\n      return sampleTexture(${a}, uv);\n    }\n  `}(n);case 6:return function(n){const t=n.shapeInfo.logicalShape,a=n.name,r="get"+a.charAt(0).toUpperCase()+a.slice(1),{newShape:o,keptDims:s}=e.squeezeShape(t);if(o.length<t.length){const e=["row","col","depth","depth2","depth3","depth4"];return`\n      ${qa(sr(n,o))}\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${r}(${ir(e,s)});\n      }\n    `}const i=t[5],u=t[4]*i,l=t[3]*u,c=t[2]*l,d=t[1]*c;if(n.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${d}, ${c}, ${l}, ${u})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${i}, 1)));\n        ${rr(n)}\n      }\n    `;const p=n.shapeInfo.flatOffset,h=n.shapeInfo.texShape,f=h[0],x=h[1];if(x===d&&null==p)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${c}, ${l}, ${u}, ${i})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${x}.0, ${f}.0);\n        return sampleTexture(${a}, uv);\n      }\n    `;if(x===i&&null==p)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]*t[4]},\n               ${t[2]*t[3]*t[4]},\n               ${t[3]*t[4]},\n               ${t[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${x}.0, ${f}.0);\n        return sampleTexture(${a}, uv);\n      }\n    `;const m=ar(a);return`\n    float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${d} + col * ${c} + depth * ${l} +\n          depth2 * ${u} + depth3 * ${i} + depth4 + ${m};\n      vec2 uv = uvFromFlat(${f}, ${x}, index);\n      return sampleTexture(${a}, uv);\n    }\n  `}(n);default:throw new Error(`${t.length}-D input sampling is not yet supported`)}}function Qa(n){switch(n.shapeInfo.logicalShape.length){case 0:return function(e){const n=e.name,t="get"+n.charAt(0).toUpperCase()+n.slice(1),a=fa();return`\n    vec4 ${t}() {\n      return ${a.texture2D}(${n}, halfCR);\n    }\n  `}(n);case 1:return function(e){const n=e.name,t="get"+n.charAt(0).toUpperCase()+n.slice(1),a=e.shapeInfo.texShape,r=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)],o=fa();return`\n    vec4 ${t}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${r[0]}, ${r[1]}, index);\n      return ${o.texture2D}(${n}, uv);\n    }\n  `}(n);case 2:return function(n){const t=n.shapeInfo.logicalShape,a=n.name,r="get"+a.charAt(0).toUpperCase()+a.slice(1),o=n.shapeInfo.texShape,s=o[0],i=o[1],u=fa();if(null!=o&&e.arraysEqual(t,o))return`\n      vec4 ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${i}.0, ${s}.0);\n\n        return ${u.texture2D}(${a}, uv);\n      }\n    `;const l=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)],c=Math.ceil(t[1]/2);return`\n    vec4 ${r}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${c}, ${l[0]}, ${l[1]}, row, col);\n      return ${u.texture2D}(${a}, uv);\n    }\n  `}(n);case 3:return function(e){const n=e.shapeInfo.logicalShape,t=e.name,a="get"+t.charAt(0).toUpperCase()+t.slice(1),r=e.shapeInfo.texShape,o=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)];if(1===n[0]){const t=[1,2],r=["b","row","col"];return`\n        ${Qa(sr(e,n.slice(1)))}\n        vec4 ${a}(int b, int row, int col) {\n          return ${a}(${ir(r,t)});\n        }\n      `}const s=o[0],i=o[1],u=Math.ceil(n[2]/2),l=u*Math.ceil(n[1]/2),c=fa();return`\n    vec4 ${a}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${s}, ${i}, ${l}, ${u}, b, row, col);\n      return ${c.texture2D}(${t}, uv);\n    }\n  `}(n);default:return function(e){const n=e.shapeInfo.logicalShape,t=n.length,a=e.name,r="get"+a.charAt(0).toUpperCase()+a.slice(1),o=e.shapeInfo.texShape,s=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)],i=s[0],u=s[1],l=Math.ceil(n[t-1]/2);let c=l*Math.ceil(n[t-2]/2),d="int b, int row, int col",p=`b * ${c} + (row / 2) * ${l} + (col / 2)`;for(let e=2;e<t-1;e++)d=`int b${e}, `+d,c*=n[t-e-1],p=`b${e} * ${c} + `+p;const h=fa();return`\n    vec4 ${r}(${d}) {\n      int index = ${p};\n      int texR = index / ${u};\n      int texC = index - texR * ${u};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${u}, ${i});\n      return ${h.texture2D}(${a}, uv);\n    }\n  `}(n)}}const Za="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",Ja="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",er="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",nr="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function tr(){return"\n    int getOutputCoords() {\n      return 0;\n    }\n  "}function ar(e){return`offset${e}`}function rr(n){const t=n.name,a=e.sizeFromShape(n.shapeInfo.logicalShape);return a<2?`return ${t};`:`\n    for (int i = 0; i < ${a}; i++) {\n      if (i == index) {\n        return ${t}[i];\n      }\n    }\n  `}function or(e){if(e<=1)return"int";if(2===e)return"ivec2";if(3===e)return"ivec3";if(4===e)return"ivec4";if(5===e)return"ivec5";if(6===e)return"ivec6";throw Error(`GPU for rank ${e} is not yet supported`)}function sr(e,n){const t=JSON.parse(JSON.stringify(e));return t.shapeInfo.logicalShape=n,t}function ir(e,n){return n.map((n=>e[n])).join(", ")}function ur(n,t){if(n.length!==t.length)throw Error(`Binary was compiled with ${n.length} inputs, but was executed with ${t.length} inputs`);n.forEach(((n,a)=>{const r=n.logicalShape,o=t[a],s=o.shape;if(!e.arraysEqual(r,s))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${r} and ${s} must match`);if(n.isUniform&&o.isUniform)return;const i=n.texShape,u=o.isUniform?null:o.texData.texShape;if(!e.arraysEqual(i,u))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${i} and ${u} must match`)}))}function lr(n){return(t,r,o,s,i)=>{const u=a.assertAndGetBroadcastShape(t,r),l=u.length,c=e.computeStrides(u),d=e.sizeFromShape(u),p=e.getTypedArrayFromDType(i,d),h=t.length,f=r.length,x=e.computeStrides(t),m=e.computeStrides(r),g=a.getBroadcastDims(t,u),b=a.getBroadcastDims(r,u);if(g.length+b.length===0)for(let e=0;e<p.length;++e)p[e]=n(o[e%o.length],s[e%s.length]);else for(let t=0;t<p.length;++t){const a=e.indexToLoc(t,l,c),r=a.slice(-h);g.forEach((e=>r[e]=0));const i=e.locToIndex(r,h,x),u=a.slice(-f);b.forEach((e=>u[e]=0));const d=e.locToIndex(u,f,m);p[t]=n(o[i],s[d])}return[p,u]}}const cr=lr(((e,n)=>e+n));function dr(n){return(t,a,r)=>{const o=e.getTypedArrayFromDType(a,t.length);for(let e=0;e<t.length;++e)o[e]=n(t[e],r);return o}}const pr=dr((e=>Math.ceil(e)));const hr=dr((e=>Math.exp(e))),fr=dr((e=>Math.expm1(e))),xr=dr((e=>Math.floor(e)));const mr=lr(((e,n)=>e>n?1:0)),gr=lr(((e,n)=>e<n?1:0));const br=dr((e=>Math.log(e)));const Cr=lr(((e,n)=>Math.max(e,n))),vr=lr(((e,n)=>Math.min(e,n))),$r=lr(((e,n)=>e*n));const Ir=lr(((e,n)=>e!==n?1:0));const yr=dr((e=>1/Math.sqrt(e)));const Rr=lr(((e,n)=>{const t=e-n;return t*t}));const wr=lr(((e,n)=>e-n));var kr=Object.freeze({__proto__:null,simpleAbsImpl:function(e){const n=new Float32Array(e.length);for(let t=0;t<e.length;++t)n[t]=Math.abs(e[t]);return n},addImpl:cr,bincountImpl:function(n,t,a,r,o){const s=e.sizeFromShape(r),i=e.makeZerosTypedArray(o,a);for(let e=0;e<n.length;e++){const a=n[e];if(a<0)throw new Error("Input x must be non-negative!");a>=o||(i[a]+=s>0?t[e]:1)}return i},bincountReduceImpl:function(e,n,t,a=!1){const o=e.shape[0],s=e.shape[1],i=r([o,t],n.dtype);for(let r=0;r<o;r++)for(let o=0;o<s;o++){const s=e.get(r,o);if(s<0)throw new Error("Input x must be non-negative!");s>=t||(a?i.set(1,r,s):n.size>0?i.set(i.get(r,s)+n.get(r,o),r,s):i.set(i.get(r,s)+1,r,s))}return i},ceilImpl:pr,concatImpl:function(n,t,r,o){const s=e.getArrayFromDType(r,e.sizeFromShape(t));if(o&&"string"!==r){let t=0;n.forEach((n=>{const a=e.sizeFromShape(n.shape);s.set(n.vals,t),t+=a}))}else{let e=0;n.forEach((n=>{const o="string"===r?a.fromUint8ToStringArray(n.vals):n.vals;let i=0;for(let a=0;a<n.shape[0];++a){const r=a*t[1]+e;for(let e=0;e<n.shape[1];++e)s[r+e]=o[i++]}e+=n.shape[1]}))}return s},expImpl:hr,expm1Impl:fr,floorImpl:xr,gatherV2Impl:function(e,n,t){const a=r(t,e.dtype);for(let t=0;t<a.size;++t){const r=a.indexToLoc(t).slice(),o=r[0],s=r[2],i=n.locToIndex([o,s]);r[2]=n.values[i];const u=e.locToIndex(r);a.values[t]=e.values[u]}return a},greaterImpl:mr,lessImpl:gr,linSpaceImpl:function(n,t,a){const r=(t-n)/(a-1),o=e.makeZerosTypedArray(a,"float32");o[0]=n;for(let e=1;e<o.length;e++)o[e]=o[e-1]+r;return o},logImpl:br,maxImpl:function(n,t,a,r){const o=e.getTypedArrayFromDType(r,e.sizeFromShape(a));for(let e=0;e<o.length;++e){const a=e*t;let r=n[a];for(let e=0;e<t;++e){const t=n[a+e];t>r&&(r=t)}o[e]=r}return o},maximumImpl:Cr,minimumImpl:vr,multiplyImpl:$r,negImpl:function(n,t,a){const r=e.createScalarValue(-1,a);return $r([],t,r,n,a)},notEqualImpl:Ir,prodImpl:function(n,t,r,s){const[i,u]=a.computeOutAndReduceShapes(n,s),l=o(t,"int32"),c=e.makeZerosTypedArray(e.sizeFromShape(i),l),d=e.sizeFromShape(u);for(let e=0;e<c.length;++e){const n=e*d;let t=1;for(let e=0;e<d;++e)t*=r[n+e];c[e]=t}return{outVals:c,outShape:i,outDtype:l}},rangeImpl:function(n,t,a,r){if(n===t||n<t&&a<0||t<n&&a>1)return e.makeZerosTypedArray(0,r);const o=Math.abs(Math.ceil((t-n)/a)),s=e.makeZerosTypedArray(o,r);t<n&&1===a&&(a=-1),s[0]=n;for(let e=1;e<s.length;e++)s[e]=s[e-1]+a;return s},rsqrtImpl:yr,sliceImpl:function(n,t,o,i,u){const l=s.isSliceContinous(i,t,o),c=e.sizeFromShape(o),d=e.computeStrides(i);if(l){const e=s.computeFlatOffset(t,d);return"string"===u?n.slice(e,e+c):n.subarray(e,e+c)}const p="string"===u?a.fromUint8ToStringArray(n):n,h=r(i,u,p),f=r(o,u);for(let e=0;e<f.size;++e){const n=f.indexToLoc(e),a=n.map(((e,n)=>e+t[n]));f.set(h.get(...a),...n)}return"string"===u?a.fromStringArrayToUint8(f.values):f.values},squaredDifferenceImpl:Rr,stridedSliceImpl:function(e,n,t,a){const o=r(e,n.dtype);for(let e=0;e<o.size;e++){const r=o.indexToLoc(e),s=new Array(r.length);for(let e=0;e<s.length;e++)s[e]=r[e]*t[e]+a[e];o.set(n.get(...s),...r)}return o},subImpl:wr,tileImpl:function(e,n){const t=new Array(e.rank);for(let a=0;a<t.length;a++)t[a]=e.shape[a]*n[a];const a=r(t,e.dtype);for(let n=0;n<a.values.length;++n){const t=a.indexToLoc(n),r=new Array(e.rank);for(let n=0;n<r.length;n++)r[n]=t[n]%e.shape[n];const o=e.locToIndex(r);a.values[n]=e.values[o]}return a},topKImpl:function(n,t,a,o,s){const i=t[t.length-1],[u,l]=[n.length/i,i],c=e.getTypedArrayFromDType(a,u*o),d=e.getTypedArrayFromDType("int32",u*o);for(let e=0;e<u;e++){const t=e*l,a=n.subarray(t,t+l),r=[];for(let e=0;e<a.length;e++)r.push({value:a[e],index:e});r.sort(((e,n)=>n.value-e.value));const s=e*o,i=c.subarray(s,s+o),u=d.subarray(s,s+o);for(let e=0;e<o;e++)i[e]=r[e].value,u[e]=r[e].index}const p=t.slice();return p[p.length-1]=o,[r(p,a,c),r(p,"int32",d)]},transposeImpl:function(n,t,a,r,o){const s=t.length,i=e.sizeFromShape(t),u=e.computeStrides(t),l=e.computeStrides(o),c=e.getTypedArrayFromDType(a,e.sizeFromShape(o));for(let t=0;t<i;++t){const a=e.indexToLoc(t,s,u),o=new Array(a.length);for(let e=0;e<o.length;e++)o[e]=a[r[e]];c[e.locToIndex(o,s,l)]=n[t]}return c},uniqueImpl:function(n,t,a,r){const o=e.parseAxisParam(t,a)[0],s=[1,a[0],1];for(let e=0;e<o;e++)s[0]*=a[e];s[1]=a[o];for(let e=o+1;e<a.length;e++)s[2]*=a[e];const u={},l=new Int32Array(a[o]),c=new i(s,r,n),d=[],p=1===s[0]&&1===s[2];for(let e=0;e<a[o];e++){let t;if(p)t=n[e].toString();else{const n=[];for(let t=0;t<s[0];t++)for(let a=0;a<s[2];a++)n.push(c.get(t,e,a));t=n.join(",")}if(void 0!==u[t])l[e]=u[t];else{const n=Object.keys(u).length;u[t]=n,l[e]=n,d.push(e)}}const h=s.slice();h[1]=Object.keys(u).length;const f=new i(h,r);d.forEach(((e,n)=>{for(let t=0;t<s[0];t++)for(let a=0;a<s[2];a++)f.set(c.get(t,e,a),t,n,a)}));const x=a.slice();return x[o]=h[1],{outputValues:f.values,outputShape:x,indices:l}}});const{addImpl:Tr,bincountImpl:Er,bincountReduceImpl:Nr,ceilImpl:Sr,concatImpl:Ar,expImpl:Fr,expm1Impl:Or,floorImpl:_r,gatherV2Impl:Dr,greaterImpl:Lr,lessImpl:Pr,linSpaceImpl:Br,logImpl:Vr,maxImpl:Wr,maximumImpl:Mr,minimumImpl:Gr,multiplyImpl:Ur,negImpl:zr,prodImpl:Xr,rangeImpl:Hr,rsqrtImpl:jr,simpleAbsImpl:Kr,sliceImpl:Yr,stridedSliceImpl:qr,subImpl:Qr,tileImpl:Zr,topKImpl:Jr,transposeImpl:eo,uniqueImpl:no}=kr;function to(e,n){return["x","y","z","w","u","v"].slice(0,n).map((n=>`${e}.${n}`))}function ao(e,n){return 1===n?[e]:to(e,n)}class ro{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e;const n=e.length;if(0===n)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const t=ao("rc",n),a=or(n),r=function(e,n,t){if(1===e)return`rc > ${n[0]}`;let a="";for(let r=e-2;r<e;r++)a+=`${t[r]} >= ${n[r]}`,r<e-1&&(a+="||");return a}(n,e,t),o=function(e,n,t,a){if(1===e)return"";const r=a.slice(-2);return`\n    int r = ${r[0]};\n    int c = ${r[1]};\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= ${n};\n    bool rEdge = rp1 >= ${t};\n  `}(n,e[e.length-1],e[e.length-2],t),s=function(e,n){const t=e.length,a=function(e,n){const t=[];for(let a=0;a<=1;a++)for(let r=0;r<=1;r++){let o=`${0===a?"r":"rp1"}, ${0===r?"c":"cp1"}`;for(let t=2;t<e;t++)o=`${n[n.length-1-t]},`+o;t.push(o)}return t}(t,n);if(1===t)return`getA(rc),\n            rc + 1 >= ${e[0]} ? 0. : getA(rc + 1),\n            0, 0`;return`getA(${a[0]}),\n          cEdge ? 0. : getA(${a[1]}),\n          rEdge ? 0. : getA(${a[2]}),\n          rEdge || cEdge ? 0. : getA(${a[3]})`}(e,t);this.userCode=`\n        void main() {\n          ${a} rc = getOutputCoords();\n\n          if(${r}) {\n            setOutput(vec4(0));\n          } else {\n            ${o}\n\n            setOutput(vec4(${s}));\n          }\n        }\n      `}}}class oo{constructor(e,n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e;let t="";for(let e=0;e<4;e++){let n="thisRC = rc;";e%2==1&&(n+="thisRC.z += 1;"),e>1&&(n+="thisRC.y += 1;"),t+=`\n        ${n}\n        ${e>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${e}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${e>0?"}":""}\n      `}var a;this.userCode=`\n      ${a=n,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${xa(["r","c","d"],a)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${ma(e)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${e[1]};\n        int cols = ${e[2]};\n\n        ${t}\n\n        setOutput(result);\n      }\n    `}}class so{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(e,n,t){const a=uo(n,t),r=lo(e,a,t);r in this.freeTextures||(this.freeTextures[r]=[]),r in this.usedTextures||(this.usedTextures[r]=[]);const o=io(e,a,this.gpgpu.gl,this.gpgpu.textureConfig,t);if(this.freeTextures[r].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=o,this.log();const e=this.freeTextures[r].shift();return this.usedTextures[r].push(e),e}let s;return a===gt.PACKED_2X2_FLOAT32?s=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):a===gt.PACKED_2X2_FLOAT16?s=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):a===gt.UNPACKED_FLOAT32?s=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):a===gt.UNPACKED_FLOAT16?s=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):a===gt.PACKED_4X1_UNSIGNED_BYTE&&(s=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[r].push(s),this.numUsedTextures++,this._numBytesAllocated+=o,this.log(),s}releaseTexture(e,t,a,r){if(null==this.freeTextures)return;const o=uo(a,r),s=lo(t,o,r);s in this.freeTextures||(this.freeTextures[s]=[]);const i=io(t,o,this.gpgpu.gl,this.gpgpu.textureConfig,r),u=n().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==u&&this._numBytesAllocated>u?(this.gpgpu.deleteMatrixTexture(e),this._numBytesAllocated-=i):(this.freeTextures[s].push(e),this.numFreeTextures++,this._numBytesFree+=i),this.numUsedTextures--;const l=this.usedTextures[s],c=l.indexOf(e);if(c<0)throw new Error("Cannot release a texture that was never provided by this texture manager");l.splice(c,1),this.log()}log(){if(!this.logEnabled)return;const e=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${e})`);const n=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*n)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const e in this.freeTextures)this.freeTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e)}));for(const e in this.usedTextures)this.usedTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e)}));this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function io(e,n,t,a,r){const o=function(e,n){switch(e){case gt.PACKED_2X2_FLOAT32:return _a(n);case gt.PACKED_2X2_FLOAT16:return La(n);case gt.UNPACKED_FLOAT32:return Ea(n);case gt.UNPACKED_FLOAT16:return Sa(n);case gt.PACKED_4X1_UNSIGNED_BYTE:return Fa(n);default:throw new Error(`Unknown physical texture type ${e}`)}}(n,a);let s;if(r){const[n,t]=vt(e[0],e[1]);s=n*t}else{const[n,t]=bt(e[0],e[1]);s=n*t}return s*function(e,n){const t=e;if(n===t.R32F)return 4;if(n===t.R16F)return 2;if(n===t.RGBA32F)return 16;if(n===e.RGBA)return 16;if(n===t.RGBA16F)return 8;throw new Error(`Unknown internal format ${n}`)}(t,o)}function uo(e,t){if(e===mt.UPLOAD)return gt.PACKED_2X2_FLOAT32;if(e===mt.RENDER||null==e)return function(e){return n().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?e?gt.PACKED_2X2_FLOAT32:gt.UNPACKED_FLOAT32:e?gt.PACKED_2X2_FLOAT16:gt.UNPACKED_FLOAT16}(t);if(e===mt.DOWNLOAD||e===mt.PIXELS)return gt.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${e}`)}function lo(e,n,t){return`${e[0]}_${e[1]}_${n}_${t}`}class co{constructor(e,n){this.variableNames=["A"],this.outputShape=e,this.userCode=`\n      float unaryOperation(float x) {\n        ${n}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const po="return abs(x);",ho="return x;";class fo{constructor(e,n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${n}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class xo{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e;const n=e.length,t=ao("rc",n),a=or(n),r=function(e,n){if(1===e)return"rc";let t="";for(let a=0;a<e;a++)t+=n[a],a<e-1&&(t+=",");return t}(n,t),o=t.slice(-2),s=n<=1?"rc":`vec2(${o.join(",")})`;this.userCode=`\n      void main() {\n        ${a} rc = getOutputCoords();\n        vec4 packedInput = getA(${r});\n\n        setOutput(getChannel(packedInput, ${s}));\n      }\n    `}}const mo=u.whereImpl,go={};class bo extends l{constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!n().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");if(null==e){const e=ft(n().getNumber("WEBGL_VERSION"));this.binaryCache=((t=n().getNumber("WEBGL_VERSION"))in go||(go[t]={}),go[t]),this.gpgpu=new ja(e),this.canvas=e.canvas,this.gpgpuCreatedLocally=!0}else this.gpgpu=e,this.binaryCache={},this.gpgpuCreatedLocally=!1,this.canvas=e.gl.canvas;var t;this.textureManager=new so(this.gpgpu),this.numMBBeforeWarning=null==n().global.screen?1024:n().global.screen.height*n().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new c(this,d())}nextDataId(){return bo.nextDataId++}numDataIds(){return this.texData.numDataIds()+(this.cpuBackend?this.cpuBackend.numDataIds():0)-this.pendingDeletes}write(e,t,a){if((n().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||n().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===a&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const r={id:this.nextDataId()};return this.texData.set(r,{shape:t,dtype:a,values:e,usage:mt.UPLOAD,refCount:1}),r}refCount(e){if(this.texData.has(e)){return this.texData.get(e).refCount}return 0}incRef(e){this.texData.get(e).refCount++}decRef(e){if(this.texData.has(e)){this.texData.get(e).refCount--}}move(e,t,a,r,o){if(n().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===r)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:a,dtype:r,values:t,usage:mt.UPLOAD,refCount:o})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(n){const t=this.texData.get(n),{values:r,dtype:o,complexTensorInfos:s,slice:i,shape:u,isPacked:l}=t;if(null!=i){let e;e=l?new fo(u,ho):new co(u,ho);const t=this.runWebGLProgram(e,[{dataId:n,shape:u,dtype:o}],o),a=this.readSync(t.dataId);return this.disposeIntermediateTensorInfo(t),a}if(null!=r)return this.convertAndCacheOnCPU(n);if("string"===o)return r;const c=null!=this.activeTimers;let d,p;if(c&&(d=e.now()),"complex64"===o){const e=this.readSync(s.real.dataId),n=this.readSync(s.imag.dataId);p=a.mergeRealAndImagArrays(e,n)}else p=this.getValuesFromTexture(n);return c&&(this.downloadWaitMs+=e.now()-d),this.convertAndCacheOnCPU(n,p)}async read(t){if(this.pendingRead.has(t)){const e=this.pendingRead.get(t);return new Promise((n=>e.push(n)))}const r=this.texData.get(t),{values:o,shape:s,slice:i,dtype:u,complexTensorInfos:l,isPacked:c}=r;if(null!=i){let e;e=c?new fo(s,ho):new co(s,ho);const n=this.runWebGLProgram(e,[{dataId:t,shape:s,dtype:u}],u),a=this.read(n.dataId);return this.disposeIntermediateTensorInfo(n),a}if(null!=o)return this.convertAndCacheOnCPU(t);if(!n().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===n().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let p,h,f=null;if("complex64"!==u&&n().get("WEBGL_BUFFER_SUPPORTED")){p=this.decode(t);const e=this.texData.get(p.dataId);f=this.gpgpu.createBufferFromTexture(e.texture,...Ct(s))}if(this.pendingRead.set(t,[]),"complex64"!==u&&await this.gpgpu.createAndWaitForFence(),"complex64"===u){const e=await Promise.all([this.read(l.real.dataId),this.read(l.imag.dataId)]),n=e[0],t=e[1];h=a.mergeRealAndImagArrays(n,t)}else if(null==f)h=this.getValuesFromTexture(t);else{const n=e.sizeFromShape(s);h=this.gpgpu.downloadFloat32MatrixFromBuffer(f,n)}null!=p&&this.disposeIntermediateTensorInfo(p);const x=this.convertAndCacheOnCPU(t,h),m=this.pendingRead.get(t);return this.pendingRead.delete(t),m.forEach((e=>e(x))),this.pendingDisposal.has(t)&&(this.pendingDisposal.delete(t),this.disposeData(t)&&d().removeDataId(t,this),this.pendingDeletes--),x}bufferSync(n){const t=this.readSync(n.dataId);let a=t;if("string"===n.dtype)try{a=t.map((n=>e.decodeString(n)))}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return r(n.shape,n.dtype,a)}checkNumericalProblems(e){if(null!=e)for(let t=0;t<e.length;t++){const a=e[t];if(!yt(a)){if(n().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${a} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${a} cannot be represented on this device.`)}}}getValuesFromTexture(t){const{shape:a,dtype:r,isPacked:o}=this.texData.get(t),s=e.sizeFromShape(a);if(n().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const e=this.decode(t),n=this.texData.get(e.dataId),r=this.gpgpu.downloadMatrixFromPackedTexture(n.texture,...Ct(a)).subarray(0,s);return this.disposeIntermediateTensorInfo(e),r}const i=n().getBool("WEBGL_PACK")&&!0===o,u=i?qt(a):a,l=i?new $a(u):new va(u),c=this.runWebGLProgram(l,[{shape:u,dtype:r,dataId:t}],"float32"),d=this.texData.get(c.dataId),p=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(d.texture,d.texShape[0],d.texShape[1]).subarray(0,s);return this.disposeIntermediateTensorInfo(c),p}timerAvailable(){return n().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}async time(t){const a=this.activeTimers,r=[];let o=!1;null==this.programTimersStack?(this.programTimersStack=r,o=!0):this.activeTimers.push(r),this.activeTimers=r,t();const s=e.flatten(this.activeTimers.map((e=>e.query))).filter((e=>null!=e)),i=e.flatten(this.activeTimers.map((e=>e.name))).filter((e=>null!=e));this.activeTimers=a,o&&(this.programTimersStack=null);const u={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};if(n().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const n=await Promise.all(s);u.kernelMs=e.sum(n),u.getExtraProfileInfo=()=>n.map(((e,n)=>({name:i[n],ms:e}))).map((e=>`${e.name}: ${e.ms}`)).join(", ")}else u.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,u}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return n().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:e.now(),endMs:null}}endTimer(t){return n().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),t):(t.endMs=e.now(),t)}async getQueryTime(e){if(n().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(e);const t=e;return t.endMs-t.startMs}disposeData(e,n=!1){if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(n?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!n&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);const{complexTensorInfos:t}=this.texData.get(e);return null!=t&&(this.disposeData(t.real.dataId,n),this.disposeData(t.imag.dataId,n)),this.texData.delete(e),!0}releaseGPUData(e){const{texture:n,dtype:t,texShape:a,usage:r,isPacked:o,slice:s}=this.texData.get(e),i=s&&s.origDataId||e,u=this.dataRefCount.get(i);u>1?this.dataRefCount.set(i,u-1):(this.dataRefCount.delete(i),null!=n&&(this.numBytesInGPU-=this.computeBytes(a,t),this.textureManager.releaseTexture(n,a,r,o)));const l=this.texData.get(e);l.texture=null,l.texShape=null,l.isPacked=!1,l.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture}getDataInfo(e){return this.texData.get(e)}shouldExecuteOnCPU(t,a=128){return n().getBool("WEBGL_CPU_FORWARD")&&t.every((n=>null==this.texData.get(n.dataId).texture&&e.sizeFromShape(n.shape)<a))}getGPGPUContext(){return this.gpgpu}where(e){a.warn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const n=e.dataSync();return mo(e.shape,n)}packedUnaryOp(e,n,t){const a=new fo(e.shape,n),r=this.compileAndRun(a,[e],t);return d().makeTensorFromDataId(r.dataId,r.shape,r.dtype)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){const n=Kr(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,n)}if(n().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,po,e.dtype);const t=new co(e.shape,po),a=this.compileAndRun(t,[e]);return d().makeTensorFromDataId(a.dataId,a.shape,a.dtype)}makeTensorInfo(n,t,a){let r;if("string"===t&&null!=a&&a.length>0&&e.isString(a[0])){const o=a.map((n=>e.encodeString(n)));r=this.write(o,n,t)}else r=this.write(a,n,t);return this.texData.get(r).usage=null,{dataId:r,shape:n,dtype:t}}makeOutput(e,n,t){const{dataId:a}=this.makeTensorInfo(e,n,t);return d().makeTensorFromDataId(a,e,n,this)}unpackTensor(e){const n=new xo(e.shape);return this.runWebGLProgram(n,[e],e.dtype)}packTensor(e){const n=new ro(e.shape);return this.runWebGLProgram(n,[e],e.dtype,null,!0)}packedReshape(e,n){const t=[Kt(e.shape),...Yt(e.shape)],a={dtype:e.dtype,shape:t,dataId:e.dataId},r=[Kt(n),...Yt(n)],o=new oo(r,t),s=this.runWebGLProgram(o,[a],e.dtype,null,!0);return{dataId:s.dataId,shape:n,dtype:s.dtype}}decode(e){const n=this.texData.get(e),{isPacked:t,shape:a,dtype:r}=n,o=qt(a);let s;s=t?new Ca(o):new ba(o);return{dtype:r,shape:a,dataId:this.runWebGLProgram(s,[{shape:o,dtype:r,dataId:e}],r,null,!0).dataId}}runWebGLProgram(t,a,r,o,s=!1){const i=this.makeTensorInfo(t.outputShape,r),u=this.texData.get(i.dataId);if(t.packedOutput&&(u.isPacked=!0),t.outPackingScheme===xt.DENSE){const e=Ct(t.outputShape);u.texShape=e.map((e=>2*e))}if(null!=t.outTexUsage&&(u.usage=t.outTexUsage),0===e.sizeFromShape(i.shape))return u.values=e.getTypedArrayFromDType(i.dtype,0),i;const l=[],c=a.map((a=>{if("complex64"===a.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let r=this.texData.get(a.dataId);if(null==r.texture){if(!t.packedInputs&&e.sizeFromShape(a.shape)<=n().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:a.shape,texData:null,isUniform:!0,uniformValues:r.values};t.packedInputs&&(r.isPacked=!0,r.shape=a.shape)}else if(!!r.isPacked!=!!t.packedInputs)a=r.isPacked?this.unpackTensor(a):this.packTensor(a),l.push(a),r=this.texData.get(a.dataId);else if(r.isPacked&&!Jt(r.shape,a.shape)){const e=a,n=a.shape;a.shape=r.shape,a=this.packedReshape(a,n),l.push(a),r=this.texData.get(a.dataId),e.shape=n}return this.uploadToGPU(a.dataId),{shape:a.shape,texData:r,isUniform:!1}}));this.uploadToGPU(i.dataId);const d={shape:i.shape,texData:u,isUniform:!1},p=function(e,n,t){let a="";n.concat(t).forEach((e=>{const n=null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0,t=e.isUniform?"uniform":e.texData.texShape;a+=`${e.shape}_${t}_${n}`}));const r=e.userCode;let o=e.constructor.name;return o+="_"+a+"_"+r,o}(t,c,d),h=this.getAndSaveBinary(p,(()=>function(e,t,a,r){const o=t.userCode,s=a.map(((e,n)=>{const a={logicalShape:e.shape,texShape:e.isUniform?null:e.texData.texShape,isUniform:e.isUniform,isPacked:!e.isUniform&&e.texData.isPacked,flatOffset:null};return null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0&&(a.flatOffset=e.texData.slice.flatOffset),{name:t.variableNames[n],shapeInfo:a}})),i=s.map((e=>e.shapeInfo)),u={logicalShape:r.shape,texShape:r.texData.texShape,isUniform:!1,isPacked:r.texData.isPacked,flatOffset:null},l=Ya(s,u,o,t.packedInputs),c=e.createProgram(l);let d=null;const p=e.getUniformLocation(c,"NAN",!1);1===n().getNumber("WEBGL_VERSION")&&(d=e.getUniformLocation(c,"INFINITY",!1));const h={};for(let n=0;n<t.variableNames.length;n++){const a=t.variableNames[n],r=!1;h[a]=e.getUniformLocation(c,a,r),h[`offset${a}`]=e.getUniformLocation(c,`offset${a}`,r)}return{program:t,source:l,webGLProgram:c,uniformLocations:h,inShapeInfos:i,outShapeInfo:u,infLoc:d,nanLoc:p}}(this.gpgpu,t,c,d))),f=null!=this.activeTimers;let x;f&&(x=this.startTimer()),function(t,a,r,o,s){ur(a.inShapeInfos,r),ur([a.outShapeInfo],[o]);const i=o.texData.texture,u=o.texData.texShape;o.texData.isPacked?t.setOutputPackedMatrixTexture(i,u[0],u[1]):t.setOutputMatrixTexture(i,u[0],u[1]),t.setProgram(a.webGLProgram),1===n().getNumber("WEBGL_VERSION")&&null!==a.infLoc&&t.gl.uniform1f(a.infLoc,1/0),null!==a.nanLoc&&t.gl.uniform1f(a.nanLoc,NaN),r.forEach(((n,r)=>{const o=a.program.variableNames[r],s=a.uniformLocations[o],i=a.uniformLocations[`offset${o}`];if(null!=s)if(n.isUniform)if(e.sizeFromShape(n.shape)<2)t.gl.uniform1f(s,n.uniformValues[0]);else{let e=n.uniformValues;e instanceof Float32Array||(e=new Float32Array(e)),t.gl.uniform1fv(s,e)}else null!=n.texData.slice&&null!=i&&t.gl.uniform1i(i,n.texData.slice.flatOffset),t.setInputMatrixTexture(n.texData.texture,s,r)})),null!=s&&s(t,a.webGLProgram),t.executeProgram()}(this.gpgpu,h,c,d,o),l.forEach((e=>this.disposeIntermediateTensorInfo(e))),f&&(x=this.endTimer(x),this.activeTimers.push({name:t.constructor.name,query:this.getQueryTime(x)}));const m=n().get("WEBGL_FLUSH_THRESHOLD");if(m>0){const n=e.now();n-this.lastGlFlushTime>m&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=n)}if(!n().getBool("WEBGL_LAZILY_UNPACK")&&u.isPacked&&!1===s){const e=this.unpackTensor(i);return this.disposeIntermediateTensorInfo(i),e}return i}compileAndRun(e,n,t,a,r=!1){t=t||n[0].dtype;return this.runWebGLProgram(e,n,t,a,r)}getAndSaveBinary(e,n){return e in this.binaryCache||(this.binaryCache[e]=n()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){if(!this.disposed){if(!n().getBool("IS_TEST")){Object.keys(this.binaryCache).forEach((e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]}))}this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0}}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=p((()=>{if(!n().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=n().getBool("DEBUG");n().set("DEBUG",!1);const t=this.abs(h(1e-8)).dataSync()[0];if(n().set("DEBUG",e),t>0)return 32}return 16}))),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(n){const t=this.texData.get(n),{shape:a,dtype:r,values:o,texture:s,usage:i,isPacked:u}=t;if(null!=s)return;const l=null!=this.activeTimers;let c;l&&(c=e.now());let d=t.texShape;if(null==d&&(d=Qt(a,u),t.texShape=d),null!=o){const n=qt(a);let s,i=d[1],p=d[0];const h=o instanceof Uint8Array;u?([i,p]=vt(d[0],d[1]),s=new ya(n,[p,i],h)):s=new Ia(n,[p,i],h);const f=this.makeTensorInfo([p,i],r);this.texData.get(f.dataId).usage=h?mt.PIXELS:mt.UPLOAD,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(f.dataId),i,p,o);const x=!0,m=this.runWebGLProgram(s,[f],r,null,x),g=this.texData.get(m.dataId);t.texture=g.texture,t.texShape=g.texShape,t.isPacked=g.isPacked,t.usage=g.usage,this.disposeIntermediateTensorInfo(f),this.texData.delete(m.dataId),t.values=null,l&&(this.uploadWaitMs+=e.now()-c)}else{const e=this.acquireTexture(d,i,r,u);t.texture=e}}convertAndCacheOnCPU(e,n){const t=this.texData.get(e),{dtype:a}=t;return this.releaseGPUData(e),null!=n&&(t.values=function(e,n){if("float32"===n||"complex64"===n)return e;if("int32"===n||"bool"===n){const t="int32"===n?new Int32Array(e.length):new Uint8Array(e.length);for(let n=0;n<t.length;++n)t[n]=Math.round(e[n]);return t}throw new Error(`Unknown dtype ${n}`)}(n,a)),t.values}acquireTexture(e,n,t,a){if(this.numBytesInGPU+=this.computeBytes(e,t),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const e=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${e} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,n,a)}computeBytes(n,t){return n[0]*n[1]*e.bytesPerElement(t)}}bo.nextDataId=0;const Co="3.4.0";function vo(){n().set("WEBGL_FORCE_F16_TEXTURES",!0)}t.isBrowser()&&f("webgl",(()=>new bo),2);const $o={forceHalfFloat:vo};class Io{constructor(e,n,t){this.variableNames=["A","B"],this.outputShape=a.assertAndGetBroadcastShape(n,t),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${e}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}class yo{constructor(n,t,r,o=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=a.assertAndGetBroadcastShape(t,r);const s=this.outputShape.length;let i="";if(o)if(0===s||1===e.sizeFromShape(this.outputShape))i="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else{if(i=`\n          ${or(s)} coords = getOutputCoords();\n        `,1===s)i+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const e=ao("coords",s);i+=`\n            bool nextRowOutOfBounds =\n              (${e[s-2]} + 1) >= ${this.outputShape[s-2]};\n            bool nextColOutOfBounds =\n              (${e[s-1]} + 1) >= ${this.outputShape[s-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${n}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${i}\n\n        setOutput(result);\n      }\n    `}}function Ro(e){const{inputs:n,backend:t}=e,{x:a}=n;return t.incRef(a.dataId),{dataId:a.dataId,shape:a.shape,dtype:a.dtype}}const wo={kernelName:x,backendName:"webgl",kernelFunc:Ro};function ko(e){const{inputs:n,backend:t}=e,{real:a,imag:r}=n,o=t.makeTensorInfo(a.shape,"complex64"),s=t.texData.get(o.dataId),i=Ro({inputs:{x:a},backend:t}),u=Ro({inputs:{x:r},backend:t});return s.complexTensorInfos={real:i,imag:u},o}const To={kernelName:m,backendName:"webgl",kernelFunc:ko},Eo="return (a < 0.) ? b * a : a;",No="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";const So={kernelName:g,backendName:"webgl",kernelFunc:function(t){const{inputs:a,backend:r,attrs:o}=t,{x:s}=a,{alpha:i}=o,u=r.makeTensorInfo([],"float32",e.createScalarValue(i,"float32")),l=n().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new yo(No,s.shape,u.shape):new Io(Eo,s.shape,u.shape),c=r.runWebGLProgram(l,[s,u],s.dtype);return r.disposeIntermediateTensorInfo(u),c}},Ao="return (a < 0.) ? b * a : a;",Fo="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";const Oo={kernelName:b,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:a}=e,{x:r,alpha:o}=t,s=n().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new yo(Fo,r.shape,o.shape):new Io(Ao,r.shape,o.shape);return a.runWebGLProgram(s,[r,o],r.dtype)}};function _o({opSnippet:e,packedOpSnippet:t,cpuKernelImpl:a,dtype:r}){return({inputs:o,backend:s})=>{const{x:i}=o,u=s,l=r||i.dtype;if(u.shouldExecuteOnCPU([i])&&null!=a){const e=u.texData.get(i.dataId),n=a(e.values,l);return u.makeTensorInfo(i.shape,l,n)}let c;return c=n().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=t?new fo(i.shape,t):new co(i.shape,e),u.runWebGLProgram(c,[i],l)}}function Do({opSnippet:e,packedOpSnippet:t,checkOutOfBounds:a=!1,supportsComplex:r=!1,cpuKernelImpl:s,dtype:i}){return({inputs:u,backend:l})=>{const{a:c,b:d}=u,p=l;if(r&&"complex64"===c.dtype){const n=p.texData.get(c.dataId),t=p.texData.get(d.dataId),[a,r]=[[n.complexTensorInfos.real,t.complexTensorInfos.real],[n.complexTensorInfos.imag,t.complexTensorInfos.imag]].map((n=>{const[t,a]=n,r={dataId:t.dataId,dtype:t.dtype,shape:c.shape},s={dataId:a.dataId,dtype:a.dtype,shape:d.shape},i=new Io(e,c.shape,d.shape);return p.runWebGLProgram(i,[r,s],o(t.dtype,a.dtype))})),s=ko({inputs:{real:a,imag:r},backend:p});return p.disposeIntermediateTensorInfo(a),p.disposeIntermediateTensorInfo(r),s}const h=i||o(c.dtype,d.dtype);if(p.shouldExecuteOnCPU([c,d])&&null!=s){const e=p.texData.get(c.dataId),n=p.texData.get(d.dataId),[t,a]=s(c.shape,d.shape,e.values,n.values,h),r=p.makeTensorInfo(a,h);return p.texData.get(r.dataId).values=t,r}let f;return f=n().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=t?new yo(t,c.shape,d.shape,a):new Io(e,c.shape,d.shape),p.runWebGLProgram(f,[c,d],h)}}function Lo(e,n=!1){if("linear"===e)return"return x;";if("relu"===e)return n?"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n";if("elu"===e)return n?"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n":"return (x >= 0.0) ? x : (exp(x) - 1.0);";if("relu6"===e)return n?"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n";if("prelu"===e)return n?Fo:Ao;if("leakyrelu"===e)return n?No:Eo;throw new Error(`Activation ${e} has not been implemented for the WebGL backend.`)}class Po{constructor(e,n,t,a=!1,r=!1,o=!1,s=null,i=!1,u=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t;const l=a?e[1]:e[2],c=Math.ceil(l/2),d=a?"i * 2, rc.y":"rc.y, i * 2",p=r?"rc.z, i * 2":"i * 2, rc.z",h=a?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],f=r?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let x="",m="";s&&(x=i?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${s}\n        }`:u?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${s}\n        }`:`vec4 activation(vec4 x) {\n          ${s}\n        }`,m="result = activation(result);");const g=o?"result += getBiasAtOutCoords();":"";o&&this.variableNames.push("bias"),i&&this.variableNames.push("preluActivationWeights"),u&&this.variableNames.push("leakyreluAlpha");let b="rc.x",C="rc.x";e[0]<n[0]?b=`int(min(float(rc.x), ${e[0]-1}.))`:n[0]<e[0]&&(C=`int(min(float(rc.x), ${n[0]-1}.))`),this.userCode=`\n      ${x}\n\n      const float sharedDimension = ${c}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${c}; i++) {\n          int batchA = ${b};\n          int batchB = ${C};\n          vec4 a = getMatrixA(batchA, ${d});\n          vec4 b = getMatrixB(batchB, ${p});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${h[0]} * ${f[0]});\n          result += (${h[1]} * ${f[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${g}\n\n        ${m}\n\n        setOutput(result);\n      }\n    `}}const Bo="return areal * breal - aimag * bimag;",Vo="return areal * bimag + aimag * breal;";class Wo{constructor(e,n,t){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=a.assertAndGetBroadcastShape(n,t),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${e}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const Mo="return a * b;";function Go(e){const{inputs:t,backend:r}=e,{a:o,b:s}=t,i=a.upcastType(o.dtype,s.dtype);if("complex64"===o.dtype){const e=r.texData.get(o.dataId),n=r.texData.get(s.dataId),t=new Wo(Bo,o.shape,s.shape),a=new Wo(Vo,o.shape,s.shape),i=[{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:o.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:o.shape},{dataId:n.complexTensorInfos.real.dataId,dtype:n.complexTensorInfos.real.dtype,shape:s.shape},{dataId:n.complexTensorInfos.imag.dataId,dtype:n.complexTensorInfos.imag.dtype,shape:s.shape}],u=r.runWebGLProgram(t,i,"float32"),l=r.runWebGLProgram(a,i,"float32"),c=ko({inputs:{real:u,imag:l},backend:r});return r.disposeIntermediateTensorInfo(u),r.disposeIntermediateTensorInfo(l),c}if(r.shouldExecuteOnCPU([o,s])){const e=r.texData.get(o.dataId),n=r.texData.get(s.dataId),[t,a]=Ur(o.shape,s.shape,e.values,n.values,i),u=r.makeTensorInfo(a,i);return r.texData.get(u.dataId).values=t,u}let u;return u=n().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new yo(Mo,o.shape,s.shape):new Io(Mo,o.shape,s.shape),r.runWebGLProgram(u,[o,s],i)}const Uo={kernelName:C,backendName:"webgl",kernelFunc:Go};function zo(n){const{inputs:t,backend:a,attrs:r}=n,{x:o}=t,{shape:s}=r,i=a,u=e.sizeFromShape(o.shape),l=e.inferFromImplicitShape(s,u),c=e.sizeFromShape(l);e.assert(u===c,(()=>`The new shape (${l}) has ${c} elements and the old shape (${o.shape}) has ${u} elements. The new shape and old shape must have the same number of elements.`));const d=i.texData.get(o.dataId);return!d.isPacked||Jt(o.shape,l)||null!==d.texture&&Jt(d.shape,l)?(i.incRef(o.dataId),{dataId:o.dataId,shape:l,dtype:o.dtype}):function(e,n,t){const a=[Kt(e.shape),...Yt(e.shape)],r={dtype:e.dtype,shape:a,dataId:e.dataId},o=[Kt(n),...Yt(n)],s=new oo(o,a),i=t.runWebGLProgram(s,[r],e.dtype,null,!0);return{dataId:i.dataId,shape:n,dtype:i.dtype}}(o,l,i)}const Xo={kernelName:v,backendName:"webgl",kernelFunc:zo};class Ho{constructor(n,t){this.variableNames=["x"];const{windowSize:a,batchSize:r,inSize:o,outSize:s}=n;this.outputShape=[r,s];const i=4*Math.floor(a/4),u=a%4;let l="sumValue += dot(values, ones);";if(null!=t){const n=1/t;l=`sumValue += dot(values * ${e.isInt(n)?n.toPrecision(2):n}, ones);`}let c="";o%a>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${o}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${a};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${i}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${l}\n        }\n\n        int inIdx = inOffset + ${i};\n        if (${1===u}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${l}\n        } else if (${2===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${l}\n        } else if (${3===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${l}\n        }\n        setOutput(sumValue);\n      }\n    `}}class jo{constructor(e,n){this.variableNames=["x"];const{windowSize:t,batchSize:a,inSize:r,outSize:o}=e;this.outputShape=[a,o];let s="0.0",i="";"prod"===n?s="1.0":"min"===n?(s="1.0 / 1e-20",i="min"):"max"===n&&(s="-1.0 / 1e-20",i="max");let u=`${n}(${n}(${n}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===n?u="sumValue":"prod"===n?u="prodValue":"all"===n?u="allValue":"any"===n&&(u="anyValue");const l=4*Math.floor(t/4),c=t%4;let d=`\n      if (${"sum"===n}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===n}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${i}(values, minMaxValue);\n      }\n    `,p="vec4";"all"===n?(s="1.0",d="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",p="bvec4"):"any"===n&&(s="0.0",d="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",p="bvec4");let h="";r%t>0&&(h=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${s};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${h}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${t};\n\n        vec4 minMaxValue = vec4(${s});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${l}; i += 4) {\n          int inIdx = inOffset + i;\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${d}\n        }\n\n        int inIdx = inOffset + ${l};\n        if (${1===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${d}\n        } else if (${2===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${d}\n        } else if (${3===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${d}\n        }\n        setOutput(${u});\n      }\n    `}}function Ko(e,n,t,r){const o=function(e){const n=[];for(;0===n.length||1!==n[n.length-1].outSize;){const t=n.length?n[n.length-1].outSize:e[1],r=a.computeOptimalWindowSize(t);n.push({inSize:t,windowSize:r,outSize:Math.ceil(t/r)})}return n}(e.shape);let s=e;for(let a=0;a<o.length;a++){const{inSize:i,windowSize:u,outSize:l}=o[a];let c,d;c="mean"===t?0===a?new Ho({windowSize:u,inSize:i,batchSize:e.shape[0],outSize:l},i):new Ho({windowSize:u,inSize:i,batchSize:e.shape[0],outSize:l}):new jo({windowSize:u,inSize:i,batchSize:e.shape[0],outSize:l},t),d=s,s=r.runWebGLProgram(c,[s],n),d.dataId!==e.dataId&&r.disposeIntermediateTensorInfo(d)}return s}class Yo{constructor(e,n){this.variableNames=["A"];const t=new Array(e.length);for(let a=0;a<t.length;a++)t[a]=e[n[a]];this.outputShape=t,this.rank=t.length;const a=or(this.rank),r=function(e){const n=e.length;if(n>6)throw Error(`Transpose for rank ${n} is not yet supported`);const t=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],a=new Array(n);for(let n=0;n<e.length;n++)a[e[n]]=t[n];return a.join()}(n);this.userCode=`\n    void main() {\n      ${a} resRC = getOutputCoords();\n      setOutput(getA(${r}));\n    }\n    `}}class qo{constructor(e,n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const t=new Array(e.length);for(let a=0;a<t.length;a++)t[a]=e[n[a]];if(this.outputShape=t,this.rank=t.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const a=or(this.rank),r=to("rc",this.rank),o=new Array(this.rank);for(let e=0;e<n.length;e++)o[n[e]]=r[e];const s=`vec2(${o.slice(-2).join()})`,i=`++${r[this.rank-1]} < ${t[this.rank-1]}`,u=`getChannel(getA(${o.join()}), ${s})`;this.userCode=`\n    void main() {\n      ${a} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${u};\n      if(${i}) {\n        result[1] = ${u};\n      }\n      --${r[this.rank-1]};\n      if(++${r[this.rank-2]} < ${t[this.rank-2]}) {\n        result[2] = ${u};\n        if(${i}) {\n          result[3] = ${u};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function Qo(e,t,a){const r=n().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new qo(e.shape,t):new Yo(e.shape,t);return a.runWebGLProgram(r,[e],e.dtype)}function Zo(n){const{inputs:t,backend:r,attrs:o}=n,{x:s}=t,{axis:i,keepDims:u}=o;return function(n,t,r,o){const s=t,i=n.shape.length,u=e.parseAxisParam(s,n.shape);let l=u;const c=a.getAxesPermutation(l,i),d=null!=c;let p=n;d&&(p=Qo(n,c,o),l=a.getInnerMostAxes(l.length,i)),a.assertAxesAreInnerMostDims("sum",l,i);const[h,f]=a.computeOutAndReduceShapes(p.shape,l);let x=h;r&&(x=a.expandShapeToKeepDim(h,u));const m=e.sizeFromShape(f),g=zo({inputs:{x:p},attrs:{shape:[e.sizeFromShape(n.shape)/m,m]},backend:o}),b=Ko(g,$(n.dtype),"sum",o),C=zo({inputs:{x:b},attrs:{shape:x},backend:o});return o.disposeIntermediateTensorInfo(g),o.disposeIntermediateTensorInfo(b),d&&o.disposeIntermediateTensorInfo(p),C}(s,i,u,r)}const Jo={kernelName:I,backendName:"webgl",kernelFunc:Zo};function es(e){const{inputs:n,backend:t,attrs:a}=e,{x:r}=n,{perm:o}=a,s=t,i=r.shape.length,u=new Array(i);for(let e=0;e<u.length;e++)u[e]=r.shape[o[e]];let l;if(s.shouldExecuteOnCPU([r])){const e=s.texData.get(r.dataId).values,n=eo(e,r.shape,r.dtype,o,u);l=s.makeTensorInfo(u,r.dtype);s.texData.get(l.dataId).values=n}else l=Qo(r,o,s);return l}const ns={kernelName:y,backendName:"webgl",kernelFunc:es};function ts({a:n,b:t,transposeA:a,transposeB:r,backend:s,bias:i=null,preluActivationWeights:u=null,leakyreluAlpha:l=0,activation:c=null}){const d=n.shape.length,p=t.shape.length,h=a?n.shape[d-2]:n.shape[d-1],f=r?t.shape[p-1]:t.shape[p-2],x=a?n.shape[d-1]:n.shape[d-2],m=r?t.shape[p-2]:t.shape[p-1],g=n.shape.slice(0,-2),b=t.shape.slice(0,-2),C=e.sizeFromShape(g),v=e.sizeFromShape(b),$=C===v||1===C||1===v;e.assert(d>=2&&p>=2&&$,(()=>`Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input batch dimensions of (${g}) and (${b}).`));const I=(C>v?n.shape.slice(0,-2):t.shape.slice(0,-2)).concat([x,m]);e.assert(h===f,(()=>`Error in matMul: inner shapes (${h}) and (${f}) of Tensors with shapes ${n.shape} and ${t.shape} and transposeA=${a} and transposeB=${r} must match.`));const y=a?[C,h,x]:[C,x,h],R=r?[v,m,f]:[v,f,m],w=zo({inputs:{x:n},backend:s,attrs:{shape:y}}),k=zo({inputs:{x:t},backend:s,attrs:{shape:R}}),T=[w,k],E=Math.max(C,v),N=a?w.shape[1]:w.shape[2],S=null!=i,A=null!=u,F="leakyrelu"===c,O=null!=c?Lo(c,!0):null;let _;if((1===x||1===m)&&N>1e3&&!1===(S||A||F||null!=O)){let e=w,n=k;a&&(e=es({inputs:{x:w},backend:s,attrs:{perm:[0,2,1]}}),T.push(e)),r&&(n=es({inputs:{x:k},backend:s,attrs:{perm:[0,2,1]}}),T.push(n));const t=1===m;let o=e;1!==m&&(o=zo({inputs:{x:e},backend:s,attrs:{shape:[E,N,1]}}),T.push(o));const i=1===m?2:1;let u=n;t&&(u=zo({inputs:{x:n},backend:s,attrs:{shape:[E,1,N]}}),T.push(u));const l=Go({inputs:{a:o,b:u},backend:s});_=Zo({inputs:{x:l},backend:s,attrs:{axis:i,keepDims:!0}}),T.push(l)}else{const c=o(n.dtype,t.dtype),d=new Po(y,R,[E,x,m],a,r,S,O,A,F),p=[w,k];if(null!=i&&p.push(i),A&&p.push(u),F){const n=s.makeTensorInfo([],"float32",e.createScalarValue(l,"float32"));p.push(n),T.push(n)}_=s.runWebGLProgram(d,p,c)}const D=zo({inputs:{x:_},backend:s,attrs:{shape:I}});T.push(_);for(const e of T)s.disposeIntermediateTensorInfo(e);return D}const as={kernelName:R,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:a}=e,{a:r,b:o,bias:s,preluActivationWeights:i}=n,{transposeA:u,transposeB:l,activation:c,leakyreluAlpha:d}=a;return ts({a:r,b:o,transposeA:u,transposeB:l,backend:t,bias:s,preluActivationWeights:i,leakyreluAlpha:d,activation:c})}};const rs={kernelName:w,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:a}=e,{x:r}=t;if(a.shouldExecuteOnCPU([r])&&"complex64"!==r.dtype){const e=a.texData.get(r.dataId),n=Kr(e.values);return a.makeTensorInfo(r.shape,r.dtype,n)}let o;return o=n().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new fo(r.shape,"return abs(x);"):new co(r.shape,"return abs(x);"),a.runWebGLProgram(o,[r],r.dtype)}},os={kernelName:k,backendName:"webgl",kernelFunc:_o({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"})},ss={kernelName:T,backendName:"webgl",kernelFunc:_o({opSnippet:"if (isnan(x)) return x;\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));"})},is="return a + b;",us={kernelName:E,backendName:"webgl",kernelFunc:Do({opSnippet:is,packedOpSnippet:is,supportsComplex:!0,cpuKernelImpl:Tr})};class ls{constructor(e,n){this.outputShape=[],this.outputShape=e,this.variableNames=n.map(((e,n)=>`T${n}`));const t=[];this.variableNames.forEach((e=>{t.push(`float v${e} = get${e}AtOutCoords();`)}));const a=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${t.join("\n        ")}\n\n        float result = ${a};\n        setOutput(result);\n      }\n    `}}class cs{constructor(e,n){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=n.map(((e,n)=>`T${n}`));const t=[];this.variableNames.forEach((e=>{t.push(`vec4 v${e} = get${e}AtOutCoords();`)}));const a=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${t.join("\n        ")}\n\n        vec4 result = ${a};\n        setOutput(result);\n      }\n    `}}const ds={kernelName:N,backendName:"webgl",kernelFunc:function e(t){const{inputs:a,backend:r}=t,s=a;if(1===s.length)return Ro({inputs:{x:s[0]},backend:r});if(s.length>n().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const n=Math.floor(s.length/2),t=e({inputs:s.slice(0,n),backend:r}),a=e({inputs:s.slice(n),backend:r});return e({inputs:[t,a],backend:r})}const i=s.map((e=>e.dtype)).reduce(((e,n)=>o(e,n))),u=s.map((e=>e.shape)),l=n().getBool("WEBGL_PACK")?new cs(s[0].shape,u):new ls(s[0].shape,u);return r.runWebGLProgram(l,s,i)}};const ps={kernelName:S,backendName:"webgl",kernelFunc:function(n){const{inputs:t,backend:r,attrs:o}=n,{x:s}=t,{axis:i,keepDims:u}=o,l=s.shape.length,c=e.parseAxisParam(i,s.shape);let d=c;const p=a.getAxesPermutation(d,l);let h=s;null!=p&&(h=es({inputs:{x:s},backend:r,attrs:{perm:p}}),d=a.getInnerMostAxes(d.length,l)),a.assertAxesAreInnerMostDims("all",d,l);const[f,x]=a.computeOutAndReduceShapes(h.shape,d),m=zo({inputs:{x:h},backend:r,attrs:{shape:[-1,e.sizeFromShape(x)]}}),g=Ko(m,m.dtype,"all",r);let b;if(u){b=zo({inputs:{x:g},backend:r,attrs:{shape:a.expandShapeToKeepDim(f,c)}})}else b=zo({inputs:{x:g},backend:r,attrs:{shape:f}});return r.disposeIntermediateTensorInfo(m),r.disposeIntermediateTensorInfo(g),null!=p&&r.disposeIntermediateTensorInfo(h),b}};const hs={kernelName:A,backendName:"webgl",kernelFunc:function(n){const{inputs:t,backend:r,attrs:o}=n,{x:s}=t,{axis:i,keepDims:u}=o,l=s.shape.length,c=e.parseAxisParam(i,s.shape);let d=c;const p=a.getAxesPermutation(d,l);let h=s;null!=p&&(h=es({inputs:{x:s},backend:r,attrs:{perm:p}}),d=a.getInnerMostAxes(d.length,l)),a.assertAxesAreInnerMostDims("any",d,l);const[f,x]=a.computeOutAndReduceShapes(h.shape,d),m=zo({inputs:{x:h},backend:r,attrs:{shape:[-1,e.sizeFromShape(x)]}}),g=Ko(m,m.dtype,"any",r);let b;if(u){b=zo({inputs:{x:g},backend:r,attrs:{shape:a.expandShapeToKeepDim(f,c)}})}else b=zo({inputs:{x:g},backend:r,attrs:{shape:f}});return r.disposeIntermediateTensorInfo(m),r.disposeIntermediateTensorInfo(g),null!=p&&r.disposeIntermediateTensorInfo(h),b}};class fs{constructor(e,n,t){this.variableNames=["A"];const{windowSize:a,batchSize:r,outSize:o}=e;t||this.variableNames.push("bestIndicesA"),this.outputShape=[r,o];const s="max"===n?">":"<",i=t?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${a};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${a}; i++) {\n          int inIdx = ${i};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${s} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}class xs{constructor(n,t,a,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,e.assert(n.length>2,(()=>`Packed arg${a.charAt(0).toUpperCase()+a.slice(1)} supports only inputs with rank above 2.`));const o=n[n.length-1],s=Math.ceil(o/t);this.outputShape=n.slice(0,-1),s>1&&this.outputShape.push(s),r||this.variableNames.push("bestIndicesA");const i=this.outputShape,u=i.length,l=or(u),c=ao("coords",u);let d,p;if(1===s){p=u+1;const e=or(p);d=`\n        ${e} sourceLocR = ${e}(${c.join()}, 0);\n        ++${c[u-1]};\n        ${e} sourceLocG = ${e}(${c.join()}, 0);\n        ++${c[u-2]};\n        ${e} sourceLocA = ${e}(${c.join()}, 0);\n        --${c[u-1]};\n        ${e} sourceLocB = ${e}(${c.join()}, 0);\n        --${c[u-2]};`}else p=u,d=`\n        ${l} sourceLocR = coords;\n        ++${c[u-1]};\n        ${l} sourceLocG = coords;\n        ++${c[u-2]};\n        ${l} sourceLocA = coords;\n        --${c[u-1]};\n        ${l} sourceLocB = coords;\n        --${c[u-2]};`;const h=["x","y","z","w","u","v"].slice(0,p),f="."+h[p-1],x=h.map((e=>"int "+e)),m=ao("sourceLocR",p-1).concat("inIdx.r"),g=ao("sourceLocG",p-1).concat("inIdx.g"),b=ao("sourceLocB",p-1).concat("inIdx.b"),C=ao("sourceLocA",p-1).concat("inIdx.a"),v="max"===a?"greaterThan":"lessThan",$=r?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${m.join()}),\n                             getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${b.join()}),\n                             getBestIndicesAChannel(${C.join()})));`,I=`vec4(\n            getAChannel(${m.join()}),\n            hasNextCol ? getAChannel(${g.join()}) : 0.,\n            hasNextRow ? getAChannel(${b.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${C.join()}) : 0.)`,y=r?"":`\n      float getBestIndicesAChannel(${x.join()}) {\n        return getChannel(getBestIndicesA(${h.join()}),\n                                          vec2(${h.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${x.join()}) {\n        return getChannel(getA(${h.join()}),\n                               vec2(${h.slice(-2).join()}));\n      }\n      ${y}\n      void main() {\n        ${l} coords = getOutputCoords();\n        bool hasNextCol = ${c[u-1]} < ${i[u-1]-1};\n        bool hasNextRow = ${c[u-2]} < ${i[u-2]-1};\n        ${d}\n        ivec4 srcIdx = ivec4(sourceLocR${f}, sourceLocG${f},\n          sourceLocB${f}, sourceLocA${f}) * ${t};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${I};\n\n        for (int i = 0; i < ${t}; i++) {\n          inIdx = srcIdx;\n          ${$}\n          vec4 candidate = ${I};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${v}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}function ms(e,n,t,r=null){let o=n.shape[0],s=n.shape[1];null!=r&&(o=r.shape[0],s=r.shape[1]);const i=a.computeOptimalWindowSize(s),u={windowSize:i,inSize:s,batchSize:o,outSize:Math.ceil(s/i)},l=new fs(u,t,null==r),c=[n];null!=r&&c.push(r);const d=e.runWebGLProgram(l,c,"int32");if(1===d.shape[1])return d;const p=ms(e,n,t,d);return e.disposeIntermediateTensorInfo(d),p}function gs(e,n,t,r=null){const o=null!=r?r.shape:n.shape,s=o[o.length-1],i=a.computeOptimalWindowSize(s),u=new xs(o,i,t,null==r),l=null==r?[n]:[n,r],c=e.runWebGLProgram(u,l,"int32");if(c.shape.length===n.shape.length){const a=gs(e,n,t,c);return e.disposeIntermediateTensorInfo(c),a}return c}function bs(t,r,o,s){const i=[o];if(a.assertAxesAreInnerMostDims("arg"+s.charAt(0).toUpperCase()+s.slice(1),i,r.shape.length),!n().getBool("WEBGL_PACK_REDUCE")||r.shape.length<=2){const n=[],[o,u]=a.computeOutAndReduceShapes(r.shape,i),l=e.sizeFromShape(u),c=zo({inputs:{x:r},backend:t,attrs:{shape:[-1,l]}});n.push(c);const d=ms(t,c,s);n.push(d);const p=zo({inputs:{x:d},backend:t,attrs:{shape:o}});return n.forEach((e=>t.disposeIntermediateTensorInfo(e))),p}return gs(t,r,s)}const Cs={kernelName:F,backendName:"webgl",kernelFunc:function(n){const{inputs:t,backend:r,attrs:o}=n,{x:s}=t,{axis:i}=o;let u=e.parseAxisParam(i,s.shape);const l=a.getAxesPermutation(u,s.shape.length);let c=s;const d=[];null!=l&&(c=es({inputs:{x:s},backend:r,attrs:{perm:l}}),d.push(c),u=a.getInnerMostAxes(u.length,c.shape.length)),a.assertAxesAreInnerMostDims("argMax",[u[0]],c.shape.length);const p=bs(r,c,u[0],"max");return d.forEach((e=>r.disposeIntermediateTensorInfo(e))),p}};const vs={kernelName:O,backendName:"webgl",kernelFunc:function(n){const{inputs:t,backend:r,attrs:o}=n,{x:s}=t,{axis:i}=o;let u=e.parseAxisParam(i,s.shape);const l=a.getAxesPermutation(u,s.shape.length);let c=s;const d=[];null!=l&&(c=es({inputs:{x:s},backend:r,attrs:{perm:l}}),d.push(c),u=a.getInnerMostAxes(u.length,c.shape.length)),a.assertAxesAreInnerMostDims("argMin",[u[0]],c.shape.length);const p=bs(r,c,u[0],"min");return d.forEach((e=>r.disposeIntermediateTensorInfo(e))),p}},$s={kernelName:_,backendName:"webgl",kernelFunc:_o({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"})},Is={kernelName:D,backendName:"webgl",kernelFunc:_o({opSnippet:"if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));"})},ys={kernelName:L,backendName:"webgl",kernelFunc:_o({opSnippet:"if (isnan(x)) return x;\n  return atan(x);\n"})},Rs={kernelName:P,backendName:"webgl",kernelFunc:Do({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"})},ws={kernelName:B,backendName:"webgl",kernelFunc:_o({opSnippet:"if (isnan(x)) return x;\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;"})};class ks{constructor(e,n,t,a=!1,r=!1){if(this.variableNames=["x"],"avg"===n&&t)throw new Error("Cannot compute positions for average pool.");const o=e.filterWidth,s=e.strideHeight,i=e.strideWidth,u=e.dilationHeight,l=e.dilationWidth,c=e.effectiveFilterHeight,d=e.effectiveFilterWidth,p=e.padInfo.top,h=e.padInfo.left;this.outputShape=e.outShape;const f="avg"===n,x=`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`,m=`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`;let g="0.0";if(f||(g="-1.0 / 1e-20"),t){const n=">=";return void(this.userCode=`\n        const ivec2 strides = ivec2(${s}, ${i});\n        const ivec2 pads = ivec2(${p}, ${h});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${c};\n              wR += ${u}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${d};\n                wC += ${l}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${n} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${a?r?x:m:`wR * ${d} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let b=`${n}(${n}(${n}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===n&&(b="avgValue / count");const C=4*Math.floor(o/4),v=o%4,$=`\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${s}, ${i});\n      const ivec2 pads = ivec2(${p}, ${h});\n      const float initializationValue = ${g};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${g});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${c};\n            wR += ${u}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${C}; wC += 4) {\n            int xC = xCCorner + wC * ${l};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              getValue(batch, xR, xC + 2 * ${l}, d),\n              getValue(batch, xR, xC + 3 * ${l}, d)\n            );\n\n            ${$}\n          }\n\n          int xC = xCCorner + ${C};\n          if (${1===v}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${$}\n          } else if (${2===v}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${$}\n          } else if (${3===v}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              getValue(batch, xR, xC + 2 * ${l}, d),\n              initializationValue\n            );\n\n            ${$}\n          }\n        }\n        setOutput(${b});\n      }\n    `}}class Ts{constructor(e,n,t,a=!1,r=!1){if(this.variableNames=["x"],"avg"===n&&t)throw new Error("Cannot compute positions for average pool.");const o=e.filterWidth,s=e.strideDepth,i=e.strideHeight,u=e.strideWidth,l=e.dilationDepth,c=e.dilationHeight,d=e.dilationWidth,p=e.effectiveFilterDepth,h=e.effectiveFilterHeight,f=e.effectiveFilterWidth,x=e.padInfo.front,m=e.padInfo.top,g=e.padInfo.left;this.outputShape=e.outShape;const b="avg"===n;let C="0.0";if(b||(C="-1.0 / 1e-20"),t){const n=">=";return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${s}, ${i}, ${u});\n        const ivec3 pads = ivec3(${x}, ${m}, ${g});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${p};\n              wD += ${l}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${h};\n                wR += ${c}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${d}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${n} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${a?r?`(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`wD * ${h} * ${f} +\n                      wR * ${f} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let v=`${n}(${n}(${n}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===n&&(v="avgValue / count");const $=4*Math.floor(o/4),I=o%4,y=`\n      if (${b}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${s}, ${i}, ${u});\n      const ivec3 pads = ivec3(${x}, ${m}, ${g});\n      const float initializationValue = ${C};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${C});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${p};\n            wD += ${l}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${h};\n            wR += ${c}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${$}; wC += 4) {\n              int xC = xCCorner + wC * ${d};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${d}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${d}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${d}, ch)\n              );\n\n              ${y}\n            }\n\n            int xC = xCCorner + ${$};\n            if (${1===I}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${y}\n            } else if (${2===I}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${d}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${y}\n            } else if (${3===I}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${d}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${d}, ch),\n                initializationValue\n              );\n\n              ${y}\n            }\n          }\n          setOutput(${v});\n        }\n      }\n    `}}const Es={kernelName:V,backendName:"webgl",kernelFunc:function(n){const{inputs:t,backend:r,attrs:o}=n,{x:s}=t;da(s,"avgPool");const{filterSize:i,strides:u,pad:l,dimRoundingMode:c}=o;e.assert(a.eitherStridesOrDilationsAreOne(u,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${u} and dilations '1'`));const d=a.computePool2DInfo(s.shape,i,u,1,l,c);if(1===d.filterWidth&&1===d.filterHeight&&e.arraysEqual(d.inShape,d.outShape))return Ro({inputs:{x:s},backend:r});const p=new ks(d,"avg",!1);return r.runWebGLProgram(p,[s],"float32")}};const Ns={kernelName:W,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:r}=e,{x:o}=n,{filterSize:s,strides:i,pad:u,dimRoundingMode:l,dataFormat:c}=r,d=a.computePool3DInfo(o.shape,s,i,[1,1,1],u,l,c),p=new Ts(d,"avg",!1);return t.runWebGLProgram(p,[o],"float32")}};class Ss{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const n=e.filterHeight,t=e.filterWidth,a=e.strideHeight,r=e.strideWidth,o=e.dilationHeight,s=e.dilationWidth,i=e.effectiveFilterHeight,u=e.effectiveFilterWidth,l=i-1-e.padInfo.top,c=u-1-e.padInfo.left,d=1/(n*t);this.userCode=`\n      const ivec2 pads = ivec2(${l}, ${c});\n      const float avgMultiplier = float(${d});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${i};\n            wR += ${o}) {\n          float dyR = float(dyRCorner + wR) / ${a}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${u};\n            wC+= ${s}) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class As{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const n=e.filterDepth,t=e.filterHeight,a=e.filterWidth,r=e.strideDepth,o=e.strideHeight,s=e.strideWidth,i=e.dilationDepth,u=e.dilationHeight,l=e.dilationWidth,c=e.effectiveFilterDepth,d=e.effectiveFilterHeight,p=e.effectiveFilterWidth,h=c-1-e.padInfo.front,f=d-1-e.padInfo.top,x=p-1-e.padInfo.left,m=1/(n*t*a);this.userCode=`\n      const ivec3 pads = ivec3(${h}, ${f}, ${x});\n      const float avgMultiplier = float(${m});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${c};\n            wD += ${i}) {\n          float dyD = float(dyDCorner + wD) / ${r}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${d};\n              wR += ${u}) {\n            float dyR = float(dyRCorner + wR) / ${o}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${p};\n                wC += ${l}) {\n              float dyC = float(dyCCorner + wC) / ${s}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const Fs={kernelName:M,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:r}=e,{dy:o,input:s}=n,i=s,{filterSize:u,strides:l,pad:c,dimRoundingMode:d}=r,p=a.computePool3DInfo(i.shape,u,l,[1,1,1],c,d),h=new As(p);return t.runWebGLProgram(h,[o],i.dtype)}};const Os={kernelName:G,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:r}=e,{dy:o,input:s}=n,i=s;da([o,s],"avgPoolGrad");const{filterSize:u,strides:l,pad:c}=r,d=a.computePool2DInfo(i.shape,u,l,1,c),p=new Ss(d);return t.runWebGLProgram(p,[o],i.dtype)}};const _s={kernelName:U,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:a}=e,{a:r,b:o}=n,{transposeA:s,transposeB:i}=a;return ts({a:r,b:o,transposeA:s,transposeB:i,backend:t})}};class Ds{constructor(e,n,t,r,o,s){this.outputShape=[],this.variableNames=["x","mean","variance"],a.assertAndGetBroadcastShape(e,n),a.assertAndGetBroadcastShape(e,t);let i="0.0";null!=r&&(a.assertAndGetBroadcastShape(e,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let u="1.0";null!=o&&(a.assertAndGetBroadcastShape(e,o),this.variableNames.push("scale"),u="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${i};\n        float scale = ${u};\n        float inv = scale * inversesqrt(variance + float(${s}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class Ls{constructor(e,n,t,r,o,s){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],a.assertAndGetBroadcastShape(e,n),a.assertAndGetBroadcastShape(e,t);let i="vec4(0.0)";null!=r&&(a.assertAndGetBroadcastShape(e,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let u="vec4(1.0)";null!=o&&(a.assertAndGetBroadcastShape(e,o),this.variableNames.push("scale"),u="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        vec4 offset = ${i};\n        vec4 scale = ${u};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${s}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const Ps={kernelName:z,backendName:"webgl",kernelFunc:({inputs:t,backend:a,attrs:r})=>{const{x:o,mean:s,variance:i,offset:u,scale:l}=t;e.assert(s.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),e.assert(null==u||s.shape.length===u.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),e.assert(null==l||s.shape.length===l.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));let{varianceEpsilon:c}=r;null==c&&(c=.001);const d=[o,s,i];let p=null;null!=u&&(p=u.shape,d.push(u));let h=null;null!=l&&(h=l.shape,d.push(l));const f=n().getBool("WEBGL_PACK_NORMALIZATION")?new Ls(o.shape,s.shape,i.shape,p,h,c):new Ds(o.shape,s.shape,i.shape,p,h,c);return a.runWebGLProgram(f,d,d[0].dtype)}};class Bs{constructor(e){this.variableNames=["source"],this.outputShape=e,this.rank=e.length;const n=or(this.rank),t=`uniform int start[${this.rank}];`,a=function(e){if(1===e)return"sourceLoc";if(e<=6)return Vs.slice(0,e).map((e=>"sourceLoc."+e)).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank);let r;r=`\n        ${n} sourceLoc;\n        ${n} coords = getOutputCoords();\n        ${e.map(((e,n)=>`sourceLoc.${Vs[n]} = start[${n}] + coords.${Vs[n]};`)).join("\n")}\n      `,this.userCode=`\n      ${t}\n      void main() {\n        ${r}\n        setOutput(getSource(${a}));\n      }\n    `}getCustomSetupFunc(e){if(e.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${e.length})`);return(n,t)=>{null==this.startLoc&&(this.startLoc=n.getUniformLocationNoThrow(t,"start"),null==this.startLoc)||n.gl.uniform1iv(this.startLoc,e)}}}const Vs=["x","y","z","w","u","v"];class Ws{constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length;const n=or(this.rank),t=ao("coords",this.rank),a=ao("sourceLoc",this.rank),r=1===this.rank?"sourceLoc":`vec2(${a.slice(-2).join()})`,o=`getChannel(getSource(${a.join()}), ${r})`,s=`\n      result.x = ${o};\n      if (++${t[this.rank-1]} < ${e[this.rank-1]}) {\n        ++${a[this.rank-1]};\n        result.y = ${o};\n        --${a[this.rank-1]};\n      }\n    `,i=1===this.rank?"":`\n      --${t[this.rank-1]};\n      if (++${t[this.rank-2]} < ${e[this.rank-2]}) {\n        ++${a[this.rank-2]};\n        result.z = ${o};\n        if (++${t[this.rank-1]} < ${e[this.rank-1]}) {\n          ++${a[this.rank-1]};\n          result.w = ${o};\n        }\n      }\n    `,u=this.rank<=4?`sourceLoc = coords +\n            ${n}(${e.map(((e,n)=>`start[${n}]`)).join()});`:e.map(((e,n)=>`${a[n]} = ${t[n]} + start[${n}];`)).join("\n");this.userCode=`\n      uniform int start[${this.rank}];\n      void main() {\n        ${n} coords = getOutputCoords();\n        ${n} sourceLoc;\n        ${u}\n        vec4 result = vec4(0.);\n        ${s}\n        ${i}\n        setOutput(result);\n      }\n    `}getCustomSetupFunc(e){if(e.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${e.length})`);return(n,t)=>{null==this.startLoc&&(this.startLoc=n.getUniformLocationNoThrow(t,"start"),null==this.startLoc)||n.gl.uniform1iv(this.startLoc,e)}}}function Ms(t){const{inputs:a,backend:r,attrs:o}=t,{x:i}=a,{begin:u,size:l}=o,[c,d]=s.parseSliceParams(i,u,l);if(s.assertParamsValid(i,c,d),0===e.sizeFromShape(d))return r.makeTensorInfo(d,i.dtype,[]);if(r.shouldExecuteOnCPU([i])||"string"===i.dtype){const e=r.texData.get(i.dataId),n=Yr(e.values,c,d,i.shape,i.dtype);return r.makeTensorInfo(d,i.dtype,n)}const{isPacked:p}=r.texData.get(i.dataId),h=s.isSliceContinous(i.shape,c,d);if(p||!h){const e=n().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Ws(d):new Bs(d),t=e.getCustomSetupFunc(c);return r.runWebGLProgram(e,[i],i.dtype,t)}return r.uploadToGPU(i.dataId),function(n,t,a,r){const o=r.texData.get(n.dataId),i=r.makeTensorInfo(a,n.dtype),u=r.texData.get(i.dataId);Object.assign(u,o),u.refCount=1,u.shape=a,u.dtype=n.dtype;let l=s.computeFlatOffset(t,e.computeStrides(n.shape));o.slice&&(l+=o.slice.flatOffset),u.slice={flatOffset:l,origDataId:o.slice&&o.slice.origDataId||n.dataId};const c=r.dataRefCount.get(u.slice.origDataId)||1;return r.dataRefCount.set(u.slice.origDataId,c+1),i}(i,c,d,r)}const Gs={kernelName:X,backendName:"webgl",kernelFunc:Ms},Us={kernelName:H,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:r,attrs:o}=n,{x:s}=t,{blockShape:i,crops:u}=o;e.assert(s.shape.length<=4,(()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet"));const l=i.reduce(((e,n)=>e*n)),c=a.getReshaped(s.shape,i,l),d=a.getPermuted(c.length,i.length),p=a.getReshapedPermuted(s.shape,i,l),h=a.getSliceBeginCoords(u,i.length),f=a.getSliceSize(p,u,i.length),x=[],m=zo({inputs:{x:s},backend:r,attrs:{shape:c}}),g=es({inputs:{x:m},backend:r,attrs:{perm:d}}),b=zo({inputs:{x:g},backend:r,attrs:{shape:p}}),C=Ms({inputs:{x:b},backend:r,attrs:{begin:h,size:f}});return x.push(m),x.push(g),x.push(b),x.forEach((e=>r.disposeIntermediateTensorInfo(e))),C}};const zs={kernelName:j,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:a}=e,{x:r,weights:o}=n,{size:s}=a,i=t.readSync(r.dataId),u=t.readSync(o.dataId),l=Er(i,u,o.dtype,o.shape,s);return t.makeTensorInfo([s],o.dtype,l)}},Xs=Do({opSnippet:"return float(a != b);",dtype:"bool"}),Hs={kernelName:K,backendName:"webgl",kernelFunc:Xs};function js(e){const{inputs:n,backend:t}=e,{input:a}=n;return Ro({inputs:{x:t.texData.get(a.dataId).complexTensorInfos.real},backend:t})}const Ks={kernelName:Y,backendName:"webgl",kernelFunc:js};const Ys={kernelName:q,backendName:"webgl",kernelFunc:function n(t){const{inputs:a,backend:r,attrs:o}=t,{x:s}=a,{dtype:i}=o;if("complex64"===i){if("complex64"===s.dtype)return Ro({inputs:{x:s},backend:r});const e=Q(s.shape),t=n({inputs:{x:s},backend:r,attrs:{dtype:"float32"}}),a=ko({inputs:{real:t,imag:e},backend:r});return e.dispose(),r.disposeIntermediateTensorInfo(t),a}if("complex64"===s.dtype){const e=js({inputs:{input:s},backend:r}),t=n({inputs:{x:e},backend:r,attrs:{dtype:i}});return r.disposeIntermediateTensorInfo(e),t}if(!e.hasEncodingLoss(s.dtype,i)){const e=Ro({inputs:{x:s},backend:r});return{dataId:e.dataId,shape:e.shape,dtype:i}}if("int32"===i)return function(e,n){const t=new co(e.shape,"return float(int(x));"),a=n.runWebGLProgram(t,[e],"int32");return{dataId:a.dataId,shape:a.shape,dtype:a.dtype}}(s,r);if("bool"===i){const n=r.makeTensorInfo([],"bool",e.getTypedArrayFromDType("bool",1)),t=Xs({inputs:{a:s,b:n},backend:r});return r.disposeIntermediateTensorInfo(n),t}throw new Error(`Error in Cast: failed to cast ${s.dtype} to ${i}`)}},qs="return ceil(x);",Qs={kernelName:Z,backendName:"webgl",kernelFunc:_o({opSnippet:qs,packedOpSnippet:qs,cpuKernelImpl:Sr})};class Zs{constructor(e){this.variableNames=["A"],this.outputShape=e,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}getCustomSetupFunc(e,n){return(t,a)=>{null==this.minLoc&&(this.minLoc=t.getUniformLocationNoThrow(a,"minVal"),this.maxLoc=t.getUniformLocationNoThrow(a,"maxVal")),t.gl.uniform1f(this.minLoc,e),t.gl.uniform1f(this.maxLoc,n)}}}class Js{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}getCustomSetupFunc(e,n){return(t,a)=>{null==this.minLoc&&(this.minLoc=t.getUniformLocationNoThrow(a,"minVal"),this.maxLoc=t.getUniformLocationNoThrow(a,"maxVal")),t.gl.uniform1f(this.minLoc,e),t.gl.uniform1f(this.maxLoc,n)}}}const ei={kernelName:J,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:a,attrs:r}=e,{x:o}=t,{clipValueMin:s,clipValueMax:i}=r;let u;u=n().getBool("WEBGL_PACK_CLIP")?new Js(o.shape):new Zs(o.shape);const l=u.getCustomSetupFunc(s,i);return a.runWebGLProgram(u,[o],o.dtype,l)}};class ni{constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}function ti(e,n){return{dataId:n.dataId,dtype:n.dtype,shape:e.shape}}const ai={kernelName:ee,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t}=e,{x:a}=n,r=t.texData.get(a.dataId),o=new ni(a.shape),s=[ti(a,r.complexTensorInfos.real),ti(a,r.complexTensorInfos.imag)];return t.runWebGLProgram(o,s,s[0].dtype)}};class ri{constructor(e){this.outputShape=[],this.outputShape=a.computeOutShape(e,1),this.variableNames=e.map(((e,n)=>`T${n}`));const n=new Array(e.length-1);n[0]=e[0][1];for(let t=1;t<n.length;t++)n[t]=n[t-1]+e[t][1];const t=[`if (yC < ${n[0]}) setOutput(getT0(yR, yC));`];for(let e=1;e<n.length;e++){const a=n[e-1];t.push(`else if (yC < ${n[e]}) setOutput(getT${e}(yR, yC-${a}));`)}const r=n.length,o=n[n.length-1];t.push(`else setOutput(getT${r}(yR, yC-${o}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${t.join("\n        ")}\n      }\n    `}}class oi{constructor(e,n){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=a.computeOutShape(e,n);const t=this.outputShape,r=t.length,o=or(r),s=ao("coords",r),i=["x","y","z","w","u","v"].slice(0,r);this.variableNames=e.map(((e,n)=>`T${n}`));const u=new Array(e.length-1);u[0]=e[0][n];for(let t=1;t<u.length;t++)u[t]=u[t-1]+e[t][n];const l=i[n],c=i.slice(-2),d=i.join();let p=`if (${l} < ${u[0]}) {\n        return getChannel(\n            getT0(${d}), vec2(${c.join()}));\n        }`;for(let e=1;e<u.length;e++){const n=u[e-1];p+=`\n        if (${l} < ${u[e]}  && ${l} >= ${u[e-1]}) {\n          return getChannel(\n            getT${e}(${si(i,l,n)}),\n            vec2(${si(c,l,n)}));\n        }`}const h=u.length,f=u[u.length-1];p+=`\n        return getChannel(\n          getT${h}(${si(i,l,f)}),\n          vec2(${si(c,l,f)}));`,this.userCode=`\n      float getValue(${i.map((e=>"int "+e))}) {\n        ${p}\n      }\n\n      void main() {\n        ${o} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${s}), 0., 0., 0.);\n\n        ${s[r-1]} = ${s[r-1]} + 1;\n        if (${s[r-1]} < ${t[r-1]}) {\n          result.g = getValue(${s});\n        }\n\n        ${s[r-2]} = ${s[r-2]} + 1;\n        if (${s[r-2]} < ${t[r-2]}) {\n          result.a = getValue(${s});\n        }\n\n        ${s[r-1]} = ${s[r-1]} - 1;\n        if (${s[r-2]} < ${t[r-2]} &&\n            ${s[r-1]} < ${t[r-1]}) {\n          result.b = getValue(${s});\n        }\n        setOutput(result);\n      }\n    `}}function si(e,n,t){const a=e.indexOf(n);return e.map(((e,n)=>n===a?`${e} - ${t}`:e)).join()}function ii(e){const{inputs:n,backend:t}=e,{input:a}=n;return Ro({inputs:{x:t.texData.get(a.dataId).complexTensorInfos.imag},backend:t})}const ui={kernelName:ne,backendName:"webgl",kernelFunc:ii};function li(e,t,r){const o=e[0].dtype;if("complex64"===o){const n=e.map((e=>js({inputs:{input:e},backend:r}))),a=e.map((e=>ii({inputs:{input:e},backend:r}))),o=li(n,t,r),s=li(a,t,r),i=ko({inputs:{real:o,imag:s},backend:r});return n.forEach((e=>r.disposeIntermediateTensorInfo(e))),a.forEach((e=>r.disposeIntermediateTensorInfo(e))),r.disposeIntermediateTensorInfo(o),r.disposeIntermediateTensorInfo(s),i}if("string"===o){const{tensors2D:n,outShape:s}=ci(e,t,r),i=n.map((e=>({vals:r.readSync(e.dataId),shape:e.shape}))),u=1===n[0].shape[0],l=Ar(i,s,o,u),c=a.computeOutShape(e.map((e=>e.shape)),t),d=r.makeTensorInfo(c,o,l);return n.forEach((e=>r.disposeIntermediateTensorInfo(e))),d}if(e.length>n().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const n=Math.floor(e.length/2),a=li(e.slice(0,n),t,r),o=li(e.slice(n),t,r),s=li([a,o],t,r);return r.disposeIntermediateTensorInfo(a),r.disposeIntermediateTensorInfo(o),s}if(n().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&e[0].shape.length>1){const n=new oi(e.map((e=>e.shape)),t);return r.runWebGLProgram(n,e,o)}const{tensors2D:s,outShape:i}=ci(e,t,r),u=new ri(s.map((e=>e.shape))),l=r.runWebGLProgram(u,s,o);s.forEach((e=>r.disposeIntermediateTensorInfo(e)));const c=zo({inputs:{x:l},attrs:{shape:i},backend:r});return r.disposeIntermediateTensorInfo(l),c}function ci(n,t,r){const o=a.computeOutShape(n.map((e=>e.shape)),t);return{tensors2D:n.map((n=>zo({inputs:{x:n},attrs:{shape:[-1,e.sizeFromShape(n.shape.slice(t))]},backend:r}))),outShape:o}}function di(n){const{inputs:t,backend:r,attrs:o}=n,{axis:s}=o,i=e.parseAxisParam(s,t[0].shape)[0],u=a.computeOutShape(t.map((e=>e.shape)),i);if(0===e.sizeFromShape(u))return r.makeTensorInfo(u,t[0].dtype,[]);const l=t.filter((n=>e.sizeFromShape(n.shape)>0));if(1===l.length)return Ro({inputs:{x:l[0]},backend:r});const c=l.map((e=>e.shape));return a.assertParamsConsistent(c,i),li(l,i,r)}const pi={kernelName:te,backendName:"webgl",kernelFunc:di};class hi{constructor(e,n=!1,t=null,a=!1,r=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const o=e.padInfo.top,s=e.padInfo.left,i=e.strideHeight,u=e.strideWidth,l=e.dilationHeight,c=e.dilationWidth,d=e.filterHeight,p=e.filterWidth,h=4*Math.floor(e.inChannels/4),f=e.inChannels%4,x="channelsLast"===e.dataFormat,m=x?1:2,g=x?2:3,b=x?3:1;let C="",v="";t&&(C=a?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${t}\n        }`:r?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${t}\n        }`:`\n          float activation(float x) {\n            ${t}\n          }\n        `,v="result = activation(result);");const $=n?"result += getBiasAtOutCoords();":"";n&&this.variableNames.push("bias"),a&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${C}\n\n      const ivec2 strides = ivec2(${i}, ${u});\n      const ivec2 pads = ivec2(${o}, ${s});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${b}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${m}], coords[${g}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${d}; wR++) {\n          int xR = xRCorner + wR * ${l};\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${p}; wC++) {\n            int xC = xCCorner + wC * ${c};\n\n            if (xC < 0 || xC >= ${e.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${h}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${x}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===f}) {\n\n              if (${x}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${h}) *\n                    getW(wR, wC, ${h}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${h}, xR, xC) *\n                    getW(wR, wC, ${h}, d2);\n              }\n\n            } else if (${2===f}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${h}, d2),\n                getW(wR, wC, ${h} + 1, d2)\n              );\n\n              if (${x}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${h}),\n                  getX(batch, xR, xC, ${h} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${h}, xR, xC),\n                  getX(batch, ${h} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===f}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${h}, d2),\n                getW(wR, wC, ${h} + 1, d2),\n                getW(wR, wC, ${h} + 2, d2)\n              );\n\n              if (${x}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${h}),\n                  getX(batch, xR, xC, ${h} + 1),\n                  getX(batch, xR, xC, ${h} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${h}, xR, xC),\n                  getX(batch, ${h} + 1, xR, xC),\n                  getX(batch, ${h} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${$}\n        ${v}\n        setOutput(result);\n      }\n    `}}class fi{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const n=e.padInfo.front,t=e.padInfo.top,a=e.padInfo.left,r=e.strideDepth,o=e.strideHeight,s=e.strideWidth,i=e.dilationDepth,u=e.dilationHeight,l=e.dilationWidth,c=e.filterDepth,d=e.filterHeight,p=e.filterWidth,h=4*Math.floor(e.inChannels/4),f=e.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${r}, ${o}, ${s});\n      const ivec3 pads = ivec3(${n}, ${t}, ${a});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${c}; wF++) {\n          int xF = xFCorner + wF * ${i};\n\n          if (xF < 0 || xF >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${d}; wR++) {\n            int xR = xRCorner + wR * ${u};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${p}; wC++) {\n              int xC = xCCorner + wC * ${l};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${h}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${h}) *\n                  getW(wF, wR, wC, ${h}, d2);\n              } else if (${2===f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${h}),\n                  getX(batch, xF, xR, xC, ${h} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${h}, d2),\n                  getW(wF, wR, wC, ${h} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${h}),\n                  getX(batch, xF, xR, xC, ${h} + 1),\n                  getX(batch, xF, xR, xC, ${h} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${h}, d2),\n                  getW(wF, wR, wC, ${h} + 1, d2),\n                  getW(wF, wR, wC, ${h} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class xi{constructor(e,n,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e;const{filterWidth:a,inChannels:r,strideWidth:o,strideHeight:s,padInfo:i,outWidth:u,dilationWidth:l,dilationHeight:c,dataFormat:d}=t,{left:p,top:h}=i,f=r*a,x=fa(),m="channelsLast"===d,g=m?0:1,b=m?1:2;let C="";for(let t=0;t<=1;t++)for(let a=0;a<=1;a++)C+=`\n          blockIndex = rc.y + ${a};\n          pos = rc.x + ${t};\n\n          if(blockIndex < ${e[1]} && pos < ${e[0]}) {\n            offsetY = int(blockIndex / (${u})) * ${s} - ${h};\n            d0 = offsetY + ${c} * (pos / ${f});\n\n            if(d0 < ${n[g]} && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), ${u}.) * ${o}. - ${p}.);\n              d1 = offsetX + ${l} * (int(mod(float(pos), ${f}.) / ${r}.));\n\n              if(d1 < ${n[b]} && d1 >= 0) {\n\n                ch = int(mod(float(pos), ${r}.));\n\n                if (${m}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*t+a}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*t+a}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${C}\n\n        ${x.output} = result;\n      }\n    `}}function mi({x:t,filter:a,convInfo:r,backend:o,bias:s=null,preluActivationWeights:i=null,leakyreluAlpha:u=0,activation:l=null}){const c=t.shape,d=o.texData.get(t.dataId),p=r.inChannels,h=c[0]*c[1]*c[2],f=r.outChannels,x="channelsLast"===r.dataFormat;let m;const g=[],b=(1===h||1===f)&&p>1e3,C=c[2]%2!=0&&!!d.isPacked;if(!b&&n().getBool("WEBGL_LAZILY_UNPACK")&&n().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&C){const n=x?c[0]*c[1]*(c[2]+1):c[0]*c[2]*(c[3]+1),p={dataId:t.dataId,shape:[1,n,r.inChannels],dtype:t.dtype},h=d.shape;d.shape=d.shape.slice(),d.shape[d.shape.length-2]++,e.assert(Jt(d.shape,p.shape),(()=>`packed reshape ${d.shape} to ${p.shape} isn't free`));const f=zo({inputs:{x:a},backend:o,attrs:{shape:[1,r.inChannels,r.outChannels]}});g.push(f);const b=ts({a:p,b:f,backend:o,transposeA:false,transposeB:false,bias:s,activation:l,preluActivationWeights:i,leakyreluAlpha:u}),C=o.texData.get(b.dataId);e.assert(C.isPacked,(()=>"batchMatMul result is expected to be packed")),d.shape=h,C.shape=r.outShape,m=Ro({inputs:{x:b},backend:o}),m.shape=r.outShape,g.push(b)}else{const e=zo({inputs:{x:t},backend:o,attrs:{shape:[1,x?c[0]*c[1]*c[2]:c[0]*c[2]*c[3],r.inChannels]}}),n=zo({inputs:{x:a},backend:o,attrs:{shape:[1,r.inChannels,r.outChannels]}}),d=ts({a:e,b:n,transposeA:false,transposeB:false,backend:o,bias:s,activation:l,preluActivationWeights:i,leakyreluAlpha:u});m=zo({inputs:{x:d},backend:o,attrs:{shape:r.outShape}}),g.push(e),g.push(n),g.push(d)}for(const e of g)o.disposeIntermediateTensorInfo(e);return m}function gi({x:n,filter:t,convInfo:a,backend:r,bias:o=null,preluActivationWeights:s=null,leakyreluAlpha:i=0,activation:u=null}){const{filterWidth:l,filterHeight:c,inChannels:d,outWidth:p,outHeight:h,dataFormat:f}=a,x="channelsLast"===f,m=l*c*d,g=h*p,b=[m,g],C=[],v=zo({inputs:{x:n},backend:r,attrs:{shape:n.shape.slice(1)}}),$=zo({inputs:{x:t},backend:r,attrs:{shape:[1,m,e.sizeFromShape(t.shape)/m]}});C.push(v),C.push($);const I=new xi(b,v.shape,a),y=r.runWebGLProgram(I,[v],"float32"),R=zo({inputs:{x:y},backend:r,attrs:{shape:[1,b[0],b[1]]}});C.push(y),C.push(R);const w=null!=o,k=null!=s,T="leakyrelu"===u,E=u?Lo(u,!0):null,N=new Po(R.shape,$.shape,[1,g,a.outChannels],!0,!1,w,E,k,T),S=[R,$];if(o&&S.push(o),k&&S.push(s),T){const n=r.makeTensorInfo([],"float32",e.createScalarValue(i,"float32"));S.push(n),C.push(n)}const A=r.runWebGLProgram(N,S,"float32"),F=zo({inputs:{x:A},backend:r,attrs:{shape:x?[1,h,p,a.outChannels]:[1,a.outChannels,h,p]}});C.push(A);for(const e of C)r.disposeIntermediateTensorInfo(e);return F}const bi={kernelName:ae,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:r,attrs:o}=e,{x:s,filter:i}=t,{strides:u,pad:l,dataFormat:c,dilations:d,dimRoundingMode:p}=o,h=a.convertConv2DDataFormat(c),f=a.computeConv2DInfo(s.shape,i.shape,u,d,l,p,!1,h);let x;if(1!==f.filterHeight||1!==f.filterWidth||1!==f.dilationHeight||1!==f.dilationWidth||1!==f.strideHeight||1!==f.strideWidth||"SAME"!==f.padInfo.type&&"VALID"!==f.padInfo.type)if(n().getBool("WEBGL_CONV_IM2COL")&&1===s.shape[0])x=gi({x:s,filter:i,convInfo:f,backend:r});else{const e=new hi(f);x=r.runWebGLProgram(e,[s,i],"float32")}else x=mi({x:s,filter:i,convInfo:f,backend:r});const m=zo({inputs:{x:x},backend:r,attrs:{shape:f.outShape}});return r.disposeIntermediateTensorInfo(x),m}};class Ci{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const n=e.strideHeight,t=e.strideWidth,a=e.padInfo.top,r=e.padInfo.left,o="channelsLast"===e.dataFormat;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${n} - ${a};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${t} - ${r};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              if (${o}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class vi{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const n=e.filterHeight,t=e.filterWidth,a=e.strideHeight,r=e.strideWidth,o="channelsLast"===e.dataFormat,s=n-1-e.padInfo.top,i=t-1-e.padInfo.left,u=o?1:2,l=o?2:3,c=o?3:1;this.userCode=`\n      const ivec2 pads = ivec2(${s}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${c}];\n\n        ivec2 dyCorner = ivec2(coords[${u}], coords[${l}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${n}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${a}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${n} - 1 - wR;\n\n          for (int wC = 0; wC < ${t}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${t} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n\n              if (${o}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class $i{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const n=e.strideDepth,t=e.strideHeight,a=e.strideWidth,r=e.padInfo.front,o=e.padInfo.top,s=e.padInfo.left;this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yF = 0; yF < ${e.outDepth}; yF++) {\n            int xF = wF + yF * ${n} - ${r};\n\n            if (xF < 0 || xF >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${e.outHeight}; yR++) {\n              int xR = wR + yR * ${t} - ${o};\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${e.outWidth}; yC++) {\n                int xC = wC + yC * ${a} - ${s};\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Ii{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const n=e.filterDepth,t=e.filterHeight,a=e.filterWidth,r=e.strideDepth,o=e.strideHeight,s=e.strideWidth,i=n-1-e.padInfo.front,u=t-1-e.padInfo.top,l=a-1-e.padInfo.left;this.userCode=`\n      const ivec3 pads = ivec3(${i}, ${u}, ${l});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${n}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${r}.0;\n\n          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${n} - 1 - wF;\n\n          for (int wR = 0; wR < ${t}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${o}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${t} - 1 - wR;\n\n            for (int wC = 0; wC < ${a}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${s}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${a} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const yi={kernelName:re,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:r}=e,{x:o,dy:s}=n,{strides:i,pad:u,dataFormat:l,dimRoundingMode:c,filterShape:d}=r,p=a.convertConv2DDataFormat(l),h=a.computeConv2DInfo(o.shape,d,i,1,u,c,!1,p),f=new Ci(h);return t.runWebGLProgram(f,[o,s],"float32")}};const Ri={kernelName:oe,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:r}=e,{dy:o,filter:s}=n,{inputShape:i,strides:u,pad:l,dataFormat:c,dimRoundingMode:d}=r,p=a.convertConv2DDataFormat(c),h=a.computeConv2DInfo(i,s.shape,u,1,l,d,!1,p),f=new vi(h);return t.runWebGLProgram(f,[o,s],"float32")}};const wi={kernelName:se,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:r}=e,{x:o,filter:s}=n,{strides:i,pad:u,dilations:l}=r,c=a.computeConv3DInfo(o.shape,s.shape,i,l,u),d=new fi(c);return t.runWebGLProgram(d,[o,s],"float32")}};const ki={kernelName:ie,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:r}=e,{x:o,dy:s}=n,{strides:i,pad:u,filterShape:l}=r,c=a.computeConv3DInfo(o.shape,l,i,1,u),d=new $i(c);return t.runWebGLProgram(d,[o,s],"float32")}};const Ti={kernelName:ue,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:r}=e,{dy:o,filter:s}=n,{pad:i,strides:u,inputShape:l}=r,c=a.computeConv3DInfo(l,s.shape,u,1,i),d=new Ii(c);return t.runWebGLProgram(d,[o,s],"float32")}},Ei={kernelName:le,backendName:"webgl",kernelFunc:_o({opSnippet:"if (isnan(x)) return x;\n  return cos(x);\n"})},Ni={kernelName:ce,backendName:"webgl",kernelFunc:_o({opSnippet:"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"})};class Si{constructor(e,n,t,a,r){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[o,s,i,u]=e,[l]=n,[c,d]=t;this.outputShape=[l,c,d,u];const p="bilinear"===a?1:0,[h,f]=[s-1+".0",i-1+".0"],[x,m,g]=c>1?[""+(s-1)/(c-1),"(y2-y1) * height_ratio",`y1*${h} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${h}`],[b,C,v]=d>1?[""+(i-1)/(d-1),"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${f}`];this.userCode=`\n      const float height_ratio = float(${x});\n      const float width_ratio = float(${b});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${o}) {\n          return;\n        }\n\n        float height_scale = ${m};\n        float width_scale = ${C};\n\n        float in_y = ${g};\n        if( in_y < 0.0 || in_y > ${h} ) {\n          setOutput(float(${r}));\n          return;\n        }\n        float in_x = ${v};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${r}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${p} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}const Ai={kernelName:de,backendName:"webgl",kernelFunc:e=>{const{inputs:n,backend:t,attrs:a}=e,{image:r,boxes:o,boxInd:s}=n,{cropSize:i,method:u,extrapolationValue:l}=a,c=new Si(r.shape,o.shape,i,u,l);return t.runWebGLProgram(c,[r,o,s],"float32")}};class Fi{constructor(e,n,t){this.variableNames=["x"],this.outputShape=e;const a=e.length,r=n?"0.0":`getX(${Oi(a,"coords")})`,o=e[e.length-1];let s="",i="";n?(s=t?"end != "+(o-1):"end != 0",i=t?"end + 1":"end - 1"):(s=t?`end + pow2 < ${o}`:"end >= pow2",i=t?"end + pow2":"end - pow2"),this.userCode=`\n      uniform float index;\n      void main() {\n        ${or(a)} coords = getOutputCoords();\n        int end = ${_i(a,"coords")};\n        float val = ${r};\n        int pow2 = int(pow(2.0, index));\n        if (${s}) {\n          int idx = ${i};\n          ${_i(a,"coords")} = idx;\n          val += getX(${Oi(a,"coords")});\n        }\n        setOutput(val);\n      }\n    `}getCustomSetupFunc(e){return(n,t)=>{null==this.index&&(this.index=n.getUniformLocation(t,"index")),n.gl.uniform1f(this.index,e)}}}function Oi(e,n){if(1===e)return`${n}`;if(2===e)return`${n}.x, ${n}.y`;if(3===e)return`${n}.x, ${n}.y, ${n}.z`;if(4===e)return`${n}.x, ${n}.y, ${n}.z, ${n}.w`;throw Error(`Cumulative sum for rank ${e} is not yet supported`)}function _i(e,n){if(1===e)return`${n}`;if(2===e)return`${n}.y`;if(3===e)return`${n}.z`;if(4===e)return`${n}.w`;throw Error(`Cumulative sum for rank ${e} is not yet supported`)}const Di={kernelName:pe,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:r}=e,{x:o}=n,{axis:s,exclusive:i,reverse:u}=r,l=o.shape.length,c=a.getAxesPermutation([s],l);let d=o;null!=c&&(d=es({inputs:{x:o},backend:t,attrs:{perm:c}}));const p=a.getInnerMostAxes(1,l)[0];if(p!==l-1)throw new Error(`WebGL cumsum shader expects an inner-most axis=${o.shape.length-1} but got axis=${s}`);const h=d.shape[p];let f=Ro({inputs:{x:d},backend:t});for(let e=0;e<=Math.ceil(Math.log2(h))-1;e++){const n=new Fi(d.shape,!1,u),a=n.getCustomSetupFunc(e),r=f;f=t.runWebGLProgram(n,[f],f.dtype,a),t.disposeIntermediateTensorInfo(r)}if(i){const e=new Fi(d.shape,i,u),n=f;f=t.runWebGLProgram(e,[f],f.dtype),t.disposeIntermediateTensorInfo(n)}if(null!=c){const e=es({inputs:{x:f},backend:t,attrs:{perm:a.getUndoAxesPermutation(c)}});return t.disposeIntermediateTensorInfo(f),t.disposeIntermediateTensorInfo(d),e}return f}};const Li={kernelName:he,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:a}=e,{x:r,weights:o}=n,{size:s,binaryOutput:i}=a;if(1===r.shape.length){const e=t.readSync(r.dataId),n=t.readSync(o.dataId),a=Er(e,n,o.dtype,o.shape,s);return t.makeTensorInfo([s],o.dtype,a)}if(2===r.shape.length){const e=t.bufferSync(r),n=t.bufferSync(o),a=Nr(e,n,s,i);return t.makeTensorInfo(a.shape,o.dtype,a.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`)}};class Pi{constructor(e,n,t){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=n,this.dataFormat=t,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${n};\n      int offset_h = imod(h, ${n});\n      int in_w = w / ${n};\n      int offset_w = imod(w, ${n});\n      int offset_d = (offset_h * ${n} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const Bi={kernelName:fe,backendName:"webgl",kernelFunc:function(n){const{inputs:t,backend:a,attrs:r}=n,{x:o}=t,{blockSize:s,dataFormat:i}=r;e.assert(s>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${s}`));const u=o.shape[0],l="NHWC"===i?o.shape[1]:o.shape[2],c="NHWC"===i?o.shape[2]:o.shape[3],d="NHWC"===i?o.shape[3]:o.shape[1],p=l*s,h=c*s,f=d/(s*s),x=new Pi("NHWC"===i?[u,p,h,f]:[u,f,p,h],s,i);return a.runWebGLProgram(x,[o],o.dtype)}};class Vi{constructor(e,n=!1,t=null,a=!1,r=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const o=e.inHeight,s=e.inWidth,i=e.padInfo.top,u=e.padInfo.left,l=e.strideHeight,c=e.strideWidth,d=e.dilationHeight,p=e.dilationWidth,h=e.filterHeight,f=e.filterWidth,x=e.outChannels/e.inChannels;let m="",g="";t&&(m=a?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${t}\n        }`:r?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${t}\n        }`:`\n          float activation(float x) {\n            ${t}\n          }\n        `,g="result = activation(result);");const b=n?"result += getBiasAtOutCoords();":"";n&&this.variableNames.push("bias"),a&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${m}\n\n      const ivec2 strides = ivec2(${l}, ${c});\n      const ivec2 pads = ivec2(${i}, ${u});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${x};\n        int q = d2 - d1 * ${x};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${h}; wR++) {\n          int xR = xRCorner + wR * ${d};\n\n          if (xR < 0 || xR >= ${o}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${f}; wC++) {\n            int xC = xCCorner + wC * ${p};\n\n            if (xC < 0 || xC >= ${s}) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${b}\n        ${g}\n        setOutput(result);\n      }\n    `}}class Wi{constructor(n,t=!1,a=null,r=!1,o=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n.outShape;const s=n.outChannels/n.inChannels,i=n.inHeight,u=n.inWidth,l=n.padInfo.top,c=n.padInfo.left,d=n.strideHeight,p=n.strideWidth,h=n.dilationHeight,f=n.dilationWidth,x=n.filterHeight,m=n.filterWidth,g=m;let b="\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;";for(let e=0;e<m;e++)b+=`\n          vec4 xTexelC${2*e};\n          vec4 xC${e};`;for(let n=0;n<x;n++){for(let e=0;e<m;e++)b+=`\n          xTexelC${2*e} = vec4(0.0);\n          xC${e} = vec4(0.0);`;b+=`\n        xR = xRCorner + ${n*h};\n        if (xR >=0 && xR < ${i}) {\n      `;for(let t=0;t<g/2+1;t++){const a=2*t;if(b+=`\n          xC = xCCorner + ${a*f};\n          `,1===p){if(a<m&&(c%2==1?(b+=`\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < ${u}) {\n                  xTexelC${a} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= ${u}) {\n                    xTexelC${a}.zw = vec2(0.0);\n                  }\n                }\n              `,b+=1===f&&a>0?`\n                xC${a} = vec4(xTexelC${a-2}.zw, xTexelC${a}.xy);\n                `:`\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < ${u}) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= ${u}) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${a} = vec4(previous.zw, xTexelC${a}.xy);\n                  } else {\n                    xC${a} = vec4(0.0, 0.0, xTexelC${a}.xy);\n                  }\n                  `):b+=`\n                if (xC >= 0 && xC < ${u}) {\n                  xTexelC${a} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= ${u}) {\n                    xTexelC${a}.zw = vec2(0.0);\n                  }\n                }\n\n                xC${a} = xTexelC${a};\n                `,a+1<m)){const n=c%2==0?e.nearestLargerEven(f):f;f%2==0&&c%2==1||f%2!=0&&c%2!=1?(b+=`\n                  xCOffset = xC + ${c%2} + ${n};\n\n                  if (xCOffset >= 0 && xCOffset < ${u}) {\n                    xTexelC${a+2} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= ${u}) {\n                      xTexelC${a+2}.zw = vec2(0.0);\n                    }\n                  }\n                  `,f>1&&(b+=`\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < ${u}) {\n                      xTexelC${a} = getX(batch, xR, xCOffset, d1);\n                    }\n                    `),b+=`\n                  xC${a+1} = vec4(xTexelC${a}.zw, xTexelC${a+2}.xy);\n                  `):b+=1===n?`\n                    xC${a+1} = xTexelC${a};\n                    `:`\n                    xCOffset = xC + ${n};\n\n                    if (xCOffset >= 0 && xCOffset < ${u}) {\n                      xTexelC${a+2} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= ${u}) {\n                        xTexelC${a+2}.zw = vec2(0.0);\n                      }\n                    }\n\n                    xC${a+1} = xTexelC${a+2};\n                    `}}else a<m&&(c%2==1?(b+=`\n                xCOffset = xC + 1 - ${p};\n                if(xCOffset >= 0 && xCOffset < ${u}) {\n                  xTexelC${a} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= ${u}) {\n                    xTexelC${a}.zw = vec2(0.0);\n                  }\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < ${u}) {\n                  xTexelC${a+2} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= ${u}) {\n                    xTexelC${a+2}.zw = vec2(0.0);\n                  }\n                }\n\n                xC${a} = vec4(xTexelC${a}.zw, xTexelC${a+2}.zw);\n              `,a+1<m&&(b+=`\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + ${p};\n                  if(xCOffset >= 0 && xCOffset < ${u}) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${a+1} = vec4(xTexelC${a+2}.xy, final.xy);\n                `)):(b+=`\n                if(xC >= 0 && xC < ${u}) {\n                  xTexelC${a} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= ${u}) {\n                    xTexelC${a}.zw = vec2(0.0);\n                  }\n                }\n\n                xCOffset = xC + ${p};\n                if(xCOffset >= 0 && xCOffset < ${u}) {\n                  xTexelC${a+2} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= ${u}) {\n                    xTexelC${a+2}.zw = vec2(0.);\n                  }\n                }\n\n                xC${a} = vec4(\n                  xTexelC${a}.xy, xTexelC${a+2}.xy);\n              `,a+1<m&&(b+=`\n                  xC${a+1} = vec4(xTexelC${a}.zw, xTexelC${a+2}.zw);\n                `)));a<m&&(b+=`\n            wTexel = getW(${n}, ${a}, d1, q);\n            dotProd += xC${a} * vec4(wTexel.xz, wTexel.xz);\n          `,a+1<m&&(b+=`\n              wTexel = getW(${n}, ${a+1}, d1, q);\n              dotProd += xC${a+1} * vec4(wTexel.xz, wTexel.xz);\n            `))}b+="\n        }\n      "}let C="",v="";a&&(C=r?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${a}\n        }`:o?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${a}\n        }`:`vec4 activation(vec4 x) {\n          ${a}\n        }`,v="result = activation(result);");const $=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),o&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${C}\n\n      const ivec2 strides = ivec2(${d}, ${p});\n      const ivec2 pads = ivec2(${l}, ${c});\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${s};\n        int q = d2 - d1 * ${s};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${b}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${$}\n        ${v}\n        setOutput(result);\n      }\n    `}}const Mi={kernelName:xe,backendName:"webgl",kernelFunc:function(t){const{inputs:r,backend:o,attrs:s}=t,{x:i,filter:u}=r,{strides:l,pad:c,dilations:d,dimRoundingMode:p}=s;let h=d;null==h&&(h=[1,1]),e.assert(a.eitherStridesOrDilationsAreOne(l,h),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${h}'`));const f=a.computeConv2DInfo(i.shape,u.shape,l,h,c,p,!0);let x;return x=n().getBool("WEBGL_PACK_DEPTHWISECONV")&&f.strideWidth<=2&&f.outChannels/f.inChannels==1?new Wi(f):new Vi(f),o.runWebGLProgram(x,[i,u],"float32")}};class Gi{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const n=e.strideHeight,t=e.strideWidth,a=e.padInfo.top,r=e.padInfo.left,o=e.outChannels/e.inChannels;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${o} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${n} - ${a};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${t} - ${r};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Ui{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const n=e.filterHeight,t=e.filterWidth,a=e.strideHeight,r=e.strideWidth,o=n-1-e.padInfo.top,s=t-1-e.padInfo.left,i=e.outChannels/e.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${o}, ${s});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${n}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${a}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${n} - 1 - wR;\n\n          for (int wC = 0; wC < ${t}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${t} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${i}; dm++) {\n              int d2 = d1 * ${i} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const zi={kernelName:me,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:r}=e,{x:o,dy:s}=n,{strides:i,dilations:u,pad:l,dimRoundingMode:c,filterShape:d}=r,p=a.computeConv2DInfo(o.shape,d,i,u,l,c,!0),h=new Gi(p);return t.runWebGLProgram(h,[o,s],"float32")}};const Xi={kernelName:ge,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:r}=e,{dy:o,filter:s}=n,{strides:i,dilations:u,pad:l,dimRoundingMode:c,inputShape:d}=r,p=a.computeConv2DInfo(d,s.shape,i,u,l,c,!0),h=new Ui(p);return t.runWebGLProgram(h,[o,s],"float32")}};class Hi{constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}const ji={kernelName:be,backendName:"webgl",kernelFunc:function(n){const{inputs:t,backend:a}=n,{x:r}=t,o=[...r.shape,...r.shape],s=e.sizeFromShape(r.shape),i=zo({inputs:{x:r},backend:a,attrs:{shape:[s]}}),u=new Hi(s),l=a.runWebGLProgram(u,[i],i.dtype),c=zo({inputs:{x:l},backend:a,attrs:{shape:o}});return a.disposeIntermediateTensorInfo(i),a.disposeIntermediateTensorInfo(l),c}};class Ki{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const{inHeight:n,inWidth:t,padInfo:a,strideHeight:r,strideWidth:o,filterHeight:s,filterWidth:i,dilationHeight:u,dilationWidth:l}=e,{top:c,left:d}=a;this.userCode=`\n      const ivec2 strides = ivec2(${r}, ${o});\n      const ivec2 pads = ivec2(${c}, ${d});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${s}; h++) {\n          int hIn = hBeg + h * ${u};\n\n          if (hIn >= 0 && hIn < ${n}) {\n            for (int w = 0; w < ${i}; w++) {\n              int wIn = wBeg + w * ${l};\n\n              if (wIn >= 0 && wIn < ${t}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `}}const Yi={kernelName:Ce,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:r}=e,{x:o,filter:s}=n,{strides:i,pad:u,dilations:l}=r,c=a.computeDilation2DInfo(o.shape,s.shape,i,u,"NHWC",l);let d;const p=new Ki(c);d=t.runWebGLProgram(p,[o,s],"float32");const h=zo({inputs:{x:d},backend:t,attrs:{shape:c.outShape}});return t.disposeIntermediateTensorInfo(d),h}};const qi={kernelName:ve,backendName:"webgl",kernelFunc:function(n){const{inputs:t,backend:r,attrs:o}=n,{equation:s}=o,i=t,{allDims:u,summedDims:l,idDims:c}=a.decodeEinsumEquation(s,i.length);a.checkEinsumDimSizes(u.length,c,i);const{path:d,steps:p}=a.getEinsumComputePath(l,c),h=p.length;let f=null,x=u.length;const m=[];for(let n=0;n<h;++n){for(const t of p[n]){const{permutationIndices:n,expandDims:o}=a.getEinsumPermutation(x,c[t]);let s;a.isIdentityPermutation(n)?s=i[t]:(s=es({inputs:{x:i[t]},backend:r,attrs:{perm:n}}),m.push(s));const u=s.shape.slice();for(let e=0;e<o.length;++e)u.splice(o[e],0,1);e.arraysEqual(s.shape,u)||(s=zo({inputs:{x:s},backend:r,attrs:{shape:u}}),m.push(s)),null===f?f=s:(f=Go({inputs:{a:s,b:f},backend:r}),m.push(f))}n<h-1&&(d[n]>=0&&(f=Zo({inputs:{x:f},backend:r,attrs:{axis:d[n]-(u.length-x),keepDims:!1}}),m.push(f)),x--)}for(const e of m)e!==f&&r.disposeIntermediateTensorInfo(e);return f}},Qi={kernelName:$e,backendName:"webgl",kernelFunc:_o({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n"})},Zi={kernelName:Ie,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:a}=e,{dy:r,y:o}=t,s=n().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new yo("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",r.shape,o.shape):new Io("return (b >= 1.0) ? a : a * (b + 1.0);",r.shape,o.shape);return a.runWebGLProgram(s,[r,o],r.dtype)}},Ji={kernelName:ye,backendName:"webgl",kernelFunc:Do({opSnippet:"return float(a == b);",packedOpSnippet:"\n  return vec4(equal(a, b));\n",dtype:"bool"})},eu={kernelName:Re,backendName:"webgl",kernelFunc:_o({opSnippet:`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${a.ERF_P};\n  float a1 = ${a.ERF_A1};\n  float a2 = ${a.ERF_A2};\n  float a3 = ${a.ERF_A3};\n  float a4 = ${a.ERF_A4};\n  float a5 = ${a.ERF_A5};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`})},nu="return exp(x);",tu=_o({opSnippet:nu,packedOpSnippet:nu,cpuKernelImpl:Fr}),au={kernelName:we,backendName:"webgl",kernelFunc:tu};function ru(n){const{inputs:t,attrs:a,backend:r}=n,{dim:o}=a,{input:s}=t,i=s.shape.length,u=s.shape.slice();let l=o;return o<0&&(e.assert(-(i+1)<=o,(()=>`Axis must be in the interval [${-(i+1)}, ${i}]`)),l=i+o+1),u.splice(l,0,1),zo({inputs:{x:s},backend:r,attrs:{shape:u}})}const ou={kernelName:ke,backendName:"webgl",kernelFunc:ru},su="return exp(x) - 1.0;",iu={kernelName:Te,backendName:"webgl",kernelFunc:_o({opSnippet:su,packedOpSnippet:su,cpuKernelImpl:Or})};class uu{constructor(e,n,t){this.variableNames=["real","imag"];const a=n[1];this.outputShape=n;const r=t?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,o=t?`${a}.0`:"1.0";let s;if("real"===e)s="return real * expR - imag * expI;";else{if("imag"!==e)throw new Error(`FFT component must be either "real" or "imag", got ${e}.`);s="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${r};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${s}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${a});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${a}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${o};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function lu(n,t,a){const r=a.texData.get(n.dataId),o=e.sizeFromShape(n.shape),s=n.shape[n.shape.length-1],i=zo({inputs:{x:n},backend:a,attrs:{shape:[o/s,s]}}),u=i.shape,l=new uu("real",u,t),c=new uu("imag",u,t),d=[{dataId:r.complexTensorInfos.real.dataId,dtype:r.complexTensorInfos.real.dtype,shape:u},{dataId:r.complexTensorInfos.imag.dataId,dtype:r.complexTensorInfos.imag.dtype,shape:u}],p=a.runWebGLProgram(l,d,"float32"),h=a.runWebGLProgram(c,d,"float32"),f=ko({inputs:{real:p,imag:h},backend:a});a.disposeIntermediateTensorInfo(p),a.disposeIntermediateTensorInfo(h);const x=zo({inputs:{x:f},backend:a,attrs:{shape:n.shape}});return a.disposeIntermediateTensorInfo(i),a.disposeIntermediateTensorInfo(f),x}const cu={kernelName:Ee,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t}=e,{input:a}=n;return lu(a,!1,t)}};class du{constructor(e,n){this.outputShape=[],this.variableNames=["x"],this.outputShape=e,this.userCode="\n      uniform float value;\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}getCustomSetupFunc(e){return(n,t)=>{null==this.valueLoc&&(this.valueLoc=n.getUniformLocationNoThrow(t,"value")),n.gl.uniform1f(this.valueLoc,e)}}}function pu(n){const{backend:t,attrs:a}=n,{shape:r,value:o}=a;let{dtype:s}=a;if(s=s||e.inferDtype(o),"string"===s){const n=e.getArrayFromDType(s,e.sizeFromShape(r));return n.fill(o),t.makeTensorInfo(r,s,n)}{const e=new du(r,o),n=e.getCustomSetupFunc(o);return t.runWebGLProgram(e,[],s,n)}}const hu={kernelName:Ne,backendName:"webgl",kernelFunc:pu};class fu{constructor(e){this.variableNames=["Image"],this.outputShape=[];const n=e[2];this.outputShape=e,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${n} - x;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${n}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const xu={kernelName:Se,backendName:"webgl",kernelFunc:({inputs:e,backend:n})=>{const{image:t}=e,a=n,r=new fu(t.shape);return a.runWebGLProgram(r,[t],t.dtype)}},mu="return floor(x);",gu={kernelName:Ae,backendName:"webgl",kernelFunc:_o({opSnippet:mu,packedOpSnippet:mu,cpuKernelImpl:_r})},bu={kernelName:Fe,backendName:"webgl",kernelFunc:Do({opSnippet:"\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",packedOpSnippet:"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",dtype:"int32"})};class Cu{constructor(e){this.variableNames=["A"];const n=fa(),[t,a]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${a}.0, ${t}.0);\n\n        vec4 values = ${n.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class vu{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const n=fa(),[t,a]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${a}.0, ${t}.0);\n            vec4 values = ${n.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${n.output} = result;\n      }\n    `}}const $u={kernelName:Oe,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:a,attrs:r}=e;let{pixels:o}=t;const{numChannels:s}=r,i="undefined"!=typeof HTMLVideoElement&&o instanceof HTMLVideoElement,u="undefined"!=typeof HTMLImageElement&&o instanceof HTMLImageElement,[l,c]=i?[o.videoWidth,o.videoHeight]:[o.width,o.height],d=[c,l],p=[c,l,s];(u||i)&&(null==Iu&&(Iu=document.createElement("canvas").getContext("2d")),Iu.canvas.width=l,Iu.canvas.height=c,Iu.drawImage(o,0,0,l,c),o=Iu.canvas);const h=a.makeTensorInfo(d,"int32");a.texData.get(h.dataId).usage=mt.PIXELS,a.gpgpu.uploadPixelDataToTexture(a.getTexture(h.dataId),o);const f=n().getBool("WEBGL_PACK")?new vu(p):new Cu(p),x=a.runWebGLProgram(f,[h],"int32");return a.disposeData(h.dataId),x}};let Iu;const yu={kernelName:_e,backendName:"webgl",kernelFunc:function(t){const{inputs:r,backend:o,attrs:s}=t,{x:i,filter:u,bias:l,preluActivationWeights:c}=r,{strides:d,pad:p,dataFormat:h,dilations:f,dimRoundingMode:x,activation:m,leakyreluAlpha:g}=s,b=a.convertConv2DDataFormat(h),C=a.computeConv2DInfo(i.shape,u.shape,d,f,p,x,!1,b);let v;const $=[];if(1!==C.filterHeight||1!==C.filterWidth||1!==C.dilationHeight||1!==C.dilationWidth||1!==C.strideHeight||1!==C.strideWidth||"SAME"!==C.padInfo.type&&"VALID"!==C.padInfo.type)if(n().getBool("WEBGL_CONV_IM2COL")&&1===i.shape[0])v=gi({x:i,filter:u,convInfo:C,backend:o,bias:l,activation:m,preluActivationWeights:c,leakyreluAlpha:g});else{const n=null!=l,t=null!=c,a="leakyrelu"===m,r=m?Lo(m,!1):null,s=new hi(C,n,r,t,a),d=[i,u];if(l&&d.push(l),c&&d.push(c),a){const n=o.makeTensorInfo([],"float32",e.createScalarValue(g,"float32"));d.push(n),$.push(n)}v=o.runWebGLProgram(s,d,"float32")}else v=mi({x:i,filter:u,convInfo:C,backend:o,bias:l,activation:m,preluActivationWeights:c,leakyreluAlpha:g});const I=zo({inputs:{x:v},backend:o,attrs:{shape:C.outShape}});return $.push(v),$.forEach((e=>o.disposeIntermediateTensorInfo(e))),I}};const Ru={kernelName:De,backendName:"webgl",kernelFunc:function(t){const{inputs:r,backend:o,attrs:s}=t,{x:i,filter:u,bias:l,preluActivationWeights:c}=r,{strides:d,pad:p,dilations:h,dimRoundingMode:f,activation:x,leakyreluAlpha:m}=s,g=[];let b=h;null==b&&(b=[1,1]),e.assert(a.eitherStridesOrDilationsAreOne(d,b),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${d} and dilations '${b}'`));const C=a.computeConv2DInfo(i.shape,u.shape,d,b,p,f,!0),v=n().getBool("WEBGL_PACK_DEPTHWISECONV")&&C.strideWidth<=2&&C.outChannels/C.inChannels==1,$=x?Lo(x,v):null,I=[i,u],y=null!=l,R=null!=c,w="leakyrelu"===x;if(y&&I.push(l),R&&I.push(c),w){const n=o.makeTensorInfo([],"float32",e.createScalarValue(m,"float32"));I.push(n),g.push(n)}let k;k=v?new Wi(C,y,$,R,w):new Vi(C,y,$,R,w);const T=o.runWebGLProgram(k,I,"float32");return g.forEach((e=>o.disposeIntermediateTensorInfo(e))),T}};class wu{constructor(e,n,t){this.sliceDim=e,this.strides=n,this.variableNames=["x","indices"],this.outputShape=t;const a=or(n.length),r=or(t.length),o=this.sliceDim>1?"strides[j]":"strides";this.userCode=`\n        ${a} strides = ${a}(${this.strides});\n         void main() {\n          ${r} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${o};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `}}const ku={kernelName:Le,backendName:"webgl",kernelFunc:function(n){const{inputs:t,backend:r}=n,{params:o,indices:s}=t,i=s.shape,u=i[i.length-1],[l,c,d,p]=a.prepareAndValidate(o,s),h=zo({inputs:{x:s},backend:r,attrs:{shape:[c,u]}}),f=zo({inputs:{x:o},backend:r,attrs:{shape:[e.sizeFromShape(o.shape)/d,d]}}),x=new wu(u,p,[c,d]),m=r.runWebGLProgram(x,[f,h],f.dtype),g=zo({inputs:{x:m},backend:r,attrs:{shape:l}});return r.disposeIntermediateTensorInfo(h),r.disposeIntermediateTensorInfo(f),r.disposeIntermediateTensorInfo(m),g}};class Tu{constructor(e,n){this.variableNames=["A","indices"],this.outputShape=n,this.rank=n.length;const t=or(this.rank),a=function(e,n){const t=["resRC.x","resRC.y","resRC.z","resRC.w"],a=[];for(let n=0;n<e.length;n++)2===n?a.push("int(getIndices(resRC.x, resRC.z))"):a.push(`${t[n]}`);return a.join()}(e);this.userCode=`\n      void main() {\n        ${t} resRC = getOutputCoords();\n        setOutput(getA(${a}));\n      }\n    `}}const Eu={kernelName:Pe,backendName:"webgl",kernelFunc:function(n){const{inputs:t,backend:r,attrs:o}=n,{x:s,indices:i}=t,{axis:u,batchDims:l}=o,c=e.parseAxisParam(u,s.shape)[0],d=a.segment_util.collectGatherOpShapeInfo(s,i,c,l),p=e.sizeFromShape(i.shape),h=[],f=zo({inputs:{x:s},backend:r,attrs:{shape:[d.batchSize,d.outerSize,d.dimSize,d.sliceSize]}}),x=zo({inputs:{x:i},backend:r,attrs:{shape:[d.batchSize,p/d.batchSize]}});h.push(f),h.push(x);const m=[d.batchSize,d.outerSize,p/d.batchSize,d.sliceSize];if(r.shouldExecuteOnCPU([s,i])||"string"===s.dtype){const e=r.bufferSync(x),n=r.bufferSync(f),t=Dr(n,e,m);return h.forEach((e=>r.disposeIntermediateTensorInfo(e))),r.makeTensorInfo(d.outputShape,t.dtype,t.values)}const g=new Tu(f.shape,m),b=r.runWebGLProgram(g,[f,x],f.dtype);h.push(b);const C=zo({inputs:{x:b},backend:r,attrs:{shape:d.outputShape}});return h.forEach((e=>r.disposeIntermediateTensorInfo(e))),C}},Nu={kernelName:Be,backendName:"webgl",kernelFunc:Do({opSnippet:"return float(a > b);",packedOpSnippet:"\n  return vec4(greaterThan(a, b));\n",cpuKernelImpl:Lr,dtype:"bool"})},Su={kernelName:Ve,backendName:"webgl",kernelFunc:Do({opSnippet:"return float(a >= b);",packedOpSnippet:"\n  return vec4(greaterThanEqual(a, b));\n",dtype:"bool"})};const Au={kernelName:We,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t}=e,{input:a}=n;return lu(a,!0,t)}},Fu={kernelName:Me,backendName:"webgl",kernelFunc:_o({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"})},Ou={kernelName:Ge,backendName:"webgl",kernelFunc:_o({opSnippet:"return float(isinf(x));",dtype:"bool"})},_u={kernelName:Ue,backendName:"webgl",kernelFunc:_o({opSnippet:"return float(isnan(x));",dtype:"bool"})},Du={kernelName:ze,backendName:"webgl",kernelFunc:Do({opSnippet:"return float(a < b);",packedOpSnippet:"\n  return vec4(lessThan(a, b));\n",cpuKernelImpl:Pr,dtype:"bool"})},Lu={kernelName:Xe,backendName:"webgl",kernelFunc:Do({opSnippet:"return float(a <= b);",packedOpSnippet:"\n  return vec4(lessThanEqual(a, b));\n",dtype:"bool"})};const Pu={kernelName:He,backendName:"webgl",kernelFunc:function(e){const{backend:n,attrs:t}=e,{start:a,stop:r,num:o}=t,s=Br(a,r,o);return n.makeTensorInfo([s.length],"float32",s)}},Bu={kernelName:je,backendName:"webgl",kernelFunc:_o({opSnippet:"if (x < 0.0) return NAN;\n  return log(x);",packedOpSnippet:"\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:Vr})},Vu={kernelName:Ke,backendName:"webgl",kernelFunc:_o({opSnippet:"return log(1.0 + x);"})},Wu={kernelName:Ye,backendName:"webgl",kernelFunc:Do({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",dtype:"bool"})},Mu={kernelName:qe,backendName:"webgl",kernelFunc:_o({opSnippet:"return float(!(x >= 1.0));"})},Gu={kernelName:Qe,backendName:"webgl",kernelFunc:Do({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",dtype:"bool"})};class Uu{constructor(e,n,t,a,r){this.variableNames=["x"],this.outputShape=[];const o=n,s=e[3]-1;let i;this.outputShape=e;const u=`float(${t}) + float(${a}) * sum`;i=.5===r?`inversesqrt(${u})`:1===r?`1.0/(${u})`:`exp(log(${u}) * float(-${r}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${o}; j <= ${o}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${s}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${i};\n        setOutput(val);\n      }\n    `}}class zu{constructor(e,n,t,a,r){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const o=n,s=e[3]-1;let i;this.outputShape=e;const u=`float(${t}) + float(${a}) * sum`;i=.5===r?`inversesqrt(${u})`:1===r?`1.0/(${u})`:`exp(log(${u}) * float(-${r}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${o};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${o}; j <= ${o}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${s}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${i};\n        setOutput(result);\n      }\n    `}}const Xu={kernelName:Ze,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:a,attrs:r}=e,{x:o}=t,{depthRadius:s,bias:i,alpha:u,beta:l}=r,c=n().getBool("WEBGL_PACK_NORMALIZATION")?new zu(o.shape,s,i,u,l):new Uu(o.shape,s,i,u,l);return a.runWebGLProgram(c,[o],o.dtype)}};class Hu{constructor(e,n,t,a,r){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=n,this.bias=t,this.alpha=a,this.beta=r,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${n})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${n} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${a}) * norm + float(${t});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${a})\n                * float(${r})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${r});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}const ju={kernelName:Je,backendName:"webgl",kernelFunc:e=>{const{inputs:n,backend:t,attrs:a}=e,{x:r,y:o,dy:s}=n,{depthRadius:i,bias:u,alpha:l,beta:c}=a,d=new Hu(r.shape,i,u,l,c);return t.runWebGLProgram(d,[r,o,s],r.dtype)}};function Ku(n){const{inputs:t,backend:r,attrs:o}=n,{x:s}=t,{reductionIndices:i,keepDims:u}=o,l=s.shape.length,c=e.parseAxisParam(i,s.shape);let d=c;const p=a.getAxesPermutation(d,l),h=null!=p,f=r.shouldExecuteOnCPU([s]);let x=s;if(h){if(f){const e=r.texData.get(x.dataId).values,n=new Array(l);for(let e=0;e<n.length;e++)n[e]=s.shape[p[e]];const t=eo(e,s.shape,s.dtype,p,n);x=r.makeTensorInfo(n,s.dtype);r.texData.get(x.dataId).values=t}else x=Qo(s,p,r);d=a.getInnerMostAxes(d.length,l)}a.assertAxesAreInnerMostDims("max",d,l);const[m,g]=a.computeOutAndReduceShapes(x.shape,d);let b,C=m;if(u&&(C=a.expandShapeToKeepDim(m,c)),f){const n=r.texData.get(x.dataId).values,t=Wr(n,e.sizeFromShape(g),C,s.dtype);b=r.makeTensorInfo(C,s.dtype);r.texData.get(b.dataId).values=t}else b=function(n,t,a,r){const o=e.sizeFromShape(t),s=zo({inputs:{x:n},attrs:{shape:[e.sizeFromShape(n.shape)/o,o]},backend:r}),i=Ko(s,n.dtype,"max",r),u=zo({inputs:{x:i},attrs:{shape:a},backend:r});return r.disposeIntermediateTensorInfo(s),r.disposeIntermediateTensorInfo(i),u}(x,g,C,r);return h&&r.disposeIntermediateTensorInfo(x),b}const Yu={kernelName:en,backendName:"webgl",kernelFunc:Ku},qu={kernelName:nn,backendName:"webgl",kernelFunc:Do({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:Mr})};const Qu={kernelName:tn,backendName:"webgl",kernelFunc:function(n){const{inputs:t,backend:r,attrs:o}=n,{x:s}=t;da(s,"maxPool");const{filterSize:i,strides:u,pad:l,dimRoundingMode:c}=o;e.assert(a.eitherStridesOrDilationsAreOne(u,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${u} and dilations '1'`));const d=a.computePool2DInfo(s.shape,i,u,1,l,c);if(1===d.filterWidth&&1===d.filterHeight&&e.arraysEqual(d.inShape,d.outShape))return Ro({inputs:{x:s},backend:r});const p=new ks(d,"max",!1);return r.runWebGLProgram(p,[s],s.dtype)}};const Zu={kernelName:an,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:r}=e,{x:o}=n,{filterSize:s,strides:i,pad:u,dataFormat:l,dimRoundingMode:c}=r,d=a.computePool3DInfo(o.shape,s,i,[1,1,1],u,c,l),p=new Ts(d,"max",!1);return t.runWebGLProgram(p,[o],o.dtype)}};class Ju{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const n=e.strideHeight,t=e.strideWidth,a=e.dilationHeight,r=e.effectiveFilterHeight,o=e.effectiveFilterWidth,s=r-1-e.padInfo.top,i=o-1-e.padInfo.left,u=r*o-1;this.userCode=`\n      const ivec2 pads = ivec2(${s}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${r};\n          wR += ${a}) {\n          float dyR = float(dyRCorner + wR) / ${n}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${o}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${t}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${u} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${o} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class el{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const n=e.strideDepth,t=e.strideHeight,a=e.strideWidth,r=e.dilationDepth,o=e.dilationHeight,s=e.dilationWidth,i=e.effectiveFilterDepth,u=e.effectiveFilterHeight,l=e.effectiveFilterWidth,c=i-1-e.padInfo.front,d=u-1-e.padInfo.top,p=l-1-e.padInfo.left,h=i*u*l-1;this.userCode=`\n      const ivec3 pads = ivec3(${c}, ${d}, ${p});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${i};\n           wD += ${r}) {\n          float dyD = float(dyDCorner + wD) / ${n}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${u};\n              wR += ${o}) {\n            float dyR = float(dyRCorner + wR) / ${t}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${l};\n                wC += ${s}) {\n              float dyC = float(dyCCorner + wC) / ${a}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${h} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${u} * ${l} +\n                  wR * ${l} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const nl={kernelName:rn,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:r}=e,{dy:o,input:s}=n,i=s,{filterSize:u,strides:l,pad:c,dimRoundingMode:d}=r,p=a.computePool3DInfo(i.shape,u,l,[1,1,1],c,d),h=new Ts(p,"max",!0),f=t.runWebGLProgram(h,[i],i.dtype),x=new el(p),m=t.runWebGLProgram(x,[o,f],i.dtype);return t.disposeIntermediateTensorInfo(f),m}};const tl={kernelName:on,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:r}=e,{dy:o,input:s,output:i}=n,u=s;da([s,i],"maxPoolGrad");const{filterSize:l,strides:c,pad:d,dimRoundingMode:p}=r,h=a.computePool2DInfo(u.shape,l,c,1,d,p),f=new ks(h,"max",!0),x=t.runWebGLProgram(f,[u],u.dtype),m=new Ju(h),g=t.runWebGLProgram(m,[o,x],u.dtype);return t.disposeIntermediateTensorInfo(x),g}};const al={kernelName:sn,backendName:"webgl",kernelFunc:({inputs:n,attrs:t,backend:r})=>{const{x:o}=n,{filterSize:s,strides:i,pad:u,includeBatchInIndex:l}=t,c=r;e.assert(4===o.shape.length,(()=>`Error in maxPool: input must be rank 4 but got rank ${o.shape.length}.`));const d=[1,1];e.assert(a.eitherStridesOrDilationsAreOne(i,d),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${d}'`));const p=a.computePool2DInfo(o.shape,s,i,d,u),[h,f]=function(e,n,t,a){let r=new ks(t,"max",!1);const o=a.runWebGLProgram(r,[e],"float32");return r=new ks(t,"max",!0,!0,n),[o,a.runWebGLProgram(r,[e],"float32")]}(o,l,p,c);return[h,f]}};const rl={kernelName:un,backendName:"webgl",kernelFunc:({inputs:n,attrs:t,backend:r})=>{const{x:o}=n,{keepDims:s,axis:i}=t,u=r,l=o.shape.length,c=e.parseAxisParam(i,o.shape);let d=c;const p=a.getAxesPermutation(d,l),h=null!=p,f=u.shouldExecuteOnCPU([o]),x=[];let m=o;if(h){if(f){const e=u.texData.get(m.dataId).values,n=new Array(l);for(let e=0;e<n.length;e++)n[e]=o.shape[p[e]];const t=eo(e,o.shape,o.dtype,p,n);m=u.makeTensorInfo(n,o.dtype);u.texData.get(m.dataId).values=t}else m=Qo(o,p,u);x.push(m),d=a.getInnerMostAxes(d.length,l)}a.assertAxesAreInnerMostDims("sum",d,l);const[g,b]=a.computeOutAndReduceShapes(m.shape,d);let C=g;s&&(C=a.expandShapeToKeepDim(g,c));const v=function(n,t,a,r){const o=e.sizeFromShape(t),s=zo({inputs:{x:n},attrs:{shape:[e.sizeFromShape(n.shape)/o,o]},backend:r}),i=Ko(s,"float32","mean",r),u=zo({inputs:{x:i},attrs:{shape:a},backend:r});return r.disposeIntermediateTensorInfo(s),r.disposeIntermediateTensorInfo(i),u}(m,b,C,u);for(const e of x)u.disposeIntermediateTensorInfo(e);return v}};const ol={kernelName:ln,backendName:"webgl",kernelFunc:function(n){const{inputs:t,backend:r,attrs:o}=n,{x:s}=t,{axis:i,keepDims:u}=o,l=s.shape.length,c=e.parseAxisParam(i,s.shape);let d=c;const p=a.getAxesPermutation(d,l);let h=s;null!=p&&(h=es({inputs:{x:s},backend:r,attrs:{perm:p}}),d=a.getInnerMostAxes(d.length,s.shape.length)),a.assertAxesAreInnerMostDims("min",d,l);const[f,x]=a.computeOutAndReduceShapes(h.shape,d),m=zo({inputs:{x:h},backend:r,attrs:{shape:[-1,e.sizeFromShape(x)]}}),g=Ko(m,m.dtype,"min",r);let b;if(u){b=zo({inputs:{x:g},backend:r,attrs:{shape:a.expandShapeToKeepDim(f,c)}})}else b=zo({inputs:{x:g},backend:r,attrs:{shape:f}});return r.disposeIntermediateTensorInfo(m),r.disposeIntermediateTensorInfo(g),null!=p&&r.disposeIntermediateTensorInfo(h),b}},sl={kernelName:cn,backendName:"webgl",kernelFunc:Do({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:Gr})};class il{constructor(e,n,t){this.variableNames=["x"],this.outputShape=n.map(((n,t)=>n[0]+e[t]+n[1]));const a=e.length,r=or(a),o=n.map((e=>e[0])).join(","),s=n.map(((n,t)=>n[0]+e[t])).join(","),i=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,a),u="reflect"===t?0:1;this.userCode=1!==a?`\n      ${r} start = ${r}(${o});\n      ${r} end = ${r}(${s});\n\n      void main() {\n        ${r} outC = getOutputCoords();\n        for (int i = 0; i < ${a}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${u};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${u};\n          }\n        }\n        ${r} coords = outC - start;\n        setOutput(getX(${i}));\n      }\n    `:`\n        int start = ${o};\n        int end = ${s};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${u};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${u};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class ul{constructor(e,n,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n.map(((n,t)=>n[0]+e[t]+n[1]));const a=e.length,r=or(a),o=n.map((e=>e[0])).join(","),s=n.map(((n,t)=>n[0]+e[t])).join(","),i=ao("rc",a),u=ao("source",a),l=`${i[a-1]} < ${this.outputShape[a-1]}`,c=1===a?"source":`vec2(${u.slice(-2).join()})`,d="reflect"===t?0:1;let p="";if(1===a){const e=`\n        ${r} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${d};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${d};\n        }\n        source -= start;\n      `;p=`\n        ${r} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${u.join()}), ${c});\n        ${i[a-1]} += 1;\n        if(${l}) {\n          ${e}\n          result[1] = getChannel(getX(${u.join()}), ${c});\n        }\n      `}else{const e=`\n        ${r} source = rc;\n        ${r} lt = ${r}(lessThan(source, start));\n        ${r} gte = ${r}(greaterThanEqual(source, end));\n        ${r} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${d}) +\n                gte * ((end - 1) * 2 - source + ${d});\n        source -= start;\n      `;p=`\n        ${r} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${u.join()}), ${c});\n        ${i[a-1]} += 1;\n        if(${l}) {\n          ${e}\n          result[1] = getChannel(getX(${u.join()}), ${c});\n        }\n        rc = outputLoc;\n        ${i[a-2]} += 1;\n        if(${i[a-2]} < ${this.outputShape[a-2]}) {\n          ${e}\n          result[2] = getChannel(getX(${u.join()}), ${c});\n          ${i[a-1]} += 1;\n          if(${l}) {\n            ${e}\n            result[3] = getChannel(getX(${u.join()}), ${c});\n          }\n        }\n      `}this.userCode=`\n      const ${r} start = ${r}(${o});\n      const ${r} end = ${r}(${s});\n\n      void main() {\n        ${r} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${p}\n        setOutput(result);\n      }\n    `}}const ll={kernelName:dn,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:a})=>{const{x:r}=e,{paddings:o,mode:s}=a,i=n().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new ul(r.shape,o,s):new il(r.shape,o,s);return t.runWebGLProgram(i,[r],r.dtype)}},cl={kernelName:pn,backendName:"webgl",kernelFunc:Do({opSnippet:"if (b == 0.0) return NAN;\n  return mod(a, b);",packedOpSnippet:"\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"})};class dl{constructor(e,n,t){this.variableNames=["probs"],this.outputShape=[e,t],this.userCode=`\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${n-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${n-1}));\n      }\n    `}getCustomSetupFunc(e){return(n,t)=>{null==this.seedLoc&&(this.seedLoc=n.getUniformLocation(t,"seed")),n.gl.uniform1f(this.seedLoc,e)}}}const pl=Do({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),hl={kernelName:hn,backendName:"webgl",kernelFunc:pl},fl="return a - b;",xl=Do({opSnippet:fl,packedOpSnippet:fl,supportsComplex:!0,cpuKernelImpl:Qr}),ml={kernelName:fn,backendName:"webgl",kernelFunc:xl};function gl(n){const{inputs:t,backend:r,attrs:o}=n,{logits:s}=t,{dim:i}=o,u=e.parseAxisParam([i],s.shape),l=Ku({inputs:{x:s},backend:r,attrs:{reductionIndices:u,keepDims:!1}}),c=a.expandShapeToKeepDim(l.shape,u),d=zo({inputs:{x:l},backend:r,attrs:{shape:c}}),p=xl({inputs:{a:s,b:d},backend:r}),h=tu({inputs:{x:p},backend:r}),f=Zo({inputs:{x:h},backend:r,attrs:{axis:u,keepDims:!1}}),x=zo({inputs:{x:f},backend:r,attrs:{shape:c}}),m=pl({inputs:{a:h,b:x},backend:r});return r.disposeIntermediateTensorInfo(l),r.disposeIntermediateTensorInfo(d),r.disposeIntermediateTensorInfo(p),r.disposeIntermediateTensorInfo(h),r.disposeIntermediateTensorInfo(f),r.disposeIntermediateTensorInfo(x),m}const bl={kernelName:xn,backendName:"webgl",kernelFunc:gl};const Cl={kernelName:mn,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:a}=e,{logits:r}=n,{numSamples:o,seed:s,normalized:i}=a,u=i?r:gl({inputs:{logits:r},backend:t,attrs:{dim:r.shape.length-1}}),l=u.shape[0],c=u.shape[1],d=new dl(l,c,o),p=d.getCustomSetupFunc(s),h=t.runWebGLProgram(d,[u],"int32",p);return i||t.disposeIntermediateTensorInfo(u),h}},vl="return -x;";const $l={kernelName:gn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:a}=e,{x:r}=t;if(a.shouldExecuteOnCPU([r])){const e=a.texData.get(r.dataId),[n,t]=zr(e.values,r.shape,r.dtype);return a.makeTensorInfo(t,r.dtype,n)}let o;return o=n().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new fo(r.shape,vl):new co(r.shape,vl),a.runWebGLProgram(o,[r],r.dtype)}},Il=u.nonMaxSuppressionV3Impl;const yl={kernelName:bn,backendName:"webgl",kernelFunc:function(e){a.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:n,backend:t,attrs:r}=e,{boxes:o,scores:s}=n,{maxOutputSize:i,iouThreshold:u,scoreThreshold:l}=r,c=t.readSync(o.dataId),d=t.readSync(s.dataId),{selectedIndices:p}=Il(c,d,i,u,l);return t.makeTensorInfo([p.length],"int32",new Int32Array(p))}},Rl=u.nonMaxSuppressionV4Impl;const wl={kernelName:Cn,backendName:"webgl",kernelFunc:function(e){a.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:n,backend:t,attrs:r}=e,{boxes:o,scores:s}=n,{maxOutputSize:i,iouThreshold:u,scoreThreshold:l,padToMaxOutputSize:c}=r,d=t.readSync(o.dataId),p=t.readSync(s.dataId),{selectedIndices:h,validOutputs:f}=Rl(d,p,i,u,l,c);return[t.makeTensorInfo([h.length],"int32",new Int32Array(h)),t.makeTensorInfo([],"int32",new Int32Array([f]))]}},kl=u.nonMaxSuppressionV5Impl;const Tl={kernelName:vn,backendName:"webgl",kernelFunc:function(e){a.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:n,backend:t,attrs:r}=e,{boxes:o,scores:s}=n,{maxOutputSize:i,iouThreshold:u,scoreThreshold:l,softNmsSigma:c}=r,d=t.readSync(o.dataId),p=t.readSync(s.dataId),h=i,f=u,x=l,m=c,{selectedIndices:g,selectedScores:b}=kl(d,p,h,f,x,m);return[t.makeTensorInfo([g.length],"int32",new Int32Array(g)),t.makeTensorInfo([b.length],"float32",new Float32Array(b))]}};class El{constructor(e,n,t,a){this.variableNames=["indices"],this.outputShape=[e,n],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${a}), float(${t}),\n                      float(index == coords.y)));\n      }\n    `}}const Nl={kernelName:$n,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:a,attrs:r}=n,{indices:o}=t,{depth:s,onValue:i,offValue:u}=r,l=e.sizeFromShape(o.shape),c=new El(l,s,i,u),d=zo({inputs:{x:o},backend:a,attrs:{shape:[l]}}),p=a.runWebGLProgram(c,[d],o.dtype);a.disposeIntermediateTensorInfo(d);const h=zo({inputs:{x:p},backend:a,attrs:{shape:[...o.shape,s]}});return a.disposeIntermediateTensorInfo(p),h}};function Sl(e){const{inputs:n,backend:t}=e,{x:a}=n;if("complex64"===a.dtype){const e=js({inputs:{input:a},backend:t}),n=Sl({inputs:{x:e},backend:t}),r=ii({inputs:{input:a},backend:t}),o=Sl({inputs:{x:r},backend:t}),s=ko({inputs:{real:n,imag:o},backend:t});return t.disposeIntermediateTensorInfo(e),t.disposeIntermediateTensorInfo(n),t.disposeIntermediateTensorInfo(r),t.disposeIntermediateTensorInfo(o),s}return pu({attrs:{shape:a.shape,dtype:a.dtype,value:"string"===a.dtype?"":0},backend:t})}const Al={kernelName:In,backendName:"webgl",kernelFunc:Sl};const Fl={kernelName:yn,backendName:"webgl",kernelFunc:function e(n){const{inputs:t,backend:a}=n,{x:r}=t;if("string"===r.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===r.dtype){const n=js({inputs:{input:r},backend:a}),t=e({inputs:{x:n},backend:a}),o=ii({inputs:{input:r},backend:a}),s=Sl({inputs:{x:o},backend:a}),i=ko({inputs:{real:t,imag:s},backend:a});return a.disposeIntermediateTensorInfo(n),a.disposeIntermediateTensorInfo(t),a.disposeIntermediateTensorInfo(o),a.disposeIntermediateTensorInfo(s),i}return pu({attrs:{shape:r.shape,dtype:r.dtype,value:1},backend:a})}};const Ol={kernelName:Rn,backendName:"webgl",kernelFunc:function(n){const{inputs:t,backend:a,attrs:r}=n,{axis:o}=r;if(1===t.length)return ru({inputs:{input:t[0]},backend:a,attrs:{dim:o}});const s=t[0].shape,i=t[0].dtype;t.forEach((n=>{e.assertShapesMatch(s,n.shape,"All tensors passed to stack must have matching shapes"),e.assert(i===n.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const u=[],l=di({inputs:t.map((e=>{const n=ru({inputs:{input:e},backend:a,attrs:{dim:o}});return u.push(n),n})),backend:a,attrs:{axis:o}});return u.forEach((e=>a.disposeIntermediateTensorInfo(e))),l}};class _l{constructor(e,n,t){this.variableNames=["x"],this.outputShape=n.map(((n,t)=>n[0]+e[t]+n[1]));const a=e.length,r=or(a),o=n.map((e=>e[0])).join(","),s=n.map(((n,t)=>n[0]+e[t])).join(","),i=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,a);this.userCode=1!==a?`\n      ${r} start = ${r}(${o});\n      ${r} end = ${r}(${s});\n      uniform float value;\n\n      void main() {\n        ${r} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${r} coords = outC - start;\n          setOutput(getX(${i}));\n        }\n      }\n    `:`\n        int start = ${o};\n        int end = ${s};\n        uniform float value;\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}getCustomSetupFunc(e){return(n,t)=>{null==this.valueLoc&&(this.valueLoc=n.getUniformLocationNoThrow(t,"value")),n.gl.uniform1f(this.valueLoc,e)}}}class Dl{constructor(e,n,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n.map(((n,t)=>n[0]+e[t]+n[1]));const a=e.length,r=or(a),o=n.map((e=>e[0])).join(","),s=n.map(((n,t)=>n[0]+e[t])).join(","),i=ao("rc",a),u=ao("source",a),l=`${i[a-1]} < ${this.outputShape[a-1]}`,c=1===a?"source":`vec2(${u.slice(-2).join()})`,d=[`${r} rc = outputLoc;`,`${i[a-1]} += 1;\n       if(${l}) {\n      `,1===a?"":`}\n       rc = outputLoc;\n       ${i[a-2]} += 1;\n       if(${i[a-2]} < ${this.outputShape[a-2]}) {`,1===a?"":`  ${i[a-1]} += 1;\n         if(${l}) {`],p=1===a?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let h="";for(let e=0,n=1===a?2:4;e<n;e++)h+=`\n        ${d[e]}\n        if (${p}) {\n          result[${e}] = float(value);\n        } else {\n          ${r} source = rc - start;\n          result[${e}] = getChannel(getX(${u.join()}), ${c});\n        }\n      `;h+=1===a?"} ":"}}",this.userCode=`\n      const ${r} start = ${r}(${o});\n      const ${r} end = ${r}(${s});\n      uniform float value;\n\n      void main() {\n        ${r} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${h}\n        setOutput(result);\n      }\n    `}getCustomSetupFunc(e){return(n,t)=>{null==this.valueLoc&&(this.valueLoc=n.getUniformLocationNoThrow(t,"value")),n.gl.uniform1f(this.valueLoc,e)}}}const Ll=e=>{const{inputs:t,backend:a,attrs:r}=e,{x:o}=t,{paddings:s,constantValue:i}=r,u=n().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Dl(o.shape,s,i):new _l(o.shape,s,i),l=u.getCustomSetupFunc(i);return a.runWebGLProgram(u,[o],o.dtype,l)},Pl={kernelName:wn,backendName:"webgl",kernelFunc:Ll},Bl={kernelName:kn,backendName:"webgl",kernelFunc:Do({opSnippet:"\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",packedOpSnippet:"\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"})};const Vl={kernelName:Tn,backendName:"webgl",kernelFunc:function(n){const{inputs:t,backend:r,attrs:o}=n,{x:s}=t,{axis:i,keepDims:u}=o,l=s.shape.length,c=[],d=e.parseAxisParam(i,s.shape);let p=d;const h=a.getAxesPermutation(p,l);let f,x=s;if(null!=h&&(x=es({inputs:{x:s},backend:r,attrs:{perm:h}}),p=a.getInnerMostAxes(p.length,l),c.push(x)),a.assertAxesAreInnerMostDims("prod",p,l),r.shouldExecuteOnCPU([x])){const e=r.texData.get(x.dataId).values,{outVals:n,outShape:t,outDtype:a}=Xr(x.shape,x.dtype,e,p);f=r.makeTensorInfo(t,a,n)}else{const[n,t]=a.computeOutAndReduceShapes(x.shape,p),o=e.sizeFromShape(t),i=zo({inputs:{x:x},backend:r,attrs:{shape:[-1,o]}}),u=Ko(i,$(s.dtype),"prod",r);f=zo({inputs:{x:u},backend:r,attrs:{shape:n}}),c.push(i),c.push(u)}if(u){c.push(f);const e=a.expandShapeToKeepDim(f.shape,d);f=zo({inputs:{x:f},backend:r,attrs:{shape:e}})}return c.forEach((e=>r.disposeIntermediateTensorInfo(e))),f}},Wl=e=>{const{backend:n,attrs:t}=e,{start:a,stop:r,step:o,dtype:s}=t,i=Hr(a,r,o,s);return n.makeTensorInfo([i.length],s,i)},Ml={kernelName:En,backendName:"webgl",kernelFunc:Wl},Gl={kernelName:Nn,backendName:"webgl",kernelFunc:_o({opSnippet:"return 1.0 / x;"})},Ul={kernelName:Sn,backendName:"webgl",kernelFunc:_o({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n",packedOpSnippet:"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"})},zl={kernelName:An,backendName:"webgl",kernelFunc:_o({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",packedOpSnippet:"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"})};class Xl{constructor(e,n,t,a,r){this.variableNames=["A"],this.outputShape=[];const[o,s,i,u]=e;this.outputShape=[o,n,t,u];const l=[a&&n>1?s-1:s,a&&t>1?i-1:i],c=[a&&n>1?n-1:n,a&&t>1?t-1:t];let d;d=r?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${l[0]/c[0]},\n          ${l[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${s}.0, ${i}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${d};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class Hl{constructor(e,n,t,a,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[o,s,i,u]=e;this.outputShape=[o,n,t,u];const l=[a&&n>1?s-1:s,a&&t>1?i-1:i],c=[a&&n>1?n-1:n,a&&t>1?t-1:t];let d;d=r?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${l[0]/c[0]},\n          ${l[1]/c[1]},\n          ${l[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${s}.0, ${i}.0,\n                                     ${i}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${d};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${u-1};\n        bool hasNextRow = coords.z < ${t-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}const jl={kernelName:Fn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:a,attrs:r}=e,{images:o}=t,{alignCorners:s,halfPixelCenters:i,size:u}=r,[l,c]=u,d=n().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new Hl(o.shape,l,c,s,i):new Xl(o.shape,l,c,s,i);return a.runWebGLProgram(d,[o],"float32")}};class Kl{constructor(e,n,t){this.variableNames=["dy"],this.outputShape=[],this.outputShape=n;const[,a,r]=n,[,o,s]=e,i=[t&&o>1?a-1:a,t&&s>1?r-1:r],u=[t&&o>1?o-1:o,t&&s>1?s-1:s],l=i[0]/u[0],c=i[1]/u[1],d=1/l,p=1/c,h=2*Math.ceil(d)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${l});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${d});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${h});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${o}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${s}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${a-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${r-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const Yl={kernelName:On,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:a}=e,{images:r,dy:o}=n,{alignCorners:s}=a,i=new Kl(o.shape,r.shape,s);return t.runWebGLProgram(i,[o],o.dtype)}};class ql{constructor(e,n,t,a,r){this.variableNames=["A"],this.outputShape=[];const[o,s,i,u]=e;this.outputShape=[o,n,t,u];const l=[a&&n>1?s-1:s,a&&t>1?i-1:i],c=[a&&n>1?n-1:n,a&&t>1?t-1:t],d=a?"0.5":"0.0";let p;p=r?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${l[0]/c[0]},\n          ${l[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${s}.0, ${i}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${p};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${d})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}const Ql={kernelName:_n,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:a}=e,{images:r}=n,{alignCorners:o,halfPixelCenters:s,size:i}=a,[u,l]=i,c=new ql(r.shape,u,l,o,s);return t.runWebGLProgram(c,[r],r.dtype)}};class Zl{constructor(e,n,t){this.variableNames=["dy"],this.outputShape=[],this.outputShape=n;const[,a,r]=n,[,o,s]=e,i=[t&&o>1?a-1:a,t&&s>1?r-1:r],u=[t&&o>1?o-1:o,t&&s>1?s-1:s],l=i[0]/u[0],c=i[1]/u[1],d=1/l,p=1/c,h=2*Math.ceil(d)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${l});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${d});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${h});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${o}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${s}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${i[0]}) *\n                (float(dyR) / float(${u[0]}));\n\n            float sourceFracCol =\n                float(${i[1]}) *\n                  (float(dyC) / float(${u[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${a}) - 1),\n                ${t} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${r}) - 1),\n                ${t} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const Jl={kernelName:Dn,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:a}=e,{images:r,dy:o}=n,{alignCorners:s}=a,i=new Zl(o.shape,r.shape,s);return t.runWebGLProgram(i,[o],o.dtype)}};class ec{constructor(e,n){this.variableNames=["x"];const t=e.length;if(t>4)throw new Error(`WebGL backend: Reverse of rank-${t} tensor is not yet supported`);if(this.outputShape=e,1===t)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${e[0]} - coord - 1));\n        }\n      `);const a=e.map(((t,a)=>(t=>-1!==n.indexOf(t)&&1!==e[t]?`${e[t]} - coords[${t}] - 1`:`coords[${t}]`)(a))).join(","),r=or(t);this.userCode=`\n      void main() {\n        ${r} coords = getOutputCoords();\n        setOutput(getX(${a}));\n      }\n    `}}class nc{constructor(e,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const t=e.length;if(t>4)throw new Error(`WebGL backend: Reverse of rank-${t} tensor is not yet supported`);this.outputShape=e;const a=ao("rc",t),r=`${a[t-1]} + 1 < ${this.outputShape[t-1]}`,o=`${a[t-2]} + 1 < ${this.outputShape[t-2]}`,s=or(t);function i(t){const a=e.map(((a,r)=>function(t,a){return-1!==n.indexOf(t)&&1!==e[t]?`${e[t]} - ${a[t]} - 1`:`${a[t]}`}(r,t)));return`getChannel(getX(${a.join(",")}), vec2(${a.slice(-2).join(",")}))`}this.userCode=1===t?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${e[0]} - rc - 1),\n            ${e[0]} - rc - 1);\n          if(${r}){\n              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),\n                ${e[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${s} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function(e){return i(e)}(a.slice())};\n          if(${r}){\n            result.g = ${function(e){return e[t-1]="("+e[t-1]+" + 1)",i(e)}(a.slice())};\n          }\n          if(${o}) {\n            result.b = ${function(e){return e[t-2]="("+e[t-2]+" + 1)",i(e)}(a.slice())};\n            if(${r}) {\n              result.a = ${function(e){return e[t-1]="("+e[t-1]+" + 1)",e[t-2]="("+e[t-2]+" + 1)",i(e)}(a.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}const tc={kernelName:Ln,backendName:"webgl",kernelFunc:function(t){const{inputs:a,backend:r,attrs:o}=t,{x:s}=a,{dims:i}=o,u=s.shape.length,l=e.parseAxisParam(i,s.shape);if(0===u)return Ro({inputs:{x:s},backend:r});const c=n().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new nc(s.shape,l):new ec(s.shape,l);return r.runWebGLProgram(c,[s],s.dtype)}};class ac{constructor(e,n){this.variableNames=["Image"],this.outputShape=[];const t=e[1],a=e[2];this.outputShape=e;let r="";r="number"==typeof n?`float outputValue = ${n.toFixed(2)};`:`\n        vec3 fill = vec3(${n.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        uniform vec4 params;\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${r}\n          if(coordX >= 0 && coordX < ${a} && coordY >= 0 && coordY < ${t}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}getCustomSetupFunc(e,n,t,a){return(r,o)=>{null==this.paramsLoc&&(this.paramsLoc=r.getUniformLocationNoThrow(o,"params")),r.gl.uniform4f(this.paramsLoc,e,n,t,a)}}}const rc={kernelName:Pn,backendName:"webgl",kernelFunc:({inputs:e,attrs:n,backend:t})=>{const{image:r}=e,{radians:o,fillValue:s,center:i}=n,u=t,l=new ac(r.shape,s),[c,d]=a.getImageCenter(i,r.shape[1],r.shape[2]),p=l.getCustomSetupFunc(c,d,Math.sin(o),Math.cos(o));return u.runWebGLProgram(l,[r],r.dtype,p)}},oc={kernelName:Bn,backendName:"webgl",kernelFunc:_o({opSnippet:"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"})},sc={kernelName:Vn,backendName:"webgl",kernelFunc:_o({opSnippet:"return inversesqrt(x);",cpuKernelImpl:jr})};class ic{constructor(e,n,t,a,r,o,s=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=o;const i=or(r.length),u=or(o.length);let l="";1===t?l="i":2===t&&(l="i, j");const c=`getIndices(${l})`;let d="";1===a?d="i":2===a&&(d="i, coords[1]");const p=`getUpdates(${d})`,h=n>1?"strides[j]":"strides";this.userCode=`\n        ${i} strides = ${i}(${r});\n\n        void main() {\n          ${u} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${e}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${n}; j++) {\n              int index = round(${c});\n              flattenedIndex += index * ${h};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${p};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `}}const uc={kernelName:Wn,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:r}=e,{indices:o,updates:s}=n,{shape:i}=r,{sliceRank:u,numUpdates:l,sliceSize:c,strides:d,outputSize:p}=a.calculateShapes(s,o,i),h=[p/c,c];if(0===p)return t.makeTensorInfo(i,o.dtype);const f=zo({inputs:{x:o},backend:t,attrs:{shape:[l,u]}}),x=zo({inputs:{x:s},backend:t,attrs:{shape:[l,c]}}),m=t.makeTensorInfo([],"float32",new Float32Array([0])),g=new ic(l,u,f.shape.length,x.shape.length,d,h),b=t.runWebGLProgram(g,[x,f,m],x.dtype),C=zo({inputs:{x:b},backend:t,attrs:{shape:i}});return t.disposeIntermediateTensorInfo(f),t.disposeIntermediateTensorInfo(x),t.disposeIntermediateTensorInfo(b),t.disposeIntermediateTensorInfo(m),C}};class lc{constructor(e,n,t){let a,r;if(this.variableNames=["c","a","b"],this.outputShape=n,t>4)throw Error(`Where for rank ${t} is not yet supported`);if(1===t)r="resRC",a="resRC";else{const t=["resRC.x","resRC.y","resRC.z","resRC.w"],o=[],s=[];for(let a=0;a<n.length;a++)s.push(`${t[a]}`),a<e&&o.push(`${t[a]}`);a=o.join(),r=s.join()}const o=or(t);this.userCode=`\n      void main() {\n        ${o} resRC = getOutputCoords();\n        float cVal = getC(${a});\n        if (cVal >= 1.0) {\n          setOutput(getA(${r}));\n        } else {\n          setOutput(getB(${r}));\n        }\n      }\n    `}}const cc={kernelName:Mn,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t}=e,{condition:a,t:r,e:s}=n,i=new lc(a.shape.length,r.shape,r.shape.length);return t.runWebGLProgram(i,[a,r,s],o(r.dtype,s.dtype))}},dc={kernelName:Gn,backendName:"webgl",kernelFunc:_o({opSnippet:`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${a.SELU_SCALEALPHA};\n  float scale = ${a.SELU_SCALE};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`})},pc={kernelName:Un,backendName:"webgl",kernelFunc:_o({opSnippet:"return 1.0 / (1.0 + exp(-1.0 * x));"})},hc={kernelName:zn,backendName:"webgl",kernelFunc:_o({opSnippet:"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"})},fc={kernelName:Xn,backendName:"webgl",kernelFunc:_o({opSnippet:"if (isnan(x)) return x;\n  return sin(x);\n"})},xc={kernelName:Hn,backendName:"webgl",kernelFunc:_o({opSnippet:"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"})},mc={kernelName:jn,backendName:"webgl",kernelFunc:_o({opSnippet:"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"})},gc={kernelName:Kn,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:r,attrs:o}=n,{x:s}=t,{blockShape:i,paddings:u}=o;e.assert(s.shape.length<=4,(()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet"));const l=i.reduce(((e,n)=>e*n)),c=[[0,0]];c.push(...u);for(let e=1+i.length;e<s.shape.length;++e)c.push([0,0]);const d=[],p=Ll({inputs:{x:s},backend:r,attrs:{paddings:c,constantValue:0}}),h=a.getReshaped(p.shape,i,l,!1),f=a.getPermuted(h.length,i.length,!1),x=a.getReshapedPermuted(p.shape,i,l,!1),m=zo({inputs:{x:p},backend:r,attrs:{shape:h}}),g=es({inputs:{x:m},backend:r,attrs:{perm:f}}),b=zo({inputs:{x:g},backend:r,attrs:{shape:x}});return d.push(p),d.push(m),d.push(g),d.forEach((e=>r.disposeIntermediateTensorInfo(e))),b}};const bc={kernelName:Yn,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:r}=e,{sparseIndices:o,sparseValues:s,defaultValue:i}=n,{outputShape:u}=r,{sliceRank:l,numUpdates:c,strides:d,outputSize:p}=a.calculateShapes(s,o,u),h=new ic(c,l,o.shape.length,s.shape.length,d,[p,1],!1),f=t.runWebGLProgram(h,[s,o,i],s.dtype),x=zo({inputs:{x:f},backend:t,attrs:{shape:u}});return t.disposeIntermediateTensorInfo(f),x}};const Cc={kernelName:qn,backendName:"webgl",kernelFunc:function(n){const{inputs:t,backend:r,attrs:o}=n,{x:s}=t,{numOrSizeSplits:i,axis:u}=o,l=e.parseAxisParam(u,s.shape)[0],c=a.prepareSplitSize(s,i,l),d=s.shape.length,p=new Array(d).fill(0),h=s.shape.slice();return c.map((e=>{const n=[...h];n[l]=e;const t=Ms({inputs:{x:s},backend:r,attrs:{begin:p,size:n}});return p[l]+=e,t}))}},vc={kernelName:Qn,backendName:"webgl",kernelFunc:_o({opSnippet:"return sqrt(x);"})},$c={kernelName:Zn,backendName:"webgl",kernelFunc:_o({opSnippet:"return x * x;"})},Ic={kernelName:Jn,backendName:"webgl",kernelFunc:Do({opSnippet:"return (a - b) * (a - b);",packedOpSnippet:"return (a - b) * (a - b);"})};const yc={kernelName:et,backendName:"webgl",kernelFunc:function({inputs:e,attrs:n,backend:t}){const{x:a}=e,r=`if (isnan(x)) return x;\n    return x > 0.0 ? 1.0 : float(${n.alpha});\n  `,o=new co(a.shape,r);return t.runWebGLProgram(o,[a],a.dtype)}};class Rc{constructor(e,n,t){this.variableNames=["x"],this.outputShape=t;const a=t.length,r=or(t.length),o=or(t.length);let s="";if(1===a)s="coords * strides + begin";else{let e=0;s=t.map(((n,a)=>(e++,1===t.length?`coords * strides[${a}] + begin[${a}]`:`coords[${e-1}] * strides[${a}] + begin[${a}]`))).join(",")}this.userCode=`\n      ${r} begin = ${r}(${e});\n      ${r} strides = ${r}(${n});\n\n      void main() {\n        ${o} coords = getOutputCoords();\n        setOutput(getX(${s}));\n      }\n    `}}const wc={kernelName:nt,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:a}=e,{x:o}=n,{begin:i,end:u,strides:l,beginMask:c,endMask:d,ellipsisMask:p,newAxisMask:h,shrinkAxisMask:f}=a,{nonStrided:x,$begin:m,$strides:g,size:b,newShape:C,outShape:v}=s.sliceInfo(o.shape,i,u,l,c,d,p,h,f),$=zo({inputs:{x:o},backend:t,attrs:{shape:C}});let I;if(x){const e=Ms({inputs:{x:$},backend:t,attrs:{begin:m,size:b}});I=zo({inputs:{x:e},backend:t,attrs:{shape:v}}),t.disposeIntermediateTensorInfo(e)}else if(v.some((e=>0===e)))I=t.makeTensorInfo(v,o.dtype,[]);else{if(t.shouldExecuteOnCPU([$])){const e=t.texData.get($.dataId).values,n=r($.shape,$.dtype,e),a=qr(v,n,g,m);I=t.makeTensorInfo(v,$.dtype,a.values)}else{const e=new Rc(m,g,v);I=t.runWebGLProgram(e,[$],$.dtype)}}const y=zo({inputs:{x:I},backend:t,attrs:{shape:v}});return t.disposeIntermediateTensorInfo($),t.disposeIntermediateTensorInfo(I),y}},kc={kernelName:tt,backendName:"webgl",kernelFunc:_o({opSnippet:"return tan(x);"})},Tc={kernelName:at,backendName:"webgl",kernelFunc:_o({opSnippet:"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"})};class Ec{constructor(e,n){this.variableNames=["A"];const t=new Array(e.length);for(let a=0;a<t.length;a++)t[a]=e[a]*n[a];this.outputShape=t,this.rank=t.length;const a=or(this.rank),r=function(e){const n=e.length;if(n>5)throw Error(`Tile for rank ${n} is not yet supported`);if(1===n)return`imod(resRC, ${e[0]})`;const t=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],a=[];for(let n=0;n<e.length;n++)a.push(`imod(${t[n]}, ${e[n]})`);return a.join()}(e);this.userCode=`\n      void main() {\n        ${a} resRC = getOutputCoords();\n        setOutput(getA(${r}));\n      }\n    `}}function Nc(n){const{inputs:t,backend:a,attrs:o}=n,{x:s}=t,{reps:i}=o;if("string"===s.dtype){const n=a.readSync(s.dataId).map((n=>e.decodeString(n))),t=r(s.shape,s.dtype,n),o=Zr(t,i);return a.makeTensorInfo(o.shape,o.dtype,o.values)}const u=new Ec(s.shape,i);return a.runWebGLProgram(u,[s],s.dtype)}const Sc={kernelName:rt,backendName:"webgl",kernelFunc:Nc};const Ac={kernelName:ot,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:a}=e,{x:r}=n,{k:o,sorted:s}=a,i=t.readSync(r.dataId),[u,l]=Jr(i,r.shape,r.dtype,o,s);return[t.makeTensorInfo(u.shape,u.dtype,u.values),t.makeTensorInfo(l.shape,l.dtype,l.values)]}};class Fc{constructor(e,n,t,a,r,o){this.variableNames=["Image","Transforms"],this.outputShape=o;const s="nearest"===t?1:2;let i;switch(a){case"constant":i=1;break;case"reflect":i=2;break;case"wrap":i=3;break;case"nearest":i=4;break;default:i=1}this.userCode=`\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${i} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${i} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${i} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${e} && 0 <= coordX && coordX < ${n}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${r});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${r});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${n}));\n                float mapY = mapCoord(inY, float(${e}));\n\n                if (${s} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `}}const Oc={kernelName:st,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:a}=e,{image:r,transforms:o}=n,{interpolation:s,fillMode:i,fillValue:u,outputShape:l}=a,[c,d,p,h]=r.shape,[f,x]=null!=l?l:[d,p],m=new Fc(d,p,s,i,u,[c,f,x,h]);return t.runWebGLProgram(m,[r,o],"float32")}};const _c={kernelName:it,backendName:"webgl",kernelFunc:function(e){const{inputs:n,attrs:t,backend:a}=e,{axis:r}=t,{x:o}=n;da(o,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const s=a.readSync(o.dataId),{outputValues:i,outputShape:u,indices:l}=no(s,r,o.shape,o.dtype);return[a.makeTensorInfo(u,o.dtype,i),a.makeTensorInfo([l.length],"int32",l)]}};const Dc={kernelName:ut,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:a}=e,{value:r}=n;let{axis:o}=a;o<0&&(o+=r.shape.length);const s=r,i=s.shape.length,u=r.shape[o],l=new Array(i-1);let c=0;for(let e=0;e<i;e++)e!==o&&(l[c++]=s.shape[e]);const d=[],p=new Array(i).fill(0),h=s.shape.slice();h[o]=1;const f=new Array(u);for(let e=0;e<f.length;e++){p[o]=e;const n=Ms({inputs:{x:s},backend:t,attrs:{begin:p,size:h}}),a=zo({inputs:{x:n},backend:t,attrs:{shape:l}});f[e]=a,d.push(n)}return d.forEach((e=>t.disposeIntermediateTensorInfo(e))),f}};class Lc{constructor(e,n){this.variableNames=["x","segmentIds"];const t=e.windowSize,a=e.batchSize,r=e.inSize,o=e.numSegments,s=o*Math.ceil(r/t);this.outputShape=[a,s];const i=4*Math.floor(t/4),u=t%4,l="\n        sumValue += dot(values, segFilter);\n    ";let c="";r%t>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return initializationValue;\n        }\n      `);let d="";r%t>0&&(d=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${d}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${o})) * float(${t}));\n        int currentSeg = int(mod(float(outIdx), float(${o})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${i}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${l}\n        }\n\n        int inIdx = inOffset + ${i};\n        if (${1===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${l}\n        } else if (${2===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${l}\n        } else if (${3===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${l}\n        }\n        setOutput(sumValue);\n      }\n    `}}const Pc=[Xu,ju,as,rs,os,ss,us,ds,ps,hs,Cs,vs,$s,Is,Rs,ys,ws,Ns,Es,Fs,Os,_s,Ps,Us,zs,Ys,Qs,ei,ai,To,pi,yi,Ri,bi,ki,Ti,wi,Ei,Ni,Ai,Di,Li,Bi,zi,Xi,Mi,ji,Yi,qi,Qi,Zi,Ji,eu,au,ou,iu,cu,hu,xu,gu,bu,$u,yu,Ru,ku,Eu,Nu,Su,wo,Au,ui,Fu,Ou,_u,So,Du,Lu,Pu,Vu,Bu,Wu,Mu,Gu,Yu,Zu,Qu,nl,tl,al,qu,rl,ol,sl,ll,cl,Cl,Uo,$l,yl,wl,Tl,Hs,Nl,Fl,Ol,Pl,Bl,Oo,Vl,Ml,Ks,hl,Gl,zl,Ul,Xo,jl,Yl,Ql,Jl,tc,rc,oc,sc,uc,cc,dc,pc,hc,fc,xc,Gs,bl,mc,gc,bc,Cc,vc,$c,Ic,yc,wc,ml,Jo,kc,Tc,Sc,Ac,Oc,ns,_c,Dc,{kernelName:lt,backendName:"webgl",kernelFunc:function(n){const{inputs:t,backend:r,attrs:o}=n,{x:s,segmentIds:i}=t,{numSegments:u}=o,l=s.shape.length,c=[];let d=0;const p=a.getAxesPermutation([d],l);let h=s;null!=p&&(h=es({inputs:{x:s},backend:r,attrs:{perm:p}}),c.push(h),d=a.getInnerMostAxes(1,l)[0]);const f=a.segment_util.computeOutShape(h.shape,d,u),x=e.sizeFromShape([h.shape[d]]),m=zo({inputs:{x:h},backend:r,attrs:{shape:[-1,x]}});c.push(m);const g=$(s.dtype),b=(e,n,t,o,s)=>{const i=e.shape[0],u=e.shape[1],l=a.segment_util.segOpComputeOptimalWindowSize(u,s),d=new Lc({windowSize:l,inSize:u,batchSize:i,numSegments:s},n),p=r.compileAndRun(d,[e,t],o);if(c.push(p),p.shape[1]===s)return p;const h=Wl({backend:r,attrs:{start:0,stop:s,step:1,dtype:"float32"}}),f=Nc({inputs:{x:h},backend:r,attrs:{reps:[u/l]}});c.push(h),c.push(f);return b(p,n,f,o,s)},C=zo({inputs:{x:b(m,"unsortedSegmentSum",i,g,u)},backend:r,attrs:{shape:f}});let v=C;if(null!=p){c.push(C);const e=a.getUndoAxesPermutation(p);v=es({inputs:{x:v},backend:r,attrs:{perm:e}})}return c.forEach((e=>r.disposeIntermediateTensorInfo(e))),v}},Al];for(const e of Pc)ct(e);export{ja as GPGPUContext,bo as MathBackendWebGL,vo as forceHalfFloat,Ha as gpgpu_util,ht as setWebGLContext,Co as version_webgl,$o as webgl,pa as webgl_util};
//# sourceMappingURL=tf-backend-webgl.fesm.min.js.map
