{"version":3,"file":"tf-backend-cpu.es2017.min.js","sources":["../src/cpu_util.ts","../src/backend_cpu.ts","../src/kernels/Abs.ts","../src/utils/binary_impl.ts","../src/kernels/Complex.ts","../src/utils/zeros_impl.ts","../src/kernels/Identity.ts","../src/kernels/Real.ts","../src/kernels/Cast.ts","../src/utils/binary_utils.ts","../src/kernels/Add.ts","../src/kernels/Bincount_impl.ts","../src/utils/unary_impl.ts","../src/utils/unary_utils.ts","../src/kernels/Ceil.ts","../src/kernels/Concat_impl.ts","../src/kernels/Exp.ts","../src/kernels/Expm1.ts","../src/kernels/Floor.ts","../src/kernels/GatherV2_impl.ts","../src/kernels/Greater.ts","../src/kernels/Less.ts","../src/kernels/LinSpace_impl.ts","../src/kernels/Log.ts","../src/kernels/Max_impl.ts","../src/kernels/Maximum.ts","../src/kernels/Minimum.ts","../src/kernels/Multiply.ts","../src/kernels/Neg.ts","../src/kernels/NotEqual.ts","../src/kernels/Transpose_impl.ts","../src/kernels/Transpose.ts","../src/kernels/Prod.ts","../src/kernels/Range_impl.ts","../src/kernels/Rsqrt.ts","../src/kernels/Slice.ts","../src/kernels/SquaredDifference.ts","../src/kernels/StridedSlice_impl.ts","../src/kernels/Sub.ts","../src/kernels/Tile_impl.ts","../src/kernels/TopK_impl.ts","../src/kernels/Unique_impl.ts","../src/base.ts","../src/kernels/Elu.ts","../src/kernels/LeakyRelu.ts","../src/kernels/Prelu.ts","../src/kernels/Relu.ts","../src/kernels/Relu6.ts","../src/utils/fused_utils.ts","../src/kernels/Reshape.ts","../src/kernels/BatchMatMul.ts","../src/kernels/_FusedMatMul.ts","../src/kernels/Acos.ts","../src/kernels/Acosh.ts","../src/kernels/AddN.ts","../src/kernels/All.ts","../src/kernels/Any.ts","../src/kernels/ArgMax.ts","../src/kernels/ArgMin.ts","../src/kernels/Asin.ts","../src/kernels/Asinh.ts","../src/kernels/Atan.ts","../src/kernels/Atan2.ts","../src/kernels/Atanh.ts","../src/utils/pool_utils.ts","../src/kernels/AvgPool.ts","../src/kernels/AvgPool3D.ts","../src/kernels/AvgPool3DGrad.ts","../src/kernels/AvgPoolGrad.ts","../src/kernels/BatchNorm.ts","../src/kernels/BatchToSpaceND.ts","../src/kernels/Bincount.ts","../src/kernels/Clip.ts","../src/kernels/ComplexAbs.ts","../src/kernels/Imag.ts","../src/kernels/Concat.ts","../src/kernels/Conv2D.ts","../src/kernels/Conv2DBackpropFilter.ts","../src/kernels/Conv2DBackpropInput.ts","../src/kernels/Conv3D.ts","../src/kernels/Conv3DBackpropFilterV2.ts","../src/kernels/Conv3DBackpropInputV2.ts","../src/kernels/Cos.ts","../src/kernels/Cosh.ts","../src/kernels/CropAndResize.ts","../src/kernels/Cumsum.ts","../src/kernels/DenseBincount.ts","../src/kernels/DepthToSpace.ts","../src/kernels/DepthwiseConv2dNative.ts","../src/kernels/DepthwiseConv2dNativeBackpropFilter.ts","../src/kernels/DepthwiseConv2dNativeBackpropInput.ts","../src/kernels/Diag.ts","../src/kernels/Dilation2D.ts","../src/kernels/Dilation2DBackpropFilter.ts","../src/kernels/Dilation2DBackpropInput.ts","../src/kernels/Sum.ts","../src/kernels/Einsum.ts","../src/kernels/EluGrad.ts","../src/kernels/Equal.ts","../src/kernels/Erf.ts","../src/kernels/ExpandDims.ts","../src/kernels/RealDiv.ts","../src/utils/fft_utils.ts","../src/kernels/FFT.ts","../src/kernels/Fill.ts","../src/kernels/FlipLeftRight.ts","../src/kernels/FloorDiv.ts","../src/kernels/FusedConv2D.ts","../src/kernels/FusedDepthwiseConv2D.ts","../src/kernels/GatherNd.ts","../src/kernels/GatherV2.ts","../src/kernels/GreaterEqual.ts","../src/kernels/IFFT.ts","../src/kernels/IsFinite.ts","../src/kernels/IsInf.ts","../src/kernels/IsNaN.ts","../src/kernels/LessEqual.ts","../src/kernels/LinSpace.ts","../src/kernels/Log1p.ts","../src/kernels/LogicalAnd.ts","../src/kernels/LogicalNot.ts","../src/kernels/LogicalOr.ts","../src/kernels/LRN.ts","../src/kernels/LRNGrad.ts","../src/kernels/Max.ts","../src/kernels/MaxPool.ts","../src/kernels/MaxPool3D.ts","../src/kernels/MaxPool3DGrad.ts","../src/kernels/MaxPoolGrad.ts","../src/kernels/MaxPoolWithArgmax.ts","../src/kernels/MaxPoolWithArgmax_impl.ts","../src/kernels/Mean.ts","../src/kernels/Min.ts","../src/kernels/MirrorPad.ts","../src/kernels/Mod.ts","../src/kernels/Softmax.ts","../src/kernels/Multinomial.ts","../src/kernels/NonMaxSuppressionV3.ts","../src/kernels/NonMaxSuppressionV4.ts","../src/kernels/NonMaxSuppressionV5.ts","../src/kernels/OneHot.ts","../src/kernels/ZerosLike.ts","../src/kernels/OnesLike.ts","../src/kernels/Pack.ts","../src/kernels/PadV2.ts","../src/kernels/Pow.ts","../src/kernels/Range.ts","../src/kernels/Reciprocal.ts","../src/kernels/ResizeBilinear.ts","../src/kernels/ResizeBilinearGrad.ts","../src/kernels/ResizeNearestNeighbor.ts","../src/kernels/ResizeNearestNeighborGrad.ts","../src/kernels/Reverse.ts","../src/kernels/RotateWithOffset.ts","../src/kernels/Round.ts","../src/kernels/Scatter_impl.ts","../src/kernels/ScatterNd.ts","../src/kernels/Select.ts","../src/kernels/Selu.ts","../src/kernels/Sigmoid.ts","../src/kernels/Sign.ts","../src/kernels/Sin.ts","../src/kernels/Sinh.ts","../src/kernels/Softplus.ts","../src/kernels/SpaceToBatchND.ts","../src/kernels/SparseToDense.ts","../src/kernels/SplitV.ts","../src/kernels/Sqrt.ts","../src/kernels/Square.ts","../src/kernels/Step.ts","../src/kernels/StridedSlice.ts","../src/kernels/Tan.ts","../src/kernels/Tanh.ts","../src/kernels/Tile.ts","../src/kernels/TopK.ts","../src/kernels/Transform.ts","../src/kernels/Unique.ts","../src/kernels/Unpack.ts","../src/kernels/UnsortedSegmentSum.ts","../src/register_all_kernels.ts","../src/version.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, util} from '@tensorflow/tfjs-core';\n\nexport function assertNotComplex(\n    tensor: TensorInfo|TensorInfo[], opName: string): void {\n  if (!Array.isArray(tensor)) {\n    tensor = [tensor];\n  }\n  tensor.forEach(t => {\n    if (t != null) {\n      util.assert(\n          t.dtype !== 'complex64',\n          () => `${\n              opName} does not support complex64 tensors in the CPU backend.`);\n    }\n  });\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendTimingInfo, buffer, DataStorage, DataType, DataValues, engine, env, kernel_impls, KernelBackend, Rank, ShapeMap, Tensor, Tensor2D, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nconst whereImpl = kernel_impls.whereImpl;\nimport {assertNotComplex} from './cpu_util';\n\ninterface DataId {}\n\nexport interface TensorData<D extends DataType> {\n  values?: backend_util.BackendValues;\n  dtype: D;\n  // For complex numbers, the real and imaginary parts are stored as their own\n  // individual tensors, with a parent joining the two with the\n  // complexTensorInfos field.\n  complexTensorInfos?: {real: TensorInfo, imag: TensorInfo};\n  // refCount keeps track of how many tensors reference it. Used for memory\n  // management.\n  refCount: number;\n}\n\nexport class MathBackendCPU extends KernelBackend {\n  public blockSize = 48;\n\n  data: DataStorage<TensorData<DataType>>;\n  private firstUse = true;\n  private static nextDataId = 0;\n  private nextDataId(): number {\n    return MathBackendCPU.nextDataId++;\n  }\n\n  constructor() {\n    super();\n    this.data = new DataStorage(this, engine());\n  }\n\n  write(values: backend_util.BackendValues, shape: number[], dtype: DataType):\n      DataId {\n    if (this.firstUse) {\n      this.firstUse = false;\n      if (env().get('IS_NODE')) {\n        backend_util.warn(\n            '\\n============================\\n' +\n            'Hi there ðŸ‘‹. Looks like you are running TensorFlow.js in ' +\n            'Node.js. To speed things up dramatically, install our node ' +\n            'backend, which binds to TensorFlow C++, by running ' +\n            'npm i @tensorflow/tfjs-node, ' +\n            'or npm i @tensorflow/tfjs-node-gpu if you have CUDA. ' +\n            'Then call require(\\'@tensorflow/tfjs-node\\'); (-gpu ' +\n            'suffix for CUDA) at the start of your program. ' +\n            'Visit https://github.com/tensorflow/tfjs-node for more details.' +\n            '\\n============================');\n      }\n    }\n    const dataId = {id: this.nextDataId()};\n\n    this.data.set(dataId, {values, dtype, refCount: 1});\n\n    return dataId;\n  }\n\n  /**\n   * Create a data bucket in cpu backend.\n   * @param shape Shape of the `TensorInfo`.\n   * @param dtype DType of the `TensorInfo`.\n   * @param values The value of the `TensorInfo` stored as a flattened array.\n   */\n  makeTensorInfo(\n      shape: number[], dtype: DataType,\n      values?: backend_util.BackendValues|string[]): TensorInfo {\n    let outId;\n    if (dtype === 'string' && values != null && values.length > 0 &&\n        util.isString(values[0])) {\n      const encodedValues =\n          (values as {} as string[]).map(d => util.encodeString(d));\n\n      outId = this.write(encodedValues, shape, dtype);\n    } else {\n      outId = this.write(values as TypedArray, shape, dtype);\n    }\n\n    return {dataId: outId, shape, dtype};\n  }\n\n  /** Return refCount of a `TensorData`. */\n  refCount(dataId: DataId): number {\n    if (this.data.has(dataId)) {\n      const tensorData = this.data.get(dataId);\n      return tensorData.refCount;\n    }\n    return 0;\n  }\n\n  /** Increase refCount of a `TensorData`. */\n  incRef(dataId: DataId): void {\n    const tensorData = this.data.get(dataId);\n    tensorData.refCount++;\n  }\n\n  /** Decrease refCount of a `TensorData`. */\n  decRef(dataId: DataId): void {\n    if (this.data.has(dataId)) {\n      const tensorData = this.data.get(dataId);\n      tensorData.refCount--;\n    }\n  }\n\n  move(\n      dataId: DataId, values: backend_util.BackendValues, shape: number[],\n      dtype: DataType, refCount: number): void {\n    this.data.set(dataId, {values, dtype, refCount});\n  }\n\n  numDataIds(): number {\n    return this.data.numDataIds();\n  }\n\n  async read(dataId: DataId): Promise<backend_util.BackendValues> {\n    return this.readSync(dataId);\n  }\n  readSync(dataId: DataId): backend_util.BackendValues {\n    const {dtype, complexTensorInfos} = this.data.get(dataId);\n\n    if (dtype === 'complex64') {\n      const realValues =\n          this.readSync(complexTensorInfos.real.dataId) as Float32Array;\n      const imagValues =\n          this.readSync(complexTensorInfos.imag.dataId) as Float32Array;\n      return backend_util.mergeRealAndImagArrays(realValues, imagValues);\n    }\n\n    return this.data.get(dataId).values;\n  }\n\n  bufferSync<R extends Rank>(t: TensorInfo): TensorBuffer<R> {\n    const data = this.readSync(t.dataId);\n    let decodedData = data as DataValues;\n    if (t.dtype === 'string') {\n      try {\n        // Decode the bytes into string.\n        decodedData = (data as Uint8Array[]).map(d => util.decodeString(d));\n      } catch {\n        throw new Error('Failed to decode encoded string bytes into utf-8');\n      }\n    }\n    return buffer(t.shape as ShapeMap[R], t.dtype, decodedData) as\n        TensorBuffer<R>;\n  }\n\n  makeOutput<T extends Tensor>(\n      values: backend_util.BackendValues, shape: number[], dtype: DataType): T {\n    const dataId = this.write(values, shape, dtype);\n    return engine().makeTensorFromDataId(dataId, shape, dtype, this) as T;\n  }\n\n  /**\n   * Dispose the memory if the dataId has 0 refCount. Return true if the memory\n   * is released or memory is not managed in this backend, false if memory is\n   * not cleared.\n   * @param dataId\n   * @oaram force Optional, remove the data regardless of refCount\n   */\n  disposeData(dataId: DataId, force = false): boolean {\n    if (this.data.has(dataId)) {\n      this.data.get(dataId).refCount--;\n      if (!force && this.data.get(dataId).refCount > 0) {\n        return false;\n      }\n\n      const {complexTensorInfos} = this.data.get(dataId);\n\n      if (complexTensorInfos != null) {\n        this.disposeData(complexTensorInfos.real.dataId, true);\n        this.disposeData(complexTensorInfos.imag.dataId, true);\n      }\n\n      this.data.delete(dataId);\n    }\n    return true;\n  }\n\n  disposeIntermediateTensorInfo(tensorInfo: TensorInfo): void {\n    this.disposeData(tensorInfo.dataId);\n  }\n\n  async time(f: () => void): Promise<BackendTimingInfo> {\n    const start = util.now();\n    f();\n    const kernelMs = util.now() - start;\n    return {kernelMs};\n  }\n\n  memory() {\n    return {\n      // Unreliable due to automatic gc. The numbers above are cumulative.\n      unreliable: true,\n      reasons:\n          ['The reported memory is an upper bound. Due to automatic garbage ' +\n           'collection, the true allocated memory may be less.']\n    };\n  }\n\n  where(condition: Tensor): Tensor2D {\n    assertNotComplex([condition], 'where');\n\n    const condVals = this.readSync(condition.dataId) as TypedArray;\n    return whereImpl(condition.shape, condVals);\n  }\n\n  dispose() {}\n\n  floatPrecision(): 16|32 {\n    return 32;\n  }\n\n  /** Returns the smallest representable number.  */\n  epsilon(): number {\n    return super.epsilon();\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Abs, AbsInputs, KernelConfig, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function simpleAbsImpl(vals: TypedArray): Float32Array {\n  const resultValues = new Float32Array(vals.length);\n  for (let i = 0; i < vals.length; ++i) {\n    resultValues[i] = Math.abs(vals[i]);\n  }\n  return resultValues;\n}\n\nexport const abs = (args: {inputs: AbsInputs, backend: MathBackendCPU}) => {\n  const {x} = args.inputs;\n  const cpuBackend = args.backend;\n\n  assertNotComplex(x, 'abs');\n\n  let resultValues = new Float32Array(util.sizeFromShape(x.shape));\n  const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n  resultValues = simpleAbsImpl(values);\n\n  return cpuBackend.makeOutput(resultValues, x.shape, 'float32');\n};\n\nexport const absConfig: KernelConfig = {\n  kernelName: Abs,\n  backendName: 'cpu',\n  kernelFunc: abs as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, NumericDataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {SimpleBinaryKernelImpl, SimpleBinaryOperation} from './binary_types';\n\n/**\n * Template that creates implementation for binary ops. Supports broadcast.\n */\nexport function createSimpleBinaryKernelImpl(op: SimpleBinaryOperation):\n    SimpleBinaryKernelImpl {\n  return (aShape: number[], bShape: number[], aVals: TypedArray,\n          bVals: TypedArray, dtype: DataType): [TypedArray, number[]] => {\n    const newShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n\n    const resultRank = newShape.length;\n    const resultStrides = util.computeStrides(newShape);\n    const resultSize = util.sizeFromShape(newShape);\n\n    const result =\n        util.getTypedArrayFromDType(dtype as NumericDataType, resultSize);\n\n    const aRank = aShape.length;\n    const bRank = bShape.length;\n\n    const aStrides = util.computeStrides(aShape);\n    const bStrides = util.computeStrides(bShape);\n\n    const aBroadcastDims = backend_util.getBroadcastDims(aShape, newShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(bShape, newShape);\n\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < result.length; ++i) {\n        result[i] = op(aVals[i % aVals.length], bVals[i % bVals.length]);\n      }\n    } else {\n      for (let i = 0; i < result.length; ++i) {\n        const loc = util.indexToLoc(i, resultRank, resultStrides);\n\n        const aLoc = loc.slice(-aRank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n\n        const bLoc = loc.slice(-bRank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n\n        result[i] = op(aVals[aIndex], bVals[bIndex]);\n      }\n    }\n\n    return [result, newShape];\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Complex, ComplexInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function complex(args: {inputs: ComplexInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {real, imag} = inputs;\n\n  const realVals = backend.data.get(real.dataId).values as TypedArray;\n  const imagVals = backend.data.get(imag.dataId).values as TypedArray;\n\n  const complexInfo = backend.makeTensorInfo(real.shape, 'complex64');\n\n  const complex = backend.data.get(complexInfo.dataId);\n\n  // The complex tensor owns the underlying real and imag tensorInfos, only the\n  // complex tensor tracks refCount, when complexData is disposed the\n  // underlying tensorData will be disposed.\n  complex.complexTensorInfos = {\n    real: backend.makeTensorInfo(real.shape, 'float32', realVals),\n    imag: backend.makeTensorInfo(imag.shape, 'float32', imagVals)\n  };\n\n  return complexInfo;\n}\n\nexport const complexConfig: KernelConfig = {\n  kernelName: Complex,\n  backendName: 'cpu',\n  kernelFunc: complex as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TensorInfo, util} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {complex} from '../kernels/Complex';\n\n/**\n * Generates a tensorInfo with all zeros value.\n * @param backend cpu backend.\n * @param shape Shape for the zeros tensor.\n * @param dtype Optional. If set, the result has this dtype.\n */\nexport function zeros(\n    backend: MathBackendCPU, shape: number[],\n    dtype: DataType = 'float32'): TensorInfo {\n  if (dtype === 'complex64') {\n    const real = zeros(backend, shape, 'float32');\n    const imag = zeros(backend, shape, 'float32');\n\n    return complex({inputs: {real, imag}, backend});\n  }\n\n  const values = util.makeZerosTypedArray(util.sizeFromShape(shape), dtype);\n\n  return backend.makeTensorInfo(shape, dtype, values);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Identity, IdentityInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function identity(\n    args: {inputs: IdentityInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  backend.incRef(x.dataId);\n\n  return {dataId: x.dataId, shape: x.shape, dtype: x.dtype};\n}\n\nexport const identityConfig: KernelConfig = {\n  kernelName: Identity,\n  backendName: 'cpu',\n  kernelFunc: identity as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Real, RealInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function real(args: {inputs: RealInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const real = backend.data.get(input.dataId).complexTensorInfos.real;\n  const realVal = backend.data.get(real.dataId).values;\n\n  // When complex tensor is disposed, its underlying parts will be disposed too.\n  // Make new tensor out of the real value of the complex. This makes sure the\n  // value is still accessible even if complex tensor is disposed.\n  return backend.makeTensorInfo(real.shape, real.dtype, realVal);\n}\n\nexport const realConfig: KernelConfig = {\n  kernelName: Real,\n  backendName: 'cpu',\n  kernelFunc: real as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Cast, CastAttrs, CastInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {zeros} from '../utils/zeros_impl';\n\nimport {complex} from './Complex';\nimport {identity} from './Identity';\nimport {real} from './Real';\n\nexport function cast(\n    args: {inputs: CastInputs, backend: MathBackendCPU, attrs: CastAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dtype} = attrs;\n\n  // Casting to complex64.\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return identity({inputs: {x}, backend});\n    }\n\n    const zerosTensorInfo = zeros(backend, x.shape, x.dtype);\n    const floatX = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n\n    const result =\n        complex({inputs: {real: floatX, imag: zerosTensorInfo}, backend});\n\n    backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n    backend.disposeIntermediateTensorInfo(floatX);\n\n    return result;\n  }\n\n  // Casting from complex64\n  if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const result = cast({inputs: {x: realPart}, backend, attrs: {dtype}});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n\n    return result;\n  }\n\n  if (!util.hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    const result = identity({inputs: {x}, backend});\n    return {dataId: result.dataId, shape: result.shape, dtype};\n  }\n\n  if (dtype === 'int32') {\n    const values = backend.data.get(x.dataId).values as TypedArray;\n    const resultValues = Int32Array.from(values);\n    return backend.makeTensorInfo(x.shape, 'int32', resultValues);\n  }\n\n  if (dtype === 'bool') {\n    // This is essentially the result of notEqual(x, 0). We avoid using\n    // kernel notEqual to avoid circular dependency, i.e. binary_utils ->\n    // cast -> notEqual -> binary_utils.\n    const xVals = backend.data.get(x.dataId).values as TypedArray;\n    const zero = util.toTypedArray([0], x.dtype);\n\n    const [resultData, resultShape] = createSimpleBinaryKernelImpl(\n        (a, b) => (a !== b) ? 1 : 0)(x.shape, [], xVals, zero, 'bool');\n\n    return backend.makeTensorInfo(resultShape, 'bool', resultData);\n  }\n\n  throw new Error(`Error in Cast: failed to cast ${x.dtype} to ${dtype}`);\n}\n\nexport const castConfig: KernelConfig = {\n  kernelName: Cast,\n  backendName: 'cpu',\n  kernelFunc: cast as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BinaryInputs, DataType, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {cast} from '../kernels/Cast';\nimport {complex} from '../kernels/Complex';\n\nimport {ComplexBinaryKernelImpl, ComplexBinaryOperation, SimpleBinaryKernelImpl} from './binary_types';\n\n/**\n * Template that creates a `KernelFunc` for binary ops.\n * @param name Kernel name.\n * @param binaryKernelImpl A `SimpleBinaryKernelImpl` for the kernel.\n * @param binaryKernelComplexImpl Optional. If exists, represents a\n *     `ComplexBinaryKernelImpl` for the kernel, will be used when input dtype\n *     is `complex64`.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function binaryKernelFunc(\n    name: string, simpleImpl: SimpleBinaryKernelImpl,\n    complexImpl?: ComplexBinaryKernelImpl, dtype?: DataType): KernelFunc {\n  if (complexImpl == null) {\n    return ({inputs, backend}) => {\n      const {a, b} = inputs as BinaryInputs;\n      const cpuBackend = backend as MathBackendCPU;\n\n      assertNotComplex([a, b], name);\n\n      const aVals = cpuBackend.data.get(a.dataId).values as TypedArray;\n      const bVals = cpuBackend.data.get(b.dataId).values as TypedArray;\n\n      const $dtype = dtype || a.dtype;\n\n      const [resultData, resultShape] =\n          simpleImpl(a.shape, b.shape, aVals, bVals, $dtype);\n\n      return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n    };\n  }\n\n  return ({inputs, backend}) => {\n    const {a, b} = inputs as BinaryInputs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    if (a.dtype === 'complex64' || b.dtype === 'complex64') {\n      const $aComplex = cast(\n          {inputs: {x: a}, backend: cpuBackend, attrs: {dtype: 'complex64'}});\n\n      const $aComplexVals = cpuBackend.data.get($aComplex.dataId);\n\n      const aReal = $aComplexVals.complexTensorInfos.real;\n      const aImag = $aComplexVals.complexTensorInfos.imag;\n\n      const aRealVals =\n          cpuBackend.data.get(aReal.dataId).values as Float32Array;\n      const aImagVals =\n          cpuBackend.data.get(aImag.dataId).values as Float32Array;\n\n      const $bComplex = cast(\n          {inputs: {x: b}, backend: cpuBackend, attrs: {dtype: 'complex64'}});\n\n      const $bComplexVals = cpuBackend.data.get($bComplex.dataId);\n\n      const bReal = $bComplexVals.complexTensorInfos.real;\n      const bImag = $bComplexVals.complexTensorInfos.imag;\n\n      const bRealVals =\n          cpuBackend.data.get(bReal.dataId).values as Float32Array;\n      const bImagVals =\n          cpuBackend.data.get(bImag.dataId).values as Float32Array;\n\n      const [resultRealData, resultImagData, resultShape] = complexImpl(\n          a.shape, b.shape, aRealVals, aImagVals, bRealVals, bImagVals);\n\n      const resultReal =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', resultRealData);\n\n      const resultImag =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', resultImagData);\n\n      const result = complex(\n          {inputs: {real: resultReal, imag: resultImag}, backend: cpuBackend});\n\n      cpuBackend.disposeIntermediateTensorInfo($aComplex);\n      cpuBackend.disposeIntermediateTensorInfo($bComplex);\n      cpuBackend.disposeIntermediateTensorInfo(resultReal);\n      cpuBackend.disposeIntermediateTensorInfo(resultImag);\n\n      return result;\n    } else {\n      const aVals = cpuBackend.data.get(a.dataId).values as TypedArray;\n      const bVals = cpuBackend.data.get(b.dataId).values as TypedArray;\n\n      const $dtype = dtype || a.dtype;\n\n      const [resultData, resultShape] =\n          simpleImpl(a.shape, b.shape, aVals, bVals, $dtype);\n\n      return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n    }\n  };\n}\n\n/**\n * Template that creates the complex type implementation for binary ops.\n * Supports broadcast.\n */\nexport function createComplexBinaryKernelImpl(op: ComplexBinaryOperation):\n    ComplexBinaryKernelImpl {\n  return (aShape: number[], bShape: number[], aRealVals: Float32Array,\n          aImagVals: Float32Array, bRealVals: Float32Array,\n          bImagVals: Float32Array): [TypedArray, TypedArray, number[]] => {\n    const resultShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    const resultSize = util.sizeFromShape(resultShape);\n    const resultRank = resultShape.length;\n    const resultStrides = util.computeStrides(resultShape);\n\n    const resultRealVals = util.getTypedArrayFromDType('float32', resultSize);\n    const resultImagVals = util.getTypedArrayFromDType('float32', resultSize);\n\n    const aBroadcastDims = backend_util.getBroadcastDims(aShape, resultShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(bShape, resultShape);\n\n    const aVals = backend_util.mergeRealAndImagArrays(aRealVals, aImagVals);\n    const bVals = backend_util.mergeRealAndImagArrays(bRealVals, bImagVals);\n\n    const aRank = aShape.length;\n    const aStrides = util.computeStrides(aShape);\n\n    const bRank = bShape.length;\n    const bStrides = util.computeStrides(bShape);\n\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < resultRealVals.length; i++) {\n        const aIdx = i % aVals.length;\n        const bIdx = i % bVals.length;\n\n        const result =\n            op(aVals[aIdx * 2], aVals[aIdx * 2 + 1], bVals[bIdx * 2],\n               bVals[bIdx * 2 + 1]);\n\n        resultRealVals[i] = result.real;\n        resultImagVals[i] = result.imag;\n      }\n    } else {\n      for (let i = 0; i < resultRealVals.length; i++) {\n        const loc = util.indexToLoc(i, resultRank, resultStrides);\n\n        const aLoc = loc.slice(-aRank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n\n        const bLoc = loc.slice(-bRank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n\n        const opResult =\n            op(aVals[aIndex * 2], aVals[aIndex * 2 + 1], bVals[bIndex * 2],\n               bVals[bIndex * 2 + 1]);\n\n        resultRealVals[i] = opResult.real;\n        resultImagVals[i] = opResult.imag;\n      }\n    }\n    return [resultRealVals, resultImagVals, resultShape];\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Add, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const addImpl = createSimpleBinaryKernelImpl(((a, b) => a + b));\nexport const addComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {real: aReal + bReal, imag: aImag + bImag};\n    }));\n\nexport const add = binaryKernelFunc(Add, addImpl, addComplexImpl);\n\nexport const addConfig: KernelConfig = {\n  kernelName: Add,\n  backendName: 'cpu',\n  kernelFunc: add\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function bincountImpl(\n    xVals: TypedArray, weightsVals: TypedArray, weightsDtype: DataType,\n    weightsShape: number[], size: number): TypedArray {\n  const weightsSize = util.sizeFromShape(weightsShape);\n  const outVals = util.makeZerosTypedArray(size, weightsDtype) as TypedArray;\n\n  for (let i = 0; i < xVals.length; i++) {\n    const value = xVals[i];\n    if (value < 0) {\n      throw new Error('Input x must be non-negative!');\n    }\n\n    if (value >= size) {\n      continue;\n    }\n\n    if (weightsSize > 0) {\n      outVals[value] += weightsVals[i];\n    } else {\n      outVals[value] += 1;\n    }\n  }\n\n  return outVals;\n}\n\nexport function bincountReduceImpl<R extends Rank>(\n    xBuf: TensorBuffer<R>, weightsBuf: TensorBuffer<R>, size: number,\n    binaryOutput = false): TensorBuffer<R> {\n  const numRows = xBuf.shape[0];\n  const numCols = xBuf.shape[1];\n\n  const outBuf = buffer([numRows, size], weightsBuf.dtype);\n\n  for (let i = 0; i < numRows; i++) {\n    for (let j = 0; j < numCols; j++) {\n      const value = xBuf.get(i, j);\n      if (value < 0) {\n        throw new Error('Input x must be non-negative!');\n      }\n\n      if (value >= size) {\n        continue;\n      }\n\n      if (binaryOutput) {\n        outBuf.set(1, i, value);\n      } else {\n        if (weightsBuf.size > 0) {\n          outBuf.set(outBuf.get(i, value) + weightsBuf.get(i, j), i, value);\n        } else {\n          outBuf.set(outBuf.get(i, value) + 1, i, value);\n        }\n      }\n    }\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NumericDataType, util} from '@tensorflow/tfjs-core';\n\nimport {SimpleUnaryImpl, SimpleUnaryOperation} from './unary_types';\n\n/**\n * Template that creates implementation for unary op.\n */\nexport function createSimpleUnaryImpl(op: SimpleUnaryOperation):\n    SimpleUnaryImpl {\n  return (values, dtype, attrs) => {\n    const newValues =\n        util.getTypedArrayFromDType(dtype as NumericDataType, values.length);\n    for (let i = 0; i < values.length; ++i) {\n      newValues[i] = op(values[i], attrs);\n    }\n    return newValues;\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, KernelFunc, TypedArray, UnaryInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {SimpleUnaryImpl, SimpleUnaryOperation} from './unary_types';\n\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param name Kernel name.\n * @param op A `SimpleUnaryOperation` for the kernel.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\nexport function unaryKernelFunc(\n    name: string, op: SimpleUnaryOperation, dtype?: DataType): KernelFunc {\n  return ({inputs, attrs, backend}) => {\n    const {x} = inputs as UnaryInputs;\n    assertNotComplex(x, name);\n    if (x.dtype === 'string' || dtype === 'string') {\n      throw new Error('unaryKernelFunc does not support string input/output');\n    }\n\n    const cpuBackend = backend as MathBackendCPU;\n    const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const xSize = util.sizeFromShape(x.shape);\n    const $dtype = dtype || x.dtype;\n    const newValues = util.getArrayFromDType($dtype, xSize);\n    for (let i = 0; i < xSize; ++i) {\n      newValues[i] = op(values[i], attrs);\n    }\n    return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n  };\n}\n\n/**\n * Template that creates a `KernelFunc` for unary ops from the given\n * `SimpleUnaryImpl`..\n * @param name Kernel name.\n * @param unaryImpl A `SimpleUnaryImpl` that implements the op.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\nexport function unaryKernelFuncFromImpl(\n    name: string, unaryImpl: SimpleUnaryImpl, dtype?: DataType): KernelFunc {\n  return ({inputs, attrs, backend}) => {\n    const {x} = inputs as UnaryInputs;\n    assertNotComplex(x, name);\n    if (x.dtype === 'string' || dtype === 'string') {\n      throw new Error('unaryKernelFunc does not support string input/output');\n    }\n\n    const cpuBackend = backend as MathBackendCPU;\n    const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const $dtype = dtype || x.dtype;\n    const newValues = unaryImpl(values, $dtype, attrs);\n    return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Ceil, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const ceilImpl = createSimpleUnaryImpl((xi) => Math.ceil(xi));\nexport const ceil = unaryKernelFuncFromImpl(Ceil, ceilImpl);\n\nexport const ceilConfig: KernelConfig = {\n  kernelName: Ceil,\n  backendName: 'cpu',\n  kernelFunc: ceil,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendValues, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function concatImpl(\n    inputs: Array<{vals: BackendValues, shape: number[]}>, outShape: number[],\n    dtype: DataType, simplyConcat: boolean): TypedArray|string[] {\n  const outVals = util.getArrayFromDType(dtype, util.sizeFromShape(outShape));\n\n  if (simplyConcat && dtype !== 'string') {\n    // Use built-in TypedArray.set() method for speed.\n    let offset = 0;\n    inputs.forEach(input => {\n      const size = util.sizeFromShape(input.shape);\n\n      (outVals as TypedArray).set(input.vals as TypedArray, offset);\n      offset += size;\n    });\n  } else {\n    let colOffset = 0;\n\n    inputs.forEach(input => {\n      const decodedData = dtype === 'string' ?\n          backend_util.fromUint8ToStringArray(input.vals as Uint8Array[]) :\n          input.vals as TypedArray;\n\n      let tIdx = 0;\n\n      for (let row = 0; row < input.shape[0]; ++row) {\n        const resIdx = row * outShape[1] + colOffset;\n        for (let col = 0; col < input.shape[1]; ++col) {\n          outVals[resIdx + col] = decodedData[tIdx++];\n        }\n      }\n\n      colOffset += input.shape[1];\n    });\n  }\n\n  return outVals;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Exp, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const expImpl = createSimpleUnaryImpl((xi) => Math.exp(xi));\nexport const exp = unaryKernelFuncFromImpl(Exp, expImpl);\n\nexport const expConfig: KernelConfig = {\n  kernelName: Exp,\n  backendName: 'cpu',\n  kernelFunc: exp,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Expm1, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const expm1Impl = createSimpleUnaryImpl((xi) => Math.expm1(xi));\nexport const expm1 = unaryKernelFuncFromImpl(Expm1, expm1Impl);\n\nexport const expm1Config: KernelConfig = {\n  kernelName: Expm1,\n  backendName: 'cpu',\n  kernelFunc: expm1,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Floor, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const floorImpl = createSimpleUnaryImpl((xi) => Math.floor(xi));\nexport const floor = unaryKernelFuncFromImpl(Floor, floorImpl);\n\nexport const floorConfig: KernelConfig = {\n  kernelName: Floor,\n  backendName: 'cpu',\n  kernelFunc: floor,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\nexport function gatherV2Impl<R extends Rank, D extends DataType>(\n    xBuf: TensorBuffer<R, D>, indicesBuf: TensorBuffer<R, D>,\n    flattenOutputShape: number[]): TensorBuffer<R, D> {\n  const outBuf = buffer(flattenOutputShape, xBuf.dtype);\n  for (let i = 0; i < outBuf.size; ++i) {\n    const newLoc = outBuf.indexToLoc(i);\n\n    const originalLoc: number[] = newLoc.slice();\n    const batchIdx = originalLoc[0];\n    const indicesIdx = originalLoc[2];\n    const indicesIndex = indicesBuf.locToIndex([batchIdx, indicesIdx]);\n    originalLoc[2] = indicesBuf.values[indicesIndex] as number;\n\n    const originalIndex = xBuf.locToIndex(originalLoc);\n    outBuf.values[i] = xBuf.values[originalIndex];\n  }\n\n  return outBuf as TensorBuffer<R, D>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Greater, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const greaterImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a > b) ? 1 : 0);\nexport const greater =\n    binaryKernelFunc(Greater, greaterImpl, null /* complexImpl */, 'bool');\n\nexport const greaterConfig: KernelConfig = {\n  kernelName: Greater,\n  backendName: 'cpu',\n  kernelFunc: greater\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Less} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const lessImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a < b) ? 1 : 0);\nexport const less =\n    binaryKernelFunc(Less, lessImpl, null /* complexImpl */, 'bool');\n\nexport const lessConfig: KernelConfig = {\n  kernelName: Less,\n  backendName: 'cpu',\n  kernelFunc: less\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function linSpaceImpl(\n    start: number, stop: number, num: number): TypedArray {\n  const step = (stop - start) / (num - 1);\n\n  const values = util.makeZerosTypedArray(num, 'float32');\n  values[0] = start;\n  for (let i = 1; i < values.length; i++) {\n    values[i] = values[i - 1] + step;\n  }\n\n  return values;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Log} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const logImpl = createSimpleUnaryImpl((xi) => Math.log(xi));\nexport const log = unaryKernelFuncFromImpl(Log, logImpl);\n\nexport const logConfig: KernelConfig = {\n  kernelName: Log,\n  backendName: 'cpu',\n  kernelFunc: log,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NumericDataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function maxImpl(\n    aVals: TypedArray, reduceSize: number, outShape: number[],\n    dtype: DataType): TypedArray {\n  const vals = util.getTypedArrayFromDType(\n      dtype as NumericDataType, util.sizeFromShape(outShape));\n\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let max = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (value > max) {\n        max = value;\n      }\n    }\n    vals[i] = max;\n  }\n  return vals;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Maximum} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const maximumImpl = createSimpleBinaryKernelImpl(\n    ((aValue, bValue) => Math.max(aValue, bValue)));\nexport const maximum = binaryKernelFunc(Maximum, maximumImpl);\n\nexport const maximumConfig: KernelConfig = {\n  kernelName: Maximum,\n  backendName: 'cpu',\n  kernelFunc: maximum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Minimum} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const minimumImpl = createSimpleBinaryKernelImpl(\n    ((aValue, bValue) => Math.min(aValue, bValue)));\nexport const minimum = binaryKernelFunc(Minimum, minimumImpl);\n\nexport const minimumConfig: KernelConfig = {\n  kernelName: Minimum,\n  backendName: 'cpu',\n  kernelFunc: minimum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Multiply} from '@tensorflow/tfjs-core';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const multiplyImpl =\n    createSimpleBinaryKernelImpl(((aValue, bValue) => aValue * bValue));\nexport const multiplyComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {\n        real: aReal * bReal - aImag * bImag,\n        imag: aReal * bImag + aImag * bReal\n      };\n    }));\n\nexport const multiply =\n    binaryKernelFunc(Multiply, multiplyImpl, multiplyComplexImpl);\n\nexport const multiplyConfig: KernelConfig = {\n  kernelName: Multiply,\n  backendName: 'cpu',\n  kernelFunc: multiply\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, KernelConfig, KernelFunc, Neg, TensorInfo, TypedArray, UnaryInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {multiplyImpl} from './Multiply';\n\nexport function negImpl(xVals: TypedArray, xShape: number[], xDtype: DataType):\n    [TypedArray, number[]] {\n  const minusOne =\n      util.createScalarValue(-1 as {} as 'float32', xDtype) as TypedArray;\n  return multiplyImpl([], xShape, minusOne, xVals, xDtype);\n}\n\nexport function neg(args: {inputs: UnaryInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  assertNotComplex(x, 'neg');\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const [res, newShape] = negImpl(xVals, x.shape, x.dtype);\n\n  return backend.makeTensorInfo(newShape, x.dtype, res);\n}\n\nexport const negConfig: KernelConfig = {\n  kernelName: Neg,\n  backendName: 'cpu',\n  kernelFunc: neg as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NotEqual} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const notEqualImpl =\n    createSimpleBinaryKernelImpl(((a, b) => (a !== b) ? 1 : 0));\nexport const notEqual =\n    binaryKernelFunc(NotEqual, notEqualImpl, null /* complexOp */, 'bool');\n\nexport const notEqualConfig: KernelConfig = {\n  kernelName: NotEqual,\n  backendName: 'cpu',\n  kernelFunc: notEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {util} from '@tensorflow/tfjs-core';\n\nexport function transposeImpl(\n    xVals: TypedArray, xShape: number[], dtype: DataType, perm: number[],\n    newShape: number[]): TypedArray {\n  const xRank = xShape.length;\n  const xSize = util.sizeFromShape(xShape);\n  const xStrides = util.computeStrides(xShape);\n  const newStrides = util.computeStrides(newShape);\n\n  const result = util.getTypedArrayFromDType(\n      dtype as NumericDataType, util.sizeFromShape(newShape));\n\n  for (let i = 0; i < xSize; ++i) {\n    const loc = util.indexToLoc(i, xRank, xStrides);\n\n    // Permute location.\n    const newLoc: number[] = new Array(loc.length);\n    for (let i = 0; i < newLoc.length; i++) {\n      newLoc[i] = loc[perm[i]];\n    }\n\n    const newIndex = util.locToIndex(newLoc, xRank, newStrides);\n    result[newIndex] = xVals[i];\n  }\n  return result;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Transpose, TransposeAttrs, TransposeInputs, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {transposeImpl} from './Transpose_impl';\n\nexport function transpose(args: {\n  inputs: TransposeInputs,\n  attrs: TransposeAttrs,\n  backend: MathBackendCPU\n}): TensorInfo {\n  const {inputs, attrs, backend} = args;\n  const {x} = inputs;\n  const {perm} = attrs;\n\n  assertNotComplex(x, 'transpose');\n\n  const xRank = x.shape.length;\n\n  const newShape: number[] = new Array(xRank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = x.shape[perm[i]];\n  }\n\n  const values = backend.data.get(x.dataId).values as TypedArray;\n  const result = transposeImpl(values, x.shape, x.dtype, perm, newShape);\n\n  const dataId = backend.write(result, newShape, x.dtype);\n  return {dataId, shape: newShape, dtype: x.dtype};\n}\n\nexport const transposeConfig: KernelConfig = {\n  kernelName: Transpose,\n  backendName: 'cpu',\n  kernelFunc: transpose as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, KernelConfig, KernelFunc, Prod, ProdAttrs, ProdInputs, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function prodImpl(\n    xShape: number[], xDtype: DataType, xVals: TypedArray,\n    reductionAxes: number[]):\n    {outVals: TypedArray, outShape: number[], outDtype: DataType} {\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(xShape, reductionAxes);\n  const outDtype = upcastType(xDtype, 'int32');\n  const outVals = util.makeZerosTypedArray(\n                      util.sizeFromShape(outShape), outDtype) as TypedArray;\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  for (let i = 0; i < outVals.length; ++i) {\n    const offset = i * reduceSize;\n    let prod = 1;\n    for (let j = 0; j < reduceSize; ++j) {\n      prod *= xVals[offset + j];\n    }\n    outVals[i] = prod;\n  }\n\n  return {outVals, outShape, outDtype};\n}\n\nexport function prod(\n    args: {inputs: ProdInputs, backend: MathBackendCPU, attrs: ProdAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'prod');\n\n  const xRank = x.shape.length;\n  const axes = util.parseAxisParam(axis, x.shape);\n\n  const permutation = backend_util.getAxesPermutation(axes, xRank);\n  let reductionAxes = axes;\n  let permutedX = x;\n  const intermediateTensorInfos = [];\n  if (permutation != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n    intermediateTensorInfos.push(permutedX);\n    reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n  }\n\n  const xVals = backend.data.get(permutedX.dataId).values as TypedArray;\n  const {outVals, outShape, outDtype} =\n      prodImpl(permutedX.shape, permutedX.dtype, xVals, reductionAxes);\n\n  let resultShape = outShape;\n  if (keepDims) {\n    resultShape = backend_util.expandShapeToKeepDim(outShape, axes);\n  }\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return backend.makeTensorInfo(resultShape, outDtype, outVals);\n}\n\nexport const prodConfig: KernelConfig = {\n  kernelName: Prod,\n  backendName: 'cpu',\n  kernelFunc: prod as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataTypeMap, util} from '@tensorflow/tfjs-core';\n\nexport function rangeImpl(\n    start: number, stop: number, step: number,\n    dtype: 'float32'|'int32'): DataTypeMap['float32' | 'int32'] {\n  const sameStartStop = start === stop;\n  const increasingRangeNegativeStep = start < stop && step < 0;\n  const decreasingRangePositiveStep = stop < start && step > 1;\n\n  if (sameStartStop || increasingRangeNegativeStep ||\n      decreasingRangePositiveStep) {\n    return util.makeZerosTypedArray(0, dtype);\n  }\n\n  const numElements = Math.abs(Math.ceil((stop - start) / step));\n  const values = util.makeZerosTypedArray(numElements, dtype);\n\n  if (stop < start && step === 1) {\n    // Auto adjust the step's sign if it hasn't been set\n    // (or was set to 1)\n    step = -1;\n  }\n\n  values[0] = start;\n  for (let i = 1; i < values.length; i++) {\n    values[i] = values[i - 1] + step;\n  }\n  return values;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Rsqrt} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const rsqrtImpl = createSimpleUnaryImpl((xi) => 1 / Math.sqrt(xi));\nexport const rsqrt = unaryKernelFuncFromImpl(Rsqrt, rsqrtImpl);\n\nexport const rsqrtConfig: KernelConfig = {\n  kernelName: Rsqrt,\n  backendName: 'cpu',\n  kernelFunc: rsqrt,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendValues, buffer, DataType, KernelConfig, KernelFunc, Slice, slice_util, SliceAttrs, SliceInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function sliceImpl(\n    vals: BackendValues, begin: number[], size: number[], shape: number[],\n    dtype: DataType): BackendValues {\n  const isContinous = slice_util.isSliceContinous(shape, begin, size);\n  const length = util.sizeFromShape(size);\n  const xStrides = util.computeStrides(shape);\n\n  if (isContinous) {\n    const flatOffset = slice_util.computeFlatOffset(begin, xStrides);\n\n    if (dtype === 'string') {\n      return (vals as Uint8Array[]).slice(flatOffset, flatOffset + length);\n    }\n\n    return (vals as TypedArray).subarray(flatOffset, flatOffset + length);\n  }\n\n  const decodedData = dtype === 'string' ?\n      backend_util.fromUint8ToStringArray(vals as Uint8Array[]) :\n      vals as TypedArray;\n\n  const inBuf = buffer(shape, dtype, decodedData);\n  const outBuf = buffer(size, dtype);\n  for (let i = 0; i < outBuf.size; ++i) {\n    const outLoc = outBuf.indexToLoc(i);\n    const inLoc = outLoc.map((idx: number, j) => idx + begin[j]);\n    outBuf.set(inBuf.get(...inLoc), ...outLoc);\n  }\n\n  if (dtype === 'string') {\n    return backend_util.fromStringArrayToUint8(outBuf.values as string[]);\n  }\n  return outBuf.values as TypedArray;\n}\n\nexport function slice(\n    args: {inputs: SliceInputs, backend: MathBackendCPU, attrs: SliceAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {begin, size} = attrs;\n\n  assertNotComplex(x, 'slice');\n\n  const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n  slice_util.assertParamsValid(x, $begin, $size);\n\n  const vals = backend.data.get(x.dataId).values;\n  const outVals = sliceImpl(vals, $begin, $size, x.shape, x.dtype);\n  return backend.makeTensorInfo($size, x.dtype, outVals);\n}\n\nexport const sliceConfig: KernelConfig = {\n  kernelName: Slice,\n  backendName: 'cpu',\n  kernelFunc: slice as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SquaredDifference} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const squaredDifferenceImpl = createSimpleBinaryKernelImpl(((a, b) => {\n  const diff = a - b;\n  return diff * diff;\n}));\nexport const squaredDifference =\n    binaryKernelFunc(SquaredDifference, squaredDifferenceImpl);\n\nexport const squaredDifferenceConfig: KernelConfig = {\n  kernelName: SquaredDifference,\n  backendName: 'cpu',\n  kernelFunc: squaredDifference\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\nexport function stridedSliceImpl<R extends Rank>(\n    outShape: number[], xBuf: TensorBuffer<R>, strides: number[],\n    begin: number[]): TensorBuffer<R> {\n  const outBuf = buffer(outShape, xBuf.dtype);\n\n  for (let i = 0; i < outBuf.size; i++) {\n    const loc = outBuf.indexToLoc(i);\n\n    const newLoc: number[] = new Array(loc.length);\n    for (let j = 0; j < newLoc.length; j++) {\n      newLoc[j] = loc[j] * strides[j] + begin[j];\n    }\n    outBuf.set(xBuf.get(...newLoc), ...loc);\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sub} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const subImpl =\n    createSimpleBinaryKernelImpl(((aValue, bValue) => aValue - bValue));\nexport const subComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {real: aReal - bReal, imag: aImag - bImag};\n    }));\nexport const sub = binaryKernelFunc(Sub, subImpl, subComplexImpl);\n\nexport const subConfig: KernelConfig = {\n  kernelName: Sub,\n  backendName: 'cpu',\n  kernelFunc: sub\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\n/**\n * An implementation of the tile kernel shared between webgl and cpu for string\n * tensors only.\n */\n\nexport function tileImpl<R extends Rank>(\n    xBuf: TensorBuffer<R, DataType>,\n    reps: number[]): TensorBuffer<R, DataType> {\n  const newShape: number[] = new Array(xBuf.rank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = xBuf.shape[i] * reps[i];\n  }\n  const result = buffer(newShape, xBuf.dtype);\n  for (let i = 0; i < result.values.length; ++i) {\n    const newLoc = result.indexToLoc(i);\n\n    const originalLoc: number[] = new Array(xBuf.rank);\n    for (let j = 0; j < originalLoc.length; j++) {\n      originalLoc[j] = newLoc[j] % xBuf.shape[j];\n    }\n\n    const originalIndex = xBuf.locToIndex(originalLoc);\n\n    result.values[i] = xBuf.values[originalIndex];\n  }\n  return result as TensorBuffer<R, DataType>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/** An implementation of the TopK kernel shared between webgl and cpu. */\n\nimport {buffer, NumericDataType, Rank, ShapeMap, Tensor, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function topKImpl<T extends Tensor, R extends Rank>(\n    x: TypedArray, xShape: number[], xDtype: NumericDataType, k: number,\n    sorted: boolean):\n    [TensorBuffer<R, NumericDataType>, TensorBuffer<R, 'int32'>] {\n  // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n  const lastDim = xShape[xShape.length - 1];\n  const [batch, size] = [x.length / lastDim, lastDim];\n  const allTopKVals = util.getTypedArrayFromDType(xDtype, batch * k);\n  const allTopKIndices = util.getTypedArrayFromDType('int32', batch * k);\n\n  for (let b = 0; b < batch; b++) {\n    const offset = b * size;\n    const vals = x.subarray(offset, offset + size);\n    const valAndInd: Array<{value: number, index: number}> = [];\n    for (let i = 0; i < vals.length; i++) {\n      valAndInd.push({value: vals[i], index: i});\n    }\n    valAndInd.sort((a, b) => b.value - a.value);\n\n    const outOffset = b * k;\n    const topKVals = allTopKVals.subarray(outOffset, outOffset + k);\n    const topKIndices = allTopKIndices.subarray(outOffset, outOffset + k);\n    for (let i = 0; i < k; i++) {\n      topKVals[i] = valAndInd[i].value;\n      topKIndices[i] = valAndInd[i].index;\n    }\n  }\n  // Reshape back to the original input shape, except that the last\n  // dimension is k.\n  const outputShape = xShape.slice();\n  outputShape[outputShape.length - 1] = k;\n\n  return [\n    buffer(outputShape as ShapeMap[R], xDtype, allTopKVals),\n    buffer(outputShape as ShapeMap[R], 'int32', allTopKIndices)\n  ];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BackendValues, DataType, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function uniqueImpl(\n    values: BackendValues, axis: number, shape: number[], dtype: DataType): {\n  outputValues: BackendValues,\n  outputShape: number[],\n  indices: BackendValues\n} {\n  // Normalize and validate axis.\n  const $axis = util.parseAxisParam(axis, shape)[0];\n\n  // Calculate the new shape that is suitable for extracting data along the\n  // given axis.\n  //\n  // The rank is 3.\n  // The size of the 1st dimension is the size of all the axes < the given axis.\n  // The size of the 2nd dimension is the same as the size of the given axis.\n  // The size of the 3rd dimension is the size of all the axes > the given axis.\n  //\n  // For example, for a 4D tensor with shape=[2, 3, 5, 4] and axis=2, the\n  // newShape would be: [2*3, 5, 4].\n  //\n  // Note that this is not the final output shape. This will be the shape for an\n  // intermediate TensorBuffer (see inputBuffer below) to allow us to extract\n  // values along the given axis. To demonstrate how it works, consider the\n  // following example:\n  //\n  // Input: a 3D tensor, with shape [1, 2, 3]\n  // [\n  //   [\n  //      [1,2,3],\n  //      [4,5,6]\n  //   ]\n  // ]\n  // Axis: 2 (the last axis).\n  // Along axis 2, we expect to extract 3 tensors: [1,4], [2,5], [3,6].\n  //\n  // For this example, newShape would be: [2, 3, 1], where 2 is calculated from\n  // 1*2. The re-shaped data would look like:\n  //\n  // [\n  //   [\n  //     [1], [2], [3]\n  //   ],\n  //   [\n  //     [4], [5], [6]\n  //   ]\n  // ]\n  //\n  // Then, we can construct a 3-level nested loop by the following dimension\n  // order to extract the values along the axis (dimension1):\n  // i: dimension1       // 0,1,2 (newShape[1])\n  //   m: dimension0     // 0,1   (newShape[0])\n  //     n: dimension2   // 0     (newShape[2])\n  //\n  //                       m, i, n\n  //                      ---------\n  // Iteration 0: data at [0, 0, 0] => \"1\"\n  // Iteration 1: data at [1, 0, 0] => \"4\"\n  // We got [1,4].\n  // Iteration 2: data at [0, 1, 0] => \"2\"\n  // Iteration 3: data at [1, 1, 0] => \"5\"\n  // We got [2,5].\n  // Iteration 4: data at [0, 2, 0] => \"3\"\n  // Iteration 5: data at [1, 2, 0] => \"6\"\n  // We got [3,6].\n  const newShape = [1, shape[0], 1];\n  for (let i = 0; i < $axis; i++) {\n    newShape[0] *= shape[i];\n  }\n  newShape[1] = shape[$axis];\n  for (let i = $axis + 1; i < shape.length; i++) {\n    newShape[2] *= shape[i];\n  }\n\n  // A map from unique elements (their string representations) to their values\n  // in \"indices\" (below).\n  const uniqueElements: {[key: string]: number} = {};\n  // The indices of each unique element in the original tensor along the given\n  // axis. It is 1D and has the same size as the given axis.\n  const indices = new Int32Array(shape[$axis]);\n  // Create a buffer so we can easily extract value at a given location.\n  const inputBuffer = new TensorBuffer(newShape, dtype, values as TypedArray);\n  // The indices along the given axis that have unique elements. This is a\n  // de-duped version of \"indices\" above.\n  const uniqueIndices: number[] = [];\n  const is1DTensor = newShape[0] === 1 && newShape[2] === 1;\n  for (let i = 0; i < shape[$axis]; i++) {\n    // Extract values along the axis.\n    let element: string;\n    if (is1DTensor) {\n      // Fast path for 1D tensor input.\n      element = values[i].toString();\n    } else {\n      const axisValues = [];\n      for (let m = 0; m < newShape[0]; m++) {\n        for (let n = 0; n < newShape[2]; n++) {\n          axisValues.push(inputBuffer.get(m, i, n));\n        }\n      }\n      element = axisValues.join(',');\n    }\n\n    // Dedup and update various indices.\n    if (uniqueElements[element] !== undefined) {\n      indices[i] = uniqueElements[element];\n    } else {\n      const uniqueIndex = Object.keys(uniqueElements).length;\n      uniqueElements[element] = uniqueIndex;\n      indices[i] = uniqueIndex;\n      uniqueIndices.push(i);\n    }\n  }\n\n  // Now we know where each of the unique elements are located along the axis\n  // (uniqueIndices). Extract them from input buffer and store them in the\n  // output buffer.\n  const outputTmpShape = newShape.slice();\n  outputTmpShape[1] = Object.keys(uniqueElements).length;\n  const outputBuffer = new TensorBuffer(outputTmpShape, dtype);\n  uniqueIndices.forEach((uniqueElementIndex, i) => {\n    for (let m = 0; m < newShape[0]; m++) {\n      for (let n = 0; n < newShape[2]; n++) {\n        outputBuffer.set(inputBuffer.get(m, uniqueElementIndex, n), m, i, n);\n      }\n    }\n  });\n\n  // The output shape can be calculated from the input shape with the size of\n  // the given axis replaced by the number of unique elements along that axis.\n  const outputShape = shape.slice();\n  outputShape[$axis] = outputTmpShape[1];\n\n  return {\n    outputValues: outputBuffer.values as BackendValues,\n    outputShape,\n    indices,\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/*\n * base.ts contains all the exports from tfjs-backend-cpu\n * without auto-kernel registration\n */\nimport {registerBackend} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from './backend_cpu';\nimport * as shared from './shared';\n\nexport {MathBackendCPU} from './backend_cpu';\nexport {version as version_cpu} from './version';\nexport {shared};\n\n// Side effects for default initialization of MathBackendCPU\nregisterBackend('cpu', () => new MathBackendCPU(), 1 /* priority */);\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Elu, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const elu =\n    unaryKernelFunc(Elu, (xi) => xi >= 0 ? xi : (Math.exp(xi) - 1));\n\nexport const eluConfig: KernelConfig = {\n  kernelName: Elu,\n  backendName: 'cpu',\n  kernelFunc: elu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LeakyRelu, LeakyReluAttrs, LeakyReluInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function leakyRelu(args: {\n  inputs: LeakyReluInputs,\n  backend: MathBackendCPU,\n  attrs: LeakyReluAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {alpha} = attrs;\n\n  assertNotComplex([x], 'leakyRelu');\n\n  const xSize = util.sizeFromShape(x.shape);\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const outVals = util.getTypedArrayFromDType('float32', xSize);\n\n  for (let i = 0; i < xVals.length; i++) {\n    outVals[i] = xVals[i] < 0 ? alpha * xVals[i] : xVals[i];\n  }\n\n  return backend.makeTensorInfo(x.shape, 'float32', outVals);\n}\n\nexport const leakyReluConfig: KernelConfig = {\n  kernelName: LeakyRelu,\n  backendName: 'cpu',\n  kernelFunc: leakyRelu as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Prelu, PreluInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\n\nconst preluImpl = createSimpleBinaryKernelImpl(\n    (xValue: number, aValue: number) => xValue < 0 ? aValue * xValue : xValue);\n\nexport function prelu(args: {inputs: PreluInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x, alpha} = inputs;\n\n  assertNotComplex([x, alpha], 'prelu');\n\n  const aVals = backend.data.get(x.dataId).values as TypedArray;\n  const bVals = backend.data.get(alpha.dataId).values as TypedArray;\n\n  const [resultData, resultShape] =\n      preluImpl(x.shape, alpha.shape, aVals, bVals, x.dtype);\n\n  return backend.makeTensorInfo(resultShape, x.dtype, resultData);\n}\n\nexport const preluConfig: KernelConfig = {\n  kernelName: Prelu,\n  backendName: 'cpu',\n  kernelFunc: prelu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Relu} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const relu = unaryKernelFunc(Relu, (xi) => Math.max(0, xi));\n\nexport const reluConfig: KernelConfig = {\n  kernelName: Relu,\n  backendName: 'cpu',\n  kernelFunc: relu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Relu6} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const relu6 =\n    unaryKernelFunc(Relu6, (xi) => Math.min(Math.max(0, xi), 6));\n\nexport const relu6Config: KernelConfig = {\n  kernelName: Relu6,\n  backendName: 'cpu',\n  kernelFunc: relu6,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {_FusedMatMul, _FusedMatMulAttrs, _FusedMatMulInputs, backend_util, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {elu} from '../kernels/Elu';\nimport {identity} from '../kernels/Identity';\nimport {leakyRelu} from '../kernels/LeakyRelu';\nimport {prelu} from '../kernels/Prelu';\nimport {relu} from '../kernels/Relu';\nimport {relu6} from '../kernels/Relu6';\n\nexport function applyActivation(\n    backend: MathBackendCPU, x: TensorInfo, activation: backend_util.Activation,\n    preluActivationWeights?: TensorInfo, leakyreluAlpha?: number): TensorInfo {\n  if (activation === 'linear') {\n    return identity({inputs: {x}, backend});\n  } else if (activation === 'relu') {\n    return relu({inputs: {x}, backend}) as TensorInfo;\n  } else if (activation === 'elu') {\n    return elu({inputs: {x}, backend}) as TensorInfo;\n  } else if (activation === 'relu6') {\n    return relu6({inputs: {x}, backend}) as TensorInfo;\n  } else if (activation === 'prelu') {\n    return prelu({inputs: {x, alpha: preluActivationWeights}, backend});\n  } else if (activation === 'leakyrelu') {\n    return leakyRelu({inputs: {x}, backend, attrs: {alpha: leakyreluAlpha}});\n  }\n  throw new Error(\n      `Activation ${activation} has not been implemented for the CPU backend.`);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Reshape, ReshapeAttrs, ReshapeInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function reshape(\n    args:\n        {inputs: ReshapeInputs, backend: MathBackendCPU, attrs: ReshapeAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {shape} = attrs;\n\n  const xSize = util.sizeFromShape(x.shape);\n  const $shape = util.inferFromImplicitShape(shape, xSize);\n  const $xSize = util.sizeFromShape($shape);\n\n  util.assert(\n      xSize === $xSize,\n      () => `The new shape (${$shape}) has ${$xSize} elements and the old ` +\n          `shape (${x.shape}) has ${xSize} elements. The new shape and old ` +\n          `shape must have the same number of elements.`);\n\n  backend.incRef(x.dataId);\n\n  const xData = backend.data.get(x.dataId);\n\n  if (xData.complexTensorInfos != null) {\n    const real = xData.complexTensorInfos.real;\n    const imag = xData.complexTensorInfos.imag;\n\n    real.shape = $shape;\n    imag.shape = $shape;\n  }\n\n  return {dataId: x.dataId, shape: $shape, dtype: x.dtype};\n}\n\nexport const reshapeConfig: KernelConfig = {\n  kernelName: Reshape,\n  backendName: 'cpu',\n  kernelFunc: reshape as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BatchMatMul, BatchMatMulAttrs, BatchMatMulInputs, buffer, KernelConfig, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {reshape} from './Reshape';\n\nexport function batchMatMul(args: {\n  inputs: BatchMatMulInputs,\n  attrs: BatchMatMulAttrs,\n  backend: MathBackendCPU\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b} = inputs;\n  const {transposeA, transposeB} = attrs;\n\n  assertNotComplex([a, b], 'matMul');\n\n  const aRank = a.shape.length;\n  const bRank = b.shape.length;\n\n  const innerShapeA = transposeA ? a.shape[aRank - 2] : a.shape[aRank - 1];\n  const innerShapeB = transposeB ? b.shape[bRank - 1] : b.shape[bRank - 2];\n\n  const outerShapeA = transposeA ? a.shape[aRank - 1] : a.shape[aRank - 2];\n  const outerShapeB = transposeB ? b.shape[bRank - 2] : b.shape[bRank - 1];\n\n  const outerDimsA = a.shape.slice(0, -2);\n  const outerDimsB = b.shape.slice(0, -2);\n\n  const batchDimA = util.sizeFromShape(outerDimsA);\n  const batchDimB = util.sizeFromShape(outerDimsB);\n\n  const batchDimsCompatible =\n      batchDimA === batchDimB || batchDimA === 1 || batchDimB === 1;\n\n  util.assert(\n      aRank >= 2 && bRank >= 2 && batchDimsCompatible,\n      () => `Error in matMul: the input batch dimensions must either be the ` +\n          `same or at least one input batch dimension must be 1. Got input ` +\n          `batch dimensions of (${outerDimsA}) and (${outerDimsB}).`);\n\n  const outShapeOuterDims =\n      batchDimA > batchDimB ? a.shape.slice(0, -2) : b.shape.slice(0, -2);\n  const outShape = outShapeOuterDims.concat([outerShapeA, outerShapeB]);\n\n  util.assert(\n      innerShapeA === innerShapeB,\n      () => `Error in matMul: inner shapes (${innerShapeA}) and (` +\n          `${innerShapeB}) of Tensors with shapes ${a.shape} and ` +\n          `${b.shape} and transposeA=${transposeA}` +\n          ` and transposeB=${transposeB} must match.`);\n\n  const a3dShape = transposeA ? [batchDimA, innerShapeA, outerShapeA] :\n                                [batchDimA, outerShapeA, innerShapeA];\n  const b3dShape = transposeB ? [batchDimB, outerShapeB, innerShapeB] :\n                                [batchDimB, innerShapeB, outerShapeB];\n\n  // The rest of the implementation is designed to operate on rank-3 tensors\n  const a3d = reshape({inputs: {x: a}, backend, attrs: {shape: a3dShape}});\n  const b3d = reshape({inputs: {x: b}, backend, attrs: {shape: b3dShape}});\n\n  const sharedDim = transposeA ? a3d.shape[1] : a3d.shape[2];\n  const leftDim = transposeA ? a3d.shape[2] : a3d.shape[1];\n  const rightDim = transposeB ? b3d.shape[1] : b3d.shape[2];\n  const batchDim = Math.max(batchDimA, batchDimB);\n\n  const a3dValues = backend.data.get(a3d.dataId).values as TypedArray;\n  const b3dValues = backend.data.get(b3d.dataId).values as TypedArray;\n\n  const a3dStrides = util.computeStrides(a3d.shape);\n  const b3dStrides = util.computeStrides(b3d.shape);\n\n  const [aBatch, aOuterStep, aInnerStep] = transposeA ?\n      [a3dStrides[0], 1, a3dStrides[1]] :\n      [a3dStrides[0], a3dStrides[1], 1];\n  const [bInnerStep, bOuterStep, bBatch] = transposeB ?\n      [1, b3dStrides[1], b3dStrides[0]] :\n      [b3dStrides[1], 1, b3dStrides[0]];\n\n  const size = leftDim * rightDim;\n  const result = buffer([batchDim, leftDim, rightDim], a3d.dtype);\n\n  const resVals = result.values as TypedArray;\n  const blockSize = backend.blockSize;\n\n  for (let bi = 0; bi < batchDim; bi++) {\n    for (let i0 = 0; i0 < leftDim; i0 += blockSize) {\n      for (let j0 = 0; j0 < rightDim; j0 += blockSize) {\n        for (let k0 = 0; k0 < sharedDim; k0 += blockSize) {\n          // for when blockSize doesn't evenly divide the input\n          const iBlock = Math.min(i0 + blockSize, leftDim);\n          const jBlock = Math.min(j0 + blockSize, rightDim);\n          const kBlock = Math.min(k0 + blockSize, sharedDim);\n\n          for (let i = i0; i < iBlock; i++) {\n            for (let j = j0; j < jBlock; j++) {\n              let sum = 0.0;\n\n              for (let k = k0; k < kBlock; k++) {\n                const batchOffsetA = Math.min(bi, batchDimA - 1) * aBatch;\n                const batchOffsetB = Math.min(bi, batchDimB - 1) * bBatch;\n                const aVal =\n                    a3dValues[batchOffsetA + i * aOuterStep + k * aInnerStep];\n                const bVal =\n                    b3dValues[k * bInnerStep + j * bOuterStep + batchOffsetB];\n                sum += aVal * bVal;\n              }\n              resVals[bi * size + (i * rightDim + j)] += sum;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  backend.disposeIntermediateTensorInfo(a3d);\n  backend.disposeIntermediateTensorInfo(b3d);\n\n  // set correct shape on output.\n  return backend.makeTensorInfo(\n      outShape, result.dtype, result.values as TypedArray);\n}\n\nexport const batchMatMulConfig: KernelConfig = {\n  kernelName: BatchMatMul,\n  backendName: 'cpu',\n  kernelFunc: batchMatMul as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {_FusedMatMul, _FusedMatMulAttrs, _FusedMatMulInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {applyActivation} from '../utils/fused_utils';\n\nimport {add} from './Add';\nimport {batchMatMul} from './BatchMatMul';\n\nexport function _fusedMatMul(args: {\n  inputs: _FusedMatMulInputs,\n  attrs: _FusedMatMulAttrs,\n  backend: MathBackendCPU\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b, bias, preluActivationWeights} = inputs;\n  const {transposeA, transposeB, activation, leakyreluAlpha} = attrs;\n\n  let current;\n  let addRes;\n  let activationRes;\n\n  const intermediates: TensorInfo[] = [];\n\n  const matMulRes =\n      batchMatMul({inputs: {a, b}, attrs: {transposeA, transposeB}, backend});\n  current = matMulRes;\n\n  if (bias) {\n    addRes = add({inputs: {a: current, b: bias}, backend}) as TensorInfo;\n    intermediates.push(current);\n    current = addRes;\n  }\n  if (activation) {\n    activationRes = applyActivation(\n        backend, current, activation, preluActivationWeights, leakyreluAlpha);\n    intermediates.push(current);\n    current = activationRes;\n  }\n\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n\n  return current;\n}\n\nexport const _fusedMatMulConfig: KernelConfig = {\n  kernelName: _FusedMatMul,\n  backendName: 'cpu',\n  kernelFunc: _fusedMatMul as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Acos, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const acos = unaryKernelFunc(Acos, (xi) => Math.acos(xi));\n\nexport const acosConfig: KernelConfig = {\n  kernelName: Acos,\n  backendName: 'cpu',\n  kernelFunc: acos,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Acosh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const acosh = unaryKernelFunc(Acosh, (xi) => Math.acosh(xi));\n\nexport const acoshConfig: KernelConfig = {\n  kernelName: Acosh,\n  backendName: 'cpu',\n  kernelFunc: acosh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AddN, AddNInputs, buffer, KernelConfig, KernelFunc, Tensor, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function addN(args: {inputs: AddNInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const tensors = inputs as Tensor[];\n\n  assertNotComplex(inputs, 'addN');\n\n  const vals =\n      tensors.map(t => backend.data.get(t.dataId).values as TypedArray);\n  const outBuf = buffer(tensors[0].shape, tensors[0].dtype as 'float32');\n  const outVals = outBuf.values;\n  for (let i = 0; i < tensors.length; i++) {\n    const currVals = vals[i];\n    for (let j = 0; j < outVals.length; j++) {\n      outVals[j] += currVals[j];\n    }\n  }\n\n  return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\n\nexport const addNConfig: KernelConfig = {\n  kernelName: AddN,\n  backendName: 'cpu',\n  kernelFunc: addN as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {All, AllAttrs, AllInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function all(\n    args: {inputs: AllInputs, backend: MathBackendCPU, attrs: AllAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'all');\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('all', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = util.makeZerosTypedArray(util.sizeFromShape(outShape), $x.dtype);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let all = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      all = all && value;\n    }\n    vals[i] = all;\n  }\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo($x);\n  }\n\n  const result = backend.makeTensorInfo(outShape, $x.dtype, vals);\n\n  if (keepDims) {\n    const expandedShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    const reshapedResult =\n        reshape({inputs: {x: result}, backend, attrs: {shape: expandedShape}});\n\n    backend.disposeIntermediateTensorInfo(result);\n\n    return reshapedResult;\n  }\n\n  return result;\n}\n\nexport const allConfig: KernelConfig = {\n  kernelName: All,\n  backendName: 'cpu',\n  kernelFunc: all as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Any, AnyAttrs, AnyInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function any(\n    args: {inputs: AnyInputs, backend: MathBackendCPU, attrs: AnyAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'any');\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('any', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = util.makeZerosTypedArray(util.sizeFromShape(outShape), $x.dtype);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let anyVal = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      anyVal = anyVal || value;\n    }\n    vals[i] = anyVal;\n  }\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo($x);\n  }\n\n  const result = backend.makeTensorInfo(outShape, $x.dtype, vals);\n\n  if (keepDims) {\n    const expandedShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    const reshapedResult =\n        reshape({inputs: {x: result}, backend, attrs: {shape: expandedShape}});\n\n    backend.disposeIntermediateTensorInfo(result);\n\n    return reshapedResult;\n  }\n\n  return result;\n}\n\nexport const anyConfig: KernelConfig = {\n  kernelName: Any,\n  backendName: 'cpu',\n  kernelFunc: any as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMax, ArgMaxAttrs, ArgMaxInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function argMax(\n    args: {inputs: ArgMaxInputs, backend: MathBackendCPU, attrs: ArgMaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  assertNotComplex(x, 'argMax');\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  axes = [axes[0]];\n  backend_util.assertAxesAreInnerMostDims('argMax', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n\n  const outSize = util.sizeFromShape(outShape);\n  const vals = util.makeZerosTypedArray(outSize, 'int32');\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let max = aVals[offset];\n    let maxIndex = 0;\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (value > max) {\n        max = value;\n        maxIndex = j;\n      }\n    }\n    vals[i] = maxIndex;\n  }\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return backend.makeTensorInfo(outShape, 'int32', vals);\n}\n\nexport const argMaxConfig: KernelConfig = {\n  kernelName: ArgMax,\n  backendName: 'cpu',\n  kernelFunc: argMax as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMin, ArgMinAttrs, ArgMinInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function argMin(\n    args: {inputs: ArgMinInputs, backend: MathBackendCPU, attrs: ArgMinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  assertNotComplex(x, 'argMin');\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  axes = [axes[0]];\n  backend_util.assertAxesAreInnerMostDims('argMin', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n\n  const outSize = util.sizeFromShape(outShape);\n  const vals = util.makeZerosTypedArray(outSize, 'int32');\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let min = aVals[offset];\n    let minIndex = 0;\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (value < min) {\n        min = value;\n        minIndex = j;\n      }\n    }\n    vals[i] = minIndex;\n  }\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return backend.makeTensorInfo(outShape, 'int32', vals);\n}\n\nexport const argMinConfig: KernelConfig = {\n  kernelName: ArgMin,\n  backendName: 'cpu',\n  kernelFunc: argMin as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Asin, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const asin = unaryKernelFunc(Asin, (xi) => Math.asin(xi));\n\nexport const asinConfig: KernelConfig = {\n  kernelName: Asin,\n  backendName: 'cpu',\n  kernelFunc: asin,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Asinh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const asinh = unaryKernelFunc(Asinh, (xi) => Math.asinh(xi));\n\nexport const asinhConfig: KernelConfig = {\n  kernelName: Asinh,\n  backendName: 'cpu',\n  kernelFunc: asinh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const atan = unaryKernelFunc(Atan, (xi) => Math.atan(xi));\n\nexport const atanConfig: KernelConfig = {\n  kernelName: Atan,\n  backendName: 'cpu',\n  kernelFunc: atan,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan2, KernelConfig} from '@tensorflow/tfjs-core';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const atan2Impl = createSimpleBinaryKernelImpl(\n    (aValue, bValue) => Math.atan2(aValue, bValue));\n\nexport const atan2 = binaryKernelFunc(Atan2, atan2Impl);\n\nexport const atan2Config: KernelConfig = {\n  kernelName: Atan2,\n  backendName: 'cpu',\n  kernelFunc: atan2,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atanh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const atanh = unaryKernelFunc(Atanh, (xi) => Math.atanh(xi));\n\nexport const atanhConfig: KernelConfig = {\n  kernelName: Atanh,\n  backendName: 'cpu',\n  kernelFunc: atanh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, buffer, DataType, Rank, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\nexport function pool(\n    xValues: TypedArray, xShape: number[], dtype: DataType, strides: number[],\n    convInfo: backend_util.Conv2DInfo,\n    poolType: 'max'|'avg'): TensorBuffer<Rank, DataType> {\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  const initialValue =\n      (poolType === 'max' ? Number.NEGATIVE_INFINITY :\n                            Number.POSITIVE_INFINITY);\n\n  const output = buffer(convInfo.outShape, dtype);\n  const outputVals = output.values;\n\n  const outputBatchStrides =\n      convInfo.outShape[1] * convInfo.outShape[2] * convInfo.outShape[3];\n  const outputRowStrides = convInfo.outShape[2] * convInfo.outShape[3];\n  const outputColStrides = convInfo.outShape[3];\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const outputBatchOffset = b * outputBatchStrides;\n    const inputBatchOffset = b * strides[0];\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n        const xRCorner = yR * strideHeight - padTop;\n        const xRMin = Math.max(0, xRCorner);\n        const xRMax =\n            Math.min(convInfo.inHeight, effectiveFilterHeight + xRCorner);\n        const outputRowOffset = outputBatchOffset + yR * outputRowStrides;\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const xCCorner = yC * strideWidth - padLeft;\n          const xCMin = Math.max(0, xCCorner);\n          const xCMax =\n              Math.min(convInfo.inWidth, effectiveFilterWidth + xCCorner);\n          let minMaxValue = initialValue;\n          let avgValue = 0;\n          let count = 0;\n          for (let xR = xRMin; xR < xRMax; xR += dilationHeight) {\n            const xROffset = inputBatchOffset + xR * strides[1];\n            for (let xC = xCMin; xC < xCMax; xC += dilationWidth) {\n              const xCOffset = xROffset + xC * strides[2];\n              const pixel = xValues[xCOffset + d];\n              if ((poolType === 'max' && pixel > minMaxValue)) {\n                minMaxValue = pixel;\n              } else if (poolType === 'avg') {\n                avgValue += pixel;\n                count++;\n              }\n            }\n            if (isNaN(minMaxValue)) {\n              break;\n            }\n          }\n          const outputOffset = outputRowOffset + yC * outputColStrides + d;\n          outputVals[outputOffset] =\n              poolType === 'avg' ? avgValue / count : minMaxValue;\n        }\n      }\n    }\n  }\n  return output;\n}\n\nexport function maxPoolPositions(\n    xValues: TypedArray, xShape: number[], dtype: DataType,\n    convInfo: backend_util.Conv2DInfo, flattenPositions = false,\n    includeBatchInIndex = false): TensorBuffer<Rank, 'int32'> {\n  const maxPositions = buffer(convInfo.outShape, 'int32');\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  const xBuf = buffer(xShape, dtype, xValues);\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n        const xRCorner = yR * strideHeight - padTop;\n        let xRMin = xRCorner;\n        while (xRMin < 0) {\n          xRMin += dilationHeight;\n        }\n        // const xRMin = Math.max(0, xRCorner);\n        const xRMax =\n            Math.min(convInfo.inHeight, effectiveFilterHeight + xRCorner);\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const xCCorner = yC * strideWidth - padLeft;\n          let xCMin = xCCorner;\n          while (xCMin < 0) {\n            xCMin += dilationWidth;\n          }\n          const xCMax =\n              Math.min(convInfo.inWidth, effectiveFilterWidth + xCCorner);\n          let maxValue = Number.NEGATIVE_INFINITY;\n          let maxPosition = -1;\n\n          for (let xR = xRMin; xR < xRMax; xR += dilationHeight) {\n            const wR = xR - xRCorner;\n            for (let xC = xCMin; xC < xCMax; xC += dilationWidth) {\n              const wC = xC - xCCorner;\n              const pixel = xBuf.get(b, xR, xC, d);\n              if (pixel > maxValue) {\n                maxValue = pixel as number;\n                if (flattenPositions) {\n                  maxPosition = includeBatchInIndex ?\n                      ((b * convInfo.inHeight + xR) * convInfo.inWidth + xC) *\n                              convInfo.inChannels +\n                          d :\n                      (xR * convInfo.inWidth + xC) * convInfo.inChannels + d;\n                } else {\n                  maxPosition = wR * effectiveFilterWidth + wC;\n                }\n              }\n            }\n          }\n          maxPositions.set(maxPosition, b, yR, yC, d);\n        }\n      }\n    }\n  }\n  return maxPositions;\n}\n\nexport function pool3d(\n    xValues: TypedArray, xShape: number[], dtype: DataType, strides: number[],\n    convInfo: backend_util.Conv3DInfo,\n    poolType: 'max'|'avg'): TensorBuffer<Rank, DataType> {\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = convInfo.padInfo.front;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  const initialValue =\n      (poolType === 'max' ? Number.NEGATIVE_INFINITY :\n                            Number.POSITIVE_INFINITY);\n\n  const output = buffer(convInfo.outShape, dtype);\n  const outputVals = output.values;\n\n  const outputBatchStrides = convInfo.outShape[1] * convInfo.outShape[2] *\n      convInfo.outShape[3] * convInfo.outShape[4];\n  const outputDepthStrides =\n      convInfo.outShape[2] * convInfo.outShape[3] * convInfo.outShape[4];\n  const outputRowStrides = convInfo.outShape[3] * convInfo.outShape[4];\n  const outputColStrides = convInfo.outShape[4];\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    const outputBatchOffset = batch * outputBatchStrides;\n    const inputBatchOffset = batch * strides[0];\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {\n        const xDepthCorner = yDepth * strideDepth - padFront;\n        let xDepthMin = xDepthCorner;\n        while (xDepthMin < 0) {\n          xDepthMin += dilationDepth;\n        }\n        const xDepthMax =\n            Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);\n        const outputDepthOffset =\n            outputBatchOffset + yDepth * outputDepthStrides;\n        for (let yRow = 0; yRow < convInfo.outHeight; ++yRow) {\n          const xRowCorner = yRow * strideHeight - padTop;\n          let xRowMin = xRowCorner;\n          while (xRowMin < 0) {\n            xRowMin += dilationHeight;\n          }\n          const xRowMax =\n              Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);\n          const outputRowOffset = outputDepthOffset + yRow * outputRowStrides;\n          for (let yCol = 0; yCol < convInfo.outWidth; ++yCol) {\n            const xColCorner = yCol * strideWidth - padLeft;\n            let xColMin = xColCorner;\n            while (xColMin < 0) {\n              xColMin += dilationWidth;\n            }\n            const xColMax =\n                Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);\n            // Shader code begins\n            const outputColOffset = outputRowOffset + yCol * outputColStrides;\n            let minMaxValue = initialValue;\n            let avgValue = 0;\n            let count = 0;\n            for (let xDepth = xDepthMin; xDepth < xDepthMax;\n                 xDepth += dilationDepth) {\n              const xDepthOffset = inputBatchOffset + xDepth * strides[1];\n              for (let xRow = xRowMin; xRow < xRowMax; xRow += dilationHeight) {\n                const xRowOffset = xDepthOffset + xRow * strides[2];\n                for (let xCol = xColMin; xCol < xColMax;\n                     xCol += dilationWidth) {\n                  const xColOffset = xRowOffset + xCol * strides[3];\n                  const pixel = xValues[xColOffset + channel];\n                  if ((poolType === 'max' && pixel > minMaxValue)) {\n                    minMaxValue = pixel;\n                  } else if (poolType === 'avg') {\n                    avgValue += pixel;\n                    count++;\n                  }\n                  if (isNaN(minMaxValue)) {\n                    break;\n                  }\n                }\n                if (isNaN(minMaxValue)) {\n                  break;\n                }\n              }\n              if (isNaN(minMaxValue)) {\n                break;\n              }\n            }\n            const outputOffset = outputColOffset + channel;\n            outputVals[outputOffset] =\n                poolType === 'avg' ? avgValue / count : minMaxValue;\n          }\n        }\n      }\n    }\n  }\n\n  return output;\n}\n\nexport function maxPool3dPositions(\n    xBuf: TensorBuffer<Rank, DataType>,\n    convInfo: backend_util.Conv3DInfo): TensorBuffer<Rank, DataType> {\n  const maxPositions = buffer(convInfo.outShape, 'int32');\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = convInfo.padInfo.front;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {\n        const xDepthCorner = yDepth * strideDepth - padFront;\n        let xDepthMin = xDepthCorner;\n        while (xDepthMin < 0) {\n          xDepthMin += dilationDepth;\n        }\n        const xDepthMax =\n            Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);\n        for (let yRow = 0; yRow < convInfo.outHeight; ++yRow) {\n          const xRowCorner = yRow * strideHeight - padTop;\n          let xRowMin = xRowCorner;\n          while (xRowMin < 0) {\n            xRowMin += dilationHeight;\n          }\n          const xRowMax =\n              Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);\n          for (let yCol = 0; yCol < convInfo.outWidth; ++yCol) {\n            const xColCorner = yCol * strideWidth - padLeft;\n            let xColMin = xColCorner;\n            while (xColMin < 0) {\n              xColMin += dilationWidth;\n            }\n            const xColMax =\n                Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);\n\n            // Shader code begins\n            let maxValue = Number.NEGATIVE_INFINITY;\n            let maxPosition = -1;\n\n            for (let xDepth = xDepthMin; xDepth < xDepthMax;\n                 xDepth += dilationDepth) {\n              const wDepth = xDepth - xDepthCorner;\n              for (let xRow = xRowMin; xRow < xRowMax; xRow += dilationHeight) {\n                const wRow = xRow - xRowCorner;\n                for (let xCol = xColMin; xCol < xColMax;\n                     xCol += dilationWidth) {\n                  const wCol = xCol - xColCorner;\n                  const pixel = xBuf.get(batch, xDepth, xRow, xCol, channel);\n                  if (pixel >= maxValue) {\n                    maxValue = pixel as number;\n                    maxPosition =\n                        wDepth * effectiveFilterHeight * effectiveFilterWidth +\n                        wRow * effectiveFilterHeight + wCol;\n                  }\n                }\n              }\n            }\n\n            maxPositions.set(maxPosition, batch, yDepth, yRow, yCol, channel);\n          }\n        }\n      }\n    }\n  }\n\n  return maxPositions;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPool, AvgPoolAttrs, AvgPoolInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool} from '../utils/pool_utils';\nimport {identity} from './Identity';\n\nexport function avgPool(\n    args:\n        {inputs: AvgPoolInputs, backend: MathBackendCPU, attrs: AvgPoolAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  assertNotComplex(x, 'avgPool');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in avgPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  let res: TensorInfo;\n\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    res = identity({inputs: {x}, backend});\n  } else {\n    const xValues = backend.data.get(x.dataId).values as TypedArray;\n    const strides = util.computeStrides(x.shape);\n    const buffer = pool(xValues, x.shape, x.dtype, strides, convInfo, 'avg');\n    res = backend.makeTensorInfo(\n        convInfo.outShape, x.dtype, buffer.values as TypedArray);\n  }\n  return res;\n}\n\nexport const avgPoolConfig: KernelConfig = {\n  kernelName: AvgPool,\n  backendName: 'cpu',\n  kernelFunc: avgPool as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AvgPool3D, AvgPool3DAttrs, AvgPool3DInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool3d} from '../utils/pool_utils';\n\nexport function avgPool3D(args: {\n  inputs: AvgPool3DInputs,\n  backend: MathBackendCPU,\n  attrs: AvgPool3DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode, dataFormat} = attrs;\n\n  assertNotComplex(x, 'avgPool3d');\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode, dataFormat);\n\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const outBuf = pool3d(\n      xValues, x.shape, x.dtype, util.computeStrides(x.shape), convInfo, 'avg');\n\n  return backend.makeTensorInfo(outBuf.shape, 'float32', outBuf.values);\n}\n\nexport const avgPool3DConfig: KernelConfig = {\n  kernelName: AvgPool3D,\n  backendName: 'cpu',\n  kernelFunc: avgPool3D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AvgPool3DGrad, AvgPool3DGradAttrs, AvgPool3DGradInputs, backend_util, buffer, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function avgPool3DGrad(args: {\n  inputs: AvgPool3DGradInputs,\n  backend: MathBackendCPU,\n  attrs: AvgPool3DGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  assertNotComplex([dy, input], 'avgPool3DGrad');\n\n  const convInfo = backend_util.computePool3DInfo(\n      input.shape as [number, number, number, number, number], filterSize,\n      strides, 1 /* dilations */, pad, dimRoundingMode);\n\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const filterDepth = convInfo.filterDepth;\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx = buffer(input.shape, 'float32');\n\n  const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);\n\n  const dyBuf = backend.bufferSync(dy);\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n        for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n          for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n            // Shader code begins.\n            const dyDepthCorner = dxDepth - padFront;\n            const dyRowCorner = dxRow - padTop;\n            const dyColCorner = dxCol - padLeft;\n            let dotProd = 0;\n            for (let wDepth = 0; wDepth < effectiveFilterDepth;\n                 wDepth += dilationDepth) {\n              const dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n              if (dyDepth < 0 || dyDepth >= convInfo.outDepth ||\n                  Math.floor(dyDepth) !== dyDepth) {\n                continue;\n              }\n              for (let wRow = 0; wRow < effectiveFilterHeight;\n                   wRow += dilationHeight) {\n                const dyRow = (dyRowCorner + wRow) / strideHeight;\n                if (dyRow < 0 || dyRow >= convInfo.outHeight ||\n                    Math.floor(dyRow) !== dyRow) {\n                  continue;\n                }\n                for (let wCol = 0; wCol < effectiveFilterWidth;\n                     wCol += dilationWidth) {\n                  const dyCol = (dyColCorner + wCol) / strideWidth;\n                  if (dyCol < 0 || dyCol >= convInfo.outWidth ||\n                      Math.floor(dyCol) !== dyCol) {\n                    continue;\n                  }\n\n                  const pixel =\n                      dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                  dotProd += pixel;\n                }\n              }\n            }\n            dx.set(\n                dotProd * avgMultiplier, batch, dxDepth, dxRow, dxCol, channel);\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const avgPool3DGradConfig: KernelConfig = {\n  kernelName: AvgPool3DGrad,\n  backendName: 'cpu',\n  kernelFunc: avgPool3DGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPoolGrad, AvgPoolGradAttrs, AvgPoolGradInputs, backend_util, buffer, KernelConfig, KernelFunc, Rank, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function avgPoolGrad(args: {\n  inputs: AvgPoolGradInputs,\n  backend: MathBackendCPU,\n  attrs: AvgPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  assertNotComplex([dy, input], 'avgPoolGrad');\n  const {filterSize, strides, pad} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad);\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx =\n      buffer<Rank.R4>(x.shape as [number, number, number, number], 'float32');\n\n  const avgMultiplier = 1 / (filterHeight * filterWidth);\n\n  const dyData = backend.data.get(dy.dataId).values as Float32Array;\n  const dyBuf = buffer<Rank.R4>(\n      dy.shape as [number, number, number, number], 'float32', dyData);\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n        for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n          // Shader code begins.\n          const dyRCorner = dxR - padTop;\n          const dyCCorner = dxC - padLeft;\n          let dotProd = 0;\n          for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n            const dyR = (dyRCorner + wR) / strideHeight;\n            if (dyR < 0 || dyR >= convInfo.outHeight ||\n                Math.floor(dyR) !== dyR) {\n              continue;\n            }\n            for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n              const dyC = (dyCCorner + wC) / strideWidth;\n              if (dyC < 0 || dyC >= convInfo.outWidth ||\n                  Math.floor(dyC) !== dyC) {\n                continue;\n              }\n\n              const pixel = dyBuf.get(b, dyR, dyC, d);\n              dotProd += pixel;\n            }\n          }\n          dx.set(dotProd * avgMultiplier, b, dxR, dxC, d);\n        }\n      }\n    }\n  }\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const avgPoolGradConfig: KernelConfig = {\n  kernelName: AvgPoolGrad,\n  backendName: 'cpu',\n  kernelFunc: avgPoolGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FusedBatchNorm, FusedBatchNormAttrs, FusedBatchNormInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function batchNorm(args: {\n  inputs: FusedBatchNormInputs,\n  backend: MathBackendCPU,\n  attrs: FusedBatchNormAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, scale, offset, mean, variance} = inputs;\n\n  util.assert(\n      mean.shape.length === variance.shape.length,\n      () => 'Batch normalization gradient requires mean and variance to have ' +\n          'equal ranks.');\n  util.assert(\n      offset == null || mean.shape.length === offset.shape.length,\n      () => 'Batch normalization gradient requires mean and offset to have ' +\n          'equal ranks.');\n  util.assert(\n      scale == null || mean.shape.length === scale.shape.length,\n      () => 'Batch normalization gradient requires mean and scale to have ' +\n          'equal ranks.');\n\n  assertNotComplex([x, mean, variance, scale, offset], 'batchNorm');\n\n  let {varianceEpsilon} = attrs;\n  if (varianceEpsilon == null) {\n    varianceEpsilon = 0.001;\n  }\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const mVals = backend.data.get(mean.dataId).values as TypedArray;\n  const varVals = backend.data.get(variance.dataId).values as TypedArray;\n  const sVals = scale ? backend.data.get(scale.dataId).values as TypedArray :\n                        new Float32Array([1]);\n  const offVals = offset ?\n      backend.data.get(offset.dataId).values as TypedArray :\n      new Float32Array([0]);\n  const outVals = new Float32Array(xVals.length);\n\n  const offValsLength = offVals.length;\n  const sValsLength = sVals.length;\n  const varValsLength = varVals.length;\n  const mValsLength = mVals.length;\n\n  let offi = 0;\n  let mi = 0;\n  let si = 0;\n  let vi = 0;\n  for (let i = 0; i < xVals.length; ++i) {\n    outVals[i] = offVals[offi++] +\n        (xVals[i] - mVals[mi++]) * sVals[si++] /\n            Math.sqrt(varVals[vi++] + varianceEpsilon);\n    if (offi >= offValsLength) {\n      offi = 0;\n    }\n    if (mi >= mValsLength) {\n      mi = 0;\n    }\n    if (si >= sValsLength) {\n      si = 0;\n    }\n    if (vi >= varValsLength) {\n      vi = 0;\n    }\n  }\n  return backend.makeTensorInfo(x.shape, x.dtype, outVals);\n}\n\nexport const batchNormConfig: KernelConfig = {\n  kernelName: FusedBatchNorm,\n  backendName: 'cpu',\n  kernelFunc: batchNorm as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BatchToSpaceND, BatchToSpaceNDAttrs, BatchToSpaceNDInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\nimport {transpose} from './Transpose';\n\nexport function batchToSpaceND(args: {\n  inputs: BatchToSpaceNDInputs,\n  backend: MathBackendCPU,\n  attrs: BatchToSpaceNDAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, crops} = attrs;\n\n  assertNotComplex([x], 'batchToSpaceND');\n\n  const prod = blockShape.reduce((a, b) => a * b);\n\n  const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n  const permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n  const reshapedPermuted =\n      backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n  const sliceBeginCoords =\n      backend_util.getSliceBeginCoords(crops, blockShape.length);\n  const sliceSize =\n      backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n\n  const xReshaped = reshape({inputs: {x}, backend, attrs: {shape: reshaped}});\n  const xTransposed =\n      transpose({inputs: {x: xReshaped}, backend, attrs: {perm: permuted}});\n  const xTransposedReshaped = reshape(\n      {inputs: {x: xTransposed}, backend, attrs: {shape: reshapedPermuted}});\n  const result = slice({\n    inputs: {x: xTransposedReshaped},\n    backend,\n    attrs: {begin: sliceBeginCoords, size: sliceSize}\n  });\n\n  backend.disposeIntermediateTensorInfo(xReshaped);\n  backend.disposeIntermediateTensorInfo(xTransposed);\n  backend.disposeIntermediateTensorInfo(xTransposedReshaped);\n\n  return result;\n}\n\nexport const batchToSpaceNDConfig: KernelConfig = {\n  kernelName: BatchToSpaceND,\n  backendName: 'cpu',\n  kernelFunc: batchToSpaceND as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Bincount, BincountAttrs, BincountInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {bincountImpl} from './Bincount_impl';\n\nexport function bincount(args: {\n  inputs: BincountInputs,\n  backend: MathBackendCPU,\n  attrs: BincountAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size} = attrs;\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const weightsVals = backend.data.get(weights.dataId).values as TypedArray;\n\n  const outVals =\n      bincountImpl(xVals, weightsVals, weights.dtype, weights.shape, size);\n\n  return backend.makeTensorInfo([size], weights.dtype, outVals);\n}\n\nexport const bincountConfig: KernelConfig = {\n  kernelName: Bincount,\n  backendName: 'cpu',\n  kernelFunc: bincount as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ClipByValue, ClipByValueAttrs, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const clip = unaryKernelFunc(ClipByValue, (xi, attrs) => {\n  const clipAttrs = attrs as {} as ClipByValueAttrs;\n  if (xi > clipAttrs.clipValueMax) {\n    return clipAttrs.clipValueMax;\n  }\n  return xi < clipAttrs.clipValueMin ? clipAttrs.clipValueMin : xi;\n});\n\nexport const clipConfig: KernelConfig = {\n  kernelName: ClipByValue,\n  backendName: 'cpu',\n  kernelFunc: clip,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ComplexAbs, ComplexAbsInputs, KernelConfig, KernelFunc, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const complexAbs =\n    (args: {inputs: ComplexAbsInputs, backend: MathBackendCPU}) => {\n      const {x} = args.inputs;\n      const cpuBackend = args.backend;\n      const resultValues = new Float32Array(util.sizeFromShape(x.shape));\n      const complexVals = cpuBackend.data.get(x.dataId);\n      const real = complexVals.complexTensorInfos.real;\n      const imag = complexVals.complexTensorInfos.imag;\n      const realVals = cpuBackend.data.get(real.dataId).values as Float32Array;\n      const imagVals = cpuBackend.data.get(imag.dataId).values as Float32Array;\n      for (let i = 0; i < realVals.length; i++) {\n        const real = realVals[i];\n        const imag = imagVals[i];\n        resultValues[i] = Math.hypot(real, imag);\n      }\n\n      return cpuBackend.makeOutput(resultValues, x.shape, 'float32');\n    };\n\nexport const complexAbsConfig: KernelConfig = {\n  kernelName: ComplexAbs,\n  backendName: 'cpu',\n  kernelFunc: complexAbs as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Imag, ImagInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function imag(args: {inputs: ImagInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const imag = backend.data.get(input.dataId).complexTensorInfos.imag;\n  const imagVal = backend.data.get(imag.dataId).values;\n\n  // When complex tensor is disposed, its underlying parts will be disposed too.\n  // Make new tensor out of the imag value of the complex. This makes sure the\n  // value is still accessible even if complex tensor is disposed.\n  return backend.makeTensorInfo(imag.shape, imag.dtype, imagVal);\n}\n\nexport const imagConfig: KernelConfig = {\n  kernelName: Imag,\n  backendName: 'cpu',\n  kernelFunc: imag as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Concat, ConcatAttrs, ConcatInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {complex} from './Complex';\nimport {concatImpl} from './Concat_impl';\nimport {identity} from './Identity';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {reshape} from './Reshape';\n\nexport function concat(\n    args: {inputs: ConcatInputs, backend: MathBackendCPU, attrs: ConcatAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, inputs[0].shape)[0];\n  let outShape = backend_util.computeOutShape(inputs.map(t => t.shape), $axis);\n\n  if (util.sizeFromShape(outShape) === 0) {\n    return backend.makeTensorInfo(outShape, inputs[0].dtype, []);\n  }\n\n  // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n  const $inputs = inputs.filter(t => util.sizeFromShape(t.shape) > 0);\n  if ($inputs.length === 1) {\n    return identity({inputs: {x: $inputs[0]}, backend});\n  }\n\n  const shapes = $inputs.map(t => t.shape);\n  backend_util.assertParamsConsistent(shapes, $axis);\n\n  if ($inputs[0].dtype === 'complex64') {\n    const reals = $inputs.map((t) => real({inputs: {input: t}, backend}));\n    const imags = $inputs.map((t) => imag({inputs: {input: t}, backend}));\n\n    const realConcated = concat({inputs: reals, backend, attrs: {axis: $axis}});\n    const imagConcated = concat({inputs: imags, backend, attrs: {axis: $axis}});\n\n    const result =\n        complex({inputs: {real: realConcated, imag: imagConcated}, backend});\n\n    reals.forEach(r => backend.disposeIntermediateTensorInfo(r));\n    imags.forEach(i => backend.disposeIntermediateTensorInfo(i));\n    backend.disposeIntermediateTensorInfo(realConcated);\n    backend.disposeIntermediateTensorInfo(imagConcated);\n\n    return result;\n  }\n\n  // Any concat of n-dimensional tensors across any axis can be reduced to\n  // a concatenation of two-dimensional tensors across the axis 1 by first\n  // partitioning the axes of the original tensors into those less than the\n  // axis to be concatenated and the rest. Then reshape the tensors\n  // into a two-dimensional tensor by collapsing these two sets of axes and\n  // concatenate the resulting matrices across the axis 1, finally reshaping\n  // the result to have the proper shape.\n  const inputs2D = $inputs.map(t => {\n    const innerSize = util.sizeFromShape(t.shape.slice($axis));\n    const shape = [-1, innerSize];\n    return reshape({inputs: {x: t}, backend, attrs: {shape}});\n  });\n\n  const inputsValShapes = inputs2D.map(t => {\n    return {vals: backend.data.get(t.dataId).values, shape: t.shape};\n  });\n\n  // Concats 2d tensors along axis=1.\n  outShape =\n      backend_util.computeOutShape(inputs2D.map(t => t.shape), 1 /* axis */);\n  const simplyConcat = inputs2D[0].shape[0] === 1;\n  const outVals =\n      concatImpl(inputsValShapes, outShape, inputs[0].dtype, simplyConcat);\n\n  const finalOutShape =\n      backend_util.computeOutShape($inputs.map(t => t.shape), $axis);\n\n  const outInfo =\n      backend.makeTensorInfo(finalOutShape, inputs[0].dtype, outVals);\n\n  inputs2D.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return outInfo;\n}\n\nexport const concatConfig: KernelConfig = {\n  kernelName: Concat,\n  backendName: 'cpu',\n  kernelFunc: concat as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2D, Conv2DAttrs, Conv2DInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv2D(\n    args: {inputs: Conv2DInputs, backend: MathBackendCPU, attrs: Conv2DAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dataFormat, dilations, dimRoundingMode} = attrs;\n\n  assertNotComplex([x, filter], 'conv2d');\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, dilations, pad,\n      dimRoundingMode, false /* depthwise */, $dataFormat);\n\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const padLeft = convInfo.padInfo.left;\n  const padTop = convInfo.padInfo.top;\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n  const y = new TensorBuffer(convInfo.outShape, x.dtype as 'float32');\n\n  const xStrides = util.computeStrides(x.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  const xBatchStride = xStrides[0];\n  const xRowStride = isChannelsLast ? xStrides[1] : xStrides[2];\n  const xColStride = isChannelsLast ? xStrides[2] : 1;\n  const xChannelStride = isChannelsLast ? 1 : xStrides[1];\n  const yBatchStride = y.strides[0];\n  const yRowStride = isChannelsLast ? y.strides[1] : y.strides[2];\n  const yColStride = isChannelsLast ? y.strides[2] : 1;\n  const yChannelStride = isChannelsLast ? 1 : y.strides[1];\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const wVals = backend.data.get(filter.dataId).values as TypedArray;\n  const yVals = y.values;\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const xOffset1 = b * xBatchStride;\n    const yOffset1 = b * yBatchStride;\n    for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n      const yOffset2 = yOffset1 + yR * yRowStride;\n      const xRCorner = yR * convInfo.strideHeight - padTop;\n      for (let wR = 0; wR < filterHeight; ++wR) {\n        const xR = xRCorner + wR * dilationHeight;\n        if (xR < 0 || xR >= convInfo.inHeight) {\n          continue;\n        }\n        const wOffset1 = wR * filterStrides[0];\n        const xOffset2 = xOffset1 + xR * xRowStride;\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const yOffset3 = yOffset2 + yC * yColStride;\n          const xCCorner = yC * convInfo.strideWidth - padLeft;\n          for (let wC = 0; wC < filterWidth; ++wC) {\n            const xC = xCCorner + wC * dilationWidth;\n            if (xC < 0 || xC >= convInfo.inWidth) {\n              continue;\n            }\n            const wOffset2 = wOffset1 + wC * filterStrides[1];\n            const xOffset3 = xOffset2 + xC * xColStride;\n            let wOffset3 = wOffset2;\n            for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n              const xVal = xVals[xOffset3 + d1 * xChannelStride];\n              for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                yVals[yOffset3 + d2 * yChannelStride] +=\n                    xVal * wVals[wOffset3 + d2];\n              }\n              wOffset3 += convInfo.outChannels;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, y.dtype, yVals);\n}\n\nexport const conv2DConfig: KernelConfig = {\n  kernelName: Conv2D,\n  backendName: 'cpu',\n  kernelFunc: conv2D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropFilter, Conv2DBackpropFilterAttrs, Conv2DBackpropFilterInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv2DBackpropFilter(args: {\n  inputs: Conv2DBackpropFilterInputs,\n  backend: MathBackendCPU,\n  attrs: Conv2DBackpropFilterAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, dataFormat, dimRoundingMode, filterShape} = attrs;\n\n  assertNotComplex([x, dy], 'conv2dBackpropFilter');\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad, dimRoundingMode, false /* depthwise */,\n      $dataFormat);\n\n  const {strideHeight, strideWidth, filterHeight, filterWidth} = convInfo;\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n  const dW = new TensorBuffer(convInfo.filterShape, 'float32');\n\n  const leftPad = convInfo.padInfo.left;\n  const topPad = convInfo.padInfo.top;\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const dyVals = backend.data.get(dy.dataId).values as TypedArray;\n\n  const xBuf = new TensorBuffer(x.shape, x.dtype, xVals);\n  const dyBuf = new TensorBuffer(dy.shape, dy.dtype, dyVals);\n\n  for (let wR = 0; wR < filterHeight; ++wR) {\n    const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n    const yRMax = Math.min(\n        convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n\n    for (let wC = 0; wC < filterWidth; ++wC) {\n      const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n      const yCMax = Math.min(\n          convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n\n      for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n        for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n          let dotProd = 0;\n          for (let b = 0; b < convInfo.batchSize; ++b) {\n            for (let yR = yRMin; yR < yRMax; ++yR) {\n              const xR = wR + yR * strideHeight - topPad;\n              for (let yC = yCMin; yC < yCMax; ++yC) {\n                const xC = wC + yC * strideWidth - leftPad;\n                if (isChannelsLast) {\n                  dotProd += (xBuf.get(b, xR, xC, d1) as number) *\n                      (dyBuf.get(b, yR, yC, d2) as number);\n                } else {\n                  dotProd += (xBuf.get(b, d1, xR, xC) as number) *\n                      (dyBuf.get(b, d2, yR, yC) as number);\n                }\n              }\n            }\n          }\n          dW.set(dotProd, wR, wC, d1, d2);\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dW.shape, dW.dtype, dW.values);\n}\n\nexport const conv2DBackpropFilterConfig: KernelConfig = {\n  kernelName: Conv2DBackpropFilter,\n  backendName: 'cpu',\n  kernelFunc: conv2DBackpropFilter as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropInput, Conv2DBackpropInputAttrs, Conv2DBackpropInputInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv2DBackpropInput(args: {\n  inputs: Conv2DBackpropInputInputs,\n  backend: MathBackendCPU,\n  attrs: Conv2DBackpropInputAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {inputShape, strides, pad, dataFormat, dimRoundingMode} = attrs;\n\n  assertNotComplex([dy, filter], 'conv2dBackpropInput');\n\n  const filterStrides = util.computeStrides(filter.shape);\n  const dyStrides = util.computeStrides(dy.shape);\n\n  let $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      1 /* dilations */, pad, dimRoundingMode, false, $dataFormat);\n\n  const dx = new TensorBuffer(convInfo.inShape, 'float32');\n  const dxValues = dx.values;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const fltValues = backend.data.get(filter.dataId).values as TypedArray;\n  const [fltS0, fltS1, fltS2] = filterStrides;\n  const {\n    batchSize,\n    filterHeight,\n    filterWidth,\n    inChannels,\n    inHeight,\n    inWidth,\n    outChannels,\n    outHeight,\n    outWidth,\n    strideHeight,\n    strideWidth\n  } = convInfo;\n  $dataFormat = convInfo.dataFormat;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n\n  const isChannelsLast = $dataFormat === 'channelsLast';\n  const xBatchStride = dx.strides[0];\n  const xRowStride = isChannelsLast ? dx.strides[1] : dx.strides[2];\n  const xColStride = isChannelsLast ? dx.strides[2] : 1;\n  const xChannelStride = isChannelsLast ? 1 : dx.strides[1];\n  const yBatchStride = dyStrides[0];\n  const yRowStride = isChannelsLast ? dyStrides[1] : dyStrides[2];\n  const yColStride = isChannelsLast ? dyStrides[2] : 1;\n  const yChannelStride = isChannelsLast ? 1 : dyStrides[1];\n\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      for (let xR = 0; xR < inHeight; ++xR) {\n        const xRCorner = xR - topPad;\n        const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n        const yRMax =\n            Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n\n        for (let xC = 0; xC < inWidth; ++xC) {\n          const xCCorner = xC - leftPad;\n          const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n          const yCMax =\n              Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n          let dotProd = 0;\n          for (let yR = xRMin; yR < yRMax; ++yR) {\n            const wR = yR * strideHeight - xRCorner;\n\n            for (let yC = xCMin; yC < yCMax; ++yC) {\n              const wC = yC * strideWidth - xCCorner;\n              const dyOffset =\n                  yBatchStride * b + yRowStride * yR + yColStride * yC;\n              const fltOffset = fltS0 * (filterHeight - 1 - wR) +\n                  fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n\n              for (let d2 = 0; d2 < outChannels; ++d2) {\n                const pixel = dyValues[dyOffset + yChannelStride * d2];\n                const weight = fltValues[fltOffset + d2];\n                dotProd += pixel * weight;\n              }\n            }\n          }\n          const dxOffset = xBatchStride * b + xRowStride * xR +\n              xColStride * xC + xChannelStride * d1;\n          dxValues[dxOffset] = dotProd;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const conv2DBackpropInputConfig: KernelConfig = {\n  kernelName: Conv2DBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: conv2DBackpropInput as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3D, Conv3DAttrs, Conv3DInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv3D(\n    args: {inputs: Conv3DInputs, backend: MathBackendCPU, attrs: Conv3DAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations} = attrs;\n\n  assertNotComplex([x, filter], 'conv3d');\n\n  const convInfo = backend_util.computeConv3DInfo(\n      x.shape as [number, number, number, number, number],\n      filter.shape as [number, number, number, number, number], strides,\n      dilations, pad);\n\n  const {\n    filterDepth,\n    filterHeight,\n    filterWidth,\n    dilationDepth,\n    dilationHeight,\n    dilationWidth,\n    padInfo\n  } = convInfo;\n  const padFront = padInfo.front;\n  const padLeft = padInfo.left;\n  const padTop = padInfo.top;\n  const y = new TensorBuffer(convInfo.outShape, x.dtype as 'float32');\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const wVals = backend.data.get(filter.dataId).values as TypedArray;\n  const yVals = y.values;\n\n  const xStrides = util.computeStrides(x.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const xOffset1 = b * xStrides[0];\n    const yOffset1 = b * y.strides[0];\n    for (let yF = 0; yF < convInfo.outDepth; ++yF) {\n      const yOffset2 = yOffset1 + yF * y.strides[1];\n      const xFCorner = yF * convInfo.strideDepth - padFront;\n      for (let wF = 0; wF < filterDepth; ++wF) {\n        const xF = xFCorner + wF * dilationDepth;\n        if (xF < 0 || xF >= convInfo.inDepth) {\n          continue;\n        }\n        const wOffset1 = wF * filterStrides[0];\n        const xOffset2 = xOffset1 + xF * xStrides[1];\n\n        for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n          const yOffset3 = yOffset2 + yR * y.strides[2];\n          const xRCorner = yR * convInfo.strideHeight - padTop;\n          for (let wR = 0; wR < filterHeight; ++wR) {\n            const xR = xRCorner + wR * dilationHeight;\n            if (xR < 0 || xR >= convInfo.inHeight) {\n              continue;\n            }\n            const wOffset2 = wOffset1 + wR * filterStrides[1];\n            const xOffset3 = xOffset2 + xR * xStrides[2];\n            for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n              const yOffset4 = yOffset3 + yC * convInfo.outChannels;\n              const xCCorner = yC * convInfo.strideWidth - padLeft;\n              for (let wC = 0; wC < filterWidth; ++wC) {\n                const xC = xCCorner + wC * dilationWidth;\n                if (xC < 0 || xC >= convInfo.inWidth) {\n                  continue;\n                }\n                const wOffset3 = wOffset2 + wC * filterStrides[2];\n                const xOffset4 = xOffset3 + xC * convInfo.inChannels;\n                let wOffset4 = wOffset3;\n                for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                  const xVal = xVals[xOffset4 + d1];\n                  for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                    yVals[yOffset4 + d2] += xVal * wVals[wOffset4 + d2];\n                  }\n                  wOffset4 += convInfo.outChannels;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, y.dtype, y.values);\n}\n\nexport const conv3DConfig: KernelConfig = {\n  kernelName: Conv3D,\n  backendName: 'cpu',\n  kernelFunc: conv3D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3DBackpropFilterV2, Conv3DBackpropFilterV2Attrs, Conv3DBackpropFilterV2Inputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv3DBackpropFilterV2(args: {\n  inputs: Conv3DBackpropFilterV2Inputs,\n  backend: MathBackendCPU,\n  attrs: Conv3DBackpropFilterV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, filterShape} = attrs;\n\n  assertNotComplex([x, dy], 'conv3dBackpropFilterV2');\n\n  const xStrides = util.computeStrides(x.shape);\n  const dyStrides = util.computeStrides(dy.shape);\n\n  const convInfo = backend_util.computeConv3DInfo(\n      x.shape as [number, number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad);\n\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const filterDepth = convInfo.filterDepth;\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n\n  const dw = new TensorBuffer(convInfo.filterShape, 'float32');\n  const dwValues = dw.values;\n  const [dwS0, dwS1, dwS2, dwS3] = dw.strides;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const [dyS0, dyS1, dyS2, dyS3] = dyStrides;\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const [xS0, xS1, xS2, xS3] = xStrides;\n\n  const frontPad = convInfo.padInfo.front;\n  const leftPad = convInfo.padInfo.left;\n  const topPad = convInfo.padInfo.top;\n\n  for (let wF = 0; wF < filterDepth; ++wF) {\n    const yFMin = Math.max(0, Math.ceil((frontPad - wF) / strideDepth));\n    const yFMax = Math.min(\n        convInfo.outDepth, (convInfo.inDepth + frontPad - wF) / strideDepth);\n    const wOffset1 = wF * dwS0;\n\n    for (let wR = 0; wR < filterHeight; ++wR) {\n      const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n      const yRMax = Math.min(\n          convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n      const wOffset2 = wR * dwS1 + wOffset1;\n\n      for (let wC = 0; wC < filterWidth; ++wC) {\n        const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n        const yCMax = Math.min(\n            convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n        const wOffset3 = wC * dwS2 + wOffset2;\n\n        for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n          const wOffset4 = d1 * dwS3 + wOffset3;\n\n          for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n            let dotProd = 0;\n            for (let b = 0; b < convInfo.batchSize; ++b) {\n              const xOffset1 = b * xS0;\n              const yOffset1 = b * dyS0;\n\n              for (let yF = yFMin; yF < yFMax; ++yF) {\n                const xF = wF + yF * strideDepth - frontPad;\n                const xOffset2 = xF * xS1 + xOffset1;\n                const yOffset2 = yF * dyS1 + yOffset1;\n\n                for (let yR = yRMin; yR < yRMax; ++yR) {\n                  const xR = wR + yR * strideHeight - topPad;\n                  const xOffset3 = xR * xS2 + xOffset2;\n                  const yOffset3 = yR * dyS2 + yOffset2;\n\n                  for (let yC = yCMin; yC < yCMax; ++yC) {\n                    const xC = wC + yC * strideWidth - leftPad;\n                    const xOffset4 = xC * xS3 + xOffset3;\n                    const yOffset4 = yC * dyS3 + yOffset3;\n\n                    dotProd += xValues[xOffset4 + d1] * dyValues[yOffset4 + d2];\n                  }\n                }\n              }\n            }\n            dwValues[wOffset4 + d2] = dotProd;\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dw.shape, dw.dtype, dw.values);\n}\n\nexport const conv3DBackpropFilterV2Config: KernelConfig = {\n  kernelName: Conv3DBackpropFilterV2,\n  backendName: 'cpu',\n  kernelFunc: conv3DBackpropFilterV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3DBackpropInputV2, Conv3DBackpropInputV2Attrs, Conv3DBackpropInputV2Inputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv3DBackpropInputV2(args: {\n  inputs: Conv3DBackpropInputV2Inputs,\n  backend: MathBackendCPU,\n  attrs: Conv3DBackpropInputV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {pad, strides, inputShape} = attrs;\n\n  assertNotComplex([dy], 'conv3dBackpropInputV2');\n\n  const dyStrides = util.computeStrides(dy.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  const convInfo = backend_util.computeConv3DInfo(\n      inputShape, filter.shape as [number, number, number, number, number],\n      strides, 1 /* dilations */, pad);\n\n  const dx = new TensorBuffer(convInfo.inShape, 'float32');\n  const dxValues = dx.values;\n  const [dxS0, dxS1, dxS2, dxS3] = dx.strides;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const [dyS0, dyS1, dyS2, dyS3] = dyStrides;\n  const fltValues = backend.data.get(filter.dataId).values as TypedArray;\n  const [fltS0, fltS1, fltS2, fltS3] = filterStrides;\n  const {\n    batchSize,\n    filterDepth,\n    filterHeight,\n    filterWidth,\n    inChannels,\n    inDepth,\n    inHeight,\n    inWidth,\n    outChannels,\n    outDepth,\n    outHeight,\n    outWidth,\n    strideDepth,\n    strideHeight,\n    strideWidth\n  } = convInfo;\n  const frontPad = filterDepth - 1 - convInfo.padInfo.front;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      // Frames of depth\n      for (let xF = 0; xF < inDepth; ++xF) {\n        const xFCorner = xF - frontPad;\n        const xFMin = Math.max(0, Math.ceil(xFCorner / strideDepth));\n        const yFMax =\n            Math.min(outDepth, (filterDepth + xFCorner) / strideDepth);\n\n        // Rows as per standard 2d matrix notation\n        for (let xR = 0; xR < inHeight; ++xR) {\n          const xRCorner = xR - topPad;\n          const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n          const yRMax =\n              Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n          // Columns as per standard 2d matrix notation\n          for (let xC = 0; xC < inWidth; ++xC) {\n            const xCCorner = xC - leftPad;\n            const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n            const yCMax =\n                Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n            let dotProd = 0;\n            for (let yF = xFMin; yF < yFMax; ++yF) {\n              const wF = yF * strideDepth - xFCorner;\n\n              for (let yR = xRMin; yR < yRMax; ++yR) {\n                const wR = yR * strideHeight - xRCorner;\n\n                for (let yC = xCMin; yC < yCMax; ++yC) {\n                  const wC = yC * strideWidth - xCCorner;\n                  const dyOffset = dyS0 * b + dyS1 * yF + dyS2 * yR + dyS3 * yC;\n                  const fltOffset = fltS0 * (filterDepth - 1 - wF) +\n                      fltS1 * (filterHeight - 1 - wR) +\n                      fltS2 * (filterWidth - 1 - wC) + fltS3 * d1;\n\n                  for (let d2 = 0; d2 < outChannels; ++d2) {\n                    const pixel = dyValues[dyOffset + d2];\n                    const weight = fltValues[fltOffset + d2];\n                    dotProd += pixel * weight;\n                  }\n                }\n              }\n            }\n            dxValues[dxS0 * b + dxS1 * xF + dxS2 * xR + dxS3 * xC + d1] =\n                dotProd;\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const conv3DBackpropInputV2Config: KernelConfig = {\n  kernelName: Conv3DBackpropInputV2,\n  backendName: 'cpu',\n  kernelFunc: conv3DBackpropInputV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cos, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const cos = unaryKernelFunc(Cos, (xi) => Math.cos(xi));\n\nexport const cosConfig: KernelConfig = {\n  kernelName: Cos,\n  backendName: 'cpu',\n  kernelFunc: cos,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cosh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const cosh = unaryKernelFunc(Cosh, (xi) => Math.cosh(xi));\n\nexport const coshConfig: KernelConfig = {\n  kernelName: Cosh,\n  backendName: 'cpu',\n  kernelFunc: cosh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, CropAndResize, CropAndResizeAttrs, CropAndResizeInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function cropAndResize(args: {\n  inputs: CropAndResizeInputs,\n  backend: MathBackendCPU,\n  attrs: CropAndResizeAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {image, boxes, boxInd} = inputs;\n  const {cropSize, method, extrapolationValue} = attrs;\n\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n  const numBoxes = boxes.shape[0];\n\n  const [cropHeight, cropWidth] = cropSize;\n  const output =\n      buffer([numBoxes, cropHeight, cropWidth, numChannels], 'float32');\n\n  const boxVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const boxIndVals = backend.data.get(boxInd.dataId).values as TypedArray;\n  const imageVals = backend.data.get(image.dataId).values as TypedArray;\n\n  const inStride =\n      util.computeStrides(image.shape);  // to calculate flat indexes into image\n  const outStride = util.computeStrides(\n      output.shape);  // to calculate flat indexes into output\n\n  // Reference implementation\n  // tslint:disable-next-line:max-line-length\n  // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op.cc\n  for (let b = 0; b < numBoxes; b++) {\n    const startInd = b * 4;\n    const y1 = boxVals[startInd];\n    const x1 = boxVals[startInd + 1];\n    const y2 = boxVals[startInd + 2];\n    const x2 = boxVals[startInd + 3];\n\n    const bInd: number = boxIndVals[b];\n    if (bInd >= batch) {\n      continue;\n    }\n\n    const heightScale =\n        (cropHeight > 1) ? (y2 - y1) * (imageHeight - 1) / (cropHeight - 1) : 0;\n    const widthScale =\n        (cropWidth > 1) ? (x2 - x1) * (imageWidth - 1) / (cropWidth - 1) : 0;\n\n    for (let y = 0; y < cropHeight; y++) {\n      const yInd: number = (cropHeight > 1) ?\n          y1 * (imageHeight - 1) + y * (heightScale) :\n          0.5 * (y1 + y2) * (imageHeight - 1);\n\n      if (yInd < 0 || yInd > imageHeight - 1) {\n        for (let x = 0; x < cropWidth; x++) {\n          for (let c = 0; c < numChannels; c++) {\n            const ind =\n                c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n            output.values[ind] = extrapolationValue;\n          }\n        }\n        continue;\n      }\n\n      if (method === 'bilinear') {\n        const topInd = Math.floor(yInd);\n        const bottomInd = Math.ceil(yInd);\n        const yLerp = yInd - topInd;\n\n        for (let x = 0; x < cropWidth; x++) {\n          const xInd = (cropWidth > 1) ?\n              x1 * (imageWidth - 1) + x * widthScale :\n              0.5 * (x1 + x2) * (imageWidth - 1);\n\n          if (xInd < 0 || xInd > imageWidth - 1) {\n            for (let c = 0; c < numChannels; c++) {\n              const ind =\n                  c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n              output.values[ind] = extrapolationValue;\n            }\n            continue;\n          }\n\n          const leftInd = Math.floor(xInd);\n          const rightInd = Math.ceil(xInd);\n          const xLerp = xInd - leftInd;\n\n          for (let c = 0; c < numChannels; c++) {\n            let ind = c + leftInd * inStride[2] + topInd * inStride[1] +\n                bInd * inStride[0];\n            const topLeft = imageVals[ind];\n\n            ind = c + rightInd * inStride[2] + topInd * inStride[1] +\n                bInd * inStride[0];\n            const topRight = imageVals[ind];\n\n            ind = c + leftInd * inStride[2] + bottomInd * inStride[1] +\n                bInd * inStride[0];\n            const bottomLeft = imageVals[ind];\n\n            ind = c + rightInd * inStride[2] + bottomInd * inStride[1] +\n                bInd * inStride[0];\n            const bottomRight = imageVals[ind];\n\n            const top = topLeft + (topRight - topLeft) * xLerp;\n            const bottom = bottomLeft + (bottomRight - bottomLeft) * xLerp;\n\n            ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n            output.values[ind] = top + ((bottom - top) * yLerp);\n          }\n        }\n      } else {  // method == \"nearest\"\n        for (let x = 0; x < cropWidth; ++x) {\n          const xInd = (cropWidth > 1) ?\n              x1 * (imageWidth - 1) + x * widthScale :\n              0.5 * (x1 + x2) * (imageWidth - 1);\n\n          if (xInd < 0 || xInd > imageWidth - 1) {\n            for (let c = 0; c < numChannels; c++) {\n              const ind =\n                  c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n              output.values[ind] = extrapolationValue;\n            }\n            continue;\n          }\n\n          const closestX = Math.round(xInd);\n          const closestY = Math.round(yInd);\n          for (let c = 0; c < numChannels; c++) {\n            const inInd = c + closestX * inStride[2] + closestY * inStride[1] +\n                bInd * inStride[0];\n            const outInd =\n                c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n            output.values[outInd] = imageVals[inInd];\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(output.shape, output.dtype, output.values);\n}\n\nexport const cropAndResizeConfig: KernelConfig = {\n  kernelName: CropAndResize,\n  backendName: 'cpu',\n  kernelFunc: cropAndResize as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Cumsum, CumsumAttrs, CumsumInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function cumsum(\n    args: {inputs: CumsumInputs, backend: MathBackendCPU, attrs: CumsumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, exclusive, reverse} = attrs;\n\n  assertNotComplex(x, 'cumsum');\n\n  const permutation = backend_util.getAxesPermutation([axis], x.shape.length);\n  let $x = x;\n  if (permutation != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n  }\n  const permutedAxis = backend_util.getInnerMostAxes(1, x.shape.length)[0];\n\n  if (permutedAxis !== $x.shape.length - 1) {\n    throw new Error(\n        `backend.cumsum in CPU expects an inner-most ` +\n        `axis=${$x.shape.length - 1} but got axis=${permutedAxis}`);\n  }\n\n  const resultDtype = upcastType($x.dtype, 'int32');\n  const vals = util.makeZerosTypedArray(\n                   util.sizeFromShape($x.shape), resultDtype) as TypedArray;\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  const finalDim = $x.shape[$x.shape.length - 1];\n  const indexAdjuster = reverse ?\n      (i: number, j: number) => i + finalDim - j - 1 :\n      (i: number, j: number) => i + j;\n  for (let i = 0; i < aVals.length; i += finalDim) {\n    for (let j = 0; j < finalDim; j++) {\n      const idx = indexAdjuster(i, j);\n      if (j === 0) {\n        vals[idx] = exclusive ? 0 : aVals[idx];\n      } else {\n        const prevIdx = indexAdjuster(i, j - 1);\n        vals[idx] = exclusive ? aVals[prevIdx] + vals[prevIdx] :\n                                aVals[idx] + vals[prevIdx];\n      }\n    }\n  }\n\n  const result = backend.makeTensorInfo($x.shape, resultDtype, vals);\n\n  if (permutation != null) {\n    const reversePermutation = backend_util.getUndoAxesPermutation(permutation);\n    const reverseTransposedResult = transpose(\n        {inputs: {x: result}, backend, attrs: {perm: reversePermutation}});\n\n    backend.disposeIntermediateTensorInfo(result);\n    backend.disposeIntermediateTensorInfo($x);\n\n    return reverseTransposedResult;\n  }\n\n  return result;\n}\n\nexport const cumsumConfig: KernelConfig = {\n  kernelName: Cumsum,\n  backendName: 'cpu',\n  kernelFunc: cumsum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DenseBincount, DenseBincountAttrs, DenseBincountInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {bincountImpl, bincountReduceImpl} from './Bincount_impl';\n\nexport function denseBincount(args: {\n  inputs: DenseBincountInputs,\n  backend: MathBackendCPU,\n  attrs: DenseBincountAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size, binaryOutput} = attrs;\n\n  if (x.shape.length === 1) {\n    const xVals = backend.data.get(x.dataId).values as TypedArray;\n    const weightsVals = backend.data.get(weights.dataId).values as TypedArray;\n\n    const outVals =\n        bincountImpl(xVals, weightsVals, weights.dtype, weights.shape, size);\n\n    return backend.makeTensorInfo([size], weights.dtype, outVals);\n  } else if (x.shape.length === 2) {\n    const xBuf = backend.bufferSync(x);\n    const weightsBuf = backend.bufferSync(weights);\n\n    const outBuf = bincountReduceImpl(xBuf, weightsBuf, size, binaryOutput);\n\n    return backend.makeTensorInfo(outBuf.shape, weights.dtype, outBuf.values);\n  }\n\n  throw new Error(\n      `Error in denseBincount: input must be at most rank 2, but got rank` +\n      `${x.shape.length}.`);\n}\n\nexport const denseBincountConfig: KernelConfig = {\n  kernelName: DenseBincount,\n  backendName: 'cpu',\n  kernelFunc: denseBincount as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DepthToSpace, DepthToSpaceAttrs, DepthToSpaceInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function depthToSpace(args: {\n  inputs: DepthToSpaceInputs,\n  backend: MathBackendCPU,\n  attrs: DepthToSpaceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockSize, dataFormat} = attrs;\n\n  util.assert(\n      dataFormat === 'NHWC',\n      () => `Only NHWC dataFormat supported on CPU for depthToSpace. Got ${\n          dataFormat}`);\n  util.assert(\n      blockSize > 1,\n      () => `blockSize should be > 1 for depthToSpace, but was: ${blockSize}`);\n\n  const batchSize = x.shape[0];\n  const inputHeight = x.shape[1];\n  const inputWidth = x.shape[2];\n  const inputDepth = x.shape[3];\n\n  const outputHeight = inputHeight * blockSize;\n  const outputWidth = inputWidth * blockSize;\n  const outputDepth = inputDepth / (blockSize * blockSize);\n\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const result =\n      new Float32Array(batchSize * outputHeight * outputWidth * outputDepth);\n\n  let outputIdx = 0;\n  for (let b = 0; b < batchSize; ++b) {\n    for (let h = 0; h < outputHeight; ++h) {\n      const inH = Math.floor(h / blockSize);\n      const offsetH = (h % blockSize);\n      for (let w = 0; w < outputWidth; ++w) {\n        const inW = Math.floor(w / blockSize);\n        const offsetW = (w % blockSize);\n        const offsetD = (offsetH * blockSize + offsetW) * outputDepth;\n        for (let d = 0; d < outputDepth; ++d) {\n          const inD = d + offsetD;\n          const inputIdx =\n              inD + inputDepth * (inW + inputWidth * (inH + inputHeight * b));\n          result[outputIdx++] = xValues[inputIdx];\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batchSize, outputHeight, outputWidth, outputDepth], x.dtype, result);\n}\n\nexport const depthToSpaceConfig: KernelConfig = {\n  kernelName: DepthToSpace,\n  backendName: 'cpu',\n  kernelFunc: depthToSpace as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNative, DepthwiseConv2dNativeAttrs, DepthwiseConv2dNativeInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function depthwiseConv2dNative(args: {\n  inputs: DepthwiseConv2dNativeInputs,\n  backend: MathBackendCPU,\n  attrs: DepthwiseConv2dNativeAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations, dimRoundingMode} = attrs;\n\n  assertNotComplex([x, filter], 'depthwiseConv2DNative');\n\n  const xStrides = util.computeStrides(x.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, $dilations),\n      () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n          `1. Got strides ${strides} and dilations '${$dilations}'`);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, $dilations,\n      pad, dimRoundingMode, true /* depthwise */);\n\n  const {filterHeight, filterWidth, dilationHeight, dilationWidth, padInfo} =\n      convInfo;\n  const padLeft = padInfo.left;\n  const padTop = padInfo.top;\n  const chMul = convInfo.outChannels / convInfo.inChannels;\n  const y = new TensorBuffer(convInfo.outShape, x.dtype as 'float32');\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const wVals = backend.data.get(filter.dataId).values as TypedArray;\n  const yVals = y.values;\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const xOffset1 = b * xStrides[0];\n    const yOffset1 = b * y.strides[0];\n    for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n      const yOffset2 = yOffset1 + yR * y.strides[1];\n      const xRCorner = yR * convInfo.strideHeight - padLeft;\n      for (let wR = 0; wR < filterHeight; ++wR) {\n        const xR = xRCorner + wR * dilationHeight;\n        if (xR < 0 || xR >= convInfo.inHeight) {\n          continue;\n        }\n        const wOffset1 = wR * filterStrides[0];\n        const xOffset2 = xOffset1 + xR * xStrides[1];\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const yOffset3 = yOffset2 + yC * y.strides[2];\n          const xCCorner = yC * convInfo.strideWidth - padTop;\n          for (let wC = 0; wC < filterWidth; ++wC) {\n            const xC = xCCorner + wC * dilationWidth;\n            if (xC < 0 || xC >= convInfo.inWidth) {\n              continue;\n            }\n            const wOffset2 = wOffset1 + wC * filterStrides[1];\n            const xOffset3 = xOffset2 + xC * convInfo.inChannels;\n            let yOffset4 = yOffset3;\n            let wOffset3 = wOffset2;\n            for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n              const xVal = xVals[xOffset3 + d1];\n              for (let q = 0; q < chMul; ++q) {\n                yVals[yOffset4 + q] += xVal * wVals[wOffset3 + q];\n              }\n              yOffset4 += chMul;\n              wOffset3 += chMul;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, y.dtype, y.values);\n}\n\nexport const depthwiseConv2dNativeConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNative,\n  backendName: 'cpu',\n  kernelFunc: depthwiseConv2dNative as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropFilter, DepthwiseConv2dNativeBackpropFilterAttrs, DepthwiseConv2dNativeBackpropFilterInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function depthwiseConv2dNativeBackpropFilter(args: {\n  inputs: DepthwiseConv2dNativeBackpropFilterInputs,\n  backend: MathBackendCPU,\n  attrs: DepthwiseConv2dNativeBackpropFilterAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, filterShape} = attrs;\n\n  assertNotComplex([x, dy], 'depthwiseConv2dNativeBackpropFilter');\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const {strideHeight, strideWidth, filterHeight, filterWidth} = convInfo;\n\n  const dW = new TensorBuffer(convInfo.filterShape, 'float32');\n\n  const leftPad = convInfo.padInfo.left;\n  const topPad = convInfo.padInfo.top;\n  const chMul = convInfo.outChannels / convInfo.inChannels;\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const xBuf = new TensorBuffer(x.shape, x.dtype, xVals);\n  const dyVals = backend.data.get(dy.dataId).values as TypedArray;\n  const dyBuf = new TensorBuffer(dy.shape, dy.dtype, dyVals);\n  for (let wR = 0; wR < filterHeight; ++wR) {\n    const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n    const yRMax = Math.min(\n        convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n\n    for (let wC = 0; wC < filterWidth; ++wC) {\n      const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n      const yCMax = Math.min(\n          convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n\n      for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n        const d1 = Math.trunc(d2 / chMul);\n        const dm = d2 % chMul;\n\n        let dotProd = 0;\n        for (let b = 0; b < convInfo.batchSize; ++b) {\n          for (let yR = yRMin; yR < yRMax; ++yR) {\n            const xR = wR + yR * strideHeight - topPad;\n            for (let yC = yCMin; yC < yCMax; ++yC) {\n              const xC = wC + yC * strideWidth - leftPad;\n              dotProd += (xBuf.get(b, xR, xC, d1) as number) *\n                  (dyBuf.get(b, yR, yC, d2) as number);\n            }\n          }\n        }\n        dW.set(dotProd, wR, wC, d1, dm);\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dW.shape, dW.dtype, dW.values);\n}\n\nexport const depthwiseConv2dNativeBackpropFilterConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropFilter,\n  backendName: 'cpu',\n  kernelFunc: depthwiseConv2dNativeBackpropFilter as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropInput, DepthwiseConv2dNativeBackpropInputAttrs, DepthwiseConv2dNativeBackpropInputInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function depthwiseConv2dNativeBackpropInput(args: {\n  inputs: DepthwiseConv2dNativeBackpropInputInputs,\n  backend: MathBackendCPU,\n  attrs: DepthwiseConv2dNativeBackpropInputAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, inputShape} = attrs;\n\n  assertNotComplex([dy, filter], 'depthwiseConv2DNativeBackpropInput');\n\n  const dyStrides = util.computeStrides(dy.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const dx = new TensorBuffer(convInfo.inShape, 'float32');\n  const dxValues = dx.values;\n  const [dxS0, dxS1, dxS2] = dx.strides;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const [dyS0, dyS1, dyS2] = dyStrides;\n  const fltValues = backend.data.get(filter.dataId).values as TypedArray;\n  const [fltS0, fltS1, fltS2] = filterStrides;\n  const {\n    batchSize,\n    filterHeight,\n    filterWidth,\n    inChannels,\n    inHeight,\n    inWidth,\n    outChannels,\n    outHeight,\n    outWidth,\n    strideHeight,\n    strideWidth\n  } = convInfo;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n  const chMul = outChannels / inChannels;\n\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      for (let xR = 0; xR < inHeight; ++xR) {\n        const xRCorner = xR - topPad;\n        const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n        const yRMax =\n            Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n\n        for (let xC = 0; xC < inWidth; ++xC) {\n          const xCCorner = xC - leftPad;\n          const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n          const yCMax =\n              Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n          let dotProd = 0;\n          for (let yR = xRMin; yR < yRMax; ++yR) {\n            const wR = yR * strideHeight - xRCorner;\n\n            for (let yC = xCMin; yC < yCMax; ++yC) {\n              const wC = yC * strideWidth - xCCorner;\n              const dyOffset = dyS0 * b + dyS1 * yR + dyS2 * yC;\n              const fltOffset = fltS0 * (filterHeight - 1 - wR) +\n                  fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n\n              for (let dm = 0; dm < chMul; ++dm) {\n                const d2 = d1 * chMul + dm;\n                const pixel = dyValues[dyOffset + d2];\n                const weight = fltValues[fltOffset + dm];\n                dotProd += pixel * weight;\n              }\n            }\n          }\n          dxValues[dxS0 * b + dxS1 * xR + dxS2 * xC + d1] = dotProd;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const depthwiseConv2dNativeBackpropInputConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: depthwiseConv2dNativeBackpropInput as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, Diag, DiagInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function diag(args: {inputs: DiagInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  const xSize = util.sizeFromShape(x.shape);\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const outBuf = buffer([xSize, xSize], x.dtype);\n  const vals = outBuf.values;\n  for (let i = 0; i < xVals.length; i++) {\n    vals[i * xSize + i] = xVals[i];\n  }\n\n  const outShape = [...x.shape, ...x.shape];\n\n  return backend.makeTensorInfo(outShape, outBuf.dtype, outBuf.values);\n}\n\nexport const diagConfig: KernelConfig = {\n  kernelName: Diag,\n  backendName: 'cpu',\n  kernelFunc: diag as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2D, Dilation2DAttrs, Dilation2DInputs, KernelConfig, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const dilation2dConfig: KernelConfig = {\n  kernelName: Dilation2D,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {x, filter} = inputs as Dilation2DInputs;\n    const {strides, pad, dilations} = attrs as {} as Dilation2DAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const xVals = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const xRank = x.shape.length;\n\n    const filterVals = cpuBackend.data.get(filter.dataId).values as TypedArray;\n    const filterRank = filter.shape.length;\n\n    const {\n      batchSize,\n      inHeight,\n      inWidth,\n      inChannels,\n      outHeight,\n      outWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth,\n      outShape\n    } =\n        backend_util.computeDilation2DInfo(\n            x.shape as [number, number, number, number],\n            filter.shape as [number, number, number], strides, pad,\n            'NHWC' /* dataFormat */, dilations);\n\n    const outSize = util.sizeFromShape(outShape);\n    const outRank = outShape.length;\n    const outputVals = util.getArrayFromDType(x.dtype, outSize);\n\n    // Upsampling the input by fill in `dilation size - 1` values between each\n    // input value.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const xIndex = util.locToIndex(\n                        [b, hIn, wIn, d], xRank, util.computeStrides(x.shape));\n                    const filterIndex = util.locToIndex(\n                        [h, w, d], filterRank,\n                        util.computeStrides(filter.shape));\n                    const val = xVals[xIndex] + filterVals[filterIndex];\n                    if (val > curVal) {\n                      curVal = val;\n                    }\n                  }\n                }\n              }\n            }\n            const outputIndex = util.locToIndex(\n                [b, hOut, wOut, d], outRank, util.computeStrides(outShape));\n            outputVals[outputIndex] = curVal;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(\n        util.toTypedArray(outputVals, x.dtype), outShape, x.dtype);\n\n    return {dataId, shape: outShape, dtype: x.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2DAttrs, Dilation2DBackpropFilter, Tensor3D, Tensor4D, TypedArray, util} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const dilation2dBackpropFilterConfig: KernelConfig = {\n  kernelName: Dilation2DBackpropFilter,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {x, filter, dy} =\n        inputs as {x: Tensor4D, filter: Tensor3D, dy: Tensor4D};\n    const {strides, pad, dilations} = attrs as {} as Dilation2DAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const $x =\n        util.toNestedArray(\n            x.shape, cpuBackend.data.get(x.dataId).values as TypedArray) as\n        number[][][][];\n\n    const $filter = util.toNestedArray(\n                        filter.shape,\n                        cpuBackend.data.get(filter.dataId).values as\n                            TypedArray) as number[][][];\n\n    const {\n      batchSize,\n      inHeight,\n      inWidth,\n      inChannels,\n      outHeight,\n      outWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth,\n      outShape\n    } =\n        backend_util.computeDilation2DInfo(\n            x.shape as [number, number, number, number],\n            filter.shape as [number, number, number], strides, pad,\n            'NHWC' /* dataFormat */, dilations);\n\n    util.assert(\n        dy.rank === outShape.length,\n        () => `Error in ${Dilation2DBackpropFilter}, dy ` +\n            `must have the same rank as output ${outShape.length}, but got ` +\n            `${dy.rank}`);\n\n    const $dy =\n        util.toNestedArray(\n            outShape, cpuBackend.data.get(dy.dataId).values as TypedArray) as\n        number[][][][];\n\n    // The computed filter gradients has the same dimensions as the filter:\n    // [filterHeight, filterWidth, depth]\n    const gradients = util.makeZerosNestedTypedArray(\n                          filter.shape, filter.dtype) as number[][][];\n\n    // In the case of multiple argmax branches, we only back-propagate along the\n    // last branch, i.e., the one with largest value of `h * filter_cols + w`,\n    // similarly to the max-pooling backward routines.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n            let hMax = 0;\n            let wMax = 0;\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const val = $x[b][hIn][wIn][d] + $filter[h][w][d];\n                    if (val > curVal) {\n                      curVal = val;\n                      hMax = h;\n                      wMax = w;\n                    }\n                  }\n                }\n              }\n            }\n            gradients[hMax][wMax][d] += $dy[b][hOut][wOut][d];\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(\n        util.toTypedArray(gradients, x.dtype), filter.shape, filter.dtype);\n\n    return {dataId, shape: filter.shape, dtype: filter.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2DAttrs, Dilation2DBackpropInput, Tensor3D, Tensor4D, TypedArray, util} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const dilation2dBackpropInputConfig: KernelConfig = {\n  kernelName: Dilation2DBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {x, filter, dy} =\n        inputs as {x: Tensor4D, filter: Tensor3D, dy: Tensor4D};\n    const {strides, pad, dilations} = attrs as {} as Dilation2DAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const $x =\n        util.toNestedArray(\n            x.shape, cpuBackend.data.get(x.dataId).values as TypedArray) as\n        number[][][][];\n\n    const $filter = util.toNestedArray(\n                        filter.shape,\n                        cpuBackend.data.get(filter.dataId).values as\n                            TypedArray) as number[][][];\n\n    const {\n      batchSize,\n      inHeight,\n      inWidth,\n      inChannels,\n      outHeight,\n      outWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth,\n      outShape\n    } =\n        backend_util.computeDilation2DInfo(\n            x.shape as [number, number, number, number],\n            filter.shape as [number, number, number], strides, pad,\n            'NHWC' /* dataFormat */, dilations);\n\n    util.assert(\n        dy.rank === outShape.length,\n        () => `Error in ${Dilation2DBackpropInput}, dy ` +\n            `must have the same rank as output ${outShape.length}, but got ` +\n            `${dy.rank}`);\n\n    const $dy =\n        util.toNestedArray(\n            outShape, cpuBackend.data.get(dy.dataId).values as TypedArray) as\n        number[][][][];\n\n    // The computed gradients has the same dimensions as the input:\n    // [batch, inputHeight, inputCols, inChannel]\n    const gradients =\n        util.makeZerosNestedTypedArray(x.shape, x.dtype) as number[][][][];\n\n    // In the case of multiple argmax branches, we only back-propagate along the\n    // last branch, i.e., the one with largest value of `h * filter_cols + w`,\n    // similarly to the max-pooling backward routines.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n            let hInMax = (hBeg < 0) ? 0 : hBeg;\n            let wInMax = (wBeg < 0) ? 0 : wBeg;\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const val = $x[b][hIn][wIn][d] + $filter[h][w][d];\n                    if (val > curVal) {\n                      curVal = val;\n                      hInMax = hIn;\n                      wInMax = wIn;\n                    }\n                  }\n                }\n              }\n            }\n            gradients[b][hInMax][wInMax][d] += $dy[b][hOut][wOut][d];\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(\n        util.toTypedArray(gradients, x.dtype), x.shape, x.dtype);\n\n    return {dataId, shape: x.shape, dtype: x.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Sum, SumAttrs, SumInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {zeros} from '../utils/zeros_impl';\nimport {cast} from './Cast';\nimport {identity} from './Identity';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function sum(\n    args: {inputs: SumInputs, backend: MathBackendCPU, attrs: SumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'sum');\n\n  let $x;\n  if (x.dtype === 'bool') {\n    $x = cast({inputs: {x}, backend, attrs: {dtype: 'int32'}});\n  } else {\n    $x = identity({inputs: {x}, backend});\n  }\n\n  const xRank = $x.shape.length;\n  const axes = util.parseAxisParam(axis, $x.shape);\n  const permutation = backend_util.getAxesPermutation(axes, xRank);\n\n  let reductionAxes = axes;\n  let permutedX = $x;\n  if (permutation != null) {\n    permutedX =\n        transpose({inputs: {x: $x}, backend, attrs: {perm: permutation}});\n    reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims(\n      'sum', reductionAxes, permutedX.shape.length);\n\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(permutedX.shape, reductionAxes);\n  const resultDtype = backend_util.upcastType(permutedX.dtype, 'int32');\n  let result = zeros(backend, outShape, resultDtype);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = backend.data.get(result.dataId).values as TypedArray;\n\n  const aVals = backend.data.get(permutedX.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let sum = 0;\n    for (let j = 0; j < reduceSize; ++j) {\n      sum += aVals[offset + j];\n    }\n    vals[i] = sum;\n  }\n\n  if (keepDims) {\n    const newShape = backend_util.expandShapeToKeepDim(result.shape, axes);\n    const oldResult = result;\n    result = reshape({inputs: {x: result}, backend, attrs: {shape: newShape}});\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n\n  backend.disposeIntermediateTensorInfo($x);\n\n  if (permutation != null) {\n    backend.disposeIntermediateTensorInfo(permutedX);\n  }\n\n  return result;\n}\n\nexport const sumConfig: KernelConfig = {\n  kernelName: Sum,\n  backendName: 'cpu',\n  kernelFunc: sum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Einsum, EinsumAttrs, EinsumInputs, KernelConfig, KernelFunc, Tensor, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {multiply} from './Multiply';\nimport {reshape} from './Reshape';\nimport {sum} from './Sum';\nimport {transpose} from './Transpose';\n\nexport function einsum(\n    args: {inputs: EinsumInputs, backend: MathBackendCPU, attrs: EinsumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {equation} = attrs;\n  const tensors = inputs as Tensor[];\n\n  const {allDims, summedDims, idDims} =\n      backend_util.decodeEinsumEquation(equation, tensors.length);\n  backend_util.checkEinsumDimSizes(allDims.length, idDims, tensors);\n  const {path, steps} = backend_util.getEinsumComputePath(summedDims, idDims);\n\n  const nSteps = steps.length;\n  let out: TensorInfo|null = null;\n  let numDimsRemaining = allDims.length;\n  const tensorsToDispose: TensorInfo[] = [];\n  for (let i = 0; i < nSteps; ++i) {\n    for (const idTerm of steps[i]) {\n      const {permutationIndices: perm, expandDims: dimsToExpand} =\n          backend_util.getEinsumPermutation(numDimsRemaining, idDims[idTerm]);\n      let x: TensorInfo;\n      if (backend_util.isIdentityPermutation(perm)) {\n        x = tensors[idTerm];\n      } else {\n        x = transpose({inputs: {x: tensors[idTerm]}, backend, attrs: {perm}});\n        tensorsToDispose.push(x);\n      }\n      const targetShape: number[] = x.shape.slice();\n      for (let k = 0; k < dimsToExpand.length; ++k) {\n        targetShape.splice(dimsToExpand[k], 0, 1);\n      }\n\n      if (!util.arraysEqual(x.shape, targetShape)) {\n        x = reshape({inputs: {x}, backend, attrs: {shape: targetShape}});\n        tensorsToDispose.push(x);\n      }\n      if (out === null) {\n        out = x;\n      } else {\n        // tslint:disable-next-line: no-unnecessary-type-assertion\n        out = multiply({inputs: {a: x, b: out}, backend}) as TensorInfo;\n        tensorsToDispose.push(out);\n      }\n    }\n    if (i < nSteps - 1) {\n      if (path[i] >= 0) {\n        out = sum({\n          inputs: {x: out},\n          backend,\n          attrs: {\n            axis: path[i] - (allDims.length - numDimsRemaining),\n            keepDims: false\n          }\n        });\n        tensorsToDispose.push(out);\n      }\n      numDimsRemaining--;\n    }\n  }\n\n  // Clean up intermediate tensors.\n  for (const tensorInfo of tensorsToDispose) {\n    if (tensorInfo === out) {\n      continue;\n    }\n    backend.disposeIntermediateTensorInfo(tensorInfo);\n  }\n\n  return out;\n}\n\nexport const einsumConfig: KernelConfig = {\n  kernelName: Einsum,\n  backendName: 'cpu',\n  kernelFunc: einsum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {EluGrad, EluGradInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function eluGrad(args: {inputs: EluGradInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {dy, y} = inputs;\n\n  assertNotComplex([dy, y], 'eluGrad');\n\n  const resultValues = new Float32Array(util.sizeFromShape(y.shape));\n  const values = backend.data.get(y.dataId).values as TypedArray;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  for (let i = 0; i < values.length; ++i) {\n    const v = values[i];\n    if (v >= 1) {\n      resultValues[i] = dyValues[i];\n    } else {\n      resultValues[i] = dyValues[i] * (v + 1);\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, 'float32', resultValues);\n}\n\nexport const eluGradConfig: KernelConfig = {\n  kernelName: EluGrad,\n  backendName: 'cpu',\n  kernelFunc: eluGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Equal, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const equalImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a === b) ? 1 : 0);\nexport const equal =\n    binaryKernelFunc(Equal, equalImpl, null /* complexImpl */, 'bool');\n\nexport const equalConfig: KernelConfig = {\n  kernelName: Equal,\n  backendName: 'cpu',\n  kernelFunc: equal\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Erf, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nconst p = backend_util.ERF_P;\nconst a1 = backend_util.ERF_A1;\nconst a2 = backend_util.ERF_A2;\nconst a3 = backend_util.ERF_A3;\nconst a4 = backend_util.ERF_A4;\nconst a5 = backend_util.ERF_A5;\n\nexport const erf = unaryKernelFunc(\n    Erf,\n    (xi) => {\n      const sign = Math.sign(xi);\n      const v = Math.abs(xi);\n      const t = 1.0 / (1.0 + p * v);\n      return sign *\n          (1.0 -\n           (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t *\n               Math.exp(-v * v));\n    },\n);\n\nexport const erfConfig: KernelConfig = {\n  kernelName: Erf,\n  backendName: 'cpu',\n  kernelFunc: erf,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ExpandDims, ExpandDimsAttrs, ExpandDimsInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {reshape} from './Reshape';\n\nexport function expandDims(args: {\n  inputs: ExpandDimsInputs,\n  backend: MathBackendCPU,\n  attrs: ExpandDimsAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {input} = inputs;\n  const {dim} = attrs;\n\n  const inputRank = input.shape.length;\n  const newShape = input.shape.slice();\n  let $dim = dim;\n  if (dim < 0) {\n    // Negative value is counted from the tail of rank.\n    util.assert(\n        -(inputRank + 1) <= dim,\n        () => `Axis must be in the interval [${- (inputRank + 1)}, ${\n            inputRank}]`);\n    $dim = inputRank + dim + 1;\n  }\n  newShape.splice($dim, 0, 1);\n\n  return reshape({inputs: {x: input}, backend, attrs: {shape: newShape}});\n}\n\nexport const expandDimsConfig: KernelConfig = {\n  kernelName: ExpandDims,\n  backendName: 'cpu',\n  kernelFunc: expandDims as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, RealDiv} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const realDivImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => a / b);\nexport const div = binaryKernelFunc(RealDiv, realDivImpl);\n\nexport const realDivConfig: KernelConfig = {\n  kernelName: RealDiv,\n  backendName: 'cpu',\n  kernelFunc: div\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Tensor, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {add} from '../kernels/Add';\nimport {complex} from '../kernels/Complex';\nimport {concat} from '../kernels/Concat';\nimport {identity} from '../kernels/Identity';\nimport {imag} from '../kernels/Imag';\nimport {multiply} from '../kernels/Multiply';\nimport {real} from '../kernels/Real';\nimport {realDivConfig} from '../kernels/RealDiv';\nimport {slice} from '../kernels/Slice';\nimport {sub} from '../kernels/Sub';\n\n/**\n * Calculate FFT of inner most elements of batch tensor.\n */\nexport function fftBatch(\n    input: TensorInfo, inverse: boolean,\n    cpuBackend: MathBackendCPU): TensorInfo {\n  const inputShape = input.shape;\n  const batch = inputShape[0];\n  const innerDim = inputShape[1];\n\n  const inputVals = cpuBackend.data.get(input.dataId);\n\n  const real2D = inputVals.complexTensorInfos.real;\n  const imag2D = inputVals.complexTensorInfos.imag;\n\n  // Collects real and imaginary values separately.\n  const resultShape = [batch, innerDim];\n  const resultSize = util.sizeFromShape(resultShape);\n  const resultReal = util.getTypedArrayFromDType('float32', resultSize);\n  const resultImag = util.getTypedArrayFromDType('float32', resultSize);\n\n  for (let b = 0; b < batch; b++) {\n    // TODO: Support slice ops for complex type.\n    const r = slice({\n      inputs: {x: real2D},\n      backend: cpuBackend,\n      attrs: {begin: [b, 0], size: [1, innerDim]}\n    });\n    const i = slice({\n      inputs: {x: imag2D},\n      backend: cpuBackend,\n      attrs: {begin: [b, 0], size: [1, innerDim]}\n    });\n\n    const input = complex({inputs: {real: r, imag: i}, backend: cpuBackend});\n\n    // Run FFT by batch element.\n    const {real, imag} = fftImpl(input, inverse, cpuBackend);\n    const res = backend_util.mergeRealAndImagArrays(real, imag);\n\n    for (let d = 0; d < innerDim; d++) {\n      const c = backend_util.getComplexWithIndex(res, d);\n      resultReal[b * innerDim + d] = c.real;\n      resultImag[b * innerDim + d] = c.imag;\n    }\n\n    cpuBackend.disposeIntermediateTensorInfo(r);\n    cpuBackend.disposeIntermediateTensorInfo(i);\n    cpuBackend.disposeIntermediateTensorInfo(input);\n  }\n\n  const $realInfo: TensorInfo =\n      cpuBackend.makeTensorInfo(resultShape, 'float32', resultReal);\n  const $imagInfo: TensorInfo =\n      cpuBackend.makeTensorInfo(resultShape, 'float32', resultImag);\n\n  const result = complex(\n      {inputs: {real: $realInfo, imag: $imagInfo}, backend: cpuBackend});\n\n  cpuBackend.disposeIntermediateTensorInfo($realInfo);\n  cpuBackend.disposeIntermediateTensorInfo($imagInfo);\n\n  return result;\n}\n\nexport function fftImpl(\n    input: TensorInfo, inverse: boolean,\n    cpuBackend: MathBackendCPU): {real: Float32Array, imag: Float32Array} {\n  const inputSize = util.sizeFromShape(input.shape);\n\n  const inputVals = cpuBackend.data.get(input.dataId);\n\n  const realVals =\n      cpuBackend.data.get(inputVals.complexTensorInfos.real.dataId).values as\n      Float32Array;\n\n  const imagVals =\n      cpuBackend.data.get(inputVals.complexTensorInfos.imag.dataId).values as\n      Float32Array;\n\n  if (isExponentOf2(inputSize)) {\n    const result =\n        fftRadix2(realVals, imagVals, inputSize, inverse, cpuBackend);\n\n    const resultShape = [input.shape[0], input.shape[1]];\n\n    if (inverse) {\n      const realInfo: TensorInfo =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', result.real);\n      const imagInfo: TensorInfo =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', result.imag);\n\n      const sizeInfo: TensorInfo = cpuBackend.makeTensorInfo(\n          [], 'float32',\n          util.createScalarValue(inputSize as {} as 'float32', 'float32'));\n      const sizeInfoCopy =\n          identity({inputs: {x: sizeInfo}, backend: cpuBackend});\n\n      const divRealInfo =\n          realDivConfig.kernelFunc(\n              {inputs: {a: realInfo, b: sizeInfo}, backend: cpuBackend}) as\n          TensorInfo;\n      const divImagInfo =\n          realDivConfig.kernelFunc(\n              {inputs: {a: imagInfo, b: sizeInfoCopy}, backend: cpuBackend}) as\n          TensorInfo;\n\n      const divRealVals =\n          cpuBackend.data.get(divRealInfo.dataId).values as Float32Array;\n      const divImagVals =\n          cpuBackend.data.get(divImagInfo.dataId).values as Float32Array;\n\n      cpuBackend.disposeIntermediateTensorInfo(realInfo);\n      cpuBackend.disposeIntermediateTensorInfo(imagInfo);\n      cpuBackend.disposeIntermediateTensorInfo(sizeInfo);\n      cpuBackend.disposeIntermediateTensorInfo(sizeInfoCopy);\n      cpuBackend.disposeIntermediateTensorInfo(divRealInfo);\n      cpuBackend.disposeIntermediateTensorInfo(divImagInfo);\n\n      return {real: divRealVals, imag: divImagVals};\n    }\n\n    return result;\n  } else {\n    const data = backend_util.mergeRealAndImagArrays(realVals, imagVals);\n\n    const rawOutput =\n        fourierTransformByMatmul(data, inputSize, inverse) as Float32Array;\n\n    return backend_util.splitRealAndImagArrays(rawOutput);\n  }\n}\n\nfunction isExponentOf2(size: number): boolean {\n  return (size & size - 1) === 0;\n}\n\n// FFT using Cooley-Tukey algorithm on radix 2 dimensional input.\nfunction fftRadix2(\n    realVals: Float32Array, imagVals: Float32Array, size: number,\n    inverse: boolean,\n    cpuBackend: MathBackendCPU): {real: Float32Array, imag: Float32Array} {\n  if (size === 1) {\n    return {real: realVals, imag: imagVals};\n  }\n\n  const data = backend_util.mergeRealAndImagArrays(realVals, imagVals);\n\n  const half = size / 2;\n\n  const evenComplex = backend_util.complexWithEvenIndex(data);\n\n  const evenRealVals = evenComplex.real;\n  const evenImagVals = evenComplex.imag;\n\n  const evenShape = [evenRealVals.length];\n\n  const evenRealInfo =\n      cpuBackend.makeTensorInfo(evenShape, 'float32', evenRealVals);\n  const evenImagInfo =\n      cpuBackend.makeTensorInfo(evenShape, 'float32', evenImagVals);\n\n  const evenTensorInfo = complex(\n      {inputs: {real: evenRealInfo, imag: evenImagInfo}, backend: cpuBackend});\n\n  const oddComplex = backend_util.complexWithOddIndex(data);\n\n  const oddRealVals = oddComplex.real;\n  const oddImagVals = oddComplex.imag;\n\n  const oddShape = [oddRealVals.length];\n\n  const oddRealInfo =\n      cpuBackend.makeTensorInfo(oddShape, 'float32', oddRealVals);\n  const oddImagInfo =\n      cpuBackend.makeTensorInfo(oddShape, 'float32', oddImagVals);\n\n  const oddTensorInfo = complex(\n      {inputs: {real: oddRealInfo, imag: oddImagInfo}, backend: cpuBackend});\n\n  // Recursive call for half part of original input.\n  const $evenComplex =\n      fftRadix2(evenRealVals, evenImagVals, half, inverse, cpuBackend);\n\n  const $evenRealVals = $evenComplex.real;\n  const $evenImagVals = $evenComplex.imag;\n\n  const $evenShape = [$evenRealVals.length];\n\n  const $evenRealInfo =\n      cpuBackend.makeTensorInfo($evenShape, 'float32', $evenRealVals);\n  const $evenImagInfo =\n      cpuBackend.makeTensorInfo($evenShape, 'float32', $evenImagVals);\n\n  const $evenTensorInfo = complex({\n    inputs: {real: $evenRealInfo, imag: $evenImagInfo},\n    backend: cpuBackend\n  });\n\n  const $oddComplex =\n      fftRadix2(oddRealVals, oddImagVals, half, inverse, cpuBackend);\n\n  const $oddRealVals = $oddComplex.real;\n  const $oddImagVals = $oddComplex.imag;\n\n  const $oddShape = [$oddRealVals.length];\n\n  const $oddRealInfo =\n      cpuBackend.makeTensorInfo($oddShape, 'float32', $oddRealVals);\n  const $oddImagInfo =\n      cpuBackend.makeTensorInfo($oddShape, 'float32', $oddImagVals);\n\n  const $oddTensorInfo = complex(\n      {inputs: {real: $oddRealInfo, imag: $oddImagInfo}, backend: cpuBackend});\n\n  const e = backend_util.exponents(size, inverse);\n  const eShape = [e.real.length];\n\n  const eRealInfo = cpuBackend.makeTensorInfo(eShape, 'float32', e.real);\n  const eImagInfo = cpuBackend.makeTensorInfo(eShape, 'float32', e.imag);\n\n  const complexInfo = complex(\n      {inputs: {real: eRealInfo, imag: eImagInfo}, backend: cpuBackend});\n\n  const exponentInfo =\n      multiply(\n          {inputs: {a: complexInfo, b: $oddTensorInfo}, backend: cpuBackend}) as\n      TensorInfo;\n\n  const addPart = add({\n                    inputs: {a: $evenTensorInfo, b: exponentInfo},\n                    backend: cpuBackend\n                  }) as TensorInfo;\n  const subPart = sub({\n                    inputs: {a: $evenTensorInfo, b: exponentInfo},\n                    backend: cpuBackend\n                  }) as TensorInfo;\n\n  const addPartReal = real({inputs: {input: addPart}, backend: cpuBackend});\n  const subPartReal = real({inputs: {input: subPart}, backend: cpuBackend});\n\n  const addPartImag = imag({inputs: {input: addPart}, backend: cpuBackend});\n  const subPartImag = imag({inputs: {input: subPart}, backend: cpuBackend});\n\n  const $real = concat({\n    inputs: [addPartReal as Tensor, subPartReal as Tensor],\n    backend: cpuBackend,\n    attrs: {axis: 0}\n  });\n  const $imag = concat({\n    inputs: [addPartImag as Tensor, subPartImag as Tensor],\n    backend: cpuBackend,\n    attrs: {axis: 0}\n  });\n\n  const $realVals = cpuBackend.data.get($real.dataId).values as Float32Array;\n  const $imagVals = cpuBackend.data.get($imag.dataId).values as Float32Array;\n\n  cpuBackend.disposeIntermediateTensorInfo(evenRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo(evenImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo(evenTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo(oddRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo(oddImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo(oddTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo($evenRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo($evenImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo($evenTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo($oddRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo($oddImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo($oddTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo(eRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo(eImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo(complexInfo);\n  cpuBackend.disposeIntermediateTensorInfo(exponentInfo);\n  cpuBackend.disposeIntermediateTensorInfo(addPart);\n  cpuBackend.disposeIntermediateTensorInfo(subPart);\n  cpuBackend.disposeIntermediateTensorInfo(addPartReal);\n  cpuBackend.disposeIntermediateTensorInfo(addPartImag);\n  cpuBackend.disposeIntermediateTensorInfo(subPartReal);\n  cpuBackend.disposeIntermediateTensorInfo(subPartImag);\n  cpuBackend.disposeIntermediateTensorInfo($real);\n  cpuBackend.disposeIntermediateTensorInfo($imag);\n\n  return {real: $realVals, imag: $imagVals};\n}\n\n// Calculate fourier transform by multplying sinusoid matrix.\nfunction fourierTransformByMatmul(\n    data: TypedArray, size: number, inverse: boolean): TypedArray {\n  const ret = new Float32Array(size * 2);\n  // TODO: Use matmul instead once it supports complex64 type.\n  for (let r = 0; r < size; r++) {\n    let real = 0.0;\n    let imag = 0.0;\n    for (let c = 0; c < size; c++) {\n      const e = backend_util.exponent(r * c, size, inverse);\n      const term = backend_util.getComplexWithIndex(data as Float32Array, c);\n      real += term.real * e.real - term.imag * e.imag;\n      imag += term.real * e.imag + term.imag * e.real;\n    }\n    if (inverse) {\n      real /= size;\n      imag /= size;\n    }\n    backend_util.assignToTypedArray(ret, real, imag, r);\n  }\n  return ret;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FFT, FFTInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {fftBatch} from '../utils/fft_utils';\nimport {reshape} from './Reshape';\n\nexport function fft(args: {inputs: FFTInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const inputSize = util.sizeFromShape(input.shape);\n\n  // Collapse all outer dimensions to a single batch dimension.\n  const innerDimensionSize = input.shape[input.shape.length - 1];\n  const batch = inputSize / innerDimensionSize;\n\n  const input2D = reshape({\n    inputs: {x: input},\n    backend,\n    attrs: {shape: [batch, innerDimensionSize]}\n  });\n\n  const result = fftBatch(input2D, false, backend);\n\n  const resultReshaped =\n      reshape({inputs: {x: result}, backend, attrs: {shape: input.shape}});\n\n  backend.disposeIntermediateTensorInfo(input2D);\n  backend.disposeIntermediateTensorInfo(result);\n\n  return resultReshaped;\n}\n\nexport const fftConfig: KernelConfig = {\n  kernelName: FFT,\n  backendName: 'cpu',\n  kernelFunc: fft as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, DataValues, Fill, FillAttrs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function fill(args: {backend: MathBackendCPU, attrs: FillAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {shape, value, dtype} = attrs;\n\n  const $dtype = dtype || util.inferDtype(value);\n  const values = util.getArrayFromDType($dtype, util.sizeFromShape(shape));\n  fillValues(values, value, $dtype);\n\n  return backend.makeTensorInfo(shape, $dtype, values);\n}\n\nexport const fillConfig: KernelConfig = {\n  kernelName: Fill,\n  backendName: 'cpu',\n  kernelFunc: fill as {} as KernelFunc\n};\n\nfunction fillValues(\n    values: DataValues, value: string|number, dtype: DataType): void {\n  if (dtype === 'string') {\n    (values as string[]).fill(value as string);\n  } else {\n    (values as TypedArray).fill(value as number);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {FlipLeftRight, FlipLeftRightInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const flipLeftRightConfig: KernelConfig = {\n  kernelName: FlipLeftRight,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {image} = inputs as FlipLeftRightInputs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const output = util.getTypedArrayFromDType(\n        image.dtype as NumericDataType, util.sizeFromShape(image.shape));\n    const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n\n    const imageVals = cpuBackend.data.get(image.dataId).values as TypedArray;\n\n    for (let batchIdx = 0; batchIdx < batch; batchIdx++) {\n      const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;\n\n      for (let row = 0; row < imageHeight; row++) {\n        const rowOffset = row * (imageWidth * numChannels);\n\n        for (let col = 0; col < imageWidth; col++) {\n          const colOffset = col * numChannels;\n\n          for (let channel = 0; channel < numChannels; channel++) {\n            const coords = [batch, row, col, channel];\n\n            const x = coords[2];\n\n            const coordX = Math.round(imageWidth - x);\n            const outIdx = batchOffset + rowOffset + colOffset + channel;\n\n            let outputValue = imageVals[outIdx];\n            // If the coordinate position falls within the image boundaries...\n            if (coordX >= 0 && coordX < imageWidth) {\n              // set the output to the image value at the coordinate position.\n              const rotatedColOffset = coordX * numChannels;\n              const imageIdx =\n                  batchOffset + rowOffset + rotatedColOffset + channel;\n              outputValue = imageVals[imageIdx];\n            }\n            output[outIdx] = outputValue;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(output, image.shape, image.dtype);\n    return {dataId, shape: image.shape, dtype: image.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FloorDiv, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const floorDivImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => Math.floor(a / b));\nexport const floorDiv =\n    binaryKernelFunc(FloorDiv, floorDivImpl, null /* complexImpl */, 'int32');\n\nexport const floorDivConfig: KernelConfig = {\n  kernelName: FloorDiv,\n  backendName: 'cpu',\n  kernelFunc: floorDiv\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FusedConv2D, FusedConv2DAttrs, FusedConv2DInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {applyActivation} from '../utils/fused_utils';\nimport {add} from './Add';\nimport {conv2D} from './Conv2D';\n\nexport function fusedConv2D(args: {\n  inputs: FusedConv2DInputs,\n  backend: MathBackendCPU,\n  attrs: FusedConv2DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n\n  let result = conv2D({\n    inputs: {x, filter},\n    backend,\n    attrs: {strides, pad, dataFormat, dilations, dimRoundingMode}\n  });\n\n  if (bias) {\n    const resultOld = result;\n    result = add({inputs: {a: result, b: bias}, backend}) as TensorInfo;\n    backend.disposeIntermediateTensorInfo(resultOld);\n  }\n\n  if (activation) {\n    const resultOld = result;\n    result = applyActivation(\n        backend, result, activation, preluActivationWeights, leakyreluAlpha);\n    backend.disposeIntermediateTensorInfo(resultOld);\n  }\n\n  return result;\n}\n\nexport const fusedConv2DConfig: KernelConfig = {\n  kernelName: FusedConv2D,\n  backendName: 'cpu',\n  kernelFunc: fusedConv2D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FusedDepthwiseConv2D, FusedDepthwiseConv2DAttrs, FusedDepthwiseConv2DInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {applyActivation} from '../utils/fused_utils';\nimport {add} from './Add';\nimport {depthwiseConv2dNative} from './DepthwiseConv2dNative';\n\nexport function fusedDepthwiseConv2D(args: {\n  inputs: FusedDepthwiseConv2DInputs,\n  backend: MathBackendCPU,\n  attrs: FusedDepthwiseConv2DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n\n  let result = depthwiseConv2dNative({\n    inputs: {x, filter},\n    backend,\n    attrs: {strides, pad, dataFormat, dilations, dimRoundingMode}\n  });\n\n  if (bias) {\n    const oldResult = result;\n    result = add({inputs: {a: result, b: bias}, backend}) as TensorInfo;\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n  if (activation) {\n    const oldResult = result;\n    result = applyActivation(\n        backend, result, activation, preluActivationWeights, leakyreluAlpha);\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n\n  return result;\n}\n\nexport const fusedDepthwiseConv2DConfig: KernelConfig = {\n  kernelName: FusedDepthwiseConv2D,\n  backendName: 'cpu',\n  kernelFunc: fusedDepthwiseConv2D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, buffer, GatherNd, GatherNdInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function gatherNd(\n    args: {inputs: GatherNdInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {params, indices} = inputs;\n\n  const paramsSize = util.sizeFromShape(params.shape);\n\n  const indicesShape = indices.shape;\n  const sliceRank = indicesShape[indicesShape.length - 1];\n\n  const [resultShape, numSlices, sliceSize, strides] =\n      backend_util.prepareAndValidate(params, indices);\n  if (numSlices === 0) {\n    return backend.makeTensorInfo(resultShape, params.dtype, []);\n  }\n\n  const outBuf = buffer([numSlices, sliceSize], params.dtype);\n  const indicesData = backend.data.get(indices.dataId).values as TypedArray;\n  const paramsData = backend.data.get(params.dataId).values as TypedArray;\n\n  for (let i = 0; i < numSlices; i++) {\n    const index = [];\n    let flattenIndex = 0;\n    for (let j = 0; j < sliceRank; j++) {\n      const dim = indicesData[i * sliceRank + j];\n      flattenIndex += dim * strides[j];\n      index.push(dim);\n    }\n    if (flattenIndex < 0 || flattenIndex >= paramsSize / sliceSize) {\n      throw new Error(\n          `Invalid indices: ${index} does not index into ${params.shape}`);\n    }\n\n    for (let k = 0; k < sliceSize; k++) {\n      outBuf.values[i * sliceSize + k] =\n          paramsData[flattenIndex * sliceSize + k];\n    }\n  }\n\n  return backend.makeTensorInfo(resultShape, outBuf.dtype, outBuf.values);\n}\n\nexport const gatherNdConfig: KernelConfig = {\n  kernelName: GatherNd,\n  backendName: 'cpu',\n  kernelFunc: gatherNd as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherV2, GatherV2Attrs, GatherV2Inputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {gatherV2Impl} from './GatherV2_impl';\nimport {reshape} from './Reshape';\n\nexport function gatherV2(args: {\n  inputs: GatherV2Inputs,\n  backend: MathBackendCPU,\n  attrs: GatherV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, indices} = inputs;\n  const {axis, batchDims} = attrs;\n\n  assertNotComplex([x, indices], 'gatherV2');\n\n  let $batchDims = batchDims;\n\n  if (batchDims == null) {\n    $batchDims = 0;\n  }\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n\n  const parsedAxis = util.parseAxisParam(axis, x.shape)[0];\n  const shapeInfo = backend_util.segment_util.collectGatherOpShapeInfo(\n      x, indices, parsedAxis, $batchDims);\n\n  const flattenX = reshape({\n    inputs: {x},\n    backend,\n    attrs: {\n      shape: [\n        shapeInfo.batchSize, shapeInfo.outerSize, shapeInfo.dimSize,\n        shapeInfo.sliceSize\n      ]\n    }\n  });\n\n  const flattenIndex = reshape({\n    inputs: {x: indices},\n    backend,\n    attrs: {shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize]}\n  });\n\n  const flattenOutputShape = [\n    shapeInfo.batchSize, shapeInfo.outerSize, indicesSize / shapeInfo.batchSize,\n    shapeInfo.sliceSize\n  ];\n\n  const indicesBuf = backend.bufferSync(flattenIndex);\n  const xBuf = backend.bufferSync(flattenX);\n  const outBuf = gatherV2Impl(xBuf, indicesBuf, flattenOutputShape);\n\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(flattenIndex);\n\n  return backend.makeTensorInfo(\n      shapeInfo.outputShape, outBuf.dtype, outBuf.values);\n}\n\nexport const gatherV2Config: KernelConfig = {\n  kernelName: GatherV2,\n  backendName: 'cpu',\n  kernelFunc: gatherV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GreaterEqual, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const greaterEqualImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a >= b) ? 1 : 0);\nexport const greaterEqual = binaryKernelFunc(\n    GreaterEqual, greaterEqualImpl, null /* complexImpl */, 'bool');\n\nexport const greaterEqualConfig: KernelConfig = {\n  kernelName: GreaterEqual,\n  backendName: 'cpu',\n  kernelFunc: greaterEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IFFT, IFFTInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {fftBatch} from '../utils/fft_utils';\nimport {reshape} from './Reshape';\n\nexport function ifft(args: {inputs: IFFTInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const inputSize = util.sizeFromShape(input.shape);\n\n  // Collapse all outer dimensions to a single batch dimension.\n  const innerDimensionSize = input.shape[input.shape.length - 1];\n  const batch = inputSize / innerDimensionSize;\n\n  const input2D = reshape({\n    inputs: {x: input},\n    backend,\n    attrs: {shape: [batch, innerDimensionSize]}\n  });\n\n  const result = fftBatch(input2D, true, backend);\n\n  const resultReshaped =\n      reshape({inputs: {x: result}, backend, attrs: {shape: input.shape}});\n\n  backend.disposeIntermediateTensorInfo(input2D);\n  backend.disposeIntermediateTensorInfo(result);\n\n  return resultReshaped;\n}\n\nexport const ifftConfig: KernelConfig = {\n  kernelName: IFFT,\n  backendName: 'cpu',\n  kernelFunc: ifft as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsFinite, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const isFinite =\n    unaryKernelFunc(IsFinite, (xi) => Number.isFinite(xi) ? 1 : 0, 'bool');\n\nexport const isFiniteConfig: KernelConfig = {\n  kernelName: IsFinite,\n  backendName: 'cpu',\n  kernelFunc: isFinite,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsInf, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const isInf =\n    unaryKernelFunc(IsInf, (xi) => Math.abs(xi) === Infinity ? 1 : 0, 'bool');\n\nexport const isInfConfig: KernelConfig = {\n  kernelName: IsInf,\n  backendName: 'cpu',\n  kernelFunc: isInf,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsNan, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const isNaN =\n    unaryKernelFunc(IsNan, (xi) => Number.isNaN(xi) ? 1 : 0, 'bool');\n\nexport const isNaNConfig: KernelConfig = {\n  kernelName: IsNan,\n  backendName: 'cpu',\n  kernelFunc: isNaN,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LessEqual} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const lessEqualImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a <= b) ? 1 : 0);\nexport const lessEqual =\n    binaryKernelFunc(LessEqual, lessEqualImpl, null /* complexImpl */, 'bool');\n\nexport const lessEqualConfig: KernelConfig = {\n  kernelName: LessEqual,\n  backendName: 'cpu',\n  kernelFunc: lessEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LinSpace, LinSpaceAttrs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {linSpaceImpl} from './LinSpace_impl';\n\nexport function linSpace(args: {backend: MathBackendCPU, attrs: LinSpaceAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {start, stop, num} = attrs;\n\n  const outVals = linSpaceImpl(start, stop, num);\n\n  return backend.makeTensorInfo([outVals.length], 'float32', outVals);\n}\n\nexport const linSpaceConfig: KernelConfig = {\n  kernelName: LinSpace,\n  backendName: 'cpu',\n  kernelFunc: linSpace as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Log1p} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const log1p = unaryKernelFunc(Log1p, (xi) => Math.log1p(xi));\n\nexport const log1pConfig: KernelConfig = {\n  kernelName: Log1p,\n  backendName: 'cpu',\n  kernelFunc: log1p,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalAnd} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const logicalAndImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => a && b);\nexport const logicalAnd = binaryKernelFunc(\n    LogicalAnd, logicalAndImpl, null /* complexImpl */, 'bool');\n\nexport const logicalAndConfig: KernelConfig = {\n  kernelName: LogicalAnd,\n  backendName: 'cpu',\n  kernelFunc: logicalAnd\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalNot} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const logicalNot =\n    unaryKernelFunc(LogicalNot, (xi) => xi ? 0 : 1, 'bool');\n\nexport const logicalNotConfig: KernelConfig = {\n  kernelName: LogicalNot,\n  backendName: 'cpu',\n  kernelFunc: logicalNot,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalOr} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const logicalOrImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => a || b);\nexport const logicalOr =\n    binaryKernelFunc(LogicalOr, logicalOrImpl, null /* complexImpl */, 'bool');\n\nexport const logicalOrConfig: KernelConfig = {\n  kernelName: LogicalOr,\n  backendName: 'cpu',\n  kernelFunc: logicalOr\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LRN, LRNAttrs, LRNInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function lRN(\n    args: {inputs: LRNInputs, backend: MathBackendCPU, attrs: LRNAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {depthRadius, bias, alpha, beta} = attrs;\n\n  assertNotComplex(x, 'LRN');\n\n  const channels = x.shape[3];\n  const maxD = channels - 1;\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const size = util.sizeFromShape(x.shape);\n  const result = new Float32Array(size);\n\n  function sumAcrossChannels(offset: number) {\n    const currentChannel = offset % channels;\n    let beginSumOffset =\n        offset - currentChannel + Math.max(0, currentChannel - depthRadius);\n    const endSumOffset =\n        offset - currentChannel + Math.min(currentChannel + depthRadius, maxD);\n\n    let sum = 0.0;\n    for (; beginSumOffset <= endSumOffset; beginSumOffset++) {\n      const z = xValues[beginSumOffset];\n      sum += z * z;\n    }\n    return sum;\n  }\n\n  for (let offset = 0; offset < size; offset++) {\n    const sum = sumAcrossChannels(offset);\n    const val = xValues[offset] * Math.pow(bias + alpha * sum, -beta);\n    result[offset] = val;\n  }\n\n  return backend.makeTensorInfo(x.shape, x.dtype, result);\n}\n\nexport const lRNConfig: KernelConfig = {\n  kernelName: LRN,\n  backendName: 'cpu',\n  kernelFunc: lRN as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LRNGrad, LRNGradAttrs, LRNGradInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function lRNGrad(\n    args:\n        {inputs: LRNGradInputs, backend: MathBackendCPU, attrs: LRNGradAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, y, dy} = inputs;\n  const {depthRadius, bias, alpha, beta} = attrs;\n\n  assertNotComplex(dy, 'LRNGrad');\n\n  const dySize = util.sizeFromShape(dy.shape);\n\n  const channels = dy.shape[3];\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const yValues = backend.data.get(y.dataId).values as TypedArray;\n  const result = new Float32Array(dySize);\n  const size = dySize;\n\n  for (let offset = 0; offset < size; offset++) {\n    const currentChannel = offset % channels;\n    const depthBegin =\n        (offset - currentChannel) + Math.max(0, currentChannel - depthRadius);\n    const depthEnd = (offset - currentChannel) +\n        Math.min(channels, currentChannel + depthRadius + 1);\n\n    let norm = 0;\n    for (let k = depthBegin; k < depthEnd; k++) {\n      norm += Math.pow(xValues[k], 2);\n    }\n    norm = alpha * norm + bias;\n\n    for (let k = depthBegin; k < depthEnd; k++) {\n      let dyi = -2 * alpha * beta * xValues[k] * yValues[offset] / norm;\n      if (offset === k) {\n        dyi += Math.pow(norm, -beta);\n      }\n      dyi *= dyValues[offset];\n      result[k] += dyi;\n    }\n  }\n\n  return backend.makeTensorInfo(dy.shape, x.dtype, result);\n}\n\nexport const lRNGradConfig: KernelConfig = {\n  kernelName: LRNGrad,\n  backendName: 'cpu',\n  kernelFunc: lRNGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelFunc, Max, MaxAttrs, MaxInputs, TensorInfo} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig} from '@tensorflow/tfjs-core';\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {maxImpl} from './Max_impl';\nimport {transposeImpl} from './Transpose_impl';\n\nexport function max(\n    args: {inputs: MaxInputs, backend: MathBackendCPU, attrs: MaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {reductionIndices, keepDims} = attrs;\n  const cpuBackend = backend;\n  let xShape = x.shape;\n  const xRank = xShape.length;\n\n  const origAxes = util.parseAxisParam(reductionIndices, xShape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let xVals = cpuBackend.data.get(x.dataId).values as TypedArray;\n  if (permutedAxes != null) {\n    const newShape: number[] = new Array(xRank);\n    for (let i = 0; i < newShape.length; i++) {\n      newShape[i] = xShape[permutedAxes[i]];\n    }\n\n    xVals = transposeImpl(xVals, xShape, x.dtype, permutedAxes, newShape);\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n\n    xShape = newShape;\n  }\n\n  assertNotComplex(x, 'max');\n  backend_util.assertAxesAreInnerMostDims('max', axes, xRank);\n  const [maxOutShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(xShape, axes);\n\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  const result = maxImpl(xVals, reduceSize, maxOutShape, x.dtype);\n  const dataId = cpuBackend.write(result, maxOutShape, x.dtype);\n\n  let outShape = maxOutShape;\n  if (keepDims) {\n    // reshape\n    const newShape = backend_util.expandShapeToKeepDim(maxOutShape, origAxes);\n    outShape = newShape;\n  }\n\n  return {dataId, shape: outShape, dtype: x.dtype};\n}\n\nexport const maxConfig: KernelConfig = {\n  kernelName: Max,\n  backendName: 'cpu',\n  kernelFunc: max as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPool, MaxPoolAttrs, MaxPoolInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool} from '../utils/pool_utils';\nimport {identity} from './Identity';\n\nexport function maxPool(\n    args:\n        {inputs: MaxPoolInputs, backend: MathBackendCPU, attrs: MaxPoolAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  assertNotComplex(x, 'maxPool');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  let res: TensorInfo;\n\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    res = identity({inputs: {x}, backend});\n  } else {\n    const xValues = backend.data.get(x.dataId).values as TypedArray;\n    const strides = util.computeStrides(x.shape);\n    const buffer = pool(xValues, x.shape, x.dtype, strides, convInfo, 'max');\n    res = backend.makeTensorInfo(\n        convInfo.outShape, x.dtype, buffer.values as TypedArray);\n  }\n  return res;\n}\n\nexport const maxPoolConfig: KernelConfig = {\n  kernelName: MaxPool,\n  backendName: 'cpu',\n  kernelFunc: maxPool as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, MaxPool3D, MaxPool3DAttrs, MaxPool3DInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool3d} from '../utils/pool_utils';\n\nexport function maxPool3D(args: {\n  inputs: MaxPool3DInputs,\n  backend: MathBackendCPU,\n  attrs: MaxPool3DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode, dataFormat} = attrs;\n\n  assertNotComplex(x, 'maxPool3d');\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode, dataFormat);\n\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const outBuf = pool3d(\n      xValues, x.shape, x.dtype, util.computeStrides(x.shape), convInfo, 'max');\n\n  return backend.makeTensorInfo(outBuf.shape, 'float32', outBuf.values);\n}\n\nexport const maxPool3DConfig: KernelConfig = {\n  kernelName: MaxPool3D,\n  backendName: 'cpu',\n  kernelFunc: maxPool3D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, buffer, KernelConfig, KernelFunc, MaxPool3DGrad, MaxPool3DGradAttrs, MaxPool3DGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {maxPool3dPositions} from '../utils/pool_utils';\n\nexport function maxPool3DGrad(args: {\n  inputs: MaxPool3DGradInputs,\n  backend: MathBackendCPU,\n  attrs: MaxPool3DGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  assertNotComplex([dy, input], 'maxPool3DGrad');\n\n  const convInfo = backend_util.computePool3DInfo(\n      input.shape as [number, number, number, number, number], filterSize,\n      strides, 1 /* dilations */, pad, dimRoundingMode);\n\n  const inputBuf = backend.bufferSync(input);\n  const maxPosBuf = maxPool3dPositions(inputBuf, convInfo);\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx = buffer(input.shape, 'float32');\n\n  const dyBuf = backend.bufferSync(dy);\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n        for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n          for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n            // Shader code begins\n            const dyDepthCorner = dxDepth - padFront;\n            const dyRowCorner = dxRow - padTop;\n            const dyColCorner = dxCol - padLeft;\n            let dotProd = 0;\n            for (let wDepth = 0; wDepth < effectiveFilterDepth;\n                 wDepth += dilationDepth) {\n              const dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n              if (dyDepth < 0 || dyDepth >= convInfo.outDepth ||\n                  Math.floor(dyDepth) !== dyDepth) {\n                continue;\n              }\n              for (let wRow = 0; wRow < effectiveFilterHeight;\n                   wRow += dilationHeight) {\n                const dyRow = (dyRowCorner + wRow) / strideHeight;\n                if (dyRow < 0 || dyRow >= convInfo.outHeight ||\n                    Math.floor(dyRow) !== dyRow) {\n                  continue;\n                }\n                for (let wCol = 0; wCol < effectiveFilterWidth;\n                     wCol += dilationWidth) {\n                  const dyCol = (dyColCorner + wCol) / strideWidth;\n                  if (dyCol < 0 || dyCol >= convInfo.outWidth ||\n                      Math.floor(dyCol) !== dyCol) {\n                    continue;\n                  }\n\n                  const maxPos = effectiveFilterDepth * effectiveFilterHeight *\n                          effectiveFilterWidth -\n                      1 -\n                      (maxPosBuf.get(batch, dyDepth, dyRow, dyCol, channel) as\n                       number);\n                  const curPos =\n                      wDepth * effectiveFilterHeight * effectiveFilterWidth +\n                      wRow * effectiveFilterWidth + wCol;\n\n                  const mask = maxPos === curPos ? 1 : 0;\n                  if (mask === 0) {\n                    continue;\n                  }\n\n                  const pixel =\n                      dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                  dotProd += pixel * mask;\n                }\n              }\n            }\n            dx.set(dotProd, batch, dxDepth, dxRow, dxCol, channel);\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const maxPool3DGradConfig: KernelConfig = {\n  kernelName: MaxPool3DGrad,\n  backendName: 'cpu',\n  kernelFunc: maxPool3DGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, buffer, KernelConfig, KernelFunc, MaxPoolGrad, MaxPoolGradAttrs, MaxPoolGradInputs, Rank, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {maxPoolPositions} from '../utils/pool_utils';\n\nexport function maxPoolGrad(args: {\n  inputs: MaxPoolGradInputs,\n  backend: MathBackendCPU,\n  attrs: MaxPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input, output} = inputs;\n  const x = input;\n  assertNotComplex([input, output], 'maxPoolGrad');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode);\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const maxPosBuf = buffer(\n      convInfo.outShape, x.dtype,\n      maxPoolPositions(xValues, x.shape, x.dtype, convInfo).values);\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx =\n      buffer<Rank.R4>(x.shape as [number, number, number, number], 'float32');\n\n  const dyData = backend.data.get(dy.dataId).values as Float32Array;\n  const dyBuf = buffer<Rank.R4>(\n      dy.shape as [number, number, number, number], 'float32', dyData);\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n        for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n          // Shader code begins.\n          const dyRCorner = dxR - padTop;\n          const dyCCorner = dxC - padLeft;\n          let dotProd = 0;\n          for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n            const dyR = (dyRCorner + wR) / strideHeight;\n            if (dyR < 0 || dyR >= convInfo.outHeight ||\n                Math.floor(dyR) !== dyR) {\n              continue;\n            }\n            for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n              const dyC = (dyCCorner + wC) / strideWidth;\n              if (dyC < 0 || dyC >= convInfo.outWidth ||\n                  Math.floor(dyC) !== dyC) {\n                continue;\n              }\n              const maxPos = effectiveFilterHeight * effectiveFilterWidth - 1 -\n                  (maxPosBuf.get(b, dyR, dyC, d) as number);\n              const curPos = wR * effectiveFilterWidth + wC;\n\n              const mask = maxPos === curPos ? 1 : 0;\n              if (mask === 0) {\n                continue;\n              }\n\n              const pixel = dyBuf.get(b, dyR, dyC, d);\n              dotProd += pixel * mask;\n            }\n          }\n          dx.set(dotProd, b, dxR, dxC, d);\n        }\n      }\n    }\n  }\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const maxPoolGradConfig: KernelConfig = {\n  kernelName: MaxPoolGrad,\n  backendName: 'cpu',\n  kernelFunc: maxPoolGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {MaxPoolWithArgmax, MaxPoolWithArgmaxAttrs, MaxPoolWithArgmaxInputs} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig, TypedArray} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {maxPoolWithArgmaxImpl} from './MaxPoolWithArgmax_impl';\n\nexport const maxPoolWithArgmaxConfig: KernelConfig = {\n  kernelName: MaxPoolWithArgmax,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as MaxPoolWithArgmaxInputs;\n    const {filterSize, strides, pad, includeBatchInIndex} =\n        attrs as {} as MaxPoolWithArgmaxAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n    assertNotComplex(x, 'MaxPoolWithArgmax');\n\n    const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const convInfo = backend_util.computePool2DInfo(\n        x.shape as [number, number, number, number], filterSize, strides,\n        [1, 1], pad);\n    const [pooled, indexes] = maxPoolWithArgmaxImpl(\n        values, x.shape, x.dtype, includeBatchInIndex, convInfo);\n\n    const pooledDataId =\n        cpuBackend.write(pooled as Float32Array, convInfo.outShape, x.dtype);\n    const indexesDataId =\n        cpuBackend.write(indexes as Int32Array, convInfo.outShape, x.dtype);\n    return [\n      {dataId: pooledDataId, shape: convInfo.outShape, dtype: x.dtype},\n      {dataId: indexesDataId, shape: convInfo.outShape, dtype: 'int32'}\n    ];\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {maxPoolPositions, pool} from '../utils/pool_utils';\nexport function maxPoolWithArgmaxImpl(\n    xValues: TypedArray, xShape: number[], dtype: DataType,\n    includeBatchInIndex: boolean, convInfo: backend_util.Conv2DInfo) {\n  const strides = util.computeStrides(xShape);\n  const maxPools = pool(xValues, xShape, dtype, strides, convInfo, 'max');\n  const maxPositions = maxPoolPositions(\n      xValues, xShape, dtype, convInfo, true, includeBatchInIndex);\n\n  return [maxPools.values, maxPositions.values];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Mean, MeanAttrs, MeanInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {cast} from './Cast';\nimport {div} from './RealDiv';\nimport {sum} from './Sum';\n\nexport function mean(\n    args: {inputs: MeanInputs, backend: MathBackendCPU, attrs: MeanAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const axes = util.parseAxisParam(axis, x.shape);\n  const shapes = backend_util.computeOutAndReduceShapes(x.shape, axes);\n  const reduceShape = shapes[1];\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const toDispose = [];\n  const reduceSizeScalar =\n      backend.makeTensorInfo([], 'float32', new Float32Array([reduceSize]));\n  toDispose.push(reduceSizeScalar);\n\n  const $x = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n  toDispose.push($x);\n\n  const res =\n      div({inputs: {a: $x, b: reduceSizeScalar}, backend}) as TensorInfo;\n  toDispose.push(res);\n\n  const result = sum({inputs: {x: res}, backend, attrs: {axis, keepDims}});\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const meanConfig: KernelConfig = {\n  kernelName: Mean,\n  backendName: 'cpu',\n  kernelFunc: mean as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Min, MinAttrs, MinInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function min(\n    args: {inputs: MinInputs, backend: MathBackendCPU, attrs: MinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'min');\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('min', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = util.makeZerosTypedArray(util.sizeFromShape(outShape), $x.dtype);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let min = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (value < min) {\n        min = value;\n      }\n    }\n    vals[i] = min;\n  }\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo($x);\n  }\n\n  const result = backend.makeTensorInfo(outShape, $x.dtype, vals);\n\n  if (keepDims) {\n    const expandedShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    const reshapedResult =\n        reshape({inputs: {x: result}, backend, attrs: {shape: expandedShape}});\n\n    backend.disposeIntermediateTensorInfo(result);\n\n    return reshapedResult;\n  }\n\n  return result;\n}\n\nexport const minConfig: KernelConfig = {\n  kernelName: Min,\n  backendName: 'cpu',\n  kernelFunc: min as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, MirrorPad, MirrorPadAttrs, MirrorPadInputs, NumericDataType, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function mirrorPad(args: {\n  inputs: MirrorPadInputs,\n  backend: MathBackendCPU,\n  attrs: MirrorPadAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {paddings, mode} = attrs;\n\n  assertNotComplex(x, 'mirrorPad');\n\n  const outShape = paddings.map(\n      (p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n\n  const start = paddings.map(p => p[0]);\n  const end = paddings.map((p, i) => p[0] + x.shape[i]);\n  const offset = mode === 'reflect' ? 0 : 1;\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const xRank = x.shape.length;\n  const xStrides = util.computeStrides(x.shape);\n\n  const resultSize = util.sizeFromShape(outShape);\n  const resultRank = outShape.length;\n  const resultStrides = util.computeStrides(outShape);\n  const resVals =\n      util.getTypedArrayFromDType(x.dtype as NumericDataType, resultSize);\n\n  for (let i = 0; i < resultSize; i++) {\n    let coords = util.indexToLoc(i, resultRank, resultStrides);\n    for (let i = 0; i < resultRank; i++) {\n      if (coords[i] < start[i]) {\n        coords[i] = start[i] * 2 - coords[i] - offset;\n      } else if (coords[i] >= end[i]) {\n        coords[i] = (end[i] - 1) * 2 - coords[i] + offset;\n      }\n    }\n    coords = coords.map((c, i) => c - start[i]);\n\n    const inIndex = util.locToIndex(coords, xRank, xStrides);\n\n    resVals[i] = xVals[inIndex];\n  }\n\n  const outId = backend.write(resVals, outShape, x.dtype);\n\n  return {dataId: outId, shape: outShape, dtype: x.dtype};\n}\n\nexport const mirrorPadConfig: KernelConfig = {\n  kernelName: MirrorPad,\n  backendName: 'cpu',\n  kernelFunc: mirrorPad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Mod} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const modImpl = createSimpleBinaryKernelImpl(((aValue, bValue) => {\n  const rem = aValue % bValue;\n  if ((aValue < 0 && bValue < 0) || (aValue >= 0 && bValue >= 0)) {\n    return rem;\n  } else {\n    return (rem + bValue) % bValue;\n  }\n}));\n\nexport const mod = binaryKernelFunc(Mod, modImpl);\n\nexport const modConfig: KernelConfig = {\n  kernelName: Mod,\n  backendName: 'cpu',\n  kernelFunc: mod\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Softmax, SoftmaxAttrs, SoftmaxInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {exp} from './Exp';\nimport {max} from './Max';\nimport {div} from './RealDiv';\nimport {reshape} from './Reshape';\nimport {sub} from './Sub';\nimport {sum} from './Sum';\n\nexport function softmax(\n    args:\n        {inputs: SoftmaxInputs, backend: MathBackendCPU, attrs: SoftmaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {dim} = attrs;\n\n  const logitsRank = logits.shape.length;\n\n  let $dim = dim;\n  if ($dim === -1) {\n    $dim = logitsRank - 1;\n  }\n  if ($dim !== logitsRank - 1) {\n    throw Error(\n        'Softmax along a non-last dimension is not yet supported. ' +\n        `Logits was rank ${logitsRank} and dim was ${$dim}`);\n  }\n\n  const axes = util.parseAxisParam([$dim], logits.shape);\n  const maxLogit = max({\n    inputs: {x: logits},\n    backend,\n    attrs: {reductionIndices: axes, keepDims: false}\n  });\n  const expandedShape = backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n\n  const maxLogitReshaped =\n      reshape({inputs: {x: maxLogit}, backend, attrs: {shape: expandedShape}});\n  const a =\n      sub({inputs: {a: logits, b: maxLogitReshaped}, backend}) as TensorInfo;\n  const b = exp({inputs: {x: a}, backend}) as TensorInfo;\n  const sumExp =\n      sum({inputs: {x: b}, backend, attrs: {axis: axes, keepDims: false}});\n  const sumReshaped =\n      reshape({inputs: {x: sumExp}, backend, attrs: {shape: expandedShape}});\n\n  const result = div({inputs: {a: b, b: sumReshaped}, backend}) as TensorInfo;\n\n  backend.disposeIntermediateTensorInfo(maxLogit);\n  backend.disposeIntermediateTensorInfo(maxLogitReshaped);\n  backend.disposeIntermediateTensorInfo(a);\n  backend.disposeIntermediateTensorInfo(b);\n  backend.disposeIntermediateTensorInfo(sumExp);\n  backend.disposeIntermediateTensorInfo(sumReshaped);\n\n  return result;\n}\n\nexport const softmaxConfig: KernelConfig = {\n  kernelName: Softmax,\n  backendName: 'cpu',\n  kernelFunc: softmax as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Multinomial, MultinomialAttrs, MultinomialInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\nimport * as seedrandom from 'seedrandom';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {softmax} from './Softmax';\n\nexport function multinomial(args: {\n  inputs: MultinomialInputs,\n  backend: MathBackendCPU,\n  attrs: MultinomialAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {numSamples, seed, normalized} = attrs;\n\n  assertNotComplex(logits, 'multinomial');\n\n  const probabilities = normalized ?\n      logits :\n      softmax({inputs: {logits}, backend, attrs: {dim: -1}});\n\n  const batchSize = probabilities.shape[0];\n  const numEvents = probabilities.shape[1];\n  const probVals = backend.data.get(probabilities.dataId).values as TypedArray;\n  const resShape = [batchSize, numSamples];\n  const resVals =\n      util.makeZerosTypedArray(util.sizeFromShape(resShape), 'int32');\n\n  for (let b = 0; b < batchSize; ++b) {\n    const offset = b * numEvents;\n    // The cdf won't include the last event. It will be implicit if no other\n    // event happened.\n    const cdf = new Float32Array(numEvents - 1);\n    cdf[0] = probVals[offset];\n    for (let event = 1; event < cdf.length; ++event) {\n      cdf[event] = cdf[event - 1] + probVals[offset + event];\n    }\n\n    const random = seedrandom.alea(seed.toString());\n    const outOffset = b * numSamples;\n    for (let sampleId = 0; sampleId < numSamples; ++sampleId) {\n      const r = random();\n\n      // Assume last event happened by default.\n      resVals[outOffset + sampleId] = cdf.length;\n\n      for (let event = 0; event < cdf.length; event++) {\n        if (r < cdf[event]) {\n          resVals[outOffset + sampleId] = event;\n          break;\n        }\n      }\n    }\n  }\n\n  if (!normalized) {\n    backend.disposeIntermediateTensorInfo(probabilities);\n  }\n\n  return backend.makeTensorInfo(resShape, 'int32', resVals);\n}\n\nexport const multinomialConfig: KernelConfig = {\n  kernelName: Multinomial,\n  backendName: 'cpu',\n  kernelFunc: multinomial as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV3, NonMaxSuppressionV3Attrs, NonMaxSuppressionV3Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV3Impl = kernel_impls.nonMaxSuppressionV3Impl;\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function nonMaxSuppressionV3(args: {\n  inputs: NonMaxSuppressionV3Inputs,\n  backend: MathBackendCPU,\n  attrs: NonMaxSuppressionV3Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold} = attrs;\n\n  assertNotComplex(boxes, 'NonMaxSuppression');\n\n  const boxesVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const scoresVals = backend.data.get(scores.dataId).values as TypedArray;\n\n  const {selectedIndices} = nonMaxSuppressionV3Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n\n  return backend.makeTensorInfo(\n      [selectedIndices.length], 'int32', new Int32Array(selectedIndices));\n}\n\nexport const nonMaxSuppressionV3Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV3,\n  backendName: 'cpu',\n  kernelFunc: nonMaxSuppressionV3 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV4, NonMaxSuppressionV4Attrs, NonMaxSuppressionV4Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV4Impl = kernel_impls.nonMaxSuppressionV4Impl;\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function nonMaxSuppressionV4(args: {\n  inputs: NonMaxSuppressionV4Inputs,\n  backend: MathBackendCPU,\n  attrs: NonMaxSuppressionV4Attrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize} =\n      attrs;\n\n  assertNotComplex(boxes, 'NonMaxSuppressionPadded');\n\n  const boxesVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const scoresVals = backend.data.get(scores.dataId).values as TypedArray;\n\n  const {selectedIndices, validOutputs} = nonMaxSuppressionV4Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold,\n      padToMaxOutputSize);\n\n  return [\n    backend.makeTensorInfo(\n        [selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n    backend.makeTensorInfo([], 'int32', new Int32Array([validOutputs]))\n  ];\n}\nexport const nonMaxSuppressionV4Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV4,\n  backendName: 'cpu',\n  kernelFunc: nonMaxSuppressionV4 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV5, NonMaxSuppressionV5Attrs, NonMaxSuppressionV5Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV5Impl = kernel_impls.nonMaxSuppressionV5Impl;\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function nonMaxSuppressionV5(args: {\n  inputs: NonMaxSuppressionV5Inputs,\n  backend: MathBackendCPU,\n  attrs: NonMaxSuppressionV5Attrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma} = attrs;\n\n  assertNotComplex(boxes, 'NonMaxSuppressionWithScore');\n\n  const boxesVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const scoresVals = backend.data.get(scores.dataId).values as TypedArray;\n\n  const maxOutputSizeVal = maxOutputSize;\n  const iouThresholdVal = iouThreshold;\n  const scoreThresholdVal = scoreThreshold;\n  const softNmsSigmaVal = softNmsSigma;\n\n  const {selectedIndices, selectedScores} = nonMaxSuppressionV5Impl(\n      boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal,\n      scoreThresholdVal, softNmsSigmaVal);\n\n  return [\n    backend.makeTensorInfo(\n        [selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n    backend.makeTensorInfo(\n        [selectedScores.length], 'float32', new Float32Array(selectedScores))\n  ];\n}\n\nexport const nonMaxSuppressionV5Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV5,\n  backendName: 'cpu',\n  kernelFunc: nonMaxSuppressionV5 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OneHot, OneHotAttrs, OneHotInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function oneHot(\n    args: {inputs: OneHotInputs, backend: MathBackendCPU, attrs: OneHotAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {indices} = inputs;\n  const {depth, onValue, offValue} = attrs;\n\n  assertNotComplex(indices, 'oneHot');\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n\n  const res = new Float32Array(indicesSize * depth);\n  res.fill(offValue);\n  const indicesVal = backend.data.get(indices.dataId).values as TypedArray;\n\n  for (let event = 0; event < indicesSize; ++event) {\n    if (indicesVal[event] >= 0 && indicesVal[event] < depth) {\n      res[event * depth + indicesVal[event]] = onValue;\n    }\n  }\n\n  return backend.makeTensorInfo([...indices.shape, depth], 'int32', res);\n}\n\nexport const oneHotConfig: KernelConfig = {\n  kernelName: OneHot,\n  backendName: 'cpu',\n  kernelFunc: oneHot as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, ZerosLike, ZerosLikeInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\n\nexport function zerosLike(\n    args: {inputs: ZerosLikeInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (x.dtype === 'string') {\n    throw new Error('zerosLike is not supported for string tensors');\n  } else if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = zerosLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(r);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    backend.disposeIntermediateTensorInfo(i);\n\n    return result;\n  } else {\n    return fill({backend, attrs: {shape: x.shape, value: 0, dtype: x.dtype}});\n  }\n}\n\nexport const zerosLikeConfig: KernelConfig = {\n  kernelName: ZerosLike,\n  backendName: 'cpu',\n  kernelFunc: zerosLike as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OnesLike, OnesLikeInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {zerosLike} from './ZerosLike';\n\nexport function onesLike(\n    args: {inputs: OnesLikeInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (x.dtype === 'string') {\n    throw new Error('onesLike is not supported for string tensors');\n  } else if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = onesLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(r);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    backend.disposeIntermediateTensorInfo(i);\n\n    return result;\n  } else {\n    return fill({backend, attrs: {shape: x.shape, value: 1, dtype: x.dtype}});\n  }\n}\n\nexport const onesLikeConfig: KernelConfig = {\n  kernelName: OnesLike,\n  backendName: 'cpu',\n  kernelFunc: onesLike as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Pack, PackAttrs, PackInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {concat} from './Concat';\nimport {expandDims} from './ExpandDims';\n\nexport function pack(\n    args: {inputs: PackInputs, backend: MathBackendCPU, attrs: PackAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  if (inputs.length === 1) {\n    return expandDims(\n        {inputs: {input: inputs[0]}, backend, attrs: {dim: axis}});\n  }\n\n  const shape = inputs[0].shape;\n  const dtype = inputs[0].dtype;\n\n  inputs.forEach(t => {\n    util.assertShapesMatch(\n        shape, t.shape,\n        'All tensors passed to stack must have matching shapes');\n    util.assert(\n        dtype === t.dtype,\n        () => 'All tensors passed to stack must have matching dtypes');\n  });\n\n  const intermediateTensorInfos: TensorInfo[] = [];\n  const expandedTensors = inputs.map(t => {\n    const expandedT =\n        expandDims({inputs: {input: t}, backend, attrs: {dim: axis}});\n    intermediateTensorInfos.push(expandedT);\n    return expandedT;\n  });\n\n  const result = concat({inputs: expandedTensors, backend, attrs: {axis}});\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const packConfig: KernelConfig = {\n  kernelName: Pack,\n  backendName: 'cpu',\n  kernelFunc: pack as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, NumericDataType, PadV2, PadV2Attrs, PadV2Inputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function padV2(\n    args: {inputs: PadV2Inputs, backend: MathBackendCPU, attrs: PadV2Attrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {paddings, constantValue} = attrs;\n\n  assertNotComplex(x, 'pad');\n\n  const outShape = paddings.map(\n      (p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n\n  const start = paddings.map(p => p[0]);\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const xSize = util.sizeFromShape(x.shape);\n  const xRank = x.shape.length;\n  const xStrides = util.computeStrides(x.shape);\n\n  const resultSize = util.sizeFromShape(outShape);\n  const resultRank = outShape.length;\n  const resultStrides = util.computeStrides(outShape);\n  const resVals =\n      util.getTypedArrayFromDType(x.dtype as NumericDataType, resultSize);\n\n  if (constantValue !== 0) {\n    resVals.fill(constantValue);\n  }\n\n  for (let i = 0; i < xSize; i++) {\n    const coords = util.indexToLoc(i, xRank, xStrides);\n    const outCoords = coords.map((c, i) => c + start[i]);\n    const outIndex = util.locToIndex(outCoords, resultRank, resultStrides);\n\n    resVals[outIndex] = xVals[i];\n  }\n\n  const outId = backend.write(resVals, outShape, x.dtype);\n\n  return {dataId: outId, shape: outShape, dtype: x.dtype};\n}\n\nexport const padV2Config: KernelConfig = {\n  kernelName: PadV2,\n  backendName: 'cpu',\n  kernelFunc: padV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Pow} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const powImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => Math.pow(a, b));\nexport const pow = binaryKernelFunc(Pow, powImpl);\n\nexport const powConfig: KernelConfig = {\n  kernelName: Pow,\n  backendName: 'cpu',\n  kernelFunc: pow\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Range, RangeAttrs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {rangeImpl} from './Range_impl';\n\nexport function range(args: {backend: MathBackendCPU, attrs: RangeAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {start, stop, dtype, step} = attrs;\n\n  const values = rangeImpl(start, stop, step, dtype);\n  return backend.makeTensorInfo([values.length], dtype, values);\n}\n\nexport const rangeConfig: KernelConfig = {\n  kernelName: Range,\n  backendName: 'cpu',\n  kernelFunc: range as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Reciprocal} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const reciprocal = unaryKernelFunc(Reciprocal, (xi) => 1 / xi);\n\nexport const reciprocalConfig: KernelConfig = {\n  kernelName: Reciprocal,\n  backendName: 'cpu',\n  kernelFunc: reciprocal,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeBilinear, ResizeBilinearAttrs, ResizeBilinearInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeBilinear(args: {\n  inputs: ResizeBilinearInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeBilinearAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n\n  assertNotComplex(images, 'resizeBilinear');\n\n  const imagesStrides = util.computeStrides(images.shape);\n  const [newHeight, newWidth] = size;\n\n  const [batch, oldHeight, oldWidth, numChannels] = images.shape;\n  const xValues = backend.data.get(images.dataId).values as TypedArray;\n  const result = new Float32Array(\n      util.sizeFromShape([batch, newHeight, newWidth, numChannels]));\n\n  const effectiveInputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n    (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n  ];\n\n  const effectiveOutputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n    (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n  ];\n  let outputIdx = 0;\n  const effectiveRowSizeRatio = effectiveInputSize[0] / effectiveOutputSize[0];\n  const effectiveColSizeRatio = effectiveInputSize[1] / effectiveOutputSize[1];\n  for (let b = 0; b < batch; b++) {\n    for (let r = 0; r < newHeight; r++) {\n      let sourceFracRow: number;\n      if (halfPixelCenters) {\n        sourceFracRow = effectiveRowSizeRatio * (r + 0.5) - 0.5;\n      } else {\n        sourceFracRow = effectiveRowSizeRatio * r;\n      }\n\n      const sourceRowFloor = Math.max(0, Math.floor(sourceFracRow));\n      const rowFrac = sourceFracRow - sourceRowFloor;\n      const sourceRowCeil = Math.min(oldHeight - 1, Math.ceil(sourceFracRow));\n      const topRowOffset =\n          b * imagesStrides[0] + sourceRowFloor * imagesStrides[1];\n      const botRowOffset =\n          b * imagesStrides[0] + sourceRowCeil * imagesStrides[1];\n      for (let c = 0; c < newWidth; c++) {\n        let sourceFracCol: number;\n        if (halfPixelCenters) {\n          sourceFracCol = effectiveColSizeRatio * (c + 0.5) - 0.5;\n        } else {\n          sourceFracCol = effectiveColSizeRatio * c;\n        }\n        const sourceColFloor = Math.max(0, Math.floor(sourceFracCol));\n        const colFrac = sourceFracCol - sourceColFloor;\n        const sourceColCeil = Math.min(oldWidth - 1, Math.ceil(sourceFracCol));\n        const topLeftOffest = topRowOffset + sourceColFloor * imagesStrides[2];\n        const botLeftOffset = botRowOffset + sourceColFloor * imagesStrides[2];\n        const topRightOffset = topRowOffset + sourceColCeil * imagesStrides[2];\n        const botRightOffest = botRowOffset + sourceColCeil * imagesStrides[2];\n        for (let d = 0; d < numChannels; d++) {\n          // Begin shader.\n\n          // Compute the fractional index of the source.\n          const topLeft = xValues[topLeftOffest + d];\n          const bottomLeft = xValues[botLeftOffset + d];\n          const topRight = xValues[topRightOffset + d];\n          const bottomRight = xValues[botRightOffest + d];\n\n          const top = topLeft + (topRight - topLeft) * colFrac;\n          const bottom = bottomLeft + (bottomRight - bottomLeft) * colFrac;\n          const newValue = top + (bottom - top) * rowFrac;\n\n          result[outputIdx++] = newValue;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batch, newHeight, newWidth, numChannels], 'float32', result);\n}\n\nexport const resizeBilinearConfig: KernelConfig = {\n  kernelName: ResizeBilinear,\n  backendName: 'cpu',\n  kernelFunc: resizeBilinear as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeBilinearGrad, ResizeBilinearGradAttrs, ResizeBilinearGradInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeBilinearGrad(args: {\n  inputs: ResizeBilinearGradInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeBilinearGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images, dy} = inputs;\n  const {alignCorners} = attrs;\n\n  assertNotComplex([dy, images], 'resizeBilinearGrad');\n\n  const imagesStrides = util.computeStrides(images.shape);\n\n  const [batch, xHeight, xWidth, depth] = images.shape;\n  const [, yHeight, yWidth] = dy.shape;\n\n  const output = new Float32Array(batch * xHeight * xWidth * depth);\n\n  // In the backwards pass, we want to find the pixels that were generated\n  // for each pixel in the input image the forward pass and add the\n  // corresponding coefficient from dy to the gradient (with some\n  // interpolation).\n\n  const effectiveXSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n    (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n  ];\n\n  const effectiveYSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n    (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n  ];\n\n  const heightScale = effectiveXSize[0] / effectiveYSize[0];\n  const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n  // Reference implementation\n  // tslint:disable-next-line:max-line-length\n  // https://github.com/tensorflow/tensorflow/blob/3039375c86a5bbc9610c7725dcaa95d635f87ba2/tensorflow/core/kernels/resize_bilinear_op.cc#L275\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  let offset = 0;\n  for (let b = 0; b < batch; b++) {\n    const bOffset = b * imagesStrides[0];\n    for (let r = 0; r < yHeight; r++) {\n      const dxR = r * heightScale;\n      const topDxRIndex = Math.floor(dxR);\n      const bottomDxRIndex = Math.min(Math.ceil(dxR), xHeight - 1);\n\n      const topDxROffset = bOffset + topDxRIndex * imagesStrides[1];\n      const bottomDxROffset = bOffset + bottomDxRIndex * imagesStrides[1];\n\n      const dxRLerp = dxR - topDxRIndex;\n      const inverseDxRLerp = 1.0 - dxRLerp;\n      for (let c = 0; c < yWidth; c++) {\n        const dxC = c * widthScale;\n        const leftDxCIndex = Math.floor(dxC);\n        const rightDxCIndex = Math.min(Math.ceil(dxC), xWidth - 1);\n        const dxCLerp = dxC - leftDxCIndex;\n        const inverseDxCLerp = 1.0 - dxCLerp;\n\n        const topLeftRCOffset = topDxROffset + leftDxCIndex * imagesStrides[2];\n        const topRightRCOffset =\n            topDxROffset + rightDxCIndex * imagesStrides[2];\n        const bottomLeftRCOffset =\n            bottomDxROffset + leftDxCIndex * imagesStrides[2];\n        const bottomRightRCOffset =\n            bottomDxROffset + rightDxCIndex * imagesStrides[2];\n\n        const inverseDxRLerpTimesInverseDxCLerp =\n            inverseDxRLerp * inverseDxCLerp;\n        const inverseDxRLerpTimesDxCLerp = inverseDxRLerp * dxCLerp;\n        const dxRLerpTimesInverseDxCLerp = dxRLerp * inverseDxCLerp;\n        const dxRLerpTimesDxCLerp = dxRLerp * dxCLerp;\n        for (let d = 0; d < depth; d++) {\n          const dyVal = dyValues[offset++];\n          output[topLeftRCOffset + d] +=\n              dyVal * inverseDxRLerpTimesInverseDxCLerp;\n          output[topRightRCOffset + d] += dyVal * inverseDxRLerpTimesDxCLerp;\n          output[bottomLeftRCOffset + d] += dyVal * dxRLerpTimesInverseDxCLerp;\n          output[bottomRightRCOffset + d] += dyVal * dxRLerpTimesDxCLerp;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batch, xWidth, xHeight, depth], 'float32', output);\n}\n\nexport const resizeBilinearGradConfig: KernelConfig = {\n  kernelName: ResizeBilinearGrad,\n  backendName: 'cpu',\n  kernelFunc: resizeBilinearGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeNearestNeighbor, ResizeNearestNeighborAttrs, ResizeNearestNeighborInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeNearestNeighbor(args: {\n  inputs: ResizeNearestNeighborInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeNearestNeighborAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n\n  assertNotComplex(images, 'resizeNearestNeighbor');\n\n  const imagesStrides = util.computeStrides(images.shape);\n  const [newHeight, newWidth] = size;\n\n  const [batch, oldHeight, oldWidth, numChannels] = images.shape;\n  const xValues = backend.data.get(images.dataId).values as TypedArray;\n  const output = new Float32Array(batch * newHeight * newWidth * numChannels);\n\n  const effectiveInputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n    (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n  ];\n\n  const effectiveOutputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n    (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n  ];\n\n  const effectiveRowSizeRatio = effectiveInputSize[0] / effectiveOutputSize[0];\n  const effectiveColSizeRatio = effectiveInputSize[1] / effectiveOutputSize[1];\n\n  let outputOffset = 0;\n  for (let b = 0; b < batch; b++) {\n    const batchOffset = b * imagesStrides[0];\n    for (let r = 0; r < newHeight; r++) {\n      const sourceFracRow = halfPixelCenters ?\n          effectiveRowSizeRatio * (r + 0.5) :\n          effectiveRowSizeRatio * r;\n      let sourceNearestRow = Math.min(\n          oldHeight - 1,\n          alignCorners ? Math.round(sourceFracRow) : Math.floor(sourceFracRow));\n      if (halfPixelCenters) {\n        sourceNearestRow = Math.max(0, sourceNearestRow);\n      }\n      const rowOffset = batchOffset + sourceNearestRow * imagesStrides[1];\n      for (let c = 0; c < newWidth; c++) {\n        const sourceFracCol = halfPixelCenters ?\n            effectiveColSizeRatio * (c + 0.5) :\n            effectiveColSizeRatio * c;\n        let sourceNearestCol = Math.min(\n            oldWidth - 1,\n            alignCorners ? Math.round(sourceFracCol) :\n                           Math.floor(sourceFracCol));\n        if (halfPixelCenters) {\n          sourceNearestCol = Math.max(0, sourceNearestCol);\n        }\n        const colOffset = rowOffset + sourceNearestCol * imagesStrides[2];\n        for (let d = 0; d < numChannels; d++) {\n          // Begin shader.\n          // Compute the fractional index of the source.\n          const newVal = xValues[colOffset + d];\n          output[outputOffset++] = newVal;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batch, newHeight, newWidth, numChannels], images.dtype, output);\n}\n\nexport const resizeNearestNeighborConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighbor,\n  backendName: 'cpu',\n  kernelFunc: resizeNearestNeighbor as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeNearestNeighborGrad, ResizeNearestNeighborGradAttrs, ResizeNearestNeighborGradInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeNearestNeighborGrad(args: {\n  inputs: ResizeNearestNeighborGradInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeNearestNeighborGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images, dy} = inputs;\n  const {alignCorners} = attrs;\n\n  assertNotComplex([dy, images], 'resizeNearestNeighborGrad');\n\n  const imagesStrides = util.computeStrides(images.shape);\n  const dyStrides = util.computeStrides(dy.shape);\n  const [batch, xHeight, xWidth, depth] = images.shape;\n  const [, yHeight, yWidth] = dy.shape;\n\n  const output = new Float32Array(batch * xHeight * xWidth * depth);\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n\n  // In the backwards pass, we want to find the pixels that were generated\n  // for each pixel in the input image the forward pass\n\n  const effectiveXSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n    (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n  ];\n\n  const effectiveYSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n    (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n  ];\n\n  const heightScale = effectiveXSize[0] / effectiveYSize[0];\n  const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n  const invHeightScale = 1 / heightScale;\n  const invWidthScale = 1 / widthScale;\n\n  // This defines the size of the window of values around a particular\n  // index in dy that we want to search for contributions to dx.\n  const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n  const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n\n  // Loop over the output space.\n  for (let b = 0; b < batch; b++) {\n    const batchOffset = b * imagesStrides[0];\n    for (let r = 0; r < xHeight; r++) {\n      const rowOffset = batchOffset + r * imagesStrides[1];\n\n      // Compute bounds for where in dy we will look\n      const startRLerp = Math.floor(r * invHeightScale);\n      const startDyR = Math.floor(startRLerp - (winHeight / 2));\n      for (let c = 0; c < xWidth; c++) {\n        const colOffset = rowOffset + c * imagesStrides[2];\n\n        // Compute bounds for where in dy we will look\n        const startCLerp = Math.floor(c * invWidthScale);\n        const startDyC = Math.floor(startCLerp - (winWidth / 2));\n\n        for (let d = 0; d < depth; d++) {\n          let accum = 0;\n          // loop over dy\n\n          for (let dyRIndex = 0; dyRIndex < winHeight; dyRIndex++) {\n            const dyR = dyRIndex + startDyR;\n            // Guard against the window exceeding the bounds of dy\n            if (dyR < 0 || dyR >= yHeight) {\n              continue;\n            }\n\n            const dyROffset = batchOffset + dyR * dyStrides[1];\n            const sourceFracRow = dyR * heightScale;\n            const sourceNearestRow = Math.min(\n                xHeight - 1,\n                alignCorners ? Math.round(sourceFracRow) :\n                               Math.floor(sourceFracRow));\n            if (r !== sourceNearestRow) {\n              continue;\n            }\n            for (let dyCIndex = 0; dyCIndex < winWidth; dyCIndex++) {\n              const dyC = dyCIndex + startDyC;\n              // Guard against the window exceeding the bounds of dy\n              if (dyC < 0 || dyC >= yWidth) {\n                continue;\n              }\n\n              const dyCOffset = dyROffset + dyC * dyStrides[2];\n              const sourceFracCol = dyC * widthScale;\n              const sourceNearestCol = Math.min(\n                  xWidth - 1,\n                  alignCorners ? Math.round(sourceFracCol) :\n                                 Math.floor(sourceFracCol));\n\n              if (c === sourceNearestCol) {\n                accum += dyValues[dyCOffset + d];\n              }\n            }\n          }\n          output[colOffset + d] = accum;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(images.shape, images.dtype, output);\n}\n\nexport const resizeNearestNeighborGradConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighborGrad,\n  backendName: 'cpu',\n  kernelFunc: resizeNearestNeighborGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Reverse, ReverseAttrs, ReverseInputs, TensorBuffer, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {identity} from './Identity';\n\nexport function reverse(\n    args:\n        {inputs: ReverseInputs, backend: MathBackendCPU, attrs: ReverseAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dims} = attrs;\n\n  assertNotComplex(x, 'reverse');\n\n  const xRank = x.shape.length;\n\n  const $dims = util.parseAxisParam(dims, x.shape);\n  if (xRank === 0) {\n    return identity({inputs: {x}, backend});\n  }\n\n  const outBuf = new TensorBuffer(x.shape, x.dtype);\n  const xBuf = backend.bufferSync(x);\n\n  for (let i = 0; i < outBuf.size; i++) {\n    const outLoc = outBuf.indexToLoc(i);\n    const inLoc = outLoc.slice();\n    $dims.forEach(d => inLoc[d] = x.shape[d] - 1 - inLoc[d]);\n    outBuf.set(xBuf.get(...inLoc), ...outLoc);\n  }\n\n  return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\n\nexport const reverseConfig: KernelConfig = {\n  kernelName: Reverse,\n  backendName: 'cpu',\n  kernelFunc: reverse as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {backend_util, RotateWithOffset, RotateWithOffsetAttrs, RotateWithOffsetInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const rotateWithOffsetConfig: KernelConfig = {\n  kernelName: RotateWithOffset,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {image} = inputs as RotateWithOffsetInputs;\n    const {radians, fillValue, center} = attrs as {} as RotateWithOffsetAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const output = util.getTypedArrayFromDType(\n        image.dtype as NumericDataType, util.sizeFromShape(image.shape));\n    const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n\n    const [centerX, centerY] =\n        backend_util.getImageCenter(center, imageHeight, imageWidth);\n    const fullOpacityValue = 255;\n\n    const sinFactor = Math.sin(radians);\n    const cosFactor = Math.cos(radians);\n    const imageVals = cpuBackend.data.get(image.dataId).values as TypedArray;\n\n    for (let batchIdx = 0; batchIdx < batch; batchIdx++) {\n      const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;\n\n      for (let row = 0; row < imageHeight; row++) {\n        const rowOffset = row * (imageWidth * numChannels);\n\n        for (let col = 0; col < imageWidth; col++) {\n          const colOffset = col * numChannels;\n\n          for (let channel = 0; channel < numChannels; channel++) {\n            const coords = [batch, row, col, channel];\n\n            const x = coords[2];\n            const y = coords[1];\n\n            // coordX/coordY are the result of rotating and translating x/y.\n            let coordX = (x - centerX) * cosFactor - (y - centerY) * sinFactor;\n            let coordY = (x - centerX) * sinFactor + (y - centerY) * cosFactor;\n            coordX = Math.round(coordX + centerX);\n            coordY = Math.round(coordY + centerY);\n\n            let outputValue = fillValue;\n            if (typeof fillValue !== 'number') {\n              if (channel === 3) {\n                outputValue = fullOpacityValue;\n              } else {\n                outputValue = fillValue[channel];\n              }\n            }\n\n            // If the coordinate position falls within the image boundaries...\n            if (coordX >= 0 && coordX < imageWidth && coordY >= 0 &&\n                coordY < imageHeight) {\n              // set the output to the image value at the coordinate position.\n              const rotatedRowOffset = coordY * (imageWidth * numChannels);\n              const rotatedColOffset = coordX * numChannels;\n              const imageIdx =\n                  batchOffset + rotatedRowOffset + rotatedColOffset + channel;\n              outputValue = imageVals[imageIdx];\n            }\n\n            const outIdx = batchOffset + rowOffset + colOffset + channel;\n            output[outIdx] = outputValue as number;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(output, image.shape, image.dtype);\n    return {dataId, shape: image.shape, dtype: image.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Round} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const round = unaryKernelFunc(Round, (xi) => {\n  // The algorithm is based on banker's rounding.\n  const base = Math.floor(xi);\n  if (xi - base < 0.5) {\n    return Math.floor(xi);\n  } else if (xi - base > 0.5) {\n    return Math.ceil(xi);\n  } else {\n    if (base % 2.0 === 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n});\n\nexport const roundConfig: KernelConfig = {\n  kernelName: Round,\n  backendName: 'cpu',\n  kernelFunc: round,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {buffer, Rank, ShapeMap, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\nexport function scatterImpl<R extends Rank>(\n    indices: TensorBuffer<R>, updates: TensorBuffer<R>, shape: number[],\n    outputSize: number, sliceSize: number, numUpdates: number,\n    sliceRank: number, strides: number[], defaultValue: number,\n    sumDupeIndices: boolean): TensorBuffer<R> {\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n\n  const indicesData = indices.values as TypedArray;\n  const updatesData = updates.values as TypedArray;\n\n  if (outputSize === 0) {\n    return buffer(shape as ShapeMap[R], updates.dtype);\n  }\n\n  const outBuf = buffer(flattenShape, updates.dtype);\n  (outBuf.values as TypedArray).fill(defaultValue);\n\n  for (let i = 0; i < numUpdates; i++) {\n    const index = [];\n    let flattenIndex = 0;\n    for (let j = 0; j < sliceRank; j++) {\n      const dim = indicesData[i * sliceRank + j];\n      index.push(dim);\n      flattenIndex += dim * strides[j];\n    }\n\n    if (flattenIndex < 0 || flattenIndex >= outputSize / sliceSize) {\n      throw new Error(`Invalid indices: ${index} does not index into ${shape}`);\n    }\n\n    for (let k = 0; k < sliceSize; k++) {\n      if (sumDupeIndices) {\n        outBuf.values[flattenIndex * sliceSize + k] +=\n            updatesData[i * sliceSize + k];\n      } else {\n        outBuf.values[flattenIndex * sliceSize + k] = updates.rank === 0 ?\n            updatesData[0] :\n            updatesData[i * sliceSize + k];\n      }\n    }\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, ScatterNd, ScatterNdAttrs, ScatterNdInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {scatterImpl} from './Scatter_impl';\n\nexport function scatterNd(args: {\n  inputs: ScatterNdInputs,\n  backend: MathBackendCPU,\n  attrs: ScatterNdAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {indices, updates} = inputs;\n  const {shape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(updates, indices, shape);\n  const sumDupeIndices = true;\n\n  const indicesBuf = backend.bufferSync(indices);\n  const updatesBuf = backend.bufferSync(updates);\n\n  const outBuf = scatterImpl(\n      indicesBuf, updatesBuf, shape, outputSize, sliceSize, numUpdates,\n      sliceRank, strides, 0 /* defaultValue */, sumDupeIndices);\n\n  return backend.makeTensorInfo(shape, outBuf.dtype, outBuf.values);\n}\n\nexport const scatterNdConfig: KernelConfig = {\n  kernelName: ScatterNd,\n  backendName: 'cpu',\n  kernelFunc: scatterNd as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Select, SelectInputs, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function select(args: {inputs: SelectInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {condition, t, e} = inputs;\n\n  assertNotComplex([condition, t, e], 'select');\n  const conditionRank = condition.shape.length;\n\n  const values = backend.data.get(condition.dataId).values as TypedArray;\n  const tValues = backend.data.get(t.dataId).values as TypedArray;\n  const eValues = backend.data.get(e.dataId).values as TypedArray;\n  const resultDtype = upcastType(t.dtype, e.dtype);\n  const newValues =\n      util.makeZerosTypedArray(util.sizeFromShape(t.shape), resultDtype);\n\n  let index = 0;\n  const offset =\n      conditionRank === 0 || conditionRank > 1 || t.shape.length === 1 ?\n      1 :\n      util.sizeFromShape(t.shape.slice(1));\n\n  for (let i = 0; i < values.length; i++) {\n    for (let j = 0; j < offset; j++) {\n      if (values[i] === 1) {\n        newValues[index++] = tValues[i];\n      } else {\n        newValues[index++] = eValues[i];\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(t.shape, resultDtype, newValues);\n}\n\nexport const selectConfig: KernelConfig = {\n  kernelName: Select,\n  backendName: 'cpu',\n  kernelFunc: select as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, Selu} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nconst scaleAlpha = backend_util.SELU_SCALEALPHA;\nconst scale = backend_util.SELU_SCALE;\n\nexport const selu = unaryKernelFunc(Selu, (xi) => {\n  if (xi >= 0) {\n    return scale * xi;\n  } else {\n    return scaleAlpha * (Math.exp(xi) - 1);\n  }\n});\n\nexport const seluConfig: KernelConfig = {\n  kernelName: Selu,\n  backendName: 'cpu',\n  kernelFunc: selu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sigmoid} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sigmoid =\n    unaryKernelFunc(Sigmoid, (xi) => 1 / (1 + Math.exp(-xi)));\n\nexport const sigmoidConfig: KernelConfig = {\n  kernelName: Sigmoid,\n  backendName: 'cpu',\n  kernelFunc: sigmoid,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sign} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sign = unaryKernelFunc(Sign, (xi) => {\n  if (xi < 0) {\n    return -1;\n  } else if (xi > 0) {\n    return 1;\n  } else {\n    return 0;\n  }\n});\n\nexport const signConfig: KernelConfig = {\n  kernelName: Sign,\n  backendName: 'cpu',\n  kernelFunc: sign,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sin} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sin = unaryKernelFunc(Sin, (xi) => Math.sin(xi));\n\nexport const sinConfig: KernelConfig = {\n  kernelName: Sin,\n  backendName: 'cpu',\n  kernelFunc: sin,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sinh} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sinh = unaryKernelFunc(Sinh, (xi) => Math.sinh(xi));\n\nexport const sinhConfig: KernelConfig = {\n  kernelName: Sinh,\n  backendName: 'cpu',\n  kernelFunc: sinh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Softplus} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\n// mirrors the implementation of tf.nn.softplus: https://goo.gl/vkcvwX\n\n// epsilon is the difference between 1.0 and the next representable float.\n// For a single precision 32 bit float this should be 2^-23, see:\n// https://math.byu.edu/~schow/work/IEEEFloatingPoint.htm\nconst epsilon = 1.1920928955078125e-7;\nconst threshold = Math.log(epsilon) + 2.0;\n\nexport const softplus = unaryKernelFunc(Softplus, (xi) => {\n  // Value above which exp(x) may overflow, but softplus(x) == x\n  // is within machine epsilon.\n  const tooLarge = xi > -threshold;\n\n  // Value below which exp(x) may underflow, but softplus(x) == exp(x)\n  // is within machine epsilon.\n  const tooSmall = xi < threshold;\n\n  const expX = Math.exp(xi);\n  let result;\n\n  if (tooSmall) {\n    result = expX;\n  } else if (tooLarge) {\n    result = xi;\n  } else {\n    result = Math.log(1.0 + expX);\n  }\n  return result;\n});\n\nexport const softplusConfig: KernelConfig = {\n  kernelName: Softplus,\n  backendName: 'cpu',\n  kernelFunc: softplus,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, ReshapeAttrs, ReshapeInputs, SpaceToBatchND, SpaceToBatchNDAttrs, SpaceToBatchNDInputs, TensorInfo, TransposeAttrs, TransposeInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {padV2Config} from './PadV2';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function spaceToBatchND(args: {\n  inputs: SpaceToBatchNDInputs,\n  backend: MathBackendCPU,\n  attrs: SpaceToBatchNDAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, paddings} = attrs;\n\n  assertNotComplex([x], 'spaceToBatchND');\n\n  const prod = util.sizeFromShape(blockShape);\n\n  const completePaddings: Array<[number, number]> = [[0, 0]];\n  completePaddings.push(...(paddings as Array<[number, number]>));\n\n  for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n    completePaddings.push([0, 0]);\n  }\n\n  const paddedX = padV2Config.kernelFunc({\n    inputs: {x},\n    backend,\n    attrs: {paddings: completePaddings, constantValue: 0}\n  }) as TensorInfo;\n\n  const reshapedPaddedShape =\n      backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n\n  const permutedReshapedPaddedPermutation = backend_util.getPermuted(\n      reshapedPaddedShape.length, blockShape.length, false);\n\n  const flattenShape =\n      backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);\n\n  const reshapeInputs: ReshapeInputs = {x: paddedX};\n  const reshapeAttrs: ReshapeAttrs = {shape: reshapedPaddedShape};\n  const paddedXReshaped =\n      reshape({inputs: reshapeInputs, backend, attrs: reshapeAttrs});\n\n  const transposeInputs: TransposeInputs = {x: paddedXReshaped};\n  const transposeAttrs:\n      TransposeAttrs = {perm: permutedReshapedPaddedPermutation};\n  const paddedXT =\n      transpose({inputs: transposeInputs, backend, attrs: transposeAttrs});\n\n  const resultReshapeInputs: ReshapeInputs = {x: paddedXT};\n  const resultReshapeAttrs: ReshapeAttrs = {shape: flattenShape};\n  const result = reshape(\n      {inputs: resultReshapeInputs, backend, attrs: resultReshapeAttrs});\n\n  backend.disposeIntermediateTensorInfo(paddedX);\n  backend.disposeIntermediateTensorInfo(paddedXReshaped);\n  backend.disposeIntermediateTensorInfo(paddedXT);\n\n  return result;\n}\n\nexport const spaceToBatchNDConfig: KernelConfig = {\n  kernelName: SpaceToBatchND,\n  backendName: 'cpu',\n  kernelFunc: spaceToBatchND as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, SparseToDense, SparseToDenseAttrs, SparseToDenseInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {scatterImpl} from './Scatter_impl';\n\nexport function sparseToDense(args: {\n  inputs: SparseToDenseInputs,\n  backend: MathBackendCPU,\n  attrs: SparseToDenseAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {sparseIndices, sparseValues, defaultValue} = inputs;\n  const {outputShape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n  const sumDupeIndices = false;\n\n  const indicesBuf = backend.bufferSync(sparseIndices);\n  const updatesBuf = backend.bufferSync(sparseValues);\n  const $defaultValue =\n      backend.data.get(defaultValue.dataId).values[0] as number;\n\n  const outBuf = scatterImpl(\n      indicesBuf, updatesBuf, outputShape, outputSize, sliceSize, numUpdates,\n      sliceRank, strides, $defaultValue, sumDupeIndices);\n\n  return backend.makeTensorInfo(outputShape, outBuf.dtype, outBuf.values);\n}\n\nexport const sparseToDenseConfig: KernelConfig = {\n  kernelName: SparseToDense,\n  backendName: 'cpu',\n  kernelFunc: sparseToDense as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, SplitVAttrs, SplitVInputs} from '@tensorflow/tfjs-core';\nimport {KernelConfig, KernelFunc, SplitV, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {slice} from './Slice';\n\nexport function splitV(\n    args: {inputs: SplitVInputs, backend: MathBackendCPU, attrs: SplitVAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {numOrSizeSplits, axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, x.shape)[0];\n  const splitSizes = backend_util.prepareSplitSize(x, numOrSizeSplits, $axis);\n\n  const begin = new Array(x.shape.length).fill(0);\n  const size = x.shape.slice();\n  return splitSizes.map(s => {\n    const sliceSize = [...size];\n    sliceSize[$axis] = s;\n    const sliceT =\n        slice({inputs: {x}, backend, attrs: {begin, size: sliceSize}});\n    begin[$axis] += s;\n    return sliceT;\n  });\n}\n\nexport const splitVConfig: KernelConfig = {\n  kernelName: SplitV,\n  backendName: 'cpu',\n  kernelFunc: splitV as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sqrt} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sqrt = unaryKernelFunc(Sqrt, (xi) => Math.sqrt(xi));\n\nexport const sqrtConfig: KernelConfig = {\n  kernelName: Sqrt,\n  backendName: 'cpu',\n  kernelFunc: sqrt,\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Square, SquareInputs} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport const squareConfig: KernelConfig = {\n  kernelName: Square,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend}) => {\n    const {x} = inputs as SquareInputs;\n    const cpuBackend = backend as MathBackendCPU;\n    assertNotComplex(x, 'square');\n\n    const values = cpuBackend.data.get(x.dataId).values as Float32Array;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      const value = values[i];\n      newValues[i] = value * value;\n    }\n    const dataId = cpuBackend.write(newValues, x.shape, x.dtype);\n    return {dataId, shape: x.shape, dtype: x.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Step, StepAttrs} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const step = unaryKernelFunc(Step, (xi, attrs) => {\n  const stepAttrs = attrs as {} as StepAttrs;\n  if (isNaN(xi)) {\n    return NaN;\n  } else {\n    return xi > 0 ? 1 : stepAttrs.alpha;\n  }\n});\n\nexport const stepConfig: KernelConfig = {\n  kernelName: Step,\n  backendName: 'cpu',\n  kernelFunc: step,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, slice_util, StridedSlice, StridedSliceAttrs, StridedSliceInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\nimport {stridedSliceImpl} from './StridedSlice_impl';\n\nexport function stridedSlice(args: {\n  inputs: StridedSliceInputs,\n  backend: MathBackendCPU,\n  attrs: StridedSliceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {\n    begin,\n    end,\n    strides,\n    beginMask,\n    endMask,\n    ellipsisMask,\n    newAxisMask,\n    shrinkAxisMask\n  } = attrs;\n\n  assertNotComplex(x, 'stridedSlice');\n\n  const {nonStrided, $begin, $strides, size, newShape, outShape} =\n      slice_util.sliceInfo(\n          x.shape, begin, end, strides, beginMask, endMask, ellipsisMask,\n          newAxisMask, shrinkAxisMask);\n\n  const $x = reshape({inputs: {x}, backend, attrs: {shape: newShape}});\n\n  let result;\n  if (nonStrided) {\n    const sliced =\n        slice({inputs: {x: $x}, backend, attrs: {begin: $begin, size}});\n    result = reshape({inputs: {x: sliced}, backend, attrs: {shape: outShape}});\n\n    backend.disposeIntermediateTensorInfo(sliced);\n  } else if (outShape.some(axis => axis === 0)) {\n    result = backend.makeTensorInfo(outShape, x.dtype, []);\n  } else {\n    const xBuf = backend.bufferSync($x);\n    const outBuf = stridedSliceImpl(outShape, xBuf, $strides, $begin);\n\n    result = backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n  }\n\n  const resultReshaped =\n      reshape({inputs: {x: result}, backend, attrs: {shape: outShape}});\n\n  backend.disposeIntermediateTensorInfo($x);\n  backend.disposeIntermediateTensorInfo(result);\n\n  return resultReshaped;\n}\n\nexport const stridedSliceConfig: KernelConfig = {\n  kernelName: StridedSlice,\n  backendName: 'cpu',\n  kernelFunc: stridedSlice as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tan} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const tan = unaryKernelFunc(Tan, (xi) => Math.tan(xi));\n\nexport const tanConfig: KernelConfig = {\n  kernelName: Tan,\n  backendName: 'cpu',\n  kernelFunc: tan,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tanh} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const tanh = unaryKernelFunc(Tanh, (xi) => Math.tanh(xi));\n\nexport const tanhConfig: KernelConfig = {\n  kernelName: Tanh,\n  backendName: 'cpu',\n  kernelFunc: tanh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Tile, TileAttrs, TileInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {tileImpl} from './Tile_impl';\n\nexport function tile(\n    args: {inputs: TileInputs, backend: MathBackendCPU, attrs: TileAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {reps} = attrs;\n\n  assertNotComplex(x, 'tile');\n  const outBuf = tileImpl(backend.bufferSync(x), reps);\n\n  return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\n\nexport const tileConfig: KernelConfig = {\n  kernelName: Tile,\n  backendName: 'cpu',\n  kernelFunc: tile as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, NumericDataType, TensorInfo, TopK, TopKAttrs, TopKInputs, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {topKImpl} from './TopK_impl';\n\nexport function topK(\n    args: {inputs: TopKInputs, backend: MathBackendCPU, attrs: TopKAttrs}):\n    [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {k, sorted} = attrs;\n\n  assertNotComplex(x, 'topk');\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const [allTopKVals, allTopKIndices] =\n      topKImpl(xVals, x.shape, x.dtype as NumericDataType, k, sorted);\n\n  return [\n    backend.makeTensorInfo(\n        allTopKVals.shape, allTopKVals.dtype, allTopKVals.values),\n    backend.makeTensorInfo(\n        allTopKIndices.shape, allTopKIndices.dtype, allTopKIndices.values)\n  ];\n}\n\nexport const topKConfig: KernelConfig = {\n  kernelName: TopK,\n  backendName: 'cpu',\n  kernelFunc: topK as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, NumericDataType, TensorInfo, Transform, TransformAttrs, TransformInputs, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function transform(args: {\n  inputs: TransformInputs,\n  attrs: TransformAttrs,\n  backend: MathBackendCPU\n}): TensorInfo {\n  const {inputs, attrs, backend} = args;\n  const {image, transforms} = inputs;\n  const {interpolation, fillMode, fillValue, outputShape} = attrs;\n\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n  const [outHeight, outWidth] =\n      outputShape != null ? outputShape : [imageHeight, imageWidth];\n  const outShape = [batch, outHeight, outWidth, numChannels];\n\n  const strides = util.computeStrides(image.shape);\n  const batchStride = strides[0];\n  const rowStride = strides[1];\n  const colStride = strides[2];\n\n  const outVals = util.getTypedArrayFromDType(\n      image.dtype as NumericDataType, util.sizeFromShape(outShape));\n\n  outVals.fill(fillValue);\n\n  const imageVals = backend.data.get(image.dataId).values as TypedArray;\n  const transformVals =\n      backend.data.get(transforms.dataId).values as TypedArray;\n\n  // Ref TF implementation:\n  // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/image/image_ops.h\n  for (let b = 0; b < batch; ++b) {\n    const transform = transforms.shape[0] === 1 ?\n        transformVals :\n        transformVals.subarray(b * 8, b * 8 + 8);\n\n    for (let outY = 0; outY < outHeight; ++outY) {\n      for (let outX = 0; outX < outWidth; ++outX) {\n        for (let channel = 0; channel < numChannels; ++channel) {\n          let val;\n\n          const projection = transform[6] * outX + transform[7] * outY + 1;\n\n          if (projection === 0) {\n            // Return the fill value for infinite coordinates,\n            // which are outside the input image\n            continue;\n          }\n\n          const inX =\n              (transform[0] * outX + transform[1] * outY + transform[2]) /\n              projection;\n          const inY =\n              (transform[3] * outX + transform[4] * outY + transform[5]) /\n              projection;\n\n          const x = mapCoord(inX, imageWidth, fillMode);\n          const y = mapCoord(inY, imageHeight, fillMode);\n\n          switch (interpolation) {\n            case 'nearest':\n              val = nearestInterpolation(\n                  imageVals, imageHeight, imageWidth, batchStride, rowStride,\n                  colStride, b, y, x, channel, fillValue);\n              break;\n            case 'bilinear':\n              val = bilinearInterpolation(\n                  imageVals, imageHeight, imageWidth, batchStride, rowStride,\n                  colStride, b, y, x, channel, fillValue);\n              break;\n            default:\n              throw new Error(\n                  `Error in Transform: Expect 'nearest' or ` +\n                  `'bilinear', but got ${interpolation}`);\n          }\n\n          const ind =\n              b * batchStride + outY * rowStride + outX * colStride + channel;\n\n          outVals[ind] = val;\n        }\n      }\n    }\n\n    return backend.makeTensorInfo(outShape, image.dtype, outVals);\n  }\n\n  const dataId = backend.write(outVals, outShape, image.dtype);\n  return {dataId, shape: image.shape, dtype: image.dtype};\n}\n\nexport const transformConfig: KernelConfig = {\n  kernelName: Transform,\n  backendName: 'cpu',\n  kernelFunc: transform as {} as KernelFunc\n};\n\nfunction mapCoord(\n    outCoord: number, len: number,\n    mode: 'constant'|'reflect'|'wrap'|'nearest') {\n  switch (mode) {\n    case 'reflect':\n      return mapCoordReflect(outCoord, len);\n    case 'wrap':\n      return mapCoordWrap(outCoord, len);\n    case 'nearest':\n      return mapCoordNearest(outCoord, len);\n    case 'constant':\n    default:\n      return mapCoordConstant(outCoord, len);\n  }\n}\n\nfunction mapCoordReflect(outCoord: number, len: number): number {\n  // Reflect [abcd] to [dcba|abcd|dcba].\n  let inCoord = outCoord;\n  if (inCoord < 0) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz2 = 2 * len;\n      if (inCoord < sz2) {\n        inCoord = sz2 * Math.trunc(-inCoord / sz2) + inCoord;\n      }\n      inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1;\n    }\n  } else if (inCoord > len - 1) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz2 = 2 * len;\n      inCoord -= sz2 * Math.trunc(inCoord / sz2);\n      if (inCoord >= len) {\n        inCoord = sz2 - inCoord - 1;\n      }\n    }\n  }\n  // clamp is necessary because when outCoord = 3.5 and len = 4,\n  // inCoord = 3.5 and will be rounded to 4 in nearest interpolation.\n  return util.clamp(0, inCoord, len - 1);\n}\n\nfunction mapCoordWrap(outCoord: number, len: number): number {\n  // Wrap [abcd] to [abcd|abcd|abcd].\n  let inCoord = outCoord;\n  if (inCoord < 0) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz = len - 1;\n      inCoord += len * (Math.trunc(-inCoord / sz) + 1);\n    }\n  } else if (inCoord > len - 1) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz = len - 1;\n      inCoord -= len * Math.trunc(inCoord / sz);\n    }\n  }\n  // clamp is necessary because when outCoord = -0.5 and len = 4,\n  // inCoord = 3.5 and will be rounded to 4 in nearest interpolation.\n  return util.clamp(0, inCoord, len - 1);\n}\n\nfunction mapCoordConstant(outCoord: number, len: number): number {\n  return outCoord;\n}\n\nfunction mapCoordNearest(outCoord: number, len: number): number {\n  return util.clamp(0, outCoord, len - 1);\n}\n\nfunction readWithFillValue(\n    imageVals: TypedArray, imageHeight: number, imageWidth: number,\n    batchStride: number, rowStride: number, colStride: number, batch: number,\n    y: number, x: number, channel: number, fillValue: number): number {\n  const ind = batch * batchStride + y * rowStride + x * colStride + channel;\n  if (0 <= y && y < imageHeight && 0 <= x && x < imageWidth) {\n    return imageVals[ind];\n  } else {\n    return fillValue;\n  }\n}\n\nfunction nearestInterpolation(\n    imageVals: TypedArray, imageHeight: number, imageWidth: number,\n    batchStride: number, rowStride: number, colStride: number, batch: number,\n    y: number, x: number, channel: number, fillValue: number): number {\n  const $y = Math.round(y);\n  const $x = Math.round(x);\n\n  return readWithFillValue(\n      imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride,\n      batch, $y, $x, channel, fillValue);\n}\n\nfunction bilinearInterpolation(\n    imageVals: TypedArray, imageHeight: number, imageWidth: number,\n    batchStride: number, rowStride: number, colStride: number, batch: number,\n    y: number, x: number, channel: number, fillValue: number) {\n  const yFloor = Math.floor(y);\n  const xFloor = Math.floor(x);\n  const yCeil = yFloor + 1;\n  const xCeil = xFloor + 1;\n  // f(x, yFloor) = (xCeil - x) / (xCeil - xFloor) * f(xFloor, yFloor)\n  //               + (x - xFloor) / (xCeil - xFloor) * f(xCeil, yFloor)\n  const valueYFloor =\n      (xCeil - x) *\n          readWithFillValue(\n              imageVals, imageHeight, imageWidth, batchStride, rowStride,\n              colStride, batch, yFloor, xFloor, channel, fillValue) +\n      (x - xFloor) *\n          readWithFillValue(\n              imageVals, imageHeight, imageWidth, batchStride, rowStride,\n              colStride, batch, yFloor, xCeil, channel, fillValue);\n  // f(x, yCeil) = (xCeil - x) / (xCeil - xFloor) * f(xFloor, yCeil)\n  //             + (x - xFloor) / (xCeil - xFloor) * f(xCeil, yCeil)\n  const valueYCeil =\n      (xCeil - x) *\n          readWithFillValue(\n              imageVals, imageHeight, imageWidth, batchStride, rowStride,\n              colStride, batch, yCeil, xFloor, channel, fillValue) +\n      (x - xFloor) *\n          readWithFillValue(\n              imageVals, imageHeight, imageWidth, batchStride, rowStride,\n              colStride, batch, yCeil, xCeil, channel, fillValue);\n  // f(x, y) = (yCeil - y) / (yCeil - yFloor) * f(x, yFloor)\n  //         + (y - yFloor) / (yCeil - yFloor) * f(x, yCeil)\n  return (yCeil - y) * valueYFloor + (y - yFloor) * valueYCeil;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unique, UniqueAttrs, UniqueInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {uniqueImpl} from './Unique_impl';\n\nexport function unique(\n    args: {inputs: UniqueInputs, attrs: UniqueAttrs, backend: MathBackendCPU}):\n    TensorInfo[] {\n  const {inputs, attrs, backend} = args;\n  const {axis} = attrs;\n  const {x} = inputs;\n  assertNotComplex(x, 'unique');\n\n  const values = backend.data.get(x.dataId).values;\n  const {outputValues, outputShape, indices} =\n      uniqueImpl(values, axis, x.shape, x.dtype);\n  return [\n    backend.makeTensorInfo(outputShape, x.dtype, outputValues),\n    backend.makeTensorInfo([indices.length], 'int32', indices),\n  ];\n}\n\nexport const uniqueConfig: KernelConfig = {\n  kernelName: Unique,\n  backendName: 'cpu',\n  kernelFunc: unique as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unpack, UnpackAttrs, UnpackInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\n\nexport function unpack(\n    args: {inputs: UnpackInputs, backend: MathBackendCPU, attrs: UnpackAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {value} = inputs;\n  let {axis} = attrs;\n\n  if (axis < 0) {\n    axis += value.shape.length;\n  }\n\n  const valueRank = value.shape.length;\n\n  const num = value.shape[axis];\n  const outShape: number[] = new Array(valueRank - 1);\n  let outIndex = 0;\n  for (let i = 0; i < valueRank; i++) {\n    if (i !== axis) {\n      outShape[outIndex++] = value.shape[i];\n    }\n  }\n\n  const begin = new Array(valueRank).fill(0);\n  const size = value.shape.slice();\n  size[axis] = 1;\n  const res = new Array(num);\n  for (let i = 0; i < res.length; i++) {\n    begin[axis] = i;\n    const tempRes = slice({inputs: {x: value}, backend, attrs: {begin, size}});\n    res[i] = reshape({inputs: {x: tempRes}, backend, attrs: {shape: outShape}});\n    backend.disposeIntermediateTensorInfo(tempRes);\n  }\n\n  return res;\n}\n\nexport const unpackConfig: KernelConfig = {\n  kernelName: Unpack,\n  backendName: 'cpu',\n  kernelFunc: unpack as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, UnsortedSegmentSum, UnsortedSegmentSumAttrs, UnsortedSegmentSumInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {cast} from './Cast';\nimport {equal} from './Equal';\nimport {expandDims} from './ExpandDims';\nimport {multiply} from './Multiply';\nimport {pack} from './Pack';\nimport {sum} from './Sum';\n\nexport function unsortedSegmentSum(args: {\n  inputs: UnsortedSegmentSumInputs,\n  backend: MathBackendCPU,\n  attrs: UnsortedSegmentSumAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, segmentIds} = inputs;\n  const {numSegments} = attrs;\n\n  assertNotComplex(x, 'unsortedSegmentSum');\n\n  const xRank = x.shape.length;\n  const segmentIdsRank = segmentIds.shape.length;\n  const res = [];\n  const intermediates: TensorInfo[] = [];\n\n  // Reshape the segment id's so that they can be broadcast with\n  // x. The new shape should be [segmentIds.shape, 1, ..., 1]\n  const numIters = xRank - segmentIdsRank;\n  let $segmentIds = segmentIds;\n\n  for (let i = 0; i < numIters; ++i) {\n    const expanded = expandDims(\n        {inputs: {input: $segmentIds}, backend, attrs: {dim: i + 1}});\n    $segmentIds = expanded;\n    intermediates.push(expanded);\n  }\n\n  for (let i = 0; i < numSegments; ++i) {\n    const scalarValue = util.createScalarValue(i as {} as 'int32', 'int32');\n    const segmentId = backend.makeTensorInfo([], 'int32', scalarValue);\n    const mask =\n        equal({inputs: {a: segmentId, b: $segmentIds}, backend}) as TensorInfo;\n    const maskCasted =\n        cast({inputs: {x: mask}, backend, attrs: {dtype: 'float32'}});\n    const mul =\n        multiply({inputs: {a: maskCasted, b: x}, backend}) as TensorInfo;\n    const sumTensorInfo =\n        sum({inputs: {x: mul}, backend, attrs: {axis: 0, keepDims: false}});\n    res.push(sumTensorInfo);\n    intermediates.push(segmentId);\n    intermediates.push(mask);\n    intermediates.push(maskCasted);\n    intermediates.push(mul);\n    intermediates.push(sumTensorInfo);\n  }\n\n  const result = pack({inputs: res, backend, attrs: {axis: 0}});\n\n  intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const unsortedSegmentSumConfig: KernelConfig = {\n  kernelName: UnsortedSegmentSum,\n  backendName: 'cpu',\n  kernelFunc: unsortedSegmentSum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// We explicitly import the modular kernels so they get registered in the\n// global registry when we compile the library. A modular build would replace\n// the contents of this file and import only the kernels that are needed.\nimport {KernelConfig, registerKernel} from '@tensorflow/tfjs-core';\n\nimport {_fusedMatMulConfig} from './kernels/_FusedMatMul';\nimport {absConfig} from './kernels/Abs';\nimport {acosConfig} from './kernels/Acos';\nimport {acoshConfig} from './kernels/Acosh';\nimport {addConfig} from './kernels/Add';\nimport {addNConfig} from './kernels/AddN';\nimport {allConfig} from './kernels/All';\nimport {anyConfig} from './kernels/Any';\nimport {argMaxConfig} from './kernels/ArgMax';\nimport {argMinConfig} from './kernels/ArgMin';\nimport {asinConfig} from './kernels/Asin';\nimport {asinhConfig} from './kernels/Asinh';\nimport {atanConfig} from './kernels/Atan';\nimport {atan2Config} from './kernels/Atan2';\nimport {atanhConfig} from './kernels/Atanh';\nimport {avgPoolConfig} from './kernels/AvgPool';\nimport {avgPool3DConfig} from './kernels/AvgPool3D';\nimport {avgPool3DGradConfig} from './kernels/AvgPool3DGrad';\nimport {avgPoolGradConfig} from './kernels/AvgPoolGrad';\nimport {batchMatMulConfig} from './kernels/BatchMatMul';\nimport {batchNormConfig} from './kernels/BatchNorm';\nimport {batchToSpaceNDConfig} from './kernels/BatchToSpaceND';\nimport {bincountConfig} from './kernels/Bincount';\nimport {castConfig} from './kernels/Cast';\nimport {ceilConfig} from './kernels/Ceil';\nimport {clipConfig} from './kernels/Clip';\nimport {complexConfig} from './kernels/Complex';\nimport {complexAbsConfig} from './kernels/ComplexAbs';\nimport {concatConfig} from './kernels/Concat';\nimport {conv2DConfig} from './kernels/Conv2D';\nimport {conv2DBackpropFilterConfig} from './kernels/Conv2DBackpropFilter';\nimport {conv2DBackpropInputConfig} from './kernels/Conv2DBackpropInput';\nimport {conv3DConfig} from './kernels/Conv3D';\nimport {conv3DBackpropFilterV2Config} from './kernels/Conv3DBackpropFilterV2';\nimport {conv3DBackpropInputV2Config} from './kernels/Conv3DBackpropInputV2';\nimport {cosConfig} from './kernels/Cos';\nimport {coshConfig} from './kernels/Cosh';\nimport {cropAndResizeConfig} from './kernels/CropAndResize';\nimport {cumsumConfig} from './kernels/Cumsum';\nimport {denseBincountConfig} from './kernels/DenseBincount';\nimport {depthToSpaceConfig} from './kernels/DepthToSpace';\nimport {depthwiseConv2dNativeConfig} from './kernels/DepthwiseConv2dNative';\nimport {depthwiseConv2dNativeBackpropFilterConfig} from './kernels/DepthwiseConv2dNativeBackpropFilter';\nimport {depthwiseConv2dNativeBackpropInputConfig} from './kernels/DepthwiseConv2dNativeBackpropInput';\nimport {diagConfig} from './kernels/Diag';\nimport {dilation2dConfig} from './kernels/Dilation2D';\nimport {dilation2dBackpropFilterConfig} from './kernels/Dilation2DBackpropFilter';\nimport {dilation2dBackpropInputConfig} from './kernels/Dilation2DBackpropInput';\nimport {einsumConfig} from './kernels/Einsum';\nimport {eluConfig} from './kernels/Elu';\nimport {eluGradConfig} from './kernels/EluGrad';\nimport {equalConfig} from './kernels/Equal';\nimport {erfConfig} from './kernels/Erf';\nimport {expConfig} from './kernels/Exp';\nimport {expandDimsConfig} from './kernels/ExpandDims';\nimport {expm1Config} from './kernels/Expm1';\nimport {fftConfig} from './kernels/FFT';\nimport {fillConfig} from './kernels/Fill';\nimport {flipLeftRightConfig} from './kernels/FlipLeftRight';\nimport {floorConfig} from './kernels/Floor';\nimport {floorDivConfig} from './kernels/FloorDiv';\nimport {fusedConv2DConfig} from './kernels/FusedConv2D';\nimport {fusedDepthwiseConv2DConfig} from './kernels/FusedDepthwiseConv2D';\nimport {gatherNdConfig} from './kernels/GatherNd';\nimport {gatherV2Config} from './kernels/GatherV2';\nimport {greaterConfig} from './kernels/Greater';\nimport {greaterEqualConfig} from './kernels/GreaterEqual';\nimport {identityConfig} from './kernels/Identity';\nimport {ifftConfig} from './kernels/IFFT';\nimport {imagConfig} from './kernels/Imag';\nimport {isFiniteConfig} from './kernels/IsFinite';\nimport {isInfConfig} from './kernels/IsInf';\nimport {isNaNConfig} from './kernels/IsNaN';\nimport {leakyReluConfig} from './kernels/LeakyRelu';\nimport {lessConfig} from './kernels/Less';\nimport {lessEqualConfig} from './kernels/LessEqual';\nimport {linSpaceConfig} from './kernels/LinSpace';\nimport {logConfig} from './kernels/Log';\nimport {log1pConfig} from './kernels/Log1p';\nimport {logicalAndConfig} from './kernels/LogicalAnd';\nimport {logicalNotConfig} from './kernels/LogicalNot';\nimport {logicalOrConfig} from './kernels/LogicalOr';\nimport {lRNConfig} from './kernels/LRN';\nimport {lRNGradConfig} from './kernels/LRNGrad';\nimport {maxConfig} from './kernels/Max';\nimport {maximumConfig} from './kernels/Maximum';\nimport {maxPoolConfig} from './kernels/MaxPool';\nimport {maxPool3DConfig} from './kernels/MaxPool3D';\nimport {maxPool3DGradConfig} from './kernels/MaxPool3DGrad';\nimport {maxPoolGradConfig} from './kernels/MaxPoolGrad';\nimport {maxPoolWithArgmaxConfig} from './kernels/MaxPoolWithArgmax';\nimport {meanConfig} from './kernels/Mean';\nimport {minConfig} from './kernels/Min';\nimport {minimumConfig} from './kernels/Minimum';\nimport {mirrorPadConfig} from './kernels/MirrorPad';\nimport {modConfig} from './kernels/Mod';\nimport {multinomialConfig} from './kernels/Multinomial';\nimport {multiplyConfig} from './kernels/Multiply';\nimport {negConfig} from './kernels/Neg';\nimport {nonMaxSuppressionV3Config} from './kernels/NonMaxSuppressionV3';\nimport {nonMaxSuppressionV4Config} from './kernels/NonMaxSuppressionV4';\nimport {nonMaxSuppressionV5Config} from './kernels/NonMaxSuppressionV5';\nimport {notEqualConfig} from './kernels/NotEqual';\nimport {oneHotConfig} from './kernels/OneHot';\nimport {onesLikeConfig} from './kernels/OnesLike';\nimport {packConfig} from './kernels/Pack';\nimport {padV2Config} from './kernels/PadV2';\nimport {powConfig} from './kernels/Pow';\nimport {preluConfig} from './kernels/Prelu';\nimport {prodConfig} from './kernels/Prod';\nimport {rangeConfig} from './kernels/Range';\nimport {realConfig} from './kernels/Real';\nimport {realDivConfig} from './kernels/RealDiv';\nimport {reciprocalConfig} from './kernels/Reciprocal';\nimport {reluConfig} from './kernels/Relu';\nimport {relu6Config} from './kernels/Relu6';\nimport {reshapeConfig} from './kernels/Reshape';\nimport {resizeBilinearConfig} from './kernels/ResizeBilinear';\nimport {resizeBilinearGradConfig} from './kernels/ResizeBilinearGrad';\nimport {resizeNearestNeighborConfig} from './kernels/ResizeNearestNeighbor';\nimport {resizeNearestNeighborGradConfig} from './kernels/ResizeNearestNeighborGrad';\nimport {reverseConfig} from './kernels/Reverse';\nimport {rotateWithOffsetConfig} from './kernels/RotateWithOffset';\nimport {roundConfig} from './kernels/Round';\nimport {rsqrtConfig} from './kernels/Rsqrt';\nimport {scatterNdConfig} from './kernels/ScatterNd';\nimport {selectConfig} from './kernels/Select';\nimport {seluConfig} from './kernels/Selu';\nimport {sigmoidConfig} from './kernels/Sigmoid';\nimport {signConfig} from './kernels/Sign';\nimport {sinConfig} from './kernels/Sin';\nimport {sinhConfig} from './kernels/Sinh';\nimport {sliceConfig} from './kernels/Slice';\nimport {softmaxConfig} from './kernels/Softmax';\nimport {softplusConfig} from './kernels/Softplus';\nimport {spaceToBatchNDConfig} from './kernels/SpaceToBatchND';\nimport {sparseToDenseConfig} from './kernels/SparseToDense';\nimport {splitVConfig} from './kernels/SplitV';\nimport {sqrtConfig} from './kernels/Sqrt';\nimport {squareConfig} from './kernels/Square';\nimport {squaredDifferenceConfig} from './kernels/SquaredDifference';\nimport {stepConfig} from './kernels/Step';\nimport {stridedSliceConfig} from './kernels/StridedSlice';\nimport {subConfig} from './kernels/Sub';\nimport {sumConfig} from './kernels/Sum';\nimport {tanConfig} from './kernels/Tan';\nimport {tanhConfig} from './kernels/Tanh';\nimport {tileConfig} from './kernels/Tile';\nimport {topKConfig} from './kernels/TopK';\nimport {transformConfig} from './kernels/Transform';\nimport {transposeConfig} from './kernels/Transpose';\nimport {uniqueConfig} from './kernels/Unique';\nimport {unpackConfig} from './kernels/Unpack';\nimport {unsortedSegmentSumConfig} from './kernels/UnsortedSegmentSum';\nimport {zerosLikeConfig} from './kernels/ZerosLike';\n\n// List all kernel configs here\nconst kernelConfigs: KernelConfig[] = [\n  _fusedMatMulConfig,\n  absConfig,\n  acosConfig,\n  acoshConfig,\n  addConfig,\n  addNConfig,\n  allConfig,\n  anyConfig,\n  argMaxConfig,\n  argMinConfig,\n  asinConfig,\n  asinhConfig,\n  atanConfig,\n  atan2Config,\n  atanhConfig,\n  avgPoolConfig,\n  avgPool3DConfig,\n  avgPool3DGradConfig,\n  avgPoolGradConfig,\n  batchMatMulConfig,\n  batchNormConfig,\n  batchToSpaceNDConfig,\n  bincountConfig,\n  castConfig,\n  ceilConfig,\n  clipConfig,\n  complexConfig,\n  complexAbsConfig,\n  concatConfig,\n  conv2DBackpropFilterConfig,\n  conv2DBackpropInputConfig,\n  conv2DConfig,\n  conv3DBackpropFilterV2Config,\n  conv3DBackpropInputV2Config,\n  conv3DConfig,\n  cosConfig,\n  coshConfig,\n  cropAndResizeConfig,\n  cumsumConfig,\n  denseBincountConfig,\n  depthToSpaceConfig,\n  depthwiseConv2dNativeConfig,\n  depthwiseConv2dNativeBackpropFilterConfig,\n  depthwiseConv2dNativeBackpropInputConfig,\n  diagConfig,\n  dilation2dConfig,\n  dilation2dBackpropInputConfig,\n  dilation2dBackpropFilterConfig,\n  realDivConfig,\n  einsumConfig,\n  eluConfig,\n  eluGradConfig,\n  equalConfig,\n  erfConfig,\n  expConfig,\n  expandDimsConfig,\n  expm1Config,\n  fftConfig,\n  fillConfig,\n  flipLeftRightConfig,\n  floorConfig,\n  floorDivConfig,\n  fusedConv2DConfig,\n  fusedDepthwiseConv2DConfig,\n  gatherNdConfig,\n  gatherV2Config,\n  greaterConfig,\n  greaterEqualConfig,\n  identityConfig,\n  ifftConfig,\n  imagConfig,\n  isFiniteConfig,\n  isInfConfig,\n  isNaNConfig,\n  leakyReluConfig,\n  lessConfig,\n  lessEqualConfig,\n  linSpaceConfig,\n  logConfig,\n  log1pConfig,\n  logicalAndConfig,\n  logicalNotConfig,\n  logicalOrConfig,\n  lRNConfig,\n  lRNGradConfig,\n  maximumConfig,\n  maxPoolConfig,\n  maxPool3DConfig,\n  maxPool3DGradConfig,\n  maxPoolGradConfig,\n  maxPoolWithArgmaxConfig,\n  maxConfig,\n  meanConfig,\n  minConfig,\n  minimumConfig,\n  mirrorPadConfig,\n  modConfig,\n  multinomialConfig,\n  multiplyConfig,\n  negConfig,\n  nonMaxSuppressionV3Config,\n  nonMaxSuppressionV4Config,\n  nonMaxSuppressionV5Config,\n  notEqualConfig,\n  oneHotConfig,\n  onesLikeConfig,\n  packConfig,\n  padV2Config,\n  powConfig,\n  preluConfig,\n  prodConfig,\n  rangeConfig,\n  realConfig,\n  reciprocalConfig,\n  reluConfig,\n  relu6Config,\n  reshapeConfig,\n  resizeBilinearConfig,\n  resizeBilinearGradConfig,\n  resizeNearestNeighborConfig,\n  resizeNearestNeighborGradConfig,\n  reverseConfig,\n  rotateWithOffsetConfig,\n  roundConfig,\n  rsqrtConfig,\n  scatterNdConfig,\n  selectConfig,\n  seluConfig,\n  sigmoidConfig,\n  signConfig,\n  sinConfig,\n  sinhConfig,\n  sliceConfig,\n  softmaxConfig,\n  softplusConfig,\n  spaceToBatchNDConfig,\n  sparseToDenseConfig,\n  splitVConfig,\n  sqrtConfig,\n  squareConfig,\n  squaredDifferenceConfig,\n  stepConfig,\n  stridedSliceConfig,\n  subConfig,\n  sumConfig,\n  tanConfig,\n  tanhConfig,\n  tileConfig,\n  topKConfig,\n  transposeConfig,\n  transformConfig,\n  uniqueConfig,\n  unpackConfig,\n  unsortedSegmentSumConfig,\n  zerosLikeConfig\n];\n\nfor (const kernelConfig of kernelConfigs) {\n  registerKernel(kernelConfig);\n}\n","/** @license See the LICENSE file. */\n\n// This code is auto-generated, do not modify this file!\nconst version = '3.4.0';\nexport {version};\n"],"names":["assertNotComplex","tensor","opName","Array","isArray","forEach","t","util","assert","dtype","whereImpl","kernel_impls","MathBackendCPU","KernelBackend","[object Object]","super","this","data","DataStorage","engine","nextDataId","values","shape","firstUse","env","get","backend_util","warn","dataId","id","set","refCount","outId","length","isString","encodedValues","map","d","encodeString","write","has","numDataIds","readSync","complexTensorInfos","realValues","real","imagValues","imag","mergeRealAndImagArrays","decodedData","decodeString","Error","buffer","makeTensorFromDataId","force","disposeData","delete","tensorInfo","f","start","now","kernelMs","unreliable","reasons","condition","condVals","epsilon","simpleAbsImpl","vals","resultValues","Float32Array","i","Math","abs","absConfig","kernelName","Abs","backendName","kernelFunc","args","x","inputs","cpuBackend","backend","sizeFromShape","makeOutput","createSimpleBinaryKernelImpl","op","aShape","bShape","aVals","bVals","newShape","assertAndGetBroadcastShape","resultRank","resultStrides","computeStrides","resultSize","result","getTypedArrayFromDType","aRank","bRank","aStrides","bStrides","aBroadcastDims","getBroadcastDims","bBroadcastDims","loc","indexToLoc","aLoc","slice","aIndex","locToIndex","bLoc","bIndex","complex","realVals","imagVals","complexInfo","makeTensorInfo","complexConfig","Complex","zeros","makeZerosTypedArray","identity","incRef","identityConfig","Identity","input","realVal","realConfig","Real","cast","attrs","zerosTensorInfo","floatX","disposeIntermediateTensorInfo","realPart","hasEncodingLoss","Int32Array","from","xVals","zero","toTypedArray","resultData","resultShape","a","b","castConfig","Cast","binaryKernelFunc","name","simpleImpl","complexImpl","$dtype","$aComplex","$aComplexVals","aReal","aImag","aRealVals","aImagVals","$bComplex","$bComplexVals","bReal","bImag","bRealVals","bImagVals","resultRealData","resultImagData","resultReal","resultImag","createComplexBinaryKernelImpl","resultRealVals","resultImagVals","aIdx","bIdx","opResult","addImpl","addComplexImpl","add","Add","addConfig","bincountImpl","weightsVals","weightsDtype","weightsShape","size","weightsSize","outVals","value","bincountReduceImpl","xBuf","weightsBuf","binaryOutput","numRows","numCols","outBuf","j","createSimpleUnaryImpl","newValues","unaryKernelFunc","xSize","getArrayFromDType","unaryKernelFuncFromImpl","unaryImpl","ceilImpl","xi","ceil","Ceil","ceilConfig","concatImpl","outShape","simplyConcat","offset","colOffset","fromUint8ToStringArray","tIdx","row","resIdx","col","expImpl","exp","Exp","expConfig","expm1Impl","expm1","Expm1","expm1Config","floorImpl","floor","Floor","floorConfig","gatherV2Impl","indicesBuf","flattenOutputShape","originalLoc","batchIdx","indicesIdx","indicesIndex","originalIndex","greaterImpl","greater","Greater","greaterConfig","lessImpl","less","Less","lessConfig","linSpaceImpl","stop","num","step","logImpl","log","Log","logConfig","maxImpl","reduceSize","max","maximumImpl","aValue","bValue","maximum","Maximum","maximumConfig","minimumImpl","min","minimum","Minimum","minimumConfig","multiplyImpl","multiplyComplexImpl","multiply","Multiply","multiplyConfig","negImpl","xShape","xDtype","minusOne","createScalarValue","negConfig","Neg","res","notEqualImpl","notEqual","NotEqual","notEqualConfig","transposeImpl","perm","xRank","xStrides","newStrides","newLoc","transpose","transposeConfig","Transpose","prodImpl","reductionAxes","reduceShape","computeOutAndReduceShapes","outDtype","upcastType","prod","prodConfig","Prod","axis","keepDims","axes","parseAxisParam","permutation","getAxesPermutation","permutedX","intermediateTensorInfos","push","getInnerMostAxes","expandShapeToKeepDim","rangeImpl","numElements","rsqrtImpl","sqrt","rsqrt","Rsqrt","rsqrtConfig","sliceImpl","begin","isContinous","slice_util","isSliceContinous","flatOffset","computeFlatOffset","subarray","inBuf","outLoc","inLoc","idx","fromStringArrayToUint8","$begin","$size","parseSliceParams","assertParamsValid","sliceConfig","Slice","squaredDifferenceImpl","diff","squaredDifference","SquaredDifference","squaredDifferenceConfig","stridedSliceImpl","strides","subImpl","subComplexImpl","sub","Sub","subConfig","tileImpl","reps","rank","topKImpl","k","sorted","lastDim","batch","allTopKVals","allTopKIndices","valAndInd","index","sort","outOffset","topKVals","topKIndices","outputShape","uniqueImpl","$axis","uniqueElements","indices","inputBuffer","TensorBuffer","uniqueIndices","is1DTensor","element","toString","axisValues","m","n","join","undefined","uniqueIndex","Object","keys","outputTmpShape","outputBuffer","uniqueElementIndex","outputValues","elu","Elu","eluConfig","leakyRelu","alpha","leakyReluConfig","LeakyRelu","preluImpl","xValue","prelu","preluConfig","Prelu","relu","Relu","reluConfig","relu6","Relu6","relu6Config","applyActivation","activation","preluActivationWeights","leakyreluAlpha","reshape","$shape","inferFromImplicitShape","$xSize","xData","reshapeConfig","Reshape","batchMatMul","transposeA","transposeB","innerShapeA","innerShapeB","outerShapeA","outerShapeB","outerDimsA","outerDimsB","batchDimA","batchDimB","batchDimsCompatible","concat","b3dShape","a3d","b3d","sharedDim","leftDim","rightDim","batchDim","a3dValues","b3dValues","a3dStrides","b3dStrides","aBatch","aOuterStep","aInnerStep","bInnerStep","bOuterStep","bBatch","resVals","blockSize","bi","i0","j0","k0","iBlock","jBlock","kBlock","sum","batchOffsetA","batchOffsetB","batchMatMulConfig","BatchMatMul","_fusedMatMulConfig","_FusedMatMul","bias","current","addRes","activationRes","intermediates","acos","Acos","acosConfig","acosh","Acosh","acoshConfig","addNConfig","AddN","tensors","currVals","allConfig","All","origAxes","permutedAxes","$x","assertAxesAreInnerMostDims","all","reshapedResult","anyConfig","Any","anyVal","argMaxConfig","ArgMax","outSize","maxIndex","argMinConfig","ArgMin","minIndex","asin","Asin","asinConfig","asinh","Asinh","asinhConfig","atan","Atan","atanConfig","atan2Impl","atan2","Atan2","atan2Config","atanh","Atanh","atanhConfig","pool","xValues","convInfo","poolType","strideHeight","strideWidth","dilationHeight","dilationWidth","effectiveFilterHeight","effectiveFilterWidth","padTop","padInfo","top","padLeft","left","initialValue","Number","NEGATIVE_INFINITY","POSITIVE_INFINITY","output","outputVals","outputBatchStrides","outputRowStrides","outputColStrides","batchSize","outputBatchOffset","inputBatchOffset","inChannels","yR","outHeight","xRCorner","xRMin","xRMax","inHeight","outputRowOffset","yC","outWidth","xCCorner","xCMin","xCMax","inWidth","minMaxValue","avgValue","count","xR","xROffset","xC","pixel","isNaN","maxPoolPositions","flattenPositions","includeBatchInIndex","maxPositions","maxValue","maxPosition","wR","wC","pool3d","strideDepth","dilationDepth","effectiveFilterDepth","padFront","front","outputDepthStrides","channel","yDepth","outDepth","xDepthCorner","xDepthMin","xDepthMax","inDepth","outputDepthOffset","yRow","xRowCorner","xRowMin","xRowMax","yCol","xColCorner","xColMin","xColMax","outputColOffset","xDepth","xDepthOffset","xRow","xRowOffset","xCol","avgPoolConfig","AvgPool","filterSize","pad","dimRoundingMode","eitherStridesOrDilationsAreOne","computePool2DInfo","filterWidth","filterHeight","arraysEqual","inShape","avgPool3DConfig","AvgPool3D","dataFormat","computePool3DInfo","avgPool3DGradConfig","AvgPool3DGrad","dy","filterDepth","dx","avgMultiplier","dyBuf","bufferSync","dxDepth","dxRow","dxCol","dyDepthCorner","dyRowCorner","dyColCorner","dotProd","wDepth","dyDepth","wRow","dyRow","wCol","dyCol","avgPoolGradConfig","AvgPoolGrad","dyData","dxR","dxC","dyRCorner","dyCCorner","dyR","dyC","batchNormConfig","FusedBatchNorm","scale","mean","variance","varianceEpsilon","mVals","varVals","sVals","offVals","offValsLength","sValsLength","varValsLength","mValsLength","offi","mi","si","vi","batchToSpaceNDConfig","BatchToSpaceND","blockShape","crops","reduce","reshaped","getReshaped","permuted","getPermuted","reshapedPermuted","getReshapedPermuted","sliceBeginCoords","getSliceBeginCoords","sliceSize","getSliceSize","xReshaped","xTransposed","xTransposedReshaped","bincountConfig","Bincount","weights","clip","ClipByValue","clipAttrs","clipValueMax","clipValueMin","clipConfig","complexAbsConfig","ComplexAbs","complexVals","hypot","imagVal","imagConfig","Imag","computeOutShape","$inputs","filter","shapes","assertParamsConsistent","reals","imags","realConcated","imagConcated","r","inputs2D","innerSize","inputsValShapes","finalOutShape","outInfo","concatConfig","Concat","conv2D","dilations","$dataFormat","convertConv2DDataFormat","computeConv2DInfo","isChannelsLast","y","filterStrides","xBatchStride","xRowStride","xColStride","xChannelStride","yBatchStride","yRowStride","yColStride","yChannelStride","wVals","yVals","xOffset1","yOffset1","yOffset2","wOffset1","xOffset2","yOffset3","xOffset3","wOffset3","d1","xVal","d2","outChannels","conv2DConfig","Conv2D","conv2DBackpropFilterConfig","Conv2DBackpropFilter","filterShape","dW","leftPad","topPad","dyVals","yRMin","yRMax","yCMin","yCMax","conv2DBackpropInputConfig","Conv2DBackpropInput","inputShape","dyStrides","dxValues","dyValues","fltValues","fltS0","fltS1","fltS2","dyOffset","fltOffset","conv3DConfig","Conv3D","computeConv3DInfo","yF","xFCorner","wF","xF","wOffset2","yOffset4","xOffset4","wOffset4","conv3DBackpropFilterV2Config","Conv3DBackpropFilterV2","dw","dwValues","dwS0","dwS1","dwS2","dwS3","dyS0","dyS1","dyS2","dyS3","xS0","xS1","xS2","xS3","frontPad","yFMin","yFMax","conv3DBackpropInputV2Config","Conv3DBackpropInputV2","dxS0","dxS1","dxS2","dxS3","fltS3","xFMin","cos","Cos","cosConfig","cosh","Cosh","coshConfig","cropAndResizeConfig","CropAndResize","image","boxes","boxInd","cropSize","method","extrapolationValue","imageHeight","imageWidth","numChannels","numBoxes","cropHeight","cropWidth","boxVals","boxIndVals","imageVals","inStride","outStride","startInd","y1","x1","y2","x2","bInd","heightScale","widthScale","yInd","c","ind","topInd","bottomInd","yLerp","xInd","leftInd","rightInd","xLerp","topLeft","topRight","bottomLeft","bottom","closestX","round","closestY","inInd","outInd","cumsumConfig","Cumsum","exclusive","reverse","permutedAxis","resultDtype","finalDim","indexAdjuster","prevIdx","reverseTransposedResult","getUndoAxesPermutation","denseBincountConfig","DenseBincount","depthToSpaceConfig","DepthToSpace","inputHeight","inputWidth","inputDepth","outputHeight","outputWidth","outputDepth","outputIdx","h","inH","offsetH","w","inW","offsetD","inputIdx","depthwiseConv2dNative","$dilations","chMul","q","depthwiseConv2dNativeConfig","DepthwiseConv2dNative","depthwiseConv2dNativeBackpropFilterConfig","DepthwiseConv2dNativeBackpropFilter","trunc","dm","depthwiseConv2dNativeBackpropInputConfig","DepthwiseConv2dNativeBackpropInput","diagConfig","Diag","dilation2dConfig","Dilation2D","filterVals","filterRank","computeDilation2DInfo","outRank","hOut","hBeg","wOut","wBeg","curVal","MIN_SAFE_INTEGER","hIn","wIn","xIndex","filterIndex","val","dilation2dBackpropFilterConfig","Dilation2DBackpropFilter","toNestedArray","$filter","$dy","gradients","makeZerosNestedTypedArray","hMax","wMax","dilation2dBackpropInputConfig","Dilation2DBackpropInput","hInMax","wInMax","oldResult","sumConfig","Sum","einsumConfig","Einsum","equation","allDims","summedDims","idDims","decodeEinsumEquation","checkEinsumDimSizes","path","steps","getEinsumComputePath","nSteps","out","numDimsRemaining","tensorsToDispose","idTerm","permutationIndices","expandDims","dimsToExpand","getEinsumPermutation","isIdentityPermutation","targetShape","splice","eluGradConfig","EluGrad","v","equalImpl","equal","Equal","equalConfig","p","ERF_P","a1","ERF_A1","a2","ERF_A2","a3","ERF_A3","a4","ERF_A4","a5","ERF_A5","erf","Erf","sign","erfConfig","dim","inputRank","$dim","expandDimsConfig","ExpandDims","realDivImpl","div","RealDiv","realDivConfig","fftBatch","inverse","innerDim","inputVals","real2D","imag2D","fftImpl","getComplexWithIndex","$realInfo","$imagInfo","inputSize","fftRadix2","half","evenComplex","complexWithEvenIndex","evenRealVals","evenImagVals","evenShape","evenRealInfo","evenImagInfo","evenTensorInfo","oddComplex","complexWithOddIndex","oddRealVals","oddImagVals","oddShape","oddRealInfo","oddImagInfo","oddTensorInfo","$evenComplex","$evenRealVals","$evenImagVals","$evenShape","$evenRealInfo","$evenImagInfo","$evenTensorInfo","$oddComplex","$oddRealVals","$oddImagVals","$oddShape","$oddRealInfo","$oddImagInfo","$oddTensorInfo","e","exponents","eShape","eRealInfo","eImagInfo","exponentInfo","addPart","subPart","addPartReal","subPartReal","addPartImag","subPartImag","$real","$imag","$realVals","$imagVals","realInfo","imagInfo","sizeInfo","sizeInfoCopy","divRealInfo","divImagInfo","divRealVals","divImagVals","rawOutput","ret","exponent","term","assignToTypedArray","fourierTransformByMatmul","splitRealAndImagArrays","fftConfig","FFT","innerDimensionSize","input2D","resultReshaped","fill","inferDtype","fillValues","fillConfig","Fill","flipLeftRightConfig","FlipLeftRight","batchOffset","rowOffset","coordX","outIdx","outputValue","floorDivImpl","floorDiv","FloorDiv","floorDivConfig","fusedConv2DConfig","FusedConv2D","resultOld","fusedDepthwiseConv2DConfig","FusedDepthwiseConv2D","gatherNdConfig","GatherNd","params","paramsSize","indicesShape","sliceRank","numSlices","prepareAndValidate","indicesData","paramsData","flattenIndex","gatherV2Config","GatherV2","batchDims","$batchDims","indicesSize","parsedAxis","shapeInfo","segment_util","collectGatherOpShapeInfo","flattenX","outerSize","dimSize","greaterEqualImpl","greaterEqual","GreaterEqual","greaterEqualConfig","ifftConfig","IFFT","isFinite","IsFinite","isFiniteConfig","isInf","IsInf","Infinity","isInfConfig","IsNan","isNaNConfig","lessEqualImpl","lessEqual","LessEqual","lessEqualConfig","linSpaceConfig","LinSpace","log1p","Log1p","log1pConfig","logicalAndImpl","logicalAnd","LogicalAnd","logicalAndConfig","logicalNot","LogicalNot","logicalNotConfig","logicalOrImpl","logicalOr","LogicalOr","logicalOrConfig","lRNConfig","LRN","depthRadius","beta","channels","maxD","sumAcrossChannels","currentChannel","beginSumOffset","endSumOffset","z","pow","lRNGradConfig","LRNGrad","dySize","yValues","depthBegin","depthEnd","norm","dyi","reductionIndices","maxOutShape","maxConfig","Max","maxPoolConfig","MaxPool","maxPool3DConfig","MaxPool3D","maxPool3DGradConfig","MaxPool3DGrad","maxPosBuf","maxPool3dPositions","mask","maxPoolGradConfig","MaxPoolGrad","maxPoolWithArgmaxConfig","MaxPoolWithArgmax","pooled","indexes","maxPools","maxPoolWithArgmaxImpl","pooledDataId","indexesDataId","meanConfig","Mean","toDispose","reduceSizeScalar","minConfig","Min","mirrorPadConfig","MirrorPad","paddings","mode","end","coords","inIndex","modImpl","rem","mod","Mod","modConfig","softmax","logits","logitsRank","maxLogit","expandedShape","maxLogitReshaped","sumExp","sumReshaped","softmaxConfig","Softmax","multinomialConfig","Multinomial","numSamples","seed","normalized","probabilities","numEvents","probVals","resShape","cdf","event","random","seedrandom.alea","sampleId","nonMaxSuppressionV3Impl","nonMaxSuppressionV3Config","NonMaxSuppressionV3","scores","maxOutputSize","iouThreshold","scoreThreshold","boxesVals","scoresVals","selectedIndices","nonMaxSuppressionV4Impl","nonMaxSuppressionV4Config","NonMaxSuppressionV4","padToMaxOutputSize","validOutputs","nonMaxSuppressionV5Impl","nonMaxSuppressionV5Config","NonMaxSuppressionV5","softNmsSigma","maxOutputSizeVal","iouThresholdVal","scoreThresholdVal","softNmsSigmaVal","selectedScores","oneHotConfig","OneHot","depth","onValue","offValue","indicesVal","zerosLike","imagPart","zerosLikeConfig","ZerosLike","onesLikeConfig","OnesLike","onesLike","pack","assertShapesMatch","expandedT","packConfig","Pack","padV2Config","PadV2","constantValue","outCoords","powImpl","Pow","powConfig","rangeConfig","Range","reciprocal","Reciprocal","reciprocalConfig","resizeBilinearConfig","ResizeBilinear","images","alignCorners","halfPixelCenters","imagesStrides","newHeight","newWidth","oldHeight","oldWidth","effectiveInputSize","effectiveOutputSize","effectiveRowSizeRatio","effectiveColSizeRatio","sourceFracRow","sourceRowFloor","rowFrac","sourceRowCeil","topRowOffset","botRowOffset","sourceFracCol","sourceColFloor","colFrac","sourceColCeil","topLeftOffest","botLeftOffset","topRightOffset","botRightOffest","newValue","resizeBilinearGradConfig","ResizeBilinearGrad","xHeight","xWidth","yHeight","yWidth","effectiveXSize","effectiveYSize","bOffset","topDxRIndex","bottomDxRIndex","topDxROffset","bottomDxROffset","dxRLerp","inverseDxRLerp","leftDxCIndex","rightDxCIndex","dxCLerp","inverseDxCLerp","topLeftRCOffset","topRightRCOffset","bottomLeftRCOffset","bottomRightRCOffset","inverseDxRLerpTimesInverseDxCLerp","inverseDxRLerpTimesDxCLerp","dxRLerpTimesInverseDxCLerp","dxRLerpTimesDxCLerp","dyVal","resizeNearestNeighborConfig","ResizeNearestNeighbor","outputOffset","sourceNearestRow","sourceNearestCol","newVal","resizeNearestNeighborGradConfig","ResizeNearestNeighborGrad","invHeightScale","invWidthScale","winHeight","winWidth","startRLerp","startDyR","startCLerp","startDyC","accum","dyRIndex","dyROffset","dyCIndex","dyCOffset","reverseConfig","Reverse","dims","$dims","rotateWithOffsetConfig","RotateWithOffset","radians","fillValue","center","centerX","centerY","getImageCenter","sinFactor","sin","cosFactor","coordY","Round","base","roundConfig","scatterImpl","updates","outputSize","numUpdates","defaultValue","sumDupeIndices","flattenShape","updatesData","scatterNdConfig","ScatterNd","calculateShapes","selectConfig","Select","conditionRank","tValues","eValues","scaleAlpha","SELU_SCALEALPHA","SELU_SCALE","selu","Selu","seluConfig","sigmoid","Sigmoid","sigmoidConfig","Sign","signConfig","Sin","sinConfig","sinh","Sinh","sinhConfig","threshold","softplus","Softplus","tooLarge","tooSmall","expX","softplusConfig","spaceToBatchNDConfig","SpaceToBatchND","completePaddings","paddedX","reshapedPaddedShape","permutedReshapedPaddedPermutation","paddedXReshaped","paddedXT","sparseToDenseConfig","SparseToDense","sparseIndices","sparseValues","splitVConfig","SplitV","numOrSizeSplits","splitSizes","prepareSplitSize","s","sliceT","Sqrt","sqrtConfig","squareConfig","Square","Step","stepAttrs","NaN","stepConfig","stridedSliceConfig","StridedSlice","beginMask","endMask","ellipsisMask","newAxisMask","shrinkAxisMask","nonStrided","$strides","sliceInfo","sliced","some","tan","Tan","tanConfig","tanh","Tanh","tanhConfig","tileConfig","Tile","topKConfig","TopK","transformConfig","Transform","transforms","interpolation","fillMode","batchStride","rowStride","colStride","transformVals","transform","outY","outX","projection","inX","inY","mapCoord","nearestInterpolation","bilinearInterpolation","outCoord","len","inCoord","sz2","clamp","mapCoordReflect","sz","mapCoordWrap","mapCoordNearest","mapCoordConstant","readWithFillValue","yFloor","xFloor","yCeil","xCeil","uniqueConfig","Unique","unpackConfig","Unpack","valueRank","outIndex","tempRes","unsortedSegmentSumConfig","UnsortedSegmentSum","segmentIds","numSegments","numIters","$segmentIds","expanded","scalarValue","segmentId","maskCasted","mul","sumTensorInfo","kernelConfigs","kernelConfig","registerKernel"],"mappings":"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C,EAAc/J,KAAK0rC,GACnB3hC,EAAc/J,KAAKs2B,GACnBvsB,EAAc/J,KAAK2rC,GACnB5hC,EAAc/J,KAAK4rC,GACnB7hC,EAAc/J,KAAK6rC,GAGrB,MAAMp5C,EAASupC,GAAK,CAACxqC,OAAQyM,EAAKvM,QAAAA,EAASkD,MAAO,CAAC4K,KAAM,KAIzD,OAFAuK,EAAcnd,QAAQC,GAAK6E,EAAQqD,8BAA8BlI,IAE1D4F,ICmGHq5C,GAAgC,CACpCriC,GACAxY,EACAiZ,GACAG,GACAzS,EACA0S,GACAI,GACAQ,GACAG,GACAI,GACAK,GACAG,GACAG,GACAI,GACAG,GACAuF,GACAW,GACAI,GACAqB,GACA/K,GACAwL,GACAkB,GACAkB,GACAxhB,EACA6D,EACAme,GACA5jB,EACA6jB,GACAsB,GACAkC,GACAW,GACAb,GACAoC,GACAmB,GACA9B,GACAwC,GACAG,GACAC,GACA8C,GACAW,GACAE,GACAoB,GACAE,GACAI,GACAE,GACAE,GACA0B,GACAT,GACAsE,GACAtD,GACA/hB,GACAsjB,GACAM,GACAgB,GACAxvB,EACA4vB,GACAxvB,EACAw0B,GACAQ,GACAE,GACA90B,EACAw1B,GACAC,GACAG,GACAE,GACAW,GACA71B,EACA42B,GACAj+B,EACAk+B,GACAta,GACA0a,GACAI,GACAE,GACA5tB,GACAvJ,EACAu3B,GACAC,GACAh3B,EACAo3B,GACAI,GACAG,GACAI,GACAC,GACAY,GACAn4B,GACA+4B,GACAE,GACAE,GACAK,GACAE,GACAb,GACAqB,GACAI,GACAj6B,GACAm6B,GACAW,GACAW,GACAp7B,GACAM,GACA67B,GACAU,GACAK,GACAt8B,GACA88B,GACAU,GACAM,GACAE,GACAM,GACAj3B,GACApG,GACAs9B,GACAnoC,EACAuoC,GACAl3B,GACAG,GACAU,GACAs2B,GACA6B,GACA4B,GACAM,GACAe,GACAI,GACAc,GACAxiC,GACAijC,GACAG,GACAU,GACAG,GACAE,GACAE,GACAG,GACAtjC,GACAg3B,GACA6M,GACAC,GACAQ,GACAI,GACAQ,GACAC,GACA7kC,GACAklC,GACAC,GACA5kC,GACAukB,GACAmhB,GACAG,GACAC,GACAE,GACA3pC,GACA6pC,GACAiC,GACAE,GACAK,GACAvP,IAGF,IAAK,MAAMoQ,KAAgBD,GACzBE,iBAAeD,gDC9UD"}