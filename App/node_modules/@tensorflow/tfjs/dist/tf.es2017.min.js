/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e=e||self).tf=e.tf||{})}(this,(function(e){"use strict";class t{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}class n{refCount(e){return s("refCount")}incRef(e){return s("incRef")}timerAvailable(){return!0}time(e){return s("time")}read(e){return s("read")}readSync(e){return s("readSync")}numDataIds(){return s("numDataIds")}disposeData(e,t){return s("disposeData")}write(e,t,n){return s("write")}move(e,t,n,r,a){return s("move")}memory(){return s("memory")}floatPrecision(){return s("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return s("dispose")}}function s(e){throw new Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}function r(e){let t=e.length,n=0,s=0;for(;t>0;)s=Math.random()*t|0,t--,n=e[t],e[t]=e[s],e[s]=n}function a(e,t,n){return Math.max(e,Math.min(t,n))}function i(e){return e%2==0?e:e+1}function o(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}function l(e,t){if(!e)throw new Error("string"==typeof t?t:t())}function u(e,t,n=""){l(d(e,t),(()=>n+` Shapes ${e} and ${t} must match`))}function c(e){l(null!=e,(()=>"The input to the tensor constructor must be a non-null value."))}function h(e,t=[],n=!1){if(null==t&&(t=[]),Array.isArray(e)||$(e)&&!n)for(let s=0;s<e.length;++s)h(e[s],t,n);else t.push(e);return t}function p(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function d(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function f(e){return e%1==0}function m(e){const t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function g(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function y(e,t=(e=>0),n){return new Promise(((s,r)=>{let a=0;const i=()=>{if(e())return void s();a++;const o=t(a);null!=n&&a>=n?r():setTimeout(i,o)};i()}))}function b(e,t){let n=1,s=-1;for(let t=0;t<e.length;++t)if(e[t]>=0)n*=e[t];else if(-1===e[t]){if(-1!==s)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${s} and dim ${t}`);s=t}else if(e[t]<0)throw Error(`Shapes can not be < 0. Found ${e[t]} at dim ${t}`);if(-1===s){if(t>0&&t!==n)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===n)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`);const r=e.slice();return r[s]=t/n,r}function x(e,t){const n=t.length;return l((e=null==e?t.map(((e,t)=>t)):[].concat(e)).every((e=>e>=-n&&e<n)),(()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${e}`)),l(e.every((e=>f(e))),(()=>`All values in axis param must be integers but got axis ${e}`)),e.map((e=>e<0?n+e:e))}function w(e,t){const n=[],s=[],r=null!=t&&Array.isArray(t)&&0===t.length,a=null==t||r?null:x(t,e).sort();let i=0;for(let t=0;t<e.length;++t){if(null!=a){if(a[i]===t&&1!==e[t])throw new Error(`Can't squeeze axis ${t} since its dim '${e[t]}' is not 1`);(null==a[i]||a[i]>t)&&1===e[t]&&(n.push(e[t]),s.push(t)),a[i]<=t&&i++}1!==e[t]&&(n.push(e[t]),s.push(t))}return{newShape:n,keptDims:s}}function k(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else{if("bool"!==e)throw new Error(`Unknown data type ${e}`);n=new Uint8Array(t)}return n}function v(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error(`Unknown data type ${e}`);n=new Array(t)}return n}function N(e,t){for(let n=0;n<e.length;n++){const s=e[n];if(isNaN(s)||!isFinite(s))throw Error(`A tensor of type ${t} being uploaded contains ${s}.`)}}function I(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}function C(e,t){return"complex64"!==t&&(("float32"!==t||"complex64"===e)&&(("int32"!==t||"float32"===e||"complex64"===e)&&("bool"!==t||"bool"!==e)))}function $(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array}function S(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error(`Unknown dtype ${e}`)}function T(e){if(null==e)return 0;let t=0;return e.forEach((e=>t+=e.length)),t}function E(e){return"string"==typeof e||e instanceof String}function A(e){return"boolean"==typeof e}function R(e){return"number"==typeof e}function F(e){return Array.isArray(e)?F(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array?"int32":R(e)?"float32":E(e)?"string":A(e)?"bool":"float32"}function D(e){return!!(e&&e.constructor&&e.call&&e.apply)}function _(e,t){for(let n=t;n<e;++n)if(e%n==0)return n;return e}function O(e){const t=e.length;if(t<2)return[];const n=new Array(t-1);n[t-2]=e[t-1];for(let s=t-3;s>=0;--s)n[s]=n[s+1]*e[s+1];return n}function M(e,t,n,s=!1){const r=new Array;if(1===t.length){const a=t[0]*(s?2:1);for(let t=0;t<a;t++)r[t]=n[e+t]}else{const a=t[0],i=t.slice(1),o=i.reduce(((e,t)=>e*t))*(s?2:1);for(let t=0;t<a;t++)r[t]=M(e+t*o,i,n,s)}return r}function L(e,t,n=!1){if(0===e.length)return t[0];const s=e.reduce(((e,t)=>e*t))*(n?2:1);if(0===s)return[];if(s!==t.length)throw new Error(`[${e}] does not match the input size ${t.length}${n?" for a complex tensor":""}.`);return M(0,e,t,n)}function z(e,t){const n=B(e,t);for(let e=0;e<n.length;e++)n[e]=1;return n}function B(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error(`Unknown data type ${t}`)}function P(e,t){const n=e.reduce(((e,t)=>e*t),1);if(null==t||"float32"===t)return L(e,new Float32Array(n));if("int32"===t)return L(e,new Int32Array(n));if("bool"===t)return L(e,new Uint8Array(n));throw new Error(`Unknown data type ${t}`)}function W(e){e.forEach((t=>{l(Number.isInteger(t)&&t>=0,(()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`))}))}function V(e,t,n){if(0===t)return 0;if(1===t)return e[0];let s=e[e.length-1];for(let t=0;t<e.length-1;++t)s+=n[t]*e[t];return s}function U(e,t,n){if(0===t)return[];if(1===t)return[e];const s=new Array(t);for(let t=0;t<s.length-1;++t)s[t]=Math.floor(e/n[t]),e-=s[t]*n[t];return s[s.length-1]=e,s}function G(e){return e&&e.then&&"function"==typeof e.then}const H="tfjsflags";class j{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=q,this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${t}.`),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){const t=this.urlFlags[e];console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if(G(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const e=this.getQueryParams(this.global.location.search);if(H in e){e.tfjsflags.split(",").forEach((e=>{const[t,n]=e.split(":");this.urlFlags[t]=function(e,t){if("true"===(t=t.toLowerCase())||"false"===t)return"true"===t;if(""+ +t===t)return+t;throw new Error(`Could not parse value flag value ${t} for flag ${e}.`)}(t,n)}))}}}function q(e){const t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,((e,...n)=>(function(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}(t,n[0],n[1]),n.join("=")))),t}function K(){return e.ENV}let X;function Y(){if(null==X){let e;if("undefined"!=typeof window)e=window;else if("undefined"!=typeof global)e=global;else if("undefined"!=typeof process)e=process;else{if("undefined"==typeof self)throw new Error("Could not find a global object");e=self}X=e}return X}function J(e,t){const n=function(){const e=Y();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{const s=t();return n.set(e,s),n.get(e)}}e.ENV=null;const Z="Abs",Q="Acos",ee="Acosh",te="Add",ne="AddN",se="All",re="Any",ae="ArgMax",ie="ArgMin",oe="Asin",le="Asinh",ue="Atan",ce="Atanh",he="Atan2",pe="AvgPool",de="AvgPoolGrad",fe="AvgPool3D",me="AvgPool3DGrad",ge="BatchMatMul",ye="BatchToSpaceND",be="Bincount",xe="BroadcastTo",we="Cast",ke="Ceil",ve="ClipByValue",Ne="Complex",Ie="ComplexAbs",Ce="Concat",$e="Conv2D",Se="Conv2DBackpropFilter",Te="Conv2DBackpropInput",Ee="Conv3D",Ae="Conv3DBackpropFilterV2",Re="Conv3DBackpropInputV2",Fe="Cos",De="Cosh",_e="Cumsum",Oe="CropAndResize",Me="DenseBincount",Le="DepthToSpace",ze="DepthwiseConv2dNative",Be="DepthwiseConv2dNativeBackpropFilter",Pe="DepthwiseConv2dNativeBackpropInput",We="Diag",Ve="Dilation2D",Ue="Dilation2DBackpropInput",Ge="Dilation2DBackpropFilter",He="RealDiv",je="Einsum",qe="Elu",Ke="EluGrad",Xe="Erf",Ye="Equal",Je="Exp",Ze="ExpandDims",Qe="Expm1",et="FFT",tt="Fill",nt="FlipLeftRight",st="Floor",rt="FloorDiv",at="FusedBatchNorm",it="GatherV2",ot="GatherNd",lt="Greater",ut="GreaterEqual",ct="Identity",ht="IFFT",pt="Imag",dt="IsFinite",ft="IsInf",mt="IsNan",gt="LeakyRelu",yt="Less",bt="LessEqual",xt="LinSpace",wt="Log",kt="Log1p",vt="LogicalAnd",Nt="LogicalNot",It="LogicalOr",Ct="LogSoftmax",$t="LRN",St="LRNGrad",Tt="Max",Et="Maximum",At="MaxPool",Rt="MaxPoolGrad",Ft="MaxPool3D",Dt="MaxPool3DGrad",_t="MaxPoolWithArgmax",Ot="Mean",Mt="Min",Lt="Minimum",zt="MirrorPad",Bt="Mod",Pt="Multinomial",Wt="Multiply",Vt="Neg",Ut="NotEqual",Gt="NonMaxSuppressionV3",Ht="NonMaxSuppressionV4",jt="NonMaxSuppressionV5",qt="OnesLike",Kt="OneHot",Xt="Pack",Yt="PadV2",Jt="Pow",Zt="Prelu",Qt="Prod",en="Range",tn="Real",nn="Reciprocal",sn="Relu",rn="Reshape",an="ResizeNearestNeighbor",on="ResizeNearestNeighborGrad",ln="ResizeBilinear",un="ResizeBilinearGrad",cn="Relu6",hn="Reverse",pn="Round",dn="Rsqrt",fn="ScatterNd",mn="Select",gn="Selu",yn="Slice",bn="Sin",xn="Sinh",wn="Sign",kn="Sigmoid",vn="Softplus",Nn="Sqrt",In="Sum",Cn="SpaceToBatchND",$n="SplitV",Sn="Softmax",Tn="SquaredDifference",En="Square",An="Sub",Rn="SparseToDense",Fn="StridedSlice",Dn="Tan",_n="Tanh",On="Tile",Mn="TopK",Ln="Transform",zn="Transpose",Bn="Unique",Pn="Unpack",Wn="UnsortedSegmentSum",Vn="ZerosLike",Un="Step",Gn="FromPixels",Hn="RotateWithOffset",jn="_FusedMatMul",qn="FusedConv2D",Kn="FusedDepthwiseConv2D",Xn=J("kernelRegistry",(()=>new Map)),Yn=J("gradRegistry",(()=>new Map));function Jn(e,t){const n=ns(e,t);return Xn.get(n)}function Zn(e){return Yn.get(e)}function Qn(e){const t=Xn.entries(),n=[];for(;;){const{done:s,value:r}=t.next();if(s)break;const[a,i]=r,[o]=a.split("_");o===e&&n.push(i)}return n}function es(e){const{kernelName:t,backendName:n}=e,s=ns(t,n);Xn.has(s)&&console.warn(`The kernel '${t}' for backend '${n}' is already registered`),Xn.set(s,e)}function ts(e){const{kernelName:t}=e;Yn.has(t)&&K().getBool("DEBUG")&&console.warn(`Overriding the gradient for '${t}'`),Yn.set(t,e)}function ns(e,t){return`${t}_${e}`}function ss(e,t){return"string"===t?os(e):rs([e],t)}function rs(e,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=h(e)),K().getBool("DEBUG")&&N(e,t),function(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,t))return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){const t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw new Error(`Unknown data type ${t}`)}function as(){return K().platform.now()}function is(e,t){return K().platform.fetch(e,t)}function os(e,t="utf-8"){return t=t||"utf-8",K().platform.encode(e,t)}function ls(e,t="utf-8"){return t=t||"utf-8",K().platform.decode(e,t)}var us=Object.freeze({__proto__:null,createScalarValue:ss,toTypedArray:rs,now:as,fetch:is,encodeString:os,decodeString:ls,shuffle:r,shuffleCombo:function(e,t){if(e.length!==t.length)throw new Error(`Array sizes must match to be shuffled together First array length was ${e.length}Second array length was ${t.length}`);let n,s,r=e.length,a=0;for(;r>0;)a=Math.random()*r|0,r--,n=e[r],s=t[r],e[r]=e[a],t[r]=t[a],e[a]=n,t[a]=s},clamp:a,nearestLargerEven:i,sum:o,randUniform:function(e,t){const n=Math.random();return t*n+(1-n)*e},distSquared:function(e,t){let n=0;for(let s=0;s<e.length;s++){const r=Number(e[s])-Number(t[s]);n+=r*r}return n},assert:l,assertShapesMatch:u,assertNonNull:c,flatten:h,sizeFromShape:p,isScalarShape:function(e){return 0===e.length},arraysEqual:d,isInt:f,tanh:function(e){if(null!=Math.tanh)return Math.tanh(e);if(e===1/0)return 1;if(e===-1/0)return-1;{const t=Math.exp(2*e);return(t-1)/(t+1)}},sizeToSquarishShape:m,createShuffledIndices:function(e){const t=new Uint32Array(e);for(let n=0;n<e;++n)t[n]=n;return r(t),t},rightPad:g,repeatedTry:y,inferFromImplicitShape:b,parseAxisParam:x,squeezeShape:w,getTypedArrayFromDType:k,getArrayFromDType:v,checkConversionForErrors:N,isValidDtype:I,hasEncodingLoss:C,isTypedArray:$,bytesPerElement:S,bytesFromStringArray:T,isString:E,isBoolean:A,isNumber:R,inferDtype:F,isFunction:D,nearestDivisor:_,computeStrides:O,toNestedArray:L,makeOnesTypedArray:z,makeZerosTypedArray:B,makeZerosNestedTypedArray:P,assertNonNegativeIntegerDimensions:W,locToIndex:V,indexToLoc:U,isPromise:G});class cs{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new ps)}profileKernel(e,t,n){let s;const r=()=>{s=n()};let a;const i=as();if(this.backendTimer.timerAvailable())a=this.backendTimer.time(r);else{r();for(const e of s)e.dataSync();a=Promise.resolve({kernelMs:as()-i})}if(K().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let t=0;t<s.length;t++){const n=s[t];n.data().then((t=>{hs(t,n.dtype,e)}))}return{kernelName:e,outputs:s,inputs:t,timeMs:a.then((e=>e.kernelMs)),extraInfo:a.then((e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():""))}}logKernelProfile(e){const{kernelName:t,outputs:n,timeMs:s,inputs:r,extraInfo:a}=e;n.forEach((e=>{Promise.all([e.data(),s,a]).then((n=>{this.logger.logKernelProfile(t,e,n[0],n[1],r,n[2])}))}))}}function hs(e,t,n){if("float32"!==t)return!1;for(let t=0;t<e.length;t++){const s=e[t];if(isNaN(s)||!isFinite(s))return console.warn(`Found ${s} in the result of '${n}'`),!0}return!1}class ps{logKernelProfile(e,t,n,s,r,a){const i="number"==typeof s?g(`${s}ms`,9):s.error,o=g(e,25),l=t.rank,u=t.size,c=g(t.shape.toString(),14);let h="";for(const e in r){const n=r[e];if(null!=n){const s=n.shape||t.shape,r=s.length;h+=`${e}: ${r}D ${r>0?s:""} `}}console.log(`%c${o}\t%c${i}\t%c${l}D ${c}\t%c${u}\t%c${h}\t%c${a}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}function ds(e,t,n,s){const r=O(t),a=function(e,t,n,s){const r=p(t),a=s[s.length-1],i=new Array(a).fill(0),o=t.length,l="complex64"===n?ys(e):e;if(o>1)for(let e=0;e<r/a;e++){const t=e*a;for(let e=0;e<a;e++)i[e]=Math.max(i[e],fs(l[t+e],0,n).length)}return i}(e,t,n,r),i=t.length,o=gs(e,t,n,r,a),l=["Tensor"];return s&&(l.push(`  dtype: ${n}`),l.push(`  rank: ${i}`),l.push(`  shape: [${t}]`),l.push("  values:")),l.push(o.map((e=>"    "+e)).join("\n")),l.join("\n")}function fs(e,t,n){let s;return s=Array.isArray(e)?`${parseFloat(e[0].toFixed(7))} + ${parseFloat(e[1].toFixed(7))}j`:E(e)?`'${e}'`:"bool"===n?ms(e):parseFloat(e.toFixed(7)).toString(),g(s,t)}function ms(e){return 0===e?"false":"true"}function gs(e,t,n,s,r,a=!0){const i="complex64"===n?2:1,o=t[0],l=t.length;if(0===l){if("complex64"===n){return[fs(ys(e)[0],0,n)]}return"bool"===n?[ms(e[0])]:[e[0].toString()]}if(1===l){if(o>20){const t=3*i;let s=Array.from(e.slice(0,t)),a=Array.from(e.slice((o-3)*i,o*i));return"complex64"===n&&(s=ys(s),a=ys(a)),["["+s.map(((e,t)=>fs(e,r[t],n))).join(", ")+", ..., "+a.map(((e,t)=>fs(e,r[o-3+t],n))).join(", ")+"]"]}return["["+("complex64"===n?ys(e):Array.from(e)).map(((e,t)=>fs(e,r[t],n))).join(", ")+"]"]}const u=t.slice(1),c=s.slice(1),h=s[0]*i,p=[];if(o>20){for(let t=0;t<3;t++){const s=t*h,a=s+h;p.push(...gs(e.slice(s,a),u,n,c,r,!1))}p.push("...");for(let t=o-3;t<o;t++){const s=t*h,a=s+h;p.push(...gs(e.slice(s,a),u,n,c,r,t===o-1))}}else for(let t=0;t<o;t++){const s=t*h,a=s+h;p.push(...gs(e.slice(s,a),u,n,c,r,t===o-1))}const d=2===l?",":"";p[0]="["+p[0]+d;for(let e=1;e<p.length-1;e++)p[e]=" "+p[e]+d;let f=",\n";for(let e=2;e<l;e++)f+="\n";return p[p.length-1]=" "+p[p.length-1]+"]"+(a?"":f),p}function ys(e){const t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}class bs{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=p(e),null!=n){const e=n.length;l(e===this.size,(()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`))}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||v(t,this.size),this.strides=O(e)}set(e,...t){0===t.length&&(t=[0]),l(t.length===this.rank,(()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`));const n=this.locToIndex(t);this.values[n]=e}get(...e){0===e.length&&(e=[0]);let t=0;for(const n of e){if(n<0||n>=this.shape[t]){const t=`Requested out of range element at ${e}.   Buffer shape=${this.shape}`;throw new Error(t)}t++}let n=e[e.length-1];for(let t=0;t<e.length-1;++t)n+=this.strides[t]*e[t];return this.values[n]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const t=new Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return xs().makeTensor(this.values,this.shape,this.dtype)}}let xs=null,ws=null,ks=null;class vs{constructor(e,t,n,s){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=p(e),this.strides=O(e),this.dataId=n,this.id=s,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return ws.buffer(this.shape,this.dtype,e)}bufferSync(){return ws.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return L(this.shape,e,"complex64"===this.dtype)}arraySync(){return L(this.shape,this.dataSync(),"complex64"===this.dtype)}async data(){this.throwIfDisposed();const e=xs().read(this.dataId);if("string"===this.dtype){const t=await e;try{return t.map((e=>ls(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataSync(){this.throwIfDisposed();const e=xs().readSync(this.dataId);if("string"===this.dtype)try{return e.map((e=>ls(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await xs().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(xs().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return ws.print(this,e)}clone(){return this.throwIfDisposed(),ws.clone(this)}toString(e=!1){return ds(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),ws.cast(this,e)}variable(e=!0,t,n){return this.throwIfDisposed(),xs().makeVariable(this,e,t,n)}}function Ns(){return J("Tensor",(()=>vs))}Object.defineProperty(vs,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed}),Ns();class Is extends vs{constructor(e,t,n,s){super(e.shape,e.dtype,e.dataId,s),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!d(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);xs().disposeTensor(this),this.dataId=e.dataId,xs().incRef(this,null)}dispose(){xs().disposeVariable(this),this.isDisposedInternal=!0}}var Cs,$s,Ss,Ts,Es;Object.defineProperty(Is,Symbol.hasInstance,{value:e=>e instanceof vs&&null!=e.assign&&e.assign instanceof Function}),(Cs=e.Rank||(e.Rank={})).R0="R0",Cs.R1="R1",Cs.R2="R2",Cs.R3="R3",Cs.R4="R4",Cs.R5="R5",Cs.R6="R6",function(e){e.float32="float32",e.int32="int32",e.bool="int32",e.complex64="complex64"}($s||($s={})),function(e){e.float32="float32",e.int32="int32",e.bool="bool",e.complex64="complex64"}(Ss||(Ss={})),function(e){e.float32="float32",e.int32="float32",e.bool="float32",e.complex64="complex64"}(Ts||(Ts={})),function(e){e.float32="complex64",e.int32="complex64",e.bool="complex64",e.complex64="complex64"}(Es||(Es={}));const As={float32:Ts,int32:$s,bool:Ss,complex64:Es};function Rs(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error(`Can not upcast ${e} with ${t}`)}return As[e][t]}function Fs(e){return Rs(e,"int32")}function Ds(e,t){if(e.dtype===t.dtype)return[e,t];const n=Rs(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function _s(e,t){l(e.dtype===t.dtype,(()=>`The dtypes of the first(${e.dtype}) and second(${t.dtype}) input must match`))}function Os(e,t){return t.some((t=>t.id===e.id))}function Ms(e){const t=[];return Ls(e,t,new Set),t}function Ls(e,t,n){if(null==e)return;if(e instanceof vs)return void t.push(e);if(s=e,!Array.isArray(s)&&"object"!=typeof s)return;var s;const r=e;for(const e in r){const s=r[e];n.has(s)||(n.add(s),Ls(s,t,n))}}var zs=Object.freeze({__proto__:null,makeTypesMatch:Ds,assertTypesMatch:_s,isTensorInList:Os,getTensorsInContainer:Ms});function Bs(e){return null!=e.kernelName}class Ps{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map((e=>e.name))))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class Ws{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new Ps}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then((()=>{}));if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,n=1){return e in this.registryFactory?(console.warn(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new cs(this.backendInstance),!0}setupRegisteredKernels(){Qn(this.backendName).forEach((e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)}))}disposeRegisteredKernels(e){Qn(e).forEach((t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])}))}initializeBackend(e){const t=this.registryFactory[e];if(null==t)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const s=t.factory();if(!s||s instanceof n||"function"!=typeof s.then)return this.registry[e]=s,{success:!0,asyncInit:!1};{const t=++this.pendingBackendInitId,n=s.then((n=>!(t<this.pendingBackendInitId)&&(this.registry[e]=n,this.pendingBackendInit=null,!0))).catch((n=>(t<this.pendingBackendInitId||(this.pendingBackendInit=null,console.warn(`Initialization of backend ${e} failed`),console.warn(n.stack||n.message)),!1)));return this.pendingBackendInit=n,{success:n,asyncInit:!0}}}catch(t){return console.warn(`Initialization of backend ${e} failed`),console.warn(t.stack||t.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort(((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority))}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t],{success:s,asyncInit:r}=this.initializeBackend(n);if(r||s)return{name:n,asyncInit:r}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const n=this.state.tensorInfo.get(t),s=n.backend,r=this.readSync(t),a=s.refCount(t);s.disposeData(t,!0),n.backend=e,e.move(t,r,n.shape,n.dtype,a),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,s=null;if(null==t){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");s=e}return this.scopedRun((()=>this.startScope(s)),(()=>this.endScope(n)),(()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n)))}scopedRun(e,t,n){e();try{const e=n();return t(),e}catch(e){throw t(),e}}nextTensorId(){return Ws.nextTensorId++}nextVariableId(){return Ws.nextVariableId++}clone(e){const t=Us.runKernel(ct,{x:e}),n={x:e};return this.addTapeNode(this.state.activeScope.name,n,[t],(e=>({x:()=>{const t={x:e},n={dtype:"float32"};return Us.runKernel(we,t,n)}})),[],{}),t}runKernel(e,t,n){if(!(null!=Jn(e,this.backendName)))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:t,attrs:n})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){const s=this.backend.numDataIds();let r=0;n.forEach((e=>{r+="complex64"===e.dtype?3:1}));const a=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],i=s-t-r-a;if(i>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${i} data ids) after running '${e}'`)}runKernelFunc(e){let t,n=[];const s=this.isTapeOn(),r=this.state.numBytes,a=this.state.numTensors;let i,o;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;const u=Bs(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(Bs(e)){const{kernelName:t,inputs:r,attrs:a}=e;null==this.backendName&&this.backend;const u=Jn(t,this.backendName);l(null!=u,(()=>`Cannot find registered kernel '${t}' for backend '${this.backendName}'`)),i=()=>{const e=this.backend.numDataIds();o=u.kernelFunc({inputs:r,attrs:a,backend:this.backend});const i=Array.isArray(o)?o:[o];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(t,e,i);const l=i.map((e=>{if(null!=e.rank)return e;const{dataId:t,shape:n,dtype:s}=e;return this.makeTensorFromDataId(t,n,s)}));if(s){const e=this.getTensorsForGradient(t,r,l);n=this.saveTensorsForBackwardMode(e)}return l}}else{const{forwardFunc:t}=e,r=e=>{s&&(n=e.map((e=>this.keep(this.clone(e)))))};i=()=>{const e=this.backend.numDataIds();o=this.tidy((()=>t(this.backend,r)));const n=Array.isArray(o)?o:[o];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(u,e,n),n}}const{inputs:c,attrs:h}=e,p=Bs(e)?null:e.backwardsFunc;let d;return this.scopedRun((()=>this.state.kernelDepth++),(()=>this.state.kernelDepth--),(()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(d=this.profiler.profileKernel(u,c,(()=>i())),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(d),t=d.outputs):t=i()})),s&&this.addTapeNode(u,c,t,p,n,h),this.state.profiling&&this.state.activeProfile.kernels.push({name:u,bytesAdded:this.state.numBytes-r,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-a,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(c).map((e=>null!=c[e]?c[e].shape:null)),outputShapes:t.map((e=>e.shape)),kernelTimeMs:d.timeMs,extraInfo:d.extraInfo}),Array.isArray(o)?t:t[0]}saveTensorsForBackwardMode(e){return e.map((e=>this.keep(this.clone(e))))}getTensorsForGradient(e,t,n){const s=Zn(e);if(null!=s){const e=s.inputsToSave||[],r=s.outputsToSave||[];let a;s.saveAllInputs?(l(Array.isArray(t),(()=>"saveAllInputs is true, expected inputs to be an array.")),a=Object.keys(t).map((e=>t[e]))):a=e.map((e=>t[e]));const i=n.filter(((e,t)=>r[t]));return a.concat(i)}return[]}makeTensor(e,t,n,s){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",s=s||this.backend;let r=e;"string"===n&&E(e[0])&&(r=e.map((e=>os(e))));const a=s.write(r,t,n),i=new vs(t,n,a,this.nextTensorId());if(this.trackTensor(i,s),"string"===n){const e=this.state.tensorInfo.get(a),t=T(r);this.state.numBytes+=t-e.bytes,e.bytes=t}return i}makeTensorFromDataId(e,t,n,s){const r=new vs(t,n=n||"float32",e,this.nextTensorId());return this.trackTensor(r,s),r}makeVariable(e,t=!0,n,s){n=n||this.nextVariableId().toString(),null!=s&&s!==e.dtype&&(e=e.cast(s));const r=new Is(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[r.name])throw new Error(`Variable with name ${r.name} was already registered`);return this.state.registeredVariables[r.name]=r,this.incRef(r,this.backend),r}trackTensor(e,t){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*S(e.dtype)),this.state.numBytes+=n,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n})),e instanceof Is||this.track(e)}incRef(e,t){this.trackTensor(e,t),this.backend.incRef(e.dataId)}removeDataId(e,t){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===t&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;const t=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=t.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){const t=e.size*S(e.dtype);this.state.numBytes-=t}t.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,t.backend)}disposeVariables(){for(const e in this.state.registeredVariables){const t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map((e=>e.totalBytesSnapshot))),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const e of this.state.activeProfile.kernels)e.kernelTimeMs=await e.kernelTimeMs,e.extraInfo=await e.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,s,r,a){const i={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:r},o=Zn(e);null!=o&&(s=o.gradFunc),null!=s&&(i.gradient=e=>(e=e.map(((e,t)=>{if(null==e){const e=n[t],s=B(e.size,e.dtype);return this.makeTensor(s,e.shape,e.dtype)}return e})),s(e.length>1?e:e[0],r,a))),this.state.activeTape.push(i)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=Ms(e),n=new Set(t.map((e=>e.id)));for(let e=0;e<this.state.activeScope.track.length;e++){const t=this.state.activeScope.track[e];t.kept||n.has(t.id)||t.dispose()}const s=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach((e=>{e.kept||e.scopeId!==s.id||this.track(e)}))}gradients(e,t,n,s=!1){if(l(t.length>0,(()=>"gradients() received an empty list of xs.")),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const r=this.scopedRun((()=>this.startTape()),(()=>this.endTape()),(()=>this.tidy("forward",e)));l(r instanceof vs,(()=>"The result y returned by f() must be a tensor."));const a=function(e,t,n){const s={},r={};for(let e=0;e<t.length;e++)s[t[e].id]=!0;for(let n=0;n<e.length;n++){const a=e[n],i=a.inputs;for(const e in i){const n=i[e];let o=!1;for(let e=0;e<t.length;e++)if(s[n.id]){a.outputs.forEach((e=>s[e.id]=!0)),o=!0,r[a.id]=!0;break}if(o)break}}const a={};a[n.id]=!0;const i={};for(let t=e.length-1;t>=0;t--){const n=e[t],s=n.inputs;for(let e=0;e<n.outputs.length;e++)if(a[n.outputs[e].id]){for(const e in s)a[s[e].id]=!0,i[n.id]=!0;break}}const o=[];for(let t=0;t<e.length;t++){const n=e[t];if(r[n.id]&&i[n.id]){const e={};for(const t in n.inputs){const r=n.inputs[t];s[r.id]&&(e[t]=r)}const t=Object.assign({},n);t.inputs=e,t.outputs=n.outputs,o.push(t)}}return o}(this.state.activeTape,t,r);if(!s&&0===a.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(()=>{const e={};e[r.id]=null==n?function(e){const t=z(p(e),"float32");return Us.makeTensor(t,e,"float32")}(r.shape):n,function(e,t,n,s){for(let r=t.length-1;r>=0;r--){const a=t[r],i=[];if(a.outputs.forEach((t=>{const n=e[t.id];null!=n?i.push(n):i.push(null)})),null==a.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${a.kernelName}.`);const o=a.gradient(i);for(const t in a.inputs){if(!(t in o))throw new Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(o)}.`);const r=n((()=>o[t]()));if("float32"!==r.dtype)throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${r.dtype}'`);const i=a.inputs[t];if(!d(r.shape,i.shape))throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input '${t}' has shape '${r.shape}', which does not match the shape of the input '${i.shape}'`);if(null==e[i.id])e[i.id]=r;else{const t=e[i.id];e[i.id]=s(t,r),t.dispose()}}}}(e,a,(e=>this.tidy(e)),Gs);const s=t.map((t=>e[t.id]));return 0===this.state.gradientDepth&&(this.state.activeTape.forEach((e=>{for(const t of e.saved)t.dispose()})),this.state.activeTape=null),{value:r,grads:s}}))}customGrad(e){return l(D(e),(()=>"The f passed in customGrad(f) must be a function.")),(...t)=>{let n;l(t.every((e=>e instanceof vs)),(()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors"));const s={};t.forEach(((e,t)=>{s[t]=e}));return this.runKernelFunc({forwardFunc:(s,r)=>(n=e(...t,r),l(n.value instanceof vs,(()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor")),l(D(n.gradFunc),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.")),n.value),backwardsFunc:(e,s)=>{const r=n.gradFunc(e,s),a=Array.isArray(r)?r:[r];l(a.length===t.length,(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).")),l(a.every((e=>e instanceof vs)),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."));const i={};return a.forEach(((e,t)=>{i[t]=()=>e})),i},inputs:s})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}async time(e){const t=as(),n=await this.backend.time(e);return n.wallMs=as()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new Ps;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function Vs(){const t=Y();if(null==t._tfengine){const e=new j(t);t._tfengine=new Ws(e)}var n;return n=t._tfengine.ENV,e.ENV=n,xs=()=>t._tfengine,t._tfengine}Ws.nextTensorId=0,Ws.nextVariableId=0;const Us=Vs();function Gs(e,t){const n={a:e,b:t};return Us.runKernel(te,n)}function Hs(e){if(e||"undefined"!=typeof navigator&&null!=navigator){if(e||(e=navigator),"ReactNative"===e.product)return!0;const t=e.userAgent||e.vendor||window.opera;return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1}function js(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}var qs=Object.freeze({__proto__:null,isMobile:Hs,isBrowser:js});const Ks=K();function Xs(e,t){let n=e;if($(e))return"string"===t?[]:[e.length];if(!Array.isArray(e))return[];const s=[];for(;Array.isArray(n)||$(n)&&"string"!==t;)s.push(n.length),n=n[0];return Array.isArray(e)&&K().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&Ys(e,s,[]),s}function Ys(e,t,n){if(n=n||[],!Array.isArray(e)&&!$(e))return void l(0===t.length,(()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`));l(t.length>0,(()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${e.length} elements`)),l(e.length===t[0],(()=>`Element arr[${n.join("][")}] should have ${t[0]} elements, but has ${e.length} elements`));const s=t.slice(1);for(let t=0;t<e.length;++t)Ys(e[t],s,n.concat(t))}function Js(e,t,n,s){if("string_or_numeric"!==e){if(null==e)throw new Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw new Error(`Argument '${n}' passed to '${s}' must be ${e} tensor, but got ${t} tensor`)}}function Zs(e,t,n,s="numeric"){if(e instanceof vs)return Js(s,e.dtype,t,n),e;let r=F(e);if("string"!==r&&["bool","int32","float32"].indexOf(s)>=0&&(r=s),Js(s,r,t,n),null==e||!$(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e){const s=null==e?"null":e.constructor.name;throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${s}'`)}const a=Xs(e,r);$(e)||Array.isArray(e)||(e=[e]);const i="string"!==r?rs(e,r):h(e,[],!0);return Us.makeTensor(i,a,r)}function Qs(e,t,n,s="numeric"){if(!Array.isArray(e))throw new Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map(((e,r)=>Zs(e,`${t}[${r}]`,n,s)))}Ks.registerFlag("DEBUG",(()=>!1),(e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),Ks.registerFlag("IS_BROWSER",(()=>js())),Ks.registerFlag("IS_NODE",(()=>"undefined"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node)),Ks.registerFlag("IS_CHROME",(()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor))),Ks.registerFlag("PROD",(()=>!1)),Ks.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(()=>Ks.getBool("DEBUG"))),Ks.registerFlag("DEPRECATION_WARNINGS_ENABLED",(()=>!0)),Ks.registerFlag("IS_TEST",(()=>!1)),Ks.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",(()=>!0)),Ks.registerFlag("WRAP_TO_IMAGEBITMAP",(()=>!1));const er="__op";function tr(e){const t=Object.keys(e);if(1!==t.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let n=t[0];const s=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+=er;const r=(...e)=>{Us.startScope(n);try{const t=s(...e);return G(t)&&console.error("Cannot return a Promise inside of tidy."),Us.endScope(t),t}catch(e){throw Us.endScope(null),e}};return Object.defineProperty(r,"name",{value:n,configurable:!0}),r}const nr=tr({complex_:function(e,t){const n=Zs(e,"real","complex"),s=Zs(t,"imag","complex");u(n.shape,s.shape,`real and imag shapes, ${n.shape} and ${s.shape}, must match in call to tf.complex().`);const r={real:n,imag:s};return Us.runKernel(Ne,r)}});function sr(e,t,n,s){if(null==s&&(s=F(e)),"complex64"===s)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!$(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){W(t);const e=p(t),s=p(n);l(e===s,(()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${s}`));for(let e=0;e<n.length;++e){const s=n[e],r=e!==n.length-1||s!==p(t.slice(e));l(n[e]===t[e]||!r,(()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `))}}return $(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==s?rs(e,s):h(e,[],!0),Us.makeTensor(e,t,s)}function rr(e,t,n){return sr(e,t,Xs(e,n),n)}const ar={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};async function ir(e,t){const n=[],s=[],r=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);for(let a=0;a<r.length;++a){const i=r[a],o=Array.isArray(e)?e[a].tensor:e[i];if("float32"!==o.dtype&&"int32"!==o.dtype&&"bool"!==o.dtype&&"string"!==o.dtype&&"complex64"!==o.dtype)throw new Error(`Unsupported dtype in weight '${i}': ${o.dtype}`);const l={name:i,shape:o.shape,dtype:o.dtype};if("string"===o.dtype){const e=new Promise((async e=>{const t=await o.bytes(),n=t.reduce(((e,t)=>e+t.length),0)+4*t.length,s=new Uint8Array(n);let r=0;for(let e=0;e<t.length;e++){const n=t[e],a=new Uint8Array(new Uint32Array([n.length]).buffer);s.set(a,r),r+=4,s.set(n,r),r+=n.length}e(s)}));s.push(e)}else s.push(o.data());null!=t&&(l.group=t),n.push(l)}return{data:lr(await Promise.all(s)),specs:n}}function or(e,t){const n={};let s,r=0;for(const a of t){const t=a.name,i=a.dtype,o=a.shape,l=p(o);let u;if("quantization"in a){const n=a.quantization;if("uint8"===n.dtype||"uint16"===n.dtype){if(!("min"in n)||!("scale"in n))throw new Error(`Weight ${a.name} with quantization ${n.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==n.dtype)throw new Error(`Weight ${a.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==i)throw new Error(`Weight ${a.name} is quantized with ${n.dtype} which only supports weights of type float32 not ${i}.`)}const o=ar[n.dtype],c=e.slice(r,r+l*o),h="uint8"===n.dtype?new Uint8Array(c):new Uint16Array(c);if("float32"===i)if("uint8"===n.dtype||"uint16"===n.dtype){u=new Float32Array(h.length);for(let e=0;e<h.length;e++){const t=h[e];u[e]=t*n.scale+n.min}}else{if("float16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type float32.`);void 0===s&&(s=fr()),u=s(h)}else{if("int32"!==i)throw new Error(`Unsupported dtype in weight '${t}': ${i}`);if("uint8"!==n.dtype&&"uint16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type int32.`);u=new Int32Array(h.length);for(let e=0;e<h.length;e++){const t=h[e];u[e]=Math.round(t*n.scale+n.min)}}r+=l*o}else if("string"===i){const t=p(a.shape);u=[];for(let n=0;n<t;n++){const t=new Uint32Array(e.slice(r,r+4))[0];r+=4;const n=new Uint8Array(e.slice(r,r+t));u.push(n),r+=t}}else{const s=ar[i],a=e.slice(r,r+l*s);if("float32"===i)u=new Float32Array(a);else if("int32"===i)u=new Int32Array(a);else if("bool"===i)u=new Uint8Array(a);else{if("complex64"!==i)throw new Error(`Unsupported dtype in weight '${t}': ${i}`);{u=new Float32Array(a);const e=new Float32Array(u.length/2),s=new Float32Array(u.length/2);for(let t=0;t<e.length;t++)e[t]=u[2*t],s[t]=u[2*t+1];const r=rr(e,o,"float32"),i=rr(s,o,"float32");n[t]=nr(r,i),r.dispose(),i.dispose()}}r+=l*s}"complex64"!==i&&(n[t]=rr(u,o,i))}return n}function lr(e){if(null===e)throw new Error(`Invalid input value: ${JSON.stringify(e)}`);let t=0;const n=[];e.forEach((e=>{if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${e.constructor.name}`)}));const s=new Uint8Array(t);let r=0;return n.forEach((e=>{s.set(new Uint8Array(e.buffer),r),r+=e.byteLength})),s.buffer}const ur="undefined"!=typeof Buffer&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function cr(e){return ur?Buffer.byteLength(e):new Blob([e]).size}function hr(e){if(1===e.length)return e[0];let t=0;e.forEach((e=>{t+=e.byteLength}));const n=new Uint8Array(t);let s=0;return e.forEach((e=>{n.set(new Uint8Array(e),s),s+=e.byteLength})),n.buffer}function pr(e){for(e=e.trim();e.endsWith("/");)e=e.slice(0,e.length-1);const t=e.split("/");return t[t.length-1]}function dr(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:cr(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:cr(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:e.weightData.byteLength}}function fr(){const e=function(){const e=e=>{let t=e<<13,n=0;for(;0==(8388608&t);)n-=8388608,t<<=1;return t&=-8388609,n+=947912704,t|n},t=new Uint32Array(2048);t[0]=0;for(let n=1;n<1024;n++)t[n]=e(n);for(let e=1024;e<2048;e++)t[e]=939524096+(e-1024<<13);return t}(),t=function(){const e=new Uint32Array(64);e[0]=0,e[31]=1199570944,e[32]=2147483648,e[63]=3347054592;for(let t=1;t<31;t++)e[t]=t<<23;for(let t=33;t<63;t++)e[t]=2147483648+(t-32<<23);return e}(),n=function(){const e=new Uint32Array(64);for(let t=0;t<64;t++)e[t]=1024;return e[0]=e[32]=0,e}();return s=>{const r=new ArrayBuffer(4*s.length),a=new Uint32Array(r);for(let r=0;r<s.length;r++){const i=s[r],o=e[n[i>>10]+(1023&i)]+t[i>>10];a[r]=o}return new Float32Array(r)}}class mr{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==mr.instance&&(mr.instance=new mr),mr.instance}static registerSaveRouter(e){mr.getInstance().saveRouters.push(e)}static registerLoadRouter(e){mr.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return mr.getHandlers(e,"save")}static getLoadHandlers(e,t){return mr.getHandlers(e,"load",t)}static getHandlers(e,t,n){const s=[];return("load"===t?mr.getInstance().loadRouters:mr.getInstance().saveRouters).forEach((t=>{const r=t(e,n);null!==r&&s.push(r)})),s}}const gr=e=>mr.getSaveHandlers(e),yr=(e,t)=>mr.getLoadHandlers(e,t),br="tensorflowjs",xr="models_store",wr="model_info_store";function kr(){if(!K().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function vr(e){const t=e.result;t.createObjectStore(xr,{keyPath:"modelPath"}),t.createObjectStore(wr,{keyPath:"modelPath"})}class Nr{constructor(e){if(this.indexedDB=kr(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise(((e,n)=>{const s=this.indexedDB.open(br,1);s.onupgradeneeded=()=>vr(s),s.onsuccess=()=>{const r=s.result;if(null==t){const t=r.transaction(xr,"readonly"),s=t.objectStore(xr).get(this.modelPath);s.onsuccess=()=>{if(null==s.result)return r.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(s.result.modelArtifacts)},s.onerror=e=>(r.close(),n(s.error)),t.oncomplete=()=>r.close()}else{const s=dr(t),a=r.transaction(wr,"readwrite");let i=a.objectStore(wr);const o=i.put({modelPath:this.modelPath,modelArtifactsInfo:s});let l;o.onsuccess=()=>{l=r.transaction(xr,"readwrite");const o=l.objectStore(xr).put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:s});o.onsuccess=()=>e({modelArtifactsInfo:s}),o.onerror=e=>{i=a.objectStore(wr);const t=i.delete(this.modelPath);t.onsuccess=()=>(r.close(),n(o.error)),t.onerror=e=>(r.close(),n(o.error))}},o.onerror=e=>(r.close(),n(o.error)),a.oncomplete=()=>{null==l?r.close():l.oncomplete=()=>r.close()}}},s.onerror=e=>n(s.error)}))}}Nr.URL_SCHEME="indexeddb://";const Ir=e=>{return K().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Nr.URL_SCHEME)?(t=e.slice(Nr.URL_SCHEME.length),new Nr(t)):null;var t};mr.registerSaveRouter(Ir),mr.registerLoadRouter(Ir);class Cr{constructor(){this.indexedDB=kr()}async listModels(){return new Promise(((e,t)=>{const n=this.indexedDB.open(br,1);n.onupgradeneeded=()=>vr(n),n.onsuccess=()=>{const s=n.result,r=s.transaction(wr,"readonly"),a=r.objectStore(wr).getAll();a.onsuccess=()=>{const t={};for(const e of a.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},a.onerror=e=>(s.close(),t(a.error)),r.oncomplete=()=>s.close()},n.onerror=e=>t(n.error)}))}async removeModel(e){var t;return e=(t=e).startsWith(Nr.URL_SCHEME)?t.slice(Nr.URL_SCHEME.length):t,new Promise(((t,n)=>{const s=this.indexedDB.open(br,1);s.onupgradeneeded=()=>vr(s),s.onsuccess=()=>{const r=s.result,a=r.transaction(wr,"readwrite"),i=a.objectStore(wr),o=i.get(e);let l;o.onsuccess=()=>{if(null==o.result)return r.close(),n(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{const s=i.delete(e),a=()=>{l=r.transaction(xr,"readwrite");const s=l.objectStore(xr).delete(e);s.onsuccess=()=>t(o.result.modelArtifactsInfo),s.onerror=e=>n(o.error)};s.onsuccess=a,s.onerror=e=>(a(),r.close(),n(o.error))}},o.onerror=e=>(r.close(),n(o.error)),a.oncomplete=()=>{null==l?r.close():l.oncomplete=()=>r.close()}},s.onerror=e=>n(s.error)}))}}const $r="/",Sr="tensorflowjs_models",Tr="info",Er="model_topology",Ar="weight_specs",Rr="weight_data",Fr="model_metadata";function Dr(e){return{info:[Sr,e,Tr].join($r),topology:[Sr,e,Er].join($r),weightSpecs:[Sr,e,Ar].join($r),weightData:[Sr,e,Rr].join($r),modelMetadata:[Sr,e,Fr].join($r)}}function _r(e){const t=e.split($r);if(t.length<3)throw new Error(`Invalid key format: ${e}`);return t.slice(1,t.length-1).join($r)}class Or{constructor(e){if(!K().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=Dr(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const t=JSON.stringify(e.modelTopology),n=JSON.stringify(e.weightSpecs),s=dr(e);try{this.LS.setItem(this.keys.info,JSON.stringify(s)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,function(e){if(ur)return Buffer.from(e).toString("base64");const t=new Uint8Array(e);let n="";for(let e=0,s=t.length;e<s;e++)n+=String.fromCharCode(t[e]);return btoa(n)}(e.weightData));const r={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};return null!=e.signature&&(r.signature=e.signature),null!=e.userDefinedMetadata&&(r.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(r.modelInitializer=e.modelInitializer),this.LS.setItem(this.keys.modelMetadata,JSON.stringify(r)),{modelArtifactsInfo:s}}catch(e){throw this.LS.removeItem(this.keys.info),this.LS.removeItem(this.keys.topology),this.LS.removeItem(this.keys.weightSpecs),this.LS.removeItem(this.keys.weightData),this.LS.removeItem(this.keys.modelMetadata),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${s.modelTopologyBytes}, weightSpecsBytes=${s.weightSpecsBytes}, weightDataBytes=${s.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=n;const s=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==s)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=s;const r=this.LS.getItem(this.keys.modelMetadata);if(null!=r){const e=JSON.parse(r);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer)}const a=this.LS.getItem(this.keys.weightData);if(null==a)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=function(e){if(ur){const t=Buffer.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}const t=atob(e),n=new Uint8Array(t.length);for(let e=0;e<t.length;++e)n.set([t.charCodeAt(e)],e);return n.buffer}(a),t}}Or.URL_SCHEME="localstorage://";const Mr=e=>{return K().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Or.URL_SCHEME)?(t=e.slice(Or.URL_SCHEME.length),new Or(t)):null;var t};mr.registerSaveRouter(Mr),mr.registerLoadRouter(Mr);class Lr{constructor(){l(K().getBool("IS_BROWSER"),(()=>"Current environment is not a web browser")),l("undefined"==typeof window||void 0!==window.localStorage,(()=>"Current browser does not appear to support localStorage")),this.LS=window.localStorage}async listModels(){const e={},t=Sr+$r,n=$r+Tr;for(let s=0;s<this.LS.length;++s){const r=this.LS.key(s);if(r.startsWith(t)&&r.endsWith(n)){e[_r(r)]=JSON.parse(this.LS.getItem(r))}}return e}async removeModel(e){var t;const n=Dr(e=(t=e).startsWith(Or.URL_SCHEME)?t.slice(Or.URL_SCHEME.length):t);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${e}'`);const s=JSON.parse(this.LS.getItem(n.info));return this.LS.removeItem(n.info),this.LS.removeItem(n.topology),this.LS.removeItem(n.weightSpecs),this.LS.removeItem(n.weightData),s}}const zr="://";class Br{constructor(){this.managers={}}static getInstance(){return null==Br.instance&&(Br.instance=new Br),Br.instance}static registerManager(e,t){l(null!=e,(()=>"scheme must not be undefined or null.")),e.endsWith(zr)&&(e=e.slice(0,e.indexOf(zr))),l(e.length>0,(()=>"scheme must not be an empty string."));const n=Br.getInstance();l(null==n.managers[e],(()=>`A model store manager is already registered for scheme '${e}'.`)),n.managers[e]=t}static getManager(e){const t=this.getInstance().managers[e];if(null==t)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(this.getInstance().managers)}}function Pr(e){if(-1===e.indexOf(zr))throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${Br.getSchemes().join(",")}`);return{scheme:e.split(zr)[0],path:e.split(zr)[1]}}async function Wr(e,t,n=!1){l(e!==t,(()=>`Old path and new path are the same: '${e}'`));const s=mr.getLoadHandlers(e);l(s.length>0,(()=>`Copying failed because no load handler is found for source URL ${e}.`)),l(s.length<2,(()=>`Copying failed because more than one (${s.length}) load handlers for source URL ${e}.`));const r=s[0],a=mr.getSaveHandlers(t);l(a.length>0,(()=>`Copying failed because no save handler is found for destination URL ${t}.`)),l(a.length<2,(()=>`Copying failed because more than one (${s.length}) save handlers for destination URL ${t}.`));const i=a[0],o=Pr(e).scheme,u=Pr(e).path,c=o===Pr(e).scheme,h=await r.load();n&&c&&await Br.getManager(o).removeModel(u);const p=await i.save(h);return n&&!c&&await Br.getManager(o).removeModel(u),p.modelArtifactsInfo}class Vr{fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}}if(K().get("IS_BROWSER")){K().setPlatform("browser",new Vr);try{Br.registerManager(Or.URL_SCHEME,new Lr)}catch(e){}try{Br.registerManager(Nr.URL_SCHEME,new Cr)}catch(e){}}const Ur=()=>require("node-fetch");let Gr;class Hr{constructor(){this.util=require("util"),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=K().global.fetch?K().global.fetch(e,t):(null==Gr&&(Gr=Ur()),Gr(e,t))}now(){const e=process.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}}function jr(e,t="float32",n){return t=t||"float32",W(e),new bs(e,t,n)}K().get("IS_NODE")&&K().setPlatform("node",new Hr);const qr=tr({cast_:function(e,t){const n=Zs(e,"x","cast");if(!I(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const s={x:n},r={dtype:t};return Us.runKernel(we,s,r)}});const Kr=tr({clone_:function(e){const t={x:Zs(e,"x","clone","string_or_numeric")};return Us.runKernel(ct,t)}});function Xr(e,t=!1){console.log(e.toString(t))}Vs();ws={buffer:jr,cast:qr,clone:Kr,print:Xr};function Yr(e){return new Promise((e=>setTimeout(e))).then(e)}class Jr{constructor(e){if(!K().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(Jr.URL_SCHEME)&&(e=e.slice(Jr.URL_SCHEME.length)),null!=e&&0!==e.length||(e="model"),this.modelTopologyFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const t=window.URL.createObjectURL(new Blob([e.weightData],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n=[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}],s={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:n};null!=e.signature&&(s.signature=e.signature),null!=e.userDefinedMetadata&&(s.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(s.modelInitializer=e.modelInitializer);const r=window.URL.createObjectURL(new Blob([JSON.stringify(s)],{type:"application/json"})),a=null==this.jsonAnchor?document.createElement("a"):this.jsonAnchor;if(a.download=this.modelTopologyFileName,a.href=r,await Yr((()=>a.dispatchEvent(new MouseEvent("click")))),null!=e.weightData){const e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=t,await Yr((()=>e.dispatchEvent(new MouseEvent("click"))))}return{modelArtifactsInfo:dr(e)}}}}Jr.URL_SCHEME="downloads://";class Zr{constructor(e){if(null==e||e.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${e}`);this.files=e}async load(){const e=this.files[0],t=this.files.slice(1);return new Promise(((n,s)=>{const r=new FileReader;r.onload=r=>{const a=JSON.parse(r.target.result),i=a.modelTopology;if(null==i)return void s(new Error(`modelTopology field is missing from file ${e.name}`));0===t.length&&n({modelTopology:i});const o=a.weightsManifest;if(null==o)return void s(new Error(`weightManifest field is missing from file ${e.name}`));let l;try{l=this.checkManifestAndWeightFiles(o,t)}catch(e){return void s(e)}const u=[],c=[],h=[];o.forEach((e=>{e.paths.forEach((e=>{c.push(e),h.push(null)})),u.push(...e.weights)})),o.forEach((e=>{e.paths.forEach((e=>{const t=new FileReader;t.onload=t=>{const s=t.target.result,r=c.indexOf(e);if(h[r]=s,-1===h.indexOf(null)){const e={modelTopology:i,weightSpecs:u,weightData:hr(h),format:a.format,generatedBy:a.generatedBy,convertedBy:a.convertedBy};null!=a.signature&&(e.signature=a.signature),null!=a.userDefinedMetadata&&(e.userDefinedMetadata=a.userDefinedMetadata),null!=a.modelInitializer&&(e.modelInitializer=a.modelInitializer),n(e)}},t.onerror=t=>s(`Failed to weights data from file of path '${e}'.`),t.readAsArrayBuffer(l[e])}))}))},r.onerror=t=>s(`Failed to read model topology and weights manifest JSON from file '${e.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),r.readAsText(e)}))}checkManifestAndWeightFiles(e,t){const n=[],s=t.map((e=>pr(e.name))),r={};for(const a of e)a.paths.forEach((e=>{const a=pr(e);if(-1!==n.indexOf(a))throw new Error(`Duplicate file basename found in weights manifest: '${a}'`);if(n.push(a),-1===s.indexOf(a))throw new Error(`Weight file with basename '${a}' is not provided.`);r[e]=t[s.indexOf(a)]}));if(n.length!==t.length)throw new Error(`Mismatch in the number of files in weights manifest (${n.length}) and the number of weight files provided (${t.length}).`);return r}}function Qr(e,t,n,s){!function(e){l(null!=e&&Array.isArray(e)&&e.length>0,(()=>"promises must be a none empty array"))}(e),function(e,t){l(e>=0&&e<=1,(()=>`Progress fraction must be in range [0, 1], but got startFraction ${e}`)),l(t>=0&&t<=1,(()=>`Progress fraction must be in range [0, 1], but got endFraction ${t}`)),l(t>=e,(()=>`startFraction must be no more than endFraction, but got startFraction ${e} and endFraction ${t}`))}(n=null==n?0:n,s=null==s?1:s);let r=0;return Promise.all(e.map((a=>(a.then((a=>{const i=n+ ++r/e.length*(s-n);return t(i),a})),a))))}async function ea(e,t){null==t&&(t={});const n=null==t.fetchFunc?K().platform.fetch:t.fetchFunc,s=e.map((e=>n(e,t.requestInit,{isBinary:!0}))),r=(null==t.onProgress?await Promise.all(s):await Qr(s,t.onProgress,0,.5)).map((e=>e.arrayBuffer()));return null==t.onProgress?await Promise.all(r):await Qr(r,t.onProgress,.5,1)}async function ta(e,t="",n,s){return na((e=>ea(e,{requestInit:s})))(e,t,n)}function na(e){return async(t,n="",s)=>{const r=t.map((()=>!1)),a={},i=null!=s?s.map((()=>!1)):[],o=[];if(t.forEach(((e,t)=>{let n=0;e.weights.forEach((e=>{const l="quantization"in e?e.quantization.dtype:e.dtype,u=ar[l]*p(e.shape),c=()=>{r[t]=!0,null==a[t]&&(a[t]=[]),a[t].push({manifestEntry:e,groupOffset:n,sizeBytes:u})};null!=s?s.forEach(((t,n)=>{t===e.name&&(c(),i[n]=!0)})):c(),o.push(e.name),n+=u}))})),!i.every((e=>e))){const e=s.filter(((e,t)=>!i[t]));throw new Error(`Could not find weights in manifest with names: ${e.join(", ")}. \nManifest JSON has weights with names: ${o.join(", ")}.`)}const l=r.reduce(((e,t,n)=>(t&&e.push(n),e)),[]),u=[];l.forEach((e=>{t[e].paths.forEach((e=>{const t=n+(n.endsWith("/")?"":"/")+e;u.push(t)}))}));const c=await e(u),h={};let d=0;return l.forEach((e=>{const n=t[e].paths.length;let s=0;for(let e=0;e<n;e++)s+=c[d+e].byteLength;const r=new ArrayBuffer(s),i=new Uint8Array(r);let o=0;for(let e=0;e<n;e++){const t=new Uint8Array(c[d+e]);i.set(t,o),o+=t.byteLength}a[e].forEach((e=>{const t=or(r.slice(e.groupOffset,e.groupOffset+e.sizeBytes),[e.manifestEntry]);for(const e in t)h[e]=t[e]})),d+=n})),h}}mr.registerSaveRouter((e=>K().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Jr.URL_SCHEME)?function(e="model"){return new Jr(e)}(e.slice(Jr.URL_SCHEME.length)):null));class sa{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.onProgress=t.onProgress,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?(l("function"==typeof t.fetchFunc,(()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)")),this.fetch=t.fetchFunc):this.fetch=K().platform.fetch,l(null!=e&&e.length>0,(()=>"URL path for http must not be null, undefined or empty.")),Array.isArray(e)&&l(2===e.length,(()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`)),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{}}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;const n=[{paths:["./model.weights.bin"],weights:e.weightSpecs}],s={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:n};null!=e.signature&&(s.signature=e.signature),null!=e.userDefinedMetadata&&(s.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(s.modelInitializer=e.modelInitializer),t.body.append("model.json",new Blob([JSON.stringify(s)],{type:"application/json"}),"model.json"),null!=e.weightData&&t.body.append("model.weights.bin",new Blob([e.weightData],{type:"application/octet-stream"}),"model.weights.bin");const r=await this.fetch(this.path,t);if(r.ok)return{modelArtifactsInfo:dr(e),responses:[r]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${r.status}.`)}async load(){const e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`);let t;try{t=await e.json()}catch(e){let t=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?t+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":t+=" Please make sure the server is serving valid JSON for this request.",new Error(t)}const n=t.modelTopology,s=t.weightsManifest,r=t.generatedBy,a=t.convertedBy,i=t.format,o=t.signature,l=t.userDefinedMetadata;if(null==n&&null==s)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);let u,c;if(null!=s){const e=await this.loadWeights(s);[u,c]=e}const h={modelTopology:n,weightSpecs:u,weightData:c,generatedBy:r,convertedBy:a,format:i};null!=o&&(h.signature=o),null!=l&&(h.userDefinedMetadata=l);const p=t.modelInitializer;return p&&(h.modelInitializer=p),h}async loadWeights(e){const t=Array.isArray(this.path)?this.path[1]:this.path,[n,s]=function(e){const t=e.lastIndexOf("/"),n=e.lastIndexOf("?"),s=e.substring(0,t),r=n>t?e.substring(n):"";return[s+"/",r]}(t),r=this.weightPathPrefix||n,a=[];for(const t of e)a.push(...t.weights);const i=[],o=[];for(const t of e)for(const e of t.paths)null!=this.weightUrlConverter?o.push(this.weightUrlConverter(e)):i.push(r+e+s);this.weightUrlConverter&&i.push(...await Promise.all(o));return[a,hr(await ea(i,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress}))]}}function ra(e){return null!=e.match(sa.URL_SCHEME_REGEX)}sa.URL_SCHEME_REGEX=/^https?:\/\//;const aa=(e,t)=>{if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc))return null;{let n=!0;if(n=Array.isArray(e)?e.every((e=>ra(e))):ra(e),n)return ia(e,t)}return null};function ia(e,t){return new sa(e,t)}function oa(e,t){return ia(e,t)}mr.registerSaveRouter(aa),mr.registerLoadRouter(aa);class la{constructor(e){this.modelArtifacts=e}async load(){return this.modelArtifacts}}class ua{constructor(e){this.saveHandler=e}async save(e){return this.saveHandler(e)}}var ca=Object.freeze({__proto__:null,browserFiles:function(e){return new Zr(e)},browserHTTPRequest:oa,concatenateArrayBuffers:hr,decodeWeights:or,encodeWeights:ir,fromMemory:function(e,t,n,s){if(1===arguments.length){return null!=e.modelTopology||null!=e.weightSpecs?new la(e):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new la({modelTopology:e}))}return console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new la({modelTopology:e,weightSpecs:t,weightData:n,trainingConfig:s})},getLoadHandlers:yr,getModelArtifactsInfoForJSON:dr,getSaveHandlers:gr,http:ia,isHTTPScheme:ra,loadWeights:ta,registerLoadRouter:e=>mr.registerLoadRouter(e),registerSaveRouter:e=>mr.registerSaveRouter(e),weightsLoaderFactory:na,withSaveHandler:function(e){return new ua(e)},copyModel:async function(e,t){return Wr(e,t,!1)},listModels:async function(){const e=Br.getSchemes(),t={};for(const n of e){const e=await Br.getManager(n).listModels();for(const s in e){t[n+zr+s]=e[s]}}return t},moveModel:async function(e,t){return Wr(e,t,!0)},removeModel:async function(e){const t=Pr(e);return Br.getManager(t.scheme).removeModel(t.path)}});const ha=tr({matMul_:function(e,t,n=!1,s=!1){let r=Zs(e,"a","matMul"),a=Zs(t,"b","matMul");[r,a]=Ds(r,a);const i={a:r,b:a},o={transposeA:n,transposeB:s};return Us.runKernel(ge,i,o)}});const pa=tr({oneHot_:function(e,t,n=1,s=0){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);const r={indices:Zs(e,"indices","oneHot","int32")},a={depth:t,onValue:n,offValue:s};return Us.runKernel(Kt,r,a)}});const da=tr({transpose_:function(e,t){const n=Zs(e,"x","transpose");if(null==t&&(t=n.shape.map(((e,t)=>t)).reverse()),l(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of perm ${t}.`)),t.forEach((e=>{l(e>=0&&e<n.rank,(()=>"All entries in 'perm' must be between 0 and "+(n.rank-1)+` but got ${t}`))})),n.rank<=1)return n.clone();const s={x:n},r={perm:t};return Us.runKernel(zn,s,r)}});const fa=tr({confusionMatrix_:function(e,t,n){const s=Zs(e,"labels","confusionMatrix"),r=Zs(t,"predictions","confusionMatrix");l(null==n||n>0&&Number.isInteger(n),(()=>`If provided, numClasses must be a positive integer, but got ${n}`)),l(1===s.rank,(()=>`Expected the rank of labels to be 1, but got ${s.rank}`)),l(1===r.rank,(()=>`Expected the rank of predictions to be 1, but got ${r.rank}`)),l(s.shape[0]===r.shape[0],(()=>`Mismatch in the number of examples: ${s.shape[0]} vs. ${r.shape[0]}. Labels and predictions should have the same number of elements.`)),l(n>0&&Number.isInteger(n),(()=>`numClasses is required to be a positive integer, but got ${n}`));const a=pa(qr(s,"int32"),n),i=pa(qr(r,"int32"),n),o=da(a),u=ha(o,i);return qr(u,"int32")}});var ma=Object.freeze({__proto__:null,confusionMatrix:fa});function ga(e,t,n){if(c(e),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const s=Xs(e,n);if(3!==s.length&&1!==s.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return sr(e,t,s,n)}let ya;function ba(e,t=3){if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==e)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,s=!1,r=!1,a=!1,i=!1,o=!1;if(e.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&e instanceof ImageData)s=!0;else if("undefined"!=typeof HTMLVideoElement&&e instanceof HTMLVideoElement)r=!0;else if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement)a=!0;else if(null!=e.getContext)i=!0;else{if(!("undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap))throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${e.constructor.name}`);o=!0}if(r){const t=2;if(r&&e.readyState<t)throw new Error("The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.")}if(null!=Jn(Gn,Us.backendName)){const n={pixels:e},s={numChannels:t};return Us.runKernel(Gn,n,s)}const[l,u]=r?[e.videoWidth,e.videoHeight]:[e.width,e.height];let c,h;if(i?c=e.getContext("2d").getImageData(0,0,l,u).data:s||n?c=e.data:(a||r||o)&&(null==ya&&(ya=document.createElement("canvas").getContext("2d")),ya.canvas.width=l,ya.canvas.height=u,ya.drawImage(e,0,0,l,u),c=ya.getImageData(0,0,l,u).data),4===t)h=new Int32Array(c);else{const e=l*u;h=new Int32Array(e*t);for(let n=0;n<e;n++)for(let e=0;e<t;++e)h[n*t+e]=c[4*n+e]}return ga(h,[u,l,t],"int32")}function xa(e){return"undefined"!=typeof window&&"undefined"!=typeof ImageBitmap&&window.hasOwnProperty("createImageBitmap")&&!(e instanceof ImageBitmap)&&function(e){return null!=e&&0!==e.width&&0!==e.height}(e)&&!function(e){return null!=e&&e.data instanceof Uint8Array}(e)}const wa=tr({fromPixels_:ba});var ka=Object.freeze({__proto__:null,fromPixelsAsync:async function(e,t=3){let n=null;if(K().getBool("WRAP_TO_IMAGEBITMAP")&&xa(e)){let t;try{t=await createImageBitmap(e,{premultiplyAlpha:"none"})}catch(e){t=null}n=null!=t&&t.width===e.width&&t.height===e.height?t:e}else n=e;return ba(n,t)},toPixels:async function(e,t){let n=Zs(e,"img","toPixels");if(!(e instanceof vs)){const e=n;n=qr(e,"int32"),e.dispose()}if(2!==n.rank&&3!==n.rank)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${n.rank}.`);const[s,r]=n.shape.slice(0,2),a=2===n.rank?1:n.shape[2];if(a>4||2===a)throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${a}`);if("float32"!==n.dtype&&"int32"!==n.dtype)throw new Error(`Unsupported type for toPixels: ${n.dtype}. Please use float32 or int32 tensors.`);const i=await n.data(),o="float32"===n.dtype?255:1,l=new Uint8ClampedArray(r*s*4);for(let e=0;e<s*r;++e){const t=[0,0,0,255];for(let s=0;s<a;s++){const r=i[e*a+s];if("float32"===n.dtype){if(r<0||r>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${r}.`)}else if("int32"===n.dtype&&(r<0||r>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${r}.`);1===a?(t[0]=r*o,t[1]=r*o,t[2]=r*o):t[s]=r*o}const s=4*e;l[s+0]=Math.round(t[0]),l[s+1]=Math.round(t[1]),l[s+2]=Math.round(t[2]),l[s+3]=Math.round(t[3])}if(null!=t){t.width=r,t.height=s;const e=t.getContext("2d"),n=new ImageData(l,r,s);e.putImageData(n,0,0)}return n!==e&&n.dispose(),l},fromPixels:wa});function va(e,t){const n=e.shape.length,s=t.shape.length;if(n<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${n}.`);if(s<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${s}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[s-1]>n)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[s-1]} vs. ${n}`);if(0===p(e.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`);const r=t.shape,a=r[r.length-1];let i=1;for(let e=0;e<r.length-1;++e)i*=r[e];const o=e.shape,l=r.slice();l.pop();let u=1;for(let e=a;e<n;++e)u*=o[e],l.push(o[e]);const c=[...O(e.shape).map((e=>e/u)),1].slice(0,a);return[l,i,u,c]}var Na=Object.freeze({__proto__:null,prepareAndValidate:va});function Ia(e,t,n){const s=t.rank>1?t.shape[t.rank-1]:1,r=t.rank>1?t.rank-1:1,a=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${t.shape}, shape: ${e}, sliceDim: ${s}, and batchDim: ${r}.`;if(n.rank<r)throw new Error(a+` update.rank < ${r}. `);if(e.length<s+(n.rank-r))throw new Error(a+` Output shape length < ${s+(n.rank-r)}`);if(n.rank!==r+e.length-s)throw new Error(a+" update.rank != "+(r+e.length-s));for(let e=0;e<r;++e)if(n.shape[e]!==t.shape[e])throw new Error(a+` updates.shape[${e}] (${n.shape[e]}) != indices.shape[${e}] (${t.shape[e]}).`);for(let t=0;t<n.rank-r;++t)if(n.shape[t+r]!==e[t+s])throw new Error(a+` updates.shape[${t+r}] (${n.shape[t+r]}) != shape[${t+r}] (${e[t+r]})`)}function Ca(e,t,n){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(n.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);if(0===n.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===e.size)throw new Error(`Updates specified for empty output. updates shape: ${e.shape}`)}Ia(n,t,e)}function $a(e,t,n){const s=t.shape.length,r=s>1?t.shape[s-1]:1,a=n.length;let i=1;for(let e=r;e<a;++e)i*=n[e];const o=r<1?1:r;return{sliceRank:r,numUpdates:p(t.shape)/o,sliceSize:i,strides:[...O(n.slice(0,r)),1],outputSize:p(n)}}var Sa=Object.freeze({__proto__:null,validateUpdateShape:Ia,validateInput:Ca,calculateShapes:$a});function Ta(e,t,n){const s=e.shape.length;l(s===t.length,(()=>`Error in slice${s}D: Length of begin ${t} must match the rank of the array (${s}).`)),l(s===n.length,(()=>`Error in slice${s}D: Length of size ${n} must match the rank of the array (${s}).`));for(let r=0;r<s;++r)l(t[r]+n[r]<=e.shape[r],(()=>`Error in slice${s}D: begin[${r}] + size[${r}] (${t[r]+n[r]}) would overflow input.shape[${r}] (${e.shape[r]})`))}function Ea(e){const t=[];let n=0;for(;e>0;)1&e&&t.push(n),e/=2,n++;return t}function Aa(e,t,n){const s=[];for(let r=0;r<e.length;r++)s[r]=Math.ceil((t[r]-e[r])/n[r]);return s}function Ra(e,t,n,s){const r=[...e];for(let e=r.length;e<s.length;e++)r.push(1);for(let e=0;e<n;e++)0===e?r[t]=1:(r.splice(t,0,1),r.pop());return r}function Fa(e,t,n){return n<=e?n:n-(t-1)}function Da(e,t){const n=[];for(let s=0;s<e;s++)n.push(t+s);return n}function _a(e,t,n,s,r,a,i,o,l){const u=e.length;let c=new Array(u),h=new Array(u),p=new Array(u);if(t.length&&n>0){const l=t[0],u=n+1;c=Oa(i,l,u,s,e),h=Ma(o,l,u,r,e),p=Ra(a,l,u,e)}else for(let t=0;t<u;t++)c[t]=za(i,s,a,e,t,l),h[t]=Ba(o,r,a,e,t,l),p[t]=La(a,t,l);return{begin:c,end:h,strides:p}}function Oa(e,t,n,s,r){const a=[...r],i=Da(n,t);for(let r=0;r<a.length;r++)if(i.indexOf(r)>-1)a[r]=0;else{const i=Fa(t,n,r);let o=s[i];e&1<<i&&(o=0),a[r]=o}return a}function Ma(e,t,n,s,r){const i=[...r],o=Da(n,t);for(let r=0;r<i.length;r++)if(o.indexOf(r)>-1)i[r]=Number.MAX_SAFE_INTEGER;else{const a=Fa(t,n,r);let o=s[a];e&1<<a&&(o=Number.MAX_SAFE_INTEGER),i[r]=o}for(let e=0;e<i.length;e++){const t=r[e];i[e]<0&&(i[e]+=t),i[e]=a(0,i[e],r[e])}return i}function La(e,t,n){let s=e[t];return(n&1<<t||null==s)&&(s=1),s}function za(e,t,n,s,r,i){let o=t[r];const l=n[r]||1;(e&1<<r||i&1<<r||null==o)&&(o=l>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const u=s[r];return o<0&&(o+=u),o=a(0,o,u-1),o}function Ba(e,t,n,s,r,i){let o=t[r];const l=n[r]||1;(e&1<<r||i&1<<r||null==o)&&(o=l>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const u=s[r];return o<0&&(o+=u),o=l>0?a(0,o,u):a(-1,o,u-1),o}function Pa(e,t,n){let s=n.length;for(let e=0;e<n.length;e++)if(n[e]>1){s=e;break}for(let r=s+1;r<n.length;r++)if(t[r]>0||n[r]!==e[r])return!1;return!0}function Wa(e,t){let n=e.length>0?e[e.length-1]:1;for(let s=0;s<e.length-1;s++)n+=e[s]*t[s];return n}function Va(e,t,n){let s;const r=e.shape.length;let a;return s="number"==typeof t?[t,...new Array(r-1).fill(0)]:t.length<r?t.concat(new Array(r-t.length).fill(0)):t.slice(),s.forEach((e=>{l(-1!==e,(()=>"slice() does not support negative begin indexing."))})),a=null==n?new Array(r).fill(-1):"number"==typeof n?[n,...new Array(r-1).fill(-1)]:n.length<r?n.concat(new Array(r-n.length).fill(-1)):n,a=a.map(((t,n)=>t>=0?t:(l(-1===t,(()=>`Negative size values should be exactly -1 but got ${t} for the slice() size at index ${n}.`)),e.shape[n]-s[n]))),[s,a]}function Ua(e,t,n,s,r,a,i,o,l){let u=t.slice(),c=n.slice(),h=s;null==s&&(h=new Array(u.length));const p=Ea(i);if(p.length>1)throw new Error("Multiple ellipses in slice is not allowed.");if(0!==i&&0!==o)throw new Error("Using both ellipsisMask and newAxisMask is not yet supported.");if(0!==i&&0!==l)throw new Error("Using both ellipsisMask and shrinkAxisMask is not yet supported.");const d=e.length-u.length,f=Ea(o),m=e.slice();f.forEach((e=>{u[e]=0,c[e]=1,m.splice(e,0,1)}));const{begin:g,end:y,strides:b}=_a(m,p,d,u,c,h,r,a,i);u=g,c=y,h=b;const x=Ea(l);x.forEach((e=>{c[e]=u[e]+1,h[e]=1}));const w=Aa(u,c,h),k=w.filter(((e,t)=>-1===x.indexOf(t)));return{nonStrided:h.every((e=>1===e)),$begin:u,$end:c,$strides:h,size:w,newShape:m,outShape:k}}var Ga=Object.freeze({__proto__:null,assertParamsValid:Ta,maskToAxes:Ea,computeOutShape:Aa,stridesWithElidedDims:Ra,getNormalizedAxes:_a,startIndicesWithElidedDims:Oa,stopIndicesWithElidedDims:Ma,stridesForAxis:La,startForAxis:za,stopForAxis:Ba,isSliceContinous:Pa,computeFlatOffset:Wa,parseSliceParams:Va,sliceInfo:Ua});class Ha{getClassName(){return this.constructor.className}static fromConfig(e,t){return new e(t)}}class ja{constructor(){this.classNameMap={}}static getMap(){return null==ja.instance&&(ja.instance=new ja),ja.instance}static register(e){ja.getMap().classNameMap[e.className]=[e,e.fromConfig]}}function qa(e){l(null!=e.className,(()=>"Class being registered does not have the static className property defined.")),l("string"==typeof e.className,(()=>"className is required to be a string, but got type "+typeof e.className)),l(e.className.length>0,(()=>"Class being registered has an empty-string as its className, which is disallowed.")),ja.register(e)}var Ka=Object.freeze({__proto__:null,Serializable:Ha,SerializationMap:ja,registerClass:qa});function Xa(){return 32===Us.backend.floatPrecision()?.001:.1}function Ya(e,t,n){let s=!0;if(($(e)||$(t))&&(s=!1),$(e)&&$(t)&&(s=!0),s){const n=e.constructor.name,s=t.constructor.name;if(n!==s)throw new Error(`Arrays are of different type. Actual: ${n}. Expected: ${s}`)}if(Array.isArray(e)&&Array.isArray(t)){const n=Xs(e),s=Xs(t);if(!d(n,s))throw new Error(`Arrays have different shapes. Actual: [${n}]. Expected: [${s}]`)}const r=$(e)?e:h(e),a=$(t)?t:h(t);if(r.length!==a.length)throw new Error(`Arrays have different lengths actual: ${r.length} vs expected: ${a.length}.\nActual:   ${r}.\nExpected: ${a}.`);for(let e=0;e<a.length;++e){const t=r[e],s=a[e];if(!n(t,s))throw new Error(`Arrays differ: actual[${e}] = ${t}, expected[${e}] = ${s}.\nActual:   ${r}.\nExpected: ${a}.`)}}function Ja(e,t,n){if(null==n&&(n=Xa()),!Za(e,t,n))throw new Error(`Numbers differ: actual === ${e}, expected === ${t}`)}function Za(e,t,n){return!isFinite(e)&&!isFinite(t)||!(isNaN(e)||isNaN(t)||Math.abs(e-t)>n)}var Qa=Object.freeze({__proto__:null,TEST_EPSILON_FLOAT16:.1,expectArraysClose:function(e,t,n){return null==n&&(n=Xa()),Ya(e,t,((e,t)=>Za(e,t,n)))},testEpsilon:Xa,expectPromiseToFail:function(e,t){e().then((()=>t.fail()),(()=>t()))},expectArraysEqual:function(e,t){const n="string"==typeof t||"number"==typeof t||"boolean"==typeof t?[t]:t;return E(e)||E(e[0])||E(t)||E(t[0])?Ya(e,n,((e,t)=>e==t)):Ya(e,t,((e,t)=>Za(e,t,0)))},expectNumbersClose:Ja,expectValuesInRange:function(e,t,n){for(let s=0;s<e.length;s++)if(e[s]<t||e[s]>n)throw new Error(`Value out of range:${e[s]} low: ${t}, high: ${n}`)},expectArrayBuffersEqual:function(e,t){expect(new Float32Array(e)).toEqual(new Float32Array(t))},encodeStrings:function e(t){for(let n=0;n<t.length;n++){const s=t[n];Array.isArray(s)?e(s):t[n]=os(s)}return t}});const ei="3.4.0";function ti(e){K().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(e+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function ni(){return Us}function si(){return Us.memory()}function ri(e,t){return Us.tidy(e,t)}function ai(e){Ms(e).forEach((e=>e.dispose()))}function ii(e){return Us.keep(e)}function oi(e){return Us.setBackend(e)}function li(e,t,n=1){return Us.registerBackend(e,t,n)}function ui(){return Us.backend}ks=ti;const ci=tr({add_:function(e,t){let n=Zs(e,"a","add"),s=Zs(t,"b","add");[n,s]=Ds(n,s);const r={a:n,b:s};return Us.runKernel(te,r)}});const hi=tr({floorDiv_:function(e,t){let n=Zs(e,"a","floorDiv"),s=Zs(t,"b","floorDiv");[n,s]=Ds(n,s);const r={a:n,b:s};return Us.runKernel(rt,r)}});const pi=tr({div_:function(e,t){let n=Zs(e,"a","div"),s=Zs(t,"b","div");if([n,s]=Ds(n,s),"int32"===n.dtype&&"int32"===s.dtype)return hi(n,s);const r={a:n,b:s};return Us.runKernel(He,r,{})}});const di=tr({mul_:function(e,t){let n=Zs(e,"a","mul"),s=Zs(t,"b","mul");[n,s]=Ds(n,s);const r={a:n,b:s};return Us.runKernel(Wt,r)}});const fi=tr({abs_:function(e){const t=Zs(e,"x","abs");if("complex64"===t.dtype){const e={x:t};return Us.runKernel(Ie,e)}{const e={x:t};return Us.runKernel(Z,e)}}});const mi=tr({acos_:function(e){const t={x:Zs(e,"x","acos")};return Us.runKernel(Q,t)}});const gi=tr({acosh_:function(e){const t={x:Zs(e,"x","acosh")};return Us.runKernel(ee,t)}});const yi=tr({addN_:function(e){l(Array.isArray(e),(()=>"The argument passed to tf.addN() must be a list of tensors")),l(e.length>=1,(()=>`Must pass at least one tensor to tf.addN(), but got ${e.length}`));const t=e.map(((e,t)=>Zs(e,`tensors${t}`,"addN"))),n=t[0];t.forEach((e=>{if(e.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),t.forEach((e=>{if(!d(e.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));const s=t;return Us.runKernel(ne,s)}});const bi=tr({all_:function(e,t=null,n=!1){const s={x:Zs(e,"x","all","bool")},r={axis:t,keepDims:n};return Us.runKernel(se,s,r)}});const xi=tr({any_:function(e,t=null,n=!1){const s={x:Zs(e,"x","any","bool")},r={axis:t,keepDims:n};return Us.runKernel(re,s,r)}});const wi=tr({argMax_:function(e,t=0){const n={x:Zs(e,"x","argMax")},s={axis:t};return Us.runKernel(ae,n,s)}});const ki=tr({argMin_:function(e,t=0){const n={x:Zs(e,"x","argMin")},s={axis:t};return Us.runKernel(ie,n,s)}});const vi=tr({asin_:function(e){const t={x:Zs(e,"x","asin")};return Us.runKernel(oe,t)}});const Ni=tr({asinh_:function(e){const t={x:Zs(e,"x","asinh")};return Us.runKernel(le,t)}});const Ii=tr({atan_:function(e){const t={x:Zs(e,"x","atan")};return Us.runKernel(ue,t)}});const Ci=tr({atan2_:function(e,t){let n=Zs(e,"a","atan2"),s=Zs(t,"b","atan2");[n,s]=Ds(n,s);const r={a:n,b:s};return Us.runKernel(he,r)}});const $i=tr({atanh_:function(e){const t={x:Zs(e,"x","atanh")};return Us.runKernel(ce,t)}});function Si(e,t,n,s,r="NHWC",a){return Ai(e,[...t,e[3]],n,a,s,null,null,Bi(r))}function Ti(e,t,n,s,r,a,i="channelsLast"){const[o,l]=Di(t);let u;if("channelsLast"===i)u=[o,l,e[3],e[3]];else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);u=[o,l,e[1],e[1]]}return Ai(e,u,n,s,r,a,!1,i)}function Ei(e,t,n,s,r,a,i="NDHWC"){const[o,l,u]=_i(t);let c,h;if("NDHWC"===i)h="channelsLast",c=[o,l,u,e[4],e[4]];else{if("NCDHW"!==i)throw new Error(`Unknown dataFormat ${i}`);h="channelsFirst",c=[o,l,u,e[1],e[1]]}return Ri(e,c,n,s,r,!1,h,a)}function Ai(e,t,n,s,r,a,i=!1,o="channelsLast"){let[l,u,c,h]=[-1,-1,-1,-1];if("channelsLast"===o)[l,u,c,h]=e;else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);[l,h,u,c]=e}const[p,d,,f]=t,[m,g]=Di(n),[y,b]=Di(s),x=Oi(p,y),w=Oi(d,b),{padInfo:k,outHeight:v,outWidth:N}=function(e,t,n,s,r,a,i,o,l){let u,c,h;if("number"==typeof e){u={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const r=function(e,t,n,s,r){null==s&&(s=Fi(e,t,n));const a=e[0],i=e[1],o=Mi((a-t+2*s)/n+1,r),l=Mi((i-t+2*s)/n+1,r);return[o,l]}([t,n],a,s,e,o);c=r[0],h=r[1]}else if("same"===e){c=Math.ceil(t/s),h=Math.ceil(n/r);const e=Math.max(0,(c-1)*s+a-t),o=Math.max(0,(h-1)*r+i-n),l=Math.floor(e/2),p=e-l,d=Math.floor(o/2);u={top:l,bottom:p,left:d,right:o-d,type:"SAME"}}else if("valid"===e)u={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-a+1)/s),h=Math.ceil((n-i+1)/r);else{if("object"!=typeof e)throw Error(`Unknown padding parameter: ${e}`);{const p="channelsLast"===l?e[1][0]:e[2][0],d="channelsLast"===l?e[1][1]:e[2][1],f="channelsLast"===l?e[2][0]:e[3][0],m="channelsLast"===l?e[2][1]:e[3][1];u={top:p,bottom:d,left:f,right:m,type:0===p&&0===d&&0===f&&0===m?"VALID":"EXPLICIT"},c=Mi((t-a+p+d)/s+1,o),h=Mi((n-i+f+m)/r+1,o)}}return{padInfo:u,outHeight:c,outWidth:h}}(r,u,c,m,g,x,w,a,o),I=i?f*h:f;let C;return"channelsFirst"===o?C=[l,I,v,N]:"channelsLast"===o&&(C=[l,v,N,I]),{batchSize:l,dataFormat:o,inHeight:u,inWidth:c,inChannels:h,outHeight:v,outWidth:N,outChannels:I,padInfo:k,strideHeight:m,strideWidth:g,filterHeight:p,filterWidth:d,effectiveFilterHeight:x,effectiveFilterWidth:w,dilationHeight:y,dilationWidth:b,inShape:e,outShape:C,filterShape:t}}function Ri(e,t,n,s,r,a=!1,i="channelsLast",o){let[l,u,c,h,p]=[-1,-1,-1,-1,-1];if("channelsLast"===i)[l,u,c,h,p]=e;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[l,p,u,c,h]=e}const[d,f,m,,g]=t,[y,b,x]=_i(n),[w,k,v]=_i(s),N=Oi(d,w),I=Oi(f,k),C=Oi(m,v),{padInfo:$,outDepth:S,outHeight:T,outWidth:E}=function(e,t,n,s,r,a,i,o,l,u,c){let h,p,d,f;if("number"==typeof e){h={top:e,bottom:e,left:e,right:e,front:e,back:e,type:0===e?"VALID":"NUMBER"};const a=function(e,t,n,s,r,a){null==r&&(r=Fi(e,t,s));const i=e[0],o=e[1],l=e[2],u=Mi((i-t+2*r)/s+1,a),c=Mi((o-t+2*r)/s+1,a),h=Mi((l-t+2*r)/s+1,a);return[u,c,h,n]}([t,n,s,1],o,1,r,e,c);p=a[0],d=a[1],f=a[2]}else if("same"===e){p=Math.ceil(t/r),d=Math.ceil(n/a),f=Math.ceil(s/i);const e=(p-1)*r+o-t,c=(d-1)*a+l-n,m=(f-1)*i+u-s,g=Math.floor(e/2),y=e-g,b=Math.floor(c/2),x=c-b,w=Math.floor(m/2);h={top:b,bottom:x,left:w,right:m-w,front:g,back:y,type:"SAME"}}else{if("valid"!==e)throw Error(`Unknown padding parameter: ${e}`);h={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},p=Math.ceil((t-o+1)/r),d=Math.ceil((n-l+1)/a),f=Math.ceil((s-u+1)/i)}return{padInfo:h,outDepth:p,outHeight:d,outWidth:f}}(r,u,c,h,y,b,x,N,I,C,o),A=a?g*p:g;let R;return"channelsFirst"===i?R=[l,A,S,T,E]:"channelsLast"===i&&(R=[l,S,T,E,A]),{batchSize:l,dataFormat:i,inDepth:u,inHeight:c,inWidth:h,inChannels:p,outDepth:S,outHeight:T,outWidth:E,outChannels:A,padInfo:$,strideDepth:y,strideHeight:b,strideWidth:x,filterDepth:d,filterHeight:f,filterWidth:m,effectiveFilterDepth:N,effectiveFilterHeight:I,effectiveFilterWidth:C,dilationDepth:w,dilationHeight:k,dilationWidth:v,inShape:e,outShape:R,filterShape:t}}function Fi(e,t,n,s=1){const r=Oi(t,s);return Math.floor((e[0]*(n-1)-n+r)/2)}function Di(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function _i(e){return"number"==typeof e?[e,e,e]:e}function Oi(e,t){return t<=1?e:e+(e-1)*(t-1)}function Mi(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error(`Unknown roundingMode ${t}`)}}function Li(e){const[t,n,s]=Di(e);return 1===t&&1===n&&1===s}function zi(e,t){return Li(e)||Li(t)}function Bi(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw new Error(`Unknown dataFormat ${e}`)}const Pi=tr({reshape_:function(e,t){const n={x:Zs(e,"x","reshape","string_or_numeric")},s={shape:t};return Us.runKernel(rn,n,s)}});const Wi=tr({avgPool_:function(e,t,n,s,r){const a=Zs(e,"x","avgPool","float32");l(zi(n,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`));let i=a,o=!1;3===a.rank&&(o=!0,i=Pi(a,[1,a.shape[0],a.shape[1],a.shape[2]])),l(4===i.rank,(()=>`Error in avgPool: x must be rank 4 but got rank ${i.rank}.`)),null!=r&&l(f(s),(()=>`Error in avgPool: pad must be an integer when using, dimRoundingMode ${r} but got pad ${s}.`));const u={x:i},c={filterSize:t,strides:n,pad:s,dimRoundingMode:r};let h=Us.runKernel(pe,u,c);return h=qr(h,a.dtype),o?Pi(h,[h.shape[1],h.shape[2],h.shape[3]]):h}});const Vi=tr({avgPool3d_:function(e,t,n,s,r,a="NDHWC"){const i=Zs(e,"x","avgPool3d","float32");let o=i,u=!1;4===i.rank&&(u=!0,o=Pi(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),l(5===o.rank,(()=>`Error in avgPool3d: x must be rank 5 but got rank ${o.rank}.`)),l("NDHWC"===a,(()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),null!=r&&l(f(s),(()=>`Error in avgPool3d: pad must be an integer when using, dimRoundingMode ${r} but got pad ${s}.`));const c={x:o},h={filterSize:t,strides:n,pad:s,dimRoundingMode:r,dataFormat:a};let p=Us.runKernel(fe,c,h);return p=qr(p,o.dtype),u?Pi(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}});const Ui=tr({concat_:function(e,t=0){l(e.length>=1,(()=>"Pass at least one tensor to concat"));const n=Qs(e,"tensors","concat","string_or_numeric");if("complex64"===n[0].dtype&&n.forEach((e=>{if("complex64"!==e.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${e.dtype}. `)})),1===n.length)return Kr(n[0]);const s=n,r={axis:t};return Us.runKernel(Ce,s,r)}});const Gi=tr({sigmoid_:function(e){const t={x:Zs(e,"x","sigmoid")};return Us.runKernel(kn,t)}});const Hi=tr({slice_:function(e,t,n){const s=Zs(e,"x","slice","string_or_numeric");if(0===s.rank)throw new Error("Slicing scalar is not possible");const r={x:s},a={begin:t,size:n};return Us.runKernel(yn,r,a)}});const ji=tr({tanh_:function(e){const t={x:Zs(e,"x","tanh")};return Us.runKernel(_n,t)}});const qi=tr({basicLSTMCell_:function(e,t,n,s,r,a){const i=Zs(e,"forgetBias","basicLSTMCell"),o=Zs(t,"lstmKernel","basicLSTMCell"),l=Zs(n,"lstmBias","basicLSTMCell"),u=Zs(s,"data","basicLSTMCell"),c=Zs(r,"c","basicLSTMCell"),h=Zs(a,"h","basicLSTMCell"),p=Ui([u,h],1),d=ha(p,o),f=ci(d,l),m=f.shape[0],g=f.shape[1]/4,y=[m,g],b=Hi(f,[0,0],y),x=Hi(f,[0,g],y),w=Hi(f,[0,2*g],y),k=Hi(f,[0,3*g],y),v=ci(di(Gi(b),ji(x)),di(c,Gi(ci(i,w))));return[v,di(ji(v),Gi(k))]}});const Ki=tr({batchToSpaceND_:function(e,t,n){const s=Zs(e,"x","batchToSpaceND"),r=t.reduce(((e,t)=>e*t));l(s.rank>=1+t.length,(()=>`input rank is ${s.rank} but should be > than blockShape.length ${t.length}`)),l(n.length===t.length,(()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`)),l(s.shape[0]%r==0,(()=>`input tensor batch is ${s.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${r}`));const a={x:s},i={blockShape:t,crops:n};return Us.runKernel(ye,a,i)}});const Xi=tr({batchNorm_:function(e,t,n,s,r,a){null==a&&(a=.001);const i=Zs(e,"x","batchNorm"),o=Zs(t,"mean","batchNorm"),u=Zs(n,"variance","batchNorm");let c,h;null!=r&&(c=Zs(r,"scale","batchNorm")),null!=s&&(h=Zs(s,"offset","batchNorm")),l(o.rank===u.rank,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),l(null==h||o.rank===h.rank,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),l(null==c||o.rank===c.rank,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));const p={x:function(e){let t;return t=0===e.rank||1===e.rank?Pi(e,[1,1,1,e.size]):2===e.rank?Pi(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?Pi(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e,t}(i),scale:c,offset:h,mean:o,variance:u},d={varianceEpsilon:a},f=Us.runKernel(at,p,d);return Pi(f,i.shape)}});const Yi=tr({batchNorm2d_:function(e,t,n,s,r,a){const i=Zs(e,"x","batchNorm"),o=Zs(t,"mean","batchNorm"),u=Zs(n,"variance","batchNorm");let c,h;return null!=r&&(c=Zs(r,"scale","batchNorm")),null!=s&&(h=Zs(s,"offset","batchNorm")),l(2===i.rank,(()=>`Error in batchNorm2D: x must be rank 2 but got rank ${i.rank}.`)),l(2===o.rank||1===o.rank,(()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${o.rank}.`)),l(2===u.rank||1===u.rank,(()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${u.rank}.`)),null!=c&&l(2===c.rank||1===c.rank,(()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${c.rank}.`)),null!=h&&l(2===h.rank||1===h.rank,(()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${h.rank}.`)),Xi(i,o,u,h,c,a)}});const Ji=tr({batchNorm3d_:function(e,t,n,s,r,a){const i=Zs(e,"x","batchNorm"),o=Zs(t,"mean","batchNorm"),u=Zs(n,"variance","batchNorm");let c,h;return null!=r&&(c=Zs(r,"scale","batchNorm")),null!=s&&(h=Zs(s,"offset","batchNorm")),l(3===i.rank,(()=>`Error in batchNorm3D: x must be rank 3 but got rank ${i.rank}.`)),l(3===o.rank||1===o.rank,(()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${o.rank}.`)),l(3===u.rank||1===u.rank,(()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${u.rank}.`)),null!=c&&l(3===c.rank||1===c.rank,(()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${c.rank}.`)),null!=h&&l(3===h.rank||1===h.rank,(()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${h.rank}.`)),Xi(i,o,u,h,c,a)}});const Zi=tr({batchNorm4d_:function(e,t,n,s,r,a){const i=Zs(e,"x","batchNorm"),o=Zs(t,"mean","batchNorm"),u=Zs(n,"variance","batchNorm");let c,h;return null!=r&&(c=Zs(r,"scale","batchNorm")),null!=s&&(h=Zs(s,"offset","batchNorm")),l(4===i.rank,(()=>`Error in batchNorm4D: x must be rank 4 but got rank ${i.rank}.`)),l(4===o.rank||1===o.rank,(()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${o.rank}.`)),l(4===u.rank||1===u.rank,(()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${u.rank}.`)),null!=c&&l(4===c.rank||1===c.rank,(()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${c.rank}.`)),null!=h&&l(4===h.rank||1===h.rank,(()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${h.rank}.`)),Xi(i,o,u,h,c,a)}});const Qi=tr({bincount_:function(e,t,n){const s=Zs(e,"x","bincount"),r=Zs(t,"weights","bincount");l("int32"===s.dtype,(()=>`Error in bincount: input dtype must be int32, but got ${s.dtype}`)),l(n>=0,(()=>`size must be non-negative, but got ${n}.`)),l(r.size===s.size||0===r.size,(()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${s.shape}, weights shape: ${r.shape}.`));const a={x:s,weights:r},i={size:n};return Us.runKernel(be,a,i)}});const eo=tr({broadcastTo_:function(e,t){let n=Zs(e,"broadcastTo","x");const s=n.shape;if(t.some((e=>!(e>0)||e%1!=0)))throw new Error(`broadcastTo(): Invalid broadcast shape [${t}].`);if(t.length<n.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);if(t.length>n.rank){const e=n.shape.slice();for(;e.length<t.length;)e.unshift(1);n=Pi(n,e)}const r=n.shape,a=Array.from(t);for(let e=t.length-1;e>=0;e--)if(r[e]===t[e])a[e]=1;else if(1!==n.shape[e])throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${t}].`);if(0===a.map(((e,t)=>e>1?t:-1)).filter((e=>e>=0)).length)return Kr(n);const i={x:n},o={reps:a};return Us.runKernel(On,i,o)}});const to=tr({ceil_:function(e){const t={x:Zs(e,"x","ceil")};return Us.runKernel(ke,t)}});const no=tr({clipByValue_:function(e,t,n){const s=Zs(e,"x","clipByValue");l(t<=n,(()=>`Error in clip: min (${t}) must be less than or equal to max (${n}).`));const r={x:s},a={clipValueMin:t,clipValueMax:n};return Us.runKernel(ve,r,a)}});const so=tr({concat1d_:function(e){return Ui(e,0)}});const ro=tr({concat2d_:function(e,t){return Ui(e,t)}});const ao=tr({concat3d_:function(e,t){return Ui(e,t)}});const io=tr({concat4d_:function(e,t){return Ui(e,t)}});const oo=tr({conv2d_:function(e,t,n,s,r="NHWC",a=[1,1],i){const o=Zs(e,"x","conv2d"),u=Zs(t,"filter","conv2d");let c=o,h=!1;3===o.rank&&(h=!0,c=Pi(o,[1,o.shape[0],o.shape[1],o.shape[2]])),l(4===c.rank,(()=>`Error in conv2d: input must be rank 4, but got rank ${c.rank}.`)),l(4===u.rank,(()=>`Error in conv2d: filter must be rank 4, but got rank ${u.rank}.`)),null!=i&&l(f(s),(()=>`Error in conv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`));const p="NHWC"===r?c.shape[3]:c.shape[1];l(p===u.shape[2],(()=>`Error in conv2d: depth of input (${p}) must match input depth for filter ${u.shape[2]}.`)),l(zi(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`));const d={x:c,filter:u},m={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i},g=Us.runKernel($e,d,m);return h?Pi(g,[g.shape[1],g.shape[2],g.shape[3]]):g}});const lo=tr({conv1d_:function(e,t,n,s,r="NWC",a=1,i){const o=Zs(e,"x","conv1d"),u=Zs(t,"filter","conv1d");let c=o,h=!1;2===o.rank&&(h=!0,c=Pi(o,[1,o.shape[0],o.shape[1]])),l(3===c.rank,(()=>`Error in conv1d: input must be rank 3, but got rank ${c.rank}.`)),l(3===u.rank,(()=>`Error in conv1d: filter must be rank 3, but got rank ${u.rank}.`)),null!=i&&l(f(s),(()=>`Error in conv1d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`)),l(c.shape[2]===u.shape[1],(()=>`Error in conv1d: depth of input (${c.shape[2]}) must match input depth for filter ${u.shape[1]}.`)),l(zi(n,a),(()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${a}'`)),l("NWC"===r,(()=>`Error in conv1d: got dataFormat of ${r} but only NWC is currently supported.`));const p=Pi(u,[1,u.shape[0],u.shape[1],u.shape[2]]),d=Pi(c,[c.shape[0],1,c.shape[1],c.shape[2]]),m=oo(d,p,[1,n],s,"NHWC",[1,a],i);return Pi(m,h?[m.shape[2],m.shape[3]]:[m.shape[0],m.shape[2],m.shape[3]])}});const uo=tr({conv2DBackpropInput_:function(e,t,n,s,r,a="NHWC",i){l(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let o=e,u=t,c=!1;3===t.rank&&(c=!0,u=Pi(t,[1,t.shape[0],t.shape[1],t.shape[2]]),o=[1,e[0],e[1],e[2]]),l(4===o.length,(()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${o.length}.`)),l(4===u.rank,(()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${u.rank}`)),l(4===n.rank,(()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${n.rank}`));const h="NHWC"===a?o[3]:o[1],p="NHWC"===a?u.shape[3]:u.shape[1];l(h===n.shape[2],(()=>`Error in conv2dDerInput: depth of input (${h}) must match input depth for filter ${n.shape[2]}.`)),l(p===n.shape[3],(()=>`Error in conv2dDerInput: depth of output (${p}) must match output depth for filter ${n.shape[3]}.`)),null!=i&&l(f(r),(()=>`Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`));const d={dy:u,filter:n},m={strides:s,pad:r,dataFormat:a,dimRoundingMode:i,inputShape:o},g=Us.runKernel(Te,d,m);return c?Pi(g,[g.shape[1],g.shape[2],g.shape[3]]):g}});const co=tr({conv2dTranspose_:function(e,t,n,s,r,a){const i=Zs(e,"x","conv2dTranspose"),o=Zs(t,"filter","conv2dTranspose");return uo(n,i,o,s,r,"NHWC",a)}});const ho=tr({conv3d_:function(e,t,n,s,r="NDHWC",a=[1,1,1]){const i=Zs(e,"x","conv3d"),o=Zs(t,"filter","conv3d");let u=i,c=!1;4===i.rank&&(c=!0,u=Pi(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),l(5===u.rank,(()=>`Error in conv3d: input must be rank 5, but got rank ${u.rank}.`)),l(5===o.rank,(()=>`Error in conv3d: filter must be rank 5, but got rank ${o.rank}.`)),l(u.shape[4]===o.shape[3],(()=>`Error in conv3d: depth of input (${u.shape[4]}) must match input depth for filter ${o.shape[3]}.`)),l(zi(n,a),(()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),l("NDHWC"===r,(()=>`Error in conv3d: got dataFormat of ${r} but only NDHWC is currently supported.`));const h={x:u,filter:o},p={strides:n,pad:s,dataFormat:r,dilations:a},d=Us.runKernel(Ee,h,p);return c?Pi(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}});const po=tr({conv3DBackpropInput_:function(e,t,n,s,r){l(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let a=e,i=t,o=!1;4===t.rank&&(o=!0,i=Pi(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),a=[1,e[0],e[1],e[2],e[3]]);const u=a[4],c=i.shape[4];l(5===a.length,(()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${a.length}.`)),l(5===i.rank,(()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${i.rank}`)),l(5===n.rank,(()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${n.rank}`)),l(u===n.shape[3],(()=>`Error in conv3dDerInput: depth of input (${u}) must match input depth for filter ${n.shape[3]}.`)),l(c===n.shape[4],(()=>`Error in conv3dDerInput: depth of output (${c}) must match output depth for filter ${n.shape[4]}.`));const h={dy:i,filter:n},p={pad:r,strides:s,inputShape:a},d=Us.runKernel(Re,h,p);return o?Pi(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}});const fo=tr({conv3dTranspose_:function(e,t,n,s,r){const a=Zs(e,"x","conv3dTranspose"),i=Zs(t,"filter","conv3dTranspose");return po(n,a,i,s,r)}});const mo=tr({cos_:function(e){const t={x:Zs(e,"x","cos")};return Us.runKernel(Fe,t)}});const go=tr({cosh_:function(e){const t={x:Zs(e,"x","cosh")};return Us.runKernel(De,t)}});const yo=tr({cumsum_:function(e,t=0,n=!1,s=!1){const r={x:Zs(e,"x","cumsum")},a={axis:t,exclusive:n,reverse:s};return Us.runKernel(_e,r,a)}});const bo=tr({denseBincount_:function(e,t,n,s=!1){const r=Zs(e,"x","denseBincount"),a=Zs(t,"weights","denseBincount");l("int32"===r.dtype,(()=>`Error in denseBincount: input dtype must be int32, but got ${r.dtype}`)),l(r.rank<=2,(()=>`Error in denseBincount: input must be at most rank 2, but got rank ${r.rank}.`)),l(n>=0,(()=>`size must be non-negative, but got ${n}.`)),l(a.size===r.size||0===a.size,(()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${r.shape}, weights shape: ${a.shape}.`));const i={x:r,weights:a},o={size:n,binaryOutput:s};return Us.runKernel(Me,i,o)}});const xo=tr({depthToSpace_:function(e,t,n="NHWC"){const s=Zs(e,"x","depthToSpace"),r="NHWC"===n?s.shape[1]:s.shape[2],a="NHWC"===n?s.shape[2]:s.shape[3],i="NHWC"===n?s.shape[3]:s.shape[1];l(r*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${r} and ${t}  for depthToSpace with input shape\n    ${s.shape}`)),l(a*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${a} and ${t} for depthToSpace with input shape\n        ${s.shape}`)),l(i%(t*t)==0,(()=>`Dimension size must be evenly divisible by ${t*t} but is ${i} for depthToSpace with input shape ${s.shape}`));const o={x:s},u={blockSize:t,dataFormat:n};return Us.runKernel(Le,o,u)}});const wo=tr({depthwiseConv2d_:function(e,t,n,s,r="NHWC",a=[1,1],i){const o=Zs(e,"x","depthwiseConv2d"),u=Zs(t,"filter","depthwiseConv2d");let c=o,h=!1;3===o.rank&&(h=!0,c=Pi(o,[1,o.shape[0],o.shape[1],o.shape[2]])),l(4===c.rank,(()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${c.rank}.`)),l(4===u.rank,(()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${u.rank}.`)),l(c.shape[3]===u.shape[2],(()=>`Error in depthwiseConv2d: number of input channels (${c.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`)),null!=i&&l(f(s),(()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`));const p={x:c,filter:u},d={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i},m=Us.runKernel(ze,p,d);return h?Pi(m,[m.shape[1],m.shape[2],m.shape[3]]):m}});const ko=tr({diag_:function(e){const t={x:Zs(e,"x","diag")};return Us.runKernel(We,t)}});const vo=tr({dilation2d_:function(e,t,n,s,r=[1,1],a="NHWC"){const i=Zs(e,"x","dilation2d"),o=Zs(t,"filter","dilation2d");l(3===i.rank||4===i.rank,(()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${i.rank}.`)),l(3===o.rank,(()=>`Error in dilation2d: filter must be rank 3, but got rank ${o.rank}.`)),l("NHWC"===a,(()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${a}`));let u=i,c=!1;3===i.rank&&(u=Pi(i,[1,i.shape[0],i.shape[1],i.shape[2]]),c=!0);const h={x:u,filter:o},p={strides:n,pad:s,dilations:r},d=Us.runKernel(Ve,h,p);return c?Pi(d,[d.shape[1],d.shape[2],d.shape[3]]):d}});function No(e,t){const n=e.length,s=[];for(let r=0;r<n;r++){const a=n-1-r,i=e[a]||1;(t[t.length-1-r]||1)>1&&1===i&&s.unshift(a)}return s}function Io(e,t){const n=[];for(let s=0;s<t.length;s++){const r=e[e.length-s-1],a=t.length-s-1,i=t[a];(null==r||1===r&&i>1)&&n.unshift(a)}return n}function Co(e,t){const n=[],s=Math.max(e.length,t.length);for(let r=0;r<s;r++){let s=e[e.length-r-1];null==s&&(s=1);let a=t[t.length-r-1];if(null==a&&(a=1),1===s)n.unshift(a);else if(1===a)n.unshift(s);else{if(s!==a){throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`)}n.unshift(s)}}return n}const $o=tr({equal_:function(e,t){let n=Zs(e,"a","equal"),s=Zs(t,"b","equal");[n,s]=Ds(n,s),Co(n.shape,s.shape);const r={a:n,b:s};return Us.runKernel(Ye,r)}});const So=tr({where_:function(e,t,n){const s=Zs(t,"a","where"),r=Zs(n,"b","where"),a=Zs(e,"condition","where","bool"),i=Co(Co(a.shape,s.shape),r.shape),o={condition:eo(a,i),t:eo(s,i),e:eo(r,i)};return Us.runKernel(mn,o)}});const To=tr({zerosLike_:function(e){const t={x:Zs(e,"x","zerosLike")};return Us.runKernel(Vn,t)}});const Eo=tr({divNoNan_:function(e,t){let n=Zs(e,"a","div"),s=Zs(t,"b","div");[n,s]=Ds(n,s);const r=pi(n,s),a=To(r),i=$o(s,a);return So(i,a,r)}});const Ao=tr({dot_:function(e,t){const n=Zs(e,"t1","dot"),s=Zs(t,"t2","dot");l(!(1!==n.rank&&2!==n.rank||1!==s.rank&&2!==s.rank),(()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${s.rank}.`));const r=1===n.rank?n.size:n.shape[1],a=1===s.rank?s.size:s.shape[0];if(l(r===a,(()=>`Error in dot: inner dimensions of inputs must match, but got ${r} and ${a}.`)),1===n.rank&&1===s.rank){const e=Pi(n,[1,-1]),t=Pi(s,[-1,1]),r=ha(e,t);return Pi(r,[])}if(1===n.rank&&2===s.rank){const e=Pi(n,[1,-1]),t=Pi(s,[s.shape[0],s.shape[1]]),r=ha(e,t);return Pi(r,[r.size])}if(2===n.rank&&1===s.rank){const e=Pi(s,[-1,1]),t=ha(n,e);return Pi(t,[t.size])}{const e=Pi(s,[s.shape[0],s.shape[1]]);return ha(n,e)}}});const Ro=tr({einsum_:function(e,...t){const n=t.map(((e,t)=>Zs(e,`tensors${t}`,"einsum"))),s={equation:e};return Us.runKernel(je,n,s)}});const Fo=tr({elu_:function(e){const t={x:Zs(e,"x","elu")};return Us.runKernel(qe,t)}});const Do=tr({erf_:function(e){let t=Zs(e,"x","erf");l("int32"===t.dtype||"float32"===t.dtype,(()=>"Input dtype must be `int32` or `float32`.")),"int32"===t.dtype&&(t=qr(t,"float32"));const n={x:t};return Us.runKernel(Xe,n)}});const _o=tr({exp_:function(e){const t={x:Zs(e,"x","exp")};return Us.runKernel(Je,t)}});const Oo=tr({expandDims_:function(e,t=0){const n=Zs(e,"x","expandDims","string_or_numeric");l(t<=n.rank,(()=>"Axis must be <= rank of the tensor"));const s={input:n},r={dim:t};return Us.runKernel(Ze,s,r)}});const Mo=tr({expm1_:function(e){const t={x:Zs(e,"x","expm1")};return Us.runKernel(Qe,t)}});const Lo=tr({tile_:function(e,t){const n=Zs(e,"x","tile","string_or_numeric");l(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`));const s={x:n},r={reps:t};return Us.runKernel(On,s,r)}});const zo=tr({eye_:function(e,t,n,s="float32"){null==t&&(t=e);const r=jr([e,t],s),a=e<=t?e:t;for(let e=0;e<a;++e)r.set(1,e,e);const i=Pi(r.toTensor(),[e,t]);if(null==n)return i;if(1===n.length)return Lo(Oo(i,0),[n[0],1,1]);if(2===n.length)return Lo(Oo(Oo(i,0),0),[n[0],n[1],1,1]);if(3===n.length)return Lo(Oo(Oo(Oo(i,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}});function Bo(e,t,n){const s={shape:e,value:t,dtype:n};return Us.runKernel(tt,{},s)}const Po=tr({floor_:function(e){const t={x:Zs(e,"x","floor")};return Us.runKernel(st,t)}});const Wo=tr({gather_:function(e,t,n=0,s=0){const r={x:Zs(e,"x","gather"),indices:Zs(t,"indices","gather","int32")},a={axis:n,batchDims:s};return Us.runKernel(it,r,a)}});const Vo=tr({greater_:function(e,t){let n=Zs(e,"a","greater"),s=Zs(t,"b","greater");[n,s]=Ds(n,s),Co(n.shape,s.shape);const r={a:n,b:s};return Us.runKernel(lt,r)}});const Uo=tr({greaterEqual_:function(e,t){let n=Zs(e,"a","greaterEqual"),s=Zs(t,"b","greaterEqual");[n,s]=Ds(n,s),Co(n.shape,s.shape);const r={a:n,b:s};return Us.runKernel(ut,r)}});const Go=tr({imag_:function(e){const t={input:Zs(e,"input","imag")};return Us.runKernel(pt,t)}});const Ho=tr({isFinite_:function(e){const t={x:Zs(e,"x","isFinite")};return Us.runKernel(dt,t)}});const jo=tr({isInf_:function(e){const t={x:Zs(e,"x","isInf")};return Us.runKernel(ft,t)}});const qo=tr({isNaN_:function(e){const t={x:Zs(e,"x","isNaN")};return Us.runKernel(mt,t)}});const Ko=tr({leakyRelu_:function(e,t=.2){const n={x:Zs(e,"x","leakyRelu")},s={alpha:t};return Us.runKernel(gt,n,s)}});const Xo=tr({less_:function(e,t){let n=Zs(e,"a","less"),s=Zs(t,"b","less");[n,s]=Ds(n,s),Co(n.shape,s.shape);const r={a:n,b:s};return Us.runKernel(yt,r)}});const Yo=tr({lessEqual_:function(e,t){let n=Zs(e,"a","lessEqual"),s=Zs(t,"b","lessEqual");[n,s]=Ds(n,s),Co(n.shape,s.shape);const r={a:n,b:s};return Us.runKernel(bt,r)}});function Jo(e,t,n){if(n<=0)throw new Error("The number of values should be positive.");const s={start:e,stop:t,num:n};return Us.runKernel(xt,{},s)}const Zo=tr({localResponseNormalization_:function(e,t=5,n=1,s=1,r=.5){const a=Zs(e,"x","localResponseNormalization");l(4===a.rank||3===a.rank,(()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${a.rank}.`)),l(f(t),(()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`));let i=a,o=!1;3===a.rank&&(o=!0,i=Pi(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const u={x:i},c={depthRadius:t,bias:n,alpha:s,beta:r},h=Us.runKernel($t,u,c);return o?Pi(h,[h.shape[1],h.shape[2],h.shape[3]]):h}});const Qo=tr({log_:function(e){const t={x:Zs(e,"x","log")};return Us.runKernel(wt,t)}});const el=tr({log1p_:function(e){const t={x:Zs(e,"x","log1p")};return Us.runKernel(kt,t)}});function tl(e,t){l(D(e),(()=>"The f passed in variableGrads(f) must be a function")),l(null==t||Array.isArray(t)&&t.every((e=>e instanceof Is)),(()=>"The varList passed in variableGrads(f, varList) must be an array of variables"));const n=null!=t;if(!n){t=[];for(const e in Us.registeredVariables)t.push(Us.registeredVariables[e])}const s=n?t.filter((e=>!e.trainable)):null,r=t.length;l((t=t.filter((e=>e.trainable))).length>0,(()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${r} variables is trainable.`));const{value:a,grads:i}=Us.gradients(e,t,null,!0);l(i.some((e=>null!=e)),(()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().")),l(0===a.rank,(()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${a.rank} tensor`));const o={};return t.forEach(((e,t)=>{null!=i[t]&&(o[e.name]=i[t])})),null!=s&&s.forEach((e=>o[e.name]=null)),{value:a,grads:o}}function nl(e){return Us.customGrad(e)}function sl(e){if(e.filter((e=>null==e)).length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.")}const rl=tr({neg_:function(e){const t={x:Zs(e,"x","neg")};return Us.runKernel(Vt,t)}});const al=tr({softplus_:function(e){const t={x:Zs(e,"x","softplus")};return Us.runKernel(vn,t)}});const il=tr({logSigmoid_:function(e){const t=Zs(e,"x","logSigmoid");return nl((e=>({value:rl(al(rl(e))),gradFunc:t=>di(t,Gi(rl(e)))})))(t)}});const ol=tr({max_:function(e,t=null,n=!1){const s={x:Zs(e,"x","max")},r={reductionIndices:t,keepDims:n};return Us.runKernel(Tt,s,r)}});const ll=tr({sub_:function(e,t){let n=Zs(e,"a","sub"),s=Zs(t,"b","sub");[n,s]=Ds(n,s);const r={a:n,b:s};return Us.runKernel(An,r)}});const ul=tr({sum_:function(e,t=null,n=!1){let s=Zs(e,"x","sum");"bool"===s.dtype&&(s=qr(s,"int32"));const r={x:s},a={axis:t,keepDims:n};return Us.runKernel(In,r,a)}});const cl=tr({logSoftmax_:function(e,t=-1){const n=Zs(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);return nl(((e,n)=>{const s=ol(e,t,!0),r=ll(e,s),a=ll(qr(r,"float32"),Qo(ul(_o(r),t,!0)));n([a]);return{value:a,gradFunc:(e,n)=>{const[s]=n,r=_o(s);return ll(e,di(ul(e,t,!0),r))}}}))(n)}});function hl(e,t){for(let n=0;n<e.length;++n)if(e[e.length-n-1]!==t-1-n)return!1;return!0}function pl(e,t,n){const s=e.length+t.length,r=[];let a=0,i=0;for(let o=0;o<s;o++)-1===n.indexOf(o)?r.push(e[a++]):r.push(t[i++]);return r}function dl(e,t){const n=[],s=e.length;for(let r=0;r<s;r++)-1===t.indexOf(r)&&n.push(e[r]);return[n,t.map((t=>e[t]))]}function fl(e,t){return pl(e,t.map((e=>1)),t)}function ml(e,t,n){l(hl(t,n),(()=>`${e} supports only inner-most axes for now. Got axes ${t} and rank-${n} input.`))}function gl(e,t){if(hl(e,t))return null;const n=[];for(let s=0;s<t;++s)-1===e.indexOf(s)&&n.push(s);return e.forEach((e=>n.push(e))),n}function yl(e){return e.map(((e,t)=>[t,e])).sort(((e,t)=>e[1]-t[1])).map((e=>e[0]))}function bl(e,t){const n=[];for(let s=t-e;s<t;++s)n.push(s);return n}const xl=tr({logSumExp_:function(e,t=null,n=!1){const s=Zs(e,"x","logSumExp"),r=x(t,s.shape),a=ol(s,r,!0),i=ll(s,a),o=_o(i),l=ul(o,r),u=Qo(l),c=ci(Pi(a,u.shape),u);if(n){const e=fl(c.shape,r);return Pi(c,e)}return c}});const wl=tr({logicalAnd_:function(e,t){const n=Zs(e,"a","logicalAnd","bool"),s=Zs(t,"b","logicalAnd","bool");Co(n.shape,s.shape);const r={a:n,b:s};return Us.runKernel(vt,r)}});const kl=tr({logicalNot_:function(e){const t={x:Zs(e,"x","logicalNot","bool")};return Us.runKernel(Nt,t)}});const vl=tr({logicalOr_:function(e,t){const n=Zs(e,"a","logicalOr","bool"),s=Zs(t,"b","logicalOr","bool");Co(n.shape,s.shape);const r={a:n,b:s};return Us.runKernel(It,r)}});const Nl=tr({logicalXor_:function(e,t){const n=Zs(e,"a","logicalXor","bool"),s=Zs(t,"b","logicalXor","bool");return Co(n.shape,s.shape),wl(vl(e,t),kl(wl(e,t)))}});const Il=tr({maxPool_:function(e,t,n,s,r){const a=Zs(e,"x","maxPool");let i=a,o=!1;3===a.rank&&(o=!0,i=Pi(a,[1,a.shape[0],a.shape[1],a.shape[2]])),l(4===i.rank,(()=>`Error in maxPool: input must be rank 4 but got rank ${i.rank}.`)),l(zi(n,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`)),null!=r&&l(f(s),(()=>`Error in maxPool: pad must be an integer when using, dimRoundingMode ${r} but got pad ${s}.`));const u={x:i},c={filterSize:t,strides:n,pad:s,dimRoundingMode:r},h=Us.runKernel(At,u,c);return o?Pi(h,[h.shape[1],h.shape[2],h.shape[3]]):h}});const Cl=tr({maxPool3d_:function(e,t=[1,1,1],n,s,r,a="NDHWC"){const i=Zs(e,"x","maxPool3d");let o=i,u=!1;4===i.rank&&(u=!0,o=Pi(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),l(5===o.rank,(()=>`Error in maxPool3d: x must be rank 5 but got rank ${o.rank}.`)),l("NDHWC"===a,(()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),null!=r&&l(f(s),(()=>`Error in maxPool3d: pad must be an integer when using, dimRoundingMode ${r} but got pad ${s}.`));const c={x:o},h={filterSize:t,strides:n,pad:s,dimRoundingMode:r,dataFormat:a},p=Us.runKernel(Ft,c,h);return u?Pi(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}});const $l=tr({maxPoolWithArgmax_:function(e,t,n,s,r=!1){const a={x:Zs(e,"x","maxPoolWithArgmax")},i={filterSize:t,strides:n,pad:s,includeBatchInIndex:r},o=Us.runKernel(_t,a,i);return{result:o[0],indexes:o[1]}}});const Sl=tr({maximum_:function(e,t){let n=Zs(e,"a","maximum"),s=Zs(t,"b","maximum");[n,s]=Ds(n,s),"bool"===n.dtype&&(n=qr(n,"int32"),s=qr(s,"int32")),Co(n.shape,s.shape);const r={a:n,b:s};return Us.runKernel(Et,r)}});const Tl=tr({mean_:function(e,t=null,n=!1){const s={x:Zs(e,"x","mean")},r={axis:t,keepDims:n};return Us.runKernel(Ot,s,r)}});function El(e,t="float32"){if("complex64"===t){const t=El(e,"float32"),n=El(e,"float32");return nr(t,n)}const n=B(p(e),t);return Us.makeTensor(n,e,t)}function Al(e,t="float32"){if("complex64"===t){const t=Al(e,"float32"),n=El(e,"float32");return nr(t,n)}const n=z(p(e),t);return Us.makeTensor(n,e,t)}const Rl=tr({min_:function(e,t=null,n=!1){const s={x:Zs(e,"x","min")},r={axis:t,keepDims:n};return Us.runKernel(Mt,s,r)}});const Fl=tr({minimum_:function(e,t){let n=Zs(e,"a","minimum"),s=Zs(t,"b","minimum");[n,s]=Ds(n,s),"bool"===n.dtype&&(n=qr(n,"int32"),s=qr(s,"int32")),Co(n.shape,s.shape);const r={a:n,b:s};return Us.runKernel(Lt,r)}});const Dl=tr({mirrorPad_:function(e,t,n){l("reflect"===n||"symmetric"===n,(()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`));const s=Zs(e,"x","mirrorPad");if(0===s.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");l(t.length===s.rank,(()=>`Padding doesn't match input. Must be ${s.rank}. Got ${t.length}.`));const r="reflect"===n?1:0;for(let e=0;e<s.rank;e++)l(2===t[e].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),l(t[e][0]>=0&&t[e][0]<=s.shape[e]-r&&t[e][1]>=0&&t[e][1]<=s.shape[e]-r,(()=>`Padding in dimension ${e} cannot be greater than or equal to ${s.shape[e]-r} or less than 0 for input of shape ${s.shape}`));const a={paddings:t,mode:n},i={x:s};return Us.runKernel(zt,i,a)}});const _l=tr({mod_:function(e,t){let n=Zs(e,"a","mod"),s=Zs(t,"b","mod");[n,s]=Ds(n,s);const r={a:n,b:s};return Us.runKernel(Bt,r)}});const Ol=tr({square_:function(e){const t=Zs(e,"x","square");return Us.runKernel("Square",{x:t},{})}});const Ml=tr({moments_:function(e,t=null,n=!1){const s=x(t,(e=Zs(e,"x","moments")).shape),r=Tl(e,s,n);let a=r.shape;n||(a=fl(r.shape,s));const i=Ol(ll(qr(e,"float32"),Pi(r,a)));return{mean:r,variance:Tl(i,s,n)}}});const Ll=tr({multiRNNCell_:function(e,t,n,s){const r=Zs(t,"data","multiRNNCell"),a=Qs(n,"c","multiRNNCell"),i=Qs(s,"h","multiRNNCell");let o=r;const l=[];for(let t=0;t<e.length;t++){const n=e[t](o,a[t],i[t]);l.push(n[0]),l.push(n[1]),o=n[1]}const u=[],c=[];for(let e=0;e<l.length;e+=2)u.push(l[e]),c.push(l[e+1]);return[u,c]}});const zl=tr({multinomial_:function(e,t,n,s=!1){const r=Zs(e,"logits","multinomial"),a=r.size,i=r.rank;if(a<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${a}.`);if(i>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${i}`);n=n||Math.random();const o={logits:1===i?Pi(r,[1,-1]):r},l={numSamples:t,seed:n,normalized:s},u=Us.runKernel(Pt,o,l);return 1===i?Pi(u,[u.size]):u}});const Bl=tr({notEqual_:function(e,t){let n=Zs(e,"a","notEqual"),s=Zs(t,"b","notEqual");[n,s]=Ds(n,s),Co(n.shape,s.shape);const r={a:n,b:s};return Us.runKernel(Ut,r)}});const Pl=tr({onesLike_:function(e){const t={x:Zs(e,"x","onesLike")};return Us.runKernel(qt,t)}});const Wl=tr({outerProduct_:function(e,t){const n=Zs(e,"v1","outerProduct"),s=Zs(t,"v2","outerProduct");l(1===n.rank&&1===s.rank,(()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${s.rank}.`));const r=Pi(n,[-1,1]),a=Pi(s,[1,-1]);return ha(r,a)}});const Vl=tr({pad_:function(e,t,n=0){const s=Zs(e,"x","pad");if(0===s.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const r={paddings:t,constantValue:n},a={x:s};return Us.runKernel(Yt,a,r)}});const Ul=tr({pad1d_:function(e,t,n=0){return l(2===t.length,(()=>"Invalid number of paddings. Must be length of 2.")),Vl(e,[t],n)}});const Gl=tr({pad2d_:function(e,t,n=0){return l(2===t.length&&2===t[0].length&&2===t[1].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),Vl(e,t,n)}});const Hl=tr({pad3d_:function(e,t,n=0){return l(3===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),Vl(e,t,n)}});const jl=tr({pad4d_:function(e,t,n=0){return l(4===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length&&2===t[3].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),Vl(e,t,n)}});const ql=tr({spaceToBatchND_:function(e,t,n){const s=Zs(e,"x","spaceToBatchND");l(s.rank>=1+t.length,(()=>`input rank ${s.rank} should be > than [blockShape] ${t.length}`)),l(n.length===t.length,(()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`)),l(s.shape.reduce(((e,s,r)=>r>0&&r<=t.length?e&&(s+n[r-1][0]+n[r-1][1])%t[r-1]==0:e),!0),(()=>`input spatial dimensions ${s.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`));const r={x:s},a={blockShape:t,paddings:n};return Us.runKernel(Cn,r,a)}});const Kl=tr({pool_:function(e,t,n,s,r,a){null==r&&(r=[1,1]),null==a&&(a=1),0===s&&(s="valid");const i=Zs(e,"x","maxPool");let o=i,u=!1;3===i.rank&&(u=!0,o=Pi(i,[1,i.shape[0],i.shape[1],i.shape[2]])),l(zi(a,r),(()=>`Error in pool: Either strides or dilations must be 1. Got strides ${a} and dilations '${r}'`));const c=Ti(o.shape,t,a,r,s),h=[c.dilationHeight,c.dilationWidth];let p;p="same"===s?function(e,t){const n=e.map(((e,n)=>e+(e-1)*(t[n]-1))).map((e=>e-1)),s=n.map((e=>Math.floor(e/2))),r=n.map(((e,t)=>e-s[t]));return n.map(((e,t)=>[s[t],r[t]]))}([c.filterHeight,c.filterWidth],h):[[0,0],[0,0]];const d=1===h[0]&&1===h[1],[f,m]=function(e,t,n){const s=n.map((e=>e[0])),r=n.map((e=>e[1])),a=e.concat(s,r),i=t.map(((e,t)=>(e-a[t]%e)%e)),o=r.map(((e,t)=>e+i[t])),l=t.map(((e,t)=>[s[t],o[t]])),u=t.map(((e,t)=>[0,i[t]]));return[l,u]}([c.inHeight,c.inWidth],h,p),g=d?s:"valid",y=d?o:ql(o,h,f),b=("avg"===n?()=>Wi(y,t,a,g):()=>Il(y,t,a,g))(),x=d?b:Ki(b,h,m);return u?Pi(x,[x.shape[1],x.shape[2],x.shape[3]]):x}});const Xl=tr({pow_:function(e,t){let n=Zs(e,"base","pow"),s=Zs(t,"exp","pow");[n,s]=Ds(n,s);const r={a:n,b:s};return Us.runKernel(Jt,r)}});const Yl=tr({prelu_:function(e,t){const n={x:Zs(e,"x","prelu"),alpha:Zs(t,"alpha","prelu")};return Us.runKernel(Zt,n)}});const Jl=tr({prod_:function(e,t=null,n=!1){let s=Zs(e,"x","prod");"bool"===s.dtype&&(s=qr(s,"int32"));const r={x:s},a={axis:t,keepDims:n};return Us.runKernel(Qt,r,a)}});const Zl=tr({rand_:function(e,t,n){const s=p(e);let r=null;if(null==n||"float32"===n)r=new Float32Array(s);else if("int32"===n)r=new Int32Array(s);else{if("bool"!==n)throw new Error(`Unknown data type ${n}`);r=new Uint8Array(s)}for(let e=0;e<s;e++)r[e]=t();return Us.makeTensor(r,e,n)}});"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self&&self;function Ql(e,t){return e(t={exports:{}},t.exports),t.exports}var eu=Ql((function(e){!function(e,t,n){function s(e){var t,n=this,s=(t=4022871197,function(e){e=e.toString();for(var n=0;n<e.length;n++){var s=.02519603282416938*(t+=e.charCodeAt(n));s-=t=s>>>0,t=(s*=t)>>>0,t+=4294967296*(s-=t)}return 2.3283064365386963e-10*(t>>>0)});n.next=function(){var e=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=s(" "),n.s1=s(" "),n.s2=s(" "),n.s0-=s(e),n.s0<0&&(n.s0+=1),n.s1-=s(e),n.s1<0&&(n.s1+=1),n.s2-=s(e),n.s2<0&&(n.s2+=1),s=null}function r(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function a(e,t){var n=new s(e),a=t&&t.state,i=n.next;return i.int32=function(){return 4294967296*n.next()|0},i.double=function(){return i()+11102230246251565e-32*(2097152*i()|0)},i.quick=i,a&&("object"==typeof a&&r(a,n),i.state=function(){return r(n,{})}),i}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.alea=a}(0,e,!1)})),tu=Ql((function(e){!function(e,t,n){function s(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var s=0;s<n.length+64;s++)t.x^=0|n.charCodeAt(s),t.next()}function r(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function a(e,t){var n=new s(e),a=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,a&&("object"==typeof a&&r(a,n),i.state=function(){return r(n,{})}),i}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.xor128=a}(0,e,!1)})),nu=Ql((function(e){!function(e,t,n){function s(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var s=0;s<n.length+64;s++)t.x^=0|n.charCodeAt(s),s==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function r(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function a(e,t){var n=new s(e),a=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,a&&("object"==typeof a&&r(a,n),i.state=function(){return r(n,{})}),i}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.xorwow=a}(0,e,!1)})),su=Ql((function(e){!function(e,t,n){function s(e){var t=this;t.next=function(){var e,n,s=t.x,r=t.i;return e=s[r],n=(e^=e>>>7)^e<<24,n^=(e=s[r+1&7])^e>>>10,n^=(e=s[r+3&7])^e>>>3,n^=(e=s[r+4&7])^e<<7,e=s[r+7&7],n^=(e^=e<<13)^e<<9,s[r]=n,t.i=r+1&7,n},function(e,t){var n,s=[];if(t===(0|t))s[0]=t;else for(t=""+t,n=0;n<t.length;++n)s[7&n]=s[7&n]<<15^t.charCodeAt(n)+s[n+1&7]<<13;for(;s.length<8;)s.push(0);for(n=0;n<8&&0===s[n];++n);for(8==n?s[7]=-1:s[n],e.x=s,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function r(e,t){return t.x=e.x.slice(),t.i=e.i,t}function a(e,t){null==e&&(e=+new Date);var n=new s(e),a=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,a&&(a.x&&r(a,n),i.state=function(){return r(n,{})}),i}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.xorshift7=a}(0,e,!1)})),ru=Ql((function(e){!function(e,t,n){function s(e){var t=this;t.next=function(){var e,n,s=t.w,r=t.X,a=t.i;return t.w=s=s+1640531527|0,n=r[a+34&127],e=r[a=a+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=r[a]=n^e,t.i=a,n+(s^s>>>16)|0},function(e,t){var n,s,r,a,i,o=[],l=128;for(t===(0|t)?(s=t,t=null):(t+="\0",s=0,l=Math.max(l,t.length)),r=0,a=-32;a<l;++a)t&&(s^=t.charCodeAt((a+32)%t.length)),0===a&&(i=s),s^=s<<10,s^=s>>>15,s^=s<<4,s^=s>>>13,a>=0&&(i=i+1640531527|0,r=0==(n=o[127&a]^=s+i)?r+1:0);for(r>=128&&(o[127&(t&&t.length||0)]=-1),r=127,a=512;a>0;--a)s=o[r+34&127],n=o[r=r+1&127],s^=s<<13,n^=n<<17,s^=s>>>15,n^=n>>>12,o[r]=s^n;e.w=i,e.X=o,e.i=r}(t,e)}function r(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function a(e,t){null==e&&(e=+new Date);var n=new s(e),a=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,a&&(a.X&&r(a,n),i.state=function(){return r(n,{})}),i}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.xor4096=a}(0,e,!1)})),au=Ql((function(e){!function(e,t,n){function s(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,s=t.d,r=t.a;return e=e<<25^e>>>7^n,n=n-s|0,s=s<<24^s>>>8^r,r=r-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-s|0,t.d=s<<16^n>>>16^r,t.a=r-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var s=0;s<n.length+20;s++)t.b^=0|n.charCodeAt(s),t.next()}function r(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function a(e,t){var n=new s(e),a=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,a&&("object"==typeof a&&r(a,n),i.state=function(){return r(n,{})}),i}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.tychei=a}(0,e,!1)})),iu=Ql((function(e){!function(t,n){var s,r=this,a=256,i=n.pow(a,6),o=n.pow(2,52),l=2*o,u=255;function c(e,u,c){var g=[],y=f(d((u=1==u?{entropy:!0}:u||{}).entropy?[e,m(t)]:null==e?function(){try{var e;return s&&(e=s.randomBytes)?e=e(a):(e=new Uint8Array(a),(r.crypto||r.msCrypto).getRandomValues(e)),m(e)}catch(e){var n=r.navigator,i=n&&n.plugins;return[+new Date,r,i,r.screen,m(t)]}}():e,3),g),b=new h(g),x=function(){for(var e=b.g(6),t=i,n=0;e<o;)e=(e+n)*a,t*=a,n=b.g(1);for(;e>=l;)e/=2,t/=2,n>>>=1;return(e+n)/t};return x.int32=function(){return 0|b.g(4)},x.quick=function(){return b.g(4)/4294967296},x.double=x,f(m(b.S),t),(u.pass||c||function(e,t,s,r){return r&&(r.S&&p(r,b),e.state=function(){return p(b,{})}),s?(n.random=e,t):e})(x,y,"global"in u?u.global:this==n,u.state)}function h(e){var t,n=e.length,s=this,r=0,i=s.i=s.j=0,o=s.S=[];for(n||(e=[n++]);r<a;)o[r]=r++;for(r=0;r<a;r++)o[r]=o[i=u&i+e[r%n]+(t=o[r])],o[i]=t;(s.g=function(e){for(var t,n=0,r=s.i,i=s.j,o=s.S;e--;)t=o[r=u&r+1],n=n*a+o[u&(o[r]=o[i=u&i+t])+(o[i]=t)];return s.i=r,s.j=i,n})(a)}function p(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function d(e,t){var n,s=[],r=typeof e;if(t&&"object"==r)for(n in e)try{s.push(d(e[n],t-1))}catch(e){}return s.length?s:"string"==r?e:e+"\0"}function f(e,t){for(var n,s=e+"",r=0;r<s.length;)t[u&r]=u&(n^=19*t[u&r])+s.charCodeAt(r++);return m(t)}function m(e){return String.fromCharCode.apply(0,e)}if(n.seedrandom=c,f(n.random(),t),e.exports){e.exports=c;try{s=require("crypto")}catch(e){}}else 0}([],Math)}));iu.alea=eu,iu.xor128=tu,iu.xorwow=nu,iu.xorshift7=su,iu.xor4096=ru,iu.tychei=au;var ou=iu.alea;class lu{constructor(e,t,n,s,r){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=s,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const a=r||Math.random();this.random=ou(a.toString())}nextValue(){if(!isNaN(this.nextVal)){const e=this.nextVal;return this.nextVal=NaN,e}let e,t,n=!1;for(;!n;){let s,r,a;do{s=2*this.random()-1,r=2*this.random()-1,a=s*s+r*r}while(a>=1||0===a);const i=Math.sqrt(-2*Math.log(a)/a);e=this.mean+this.stdDev*s*i,t=this.mean+this.stdDev*r*i,this.truncated&&!this.isValidTruncated(e)||(n=!0)}return this.truncated&&!this.isValidTruncated(t)||(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class uu{constructor(e,t,n,s){this.alpha=e,this.beta=1/t,this.dtype=n;const r=s||Math.random();this.randu=ou(r.toString()),this.randn=new lu(0,1,n,!1,this.randu()),this.d=e<1?e+2/3:e-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let e,t,n,s,r,a;for(;;){do{s=this.randn.nextValue(),a=1+this.c*s}while(a<=0);if(a*=a*a,e=s*s,t=1-.331*e*e,n=.5*e+this.d*(1-a+Math.log(a)),r=this.randu(),r<t||Math.log(r)<n)break}return a=1/this.beta*this.d*a,this.alpha<1&&(a*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(a)}convertValue(e){return"float32"===this.dtype?e:Math.round(e)}}class cu{constructor(e=0,t=1,n,s){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==s&&(s=Math.random()),"number"==typeof s&&(s=s.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=ou(s)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const hu=tr({randomGamma_:function(e,t,n=1,s="float32",r){if(null==n&&(n=1),null==s&&(s="float32"),"float32"!==s&&"int32"!==s)throw new Error(`Unsupported data type ${s}`);const a=new uu(t,n,s,r),i=jr(e,s);for(let e=0;e<i.values.length;e++)i.values[e]=a.nextValue();return i.toTensor()}});const pu=tr({randomNormal_:function(e,t=0,n=1,s,r){if(null!=s&&"bool"===s)throw new Error(`Unsupported data type ${s}`);const a=new lu(t,n,s,!1,r),i=jr(e,s);for(let e=0;e<i.values.length;e++)i.values[e]=a.nextValue();return i.toTensor()}});const du=tr({randomUniform_:function(e,t=0,n=1,s="float32",r){const a=jr(e,s),i=new cu(t,n,null,r);for(let e=0;e<a.values.length;e++)a.values[e]=i.nextValue();return a.toTensor()}});function fu(e,t,n=1,s="float32"){if(0===n)throw new Error("Cannot have a step of zero");const r={start:e,stop:t,step:n,dtype:s};return Us.runKernel(en,{},r)}const mu=tr({real_:function(e){const t={input:Zs(e,"input","real")};return Us.runKernel(tn,t)}});const gu=tr({reciprocal_:function(e){const t={x:Zs(e,"x","reciprocal")};return Us.runKernel(nn,t)}});const yu=tr({relu_:function(e){const t={x:Zs(e,"x","relu")};return Us.runKernel(sn,t)}});const bu=tr({relu6_:function(e){const t={x:Zs(e,"x","relu6")};return Us.runKernel(cn,t)}});const xu=tr({reverse_:function(e,t){const n={x:Zs(e,"x","reverse")},s={dims:t};return Us.runKernel(hn,n,s)}});const wu=tr({reverse1d_:function(e){const t=Zs(e,"x","reverse");return l(1===t.rank,(()=>`Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`)),xu(t,0)}});const ku=tr({reverse2d_:function(e,t){const n=Zs(e,"x","reverse");return l(2===n.rank,(()=>`Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`)),xu(n,t)}});const vu=tr({reverse3d_:function(e,t){const n=Zs(e,"x","reverse");return l(3===n.rank,(()=>`Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`)),xu(n,t)}});const Nu=tr({reverse4d_:function(e,t){const n=Zs(e,"x","reverse");return l(4===n.rank,(()=>`Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`)),xu(n,t)}});const Iu=tr({round_:function(e){const t={x:Zs(e,"x","round")};return Us.runKernel(pn,t)}});const Cu=tr({rsqrt_:function(e){const t={x:Zs(e,"x","rsqrt")};return Us.runKernel(dn,t)}});function $u(e,t){if(($(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&$(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return sr(e,[],[],t)}const Su=tr({selu_:function(e){const t={x:Zs(e,"x","selu")};return Us.runKernel(gn,t)}});const Tu=tr({separableConv2d_:function(e,t,n,s,r,a=[1,1],i="NHWC"){const o=Zs(e,"x","separableConv2d"),u=Zs(t,"depthwiseFilter","separableConv2d"),c=Zs(n,"pointwiseFilter","separableConv2d");let h=o,p=!1;if(3===o.rank&&(p=!0,h=Pi(o,[1,o.shape[0],o.shape[1],o.shape[2]])),"NCHW"===i)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");l(4===h.rank,(()=>`Error in separableConv2d: input must be rank 4, but got rank ${h.rank}.`)),l(4===u.rank,(()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${u.rank}.`)),l(4===c.rank,(()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${u.rank}.`)),l(1===c.shape[0],(()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${c.shape[0]}.`)),l(1===c.shape[1],(()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${c.shape[1]}.`));const d=u.shape[2],f=u.shape[3];l(c.shape[2]===d*f,(()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${d*f}, but got ${c.shape[2]}.`));const m=wo(h,u,s,r,i,a),g=oo(m,c,1,"valid",i);return p?Pi(g,[g.shape[1],g.shape[2],g.shape[3]]):g}});const Eu=async function(e,t){const n=Zs(e,"x","setdiff1d"),s=Zs(t,"y","setdiff1d");l(n.dtype===s.dtype,(()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${s.dtype}).`)),l(1===n.rank,(()=>`x should be 1D tensor, but got x (${n.shape}).`)),l(1===s.rank,(()=>`y should be 1D tensor, but got y (${s.shape}).`));const r=await n.data(),a=await s.data(),i=new Set(a);let o=0;for(let e=0;e<r.length;e++)i.has(r[e])||o++;const u=new bs([o],n.dtype),c=new bs([o],"int32");for(let e=0,t=0;e<r.length;e++)i.has(r[e])||(u.values[t]=r[e],c.values[t]=e,t++);return[u.toTensor(),c.toTensor()]};const Au=tr({sign_:function(e){const t={x:Zs(e,"x","sign")};return Us.runKernel(wn,t)}});const Ru=tr({sin_:function(e){const t={x:Zs(e,"x","sin")};return Us.runKernel(bn,t)}});const Fu=tr({sinh_:function(e){const t={x:Zs(e,"x","sinh")};return Us.runKernel(xn,t)}});const Du=tr({slice1d_:function(e,t,n){const s=Zs(e,"x","slice1d");return l(1===s.rank,(()=>`slice1d expects a rank-1 tensor, but got a rank-${s.rank} tensor`)),Hi(s,[t],[n])}});const _u=tr({slice2d_:function(e,t,n){const s=Zs(e,"x","slice2d");return l(2===s.rank,(()=>`slice2d expects a rank-2 tensor, but got a rank-${s.rank} tensor`)),Hi(s,t,n)}});const Ou=tr({slice3d_:function(e,t,n){const s=Zs(e,"x","slice3d");return l(3===s.rank,(()=>`slice3d expects a rank-3 tensor, but got a rank-${s.rank} tensor`)),Hi(s,t,n)}});const Mu=tr({slice4d_:function(e,t,n){const s=Zs(e,"x","slice4d");return l(4===s.rank,(()=>`slice4d expects a rank-4 tensor, but got a rank-${s.rank} tensor`)),Hi(s,t,n)}});const Lu=tr({softmax_:function(e,t=-1){const n=Zs(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);const s={logits:n},r={dim:t};return Us.runKernel(Sn,s,r)}});const zu=tr({fft_:function(e){l("complex64"===e.dtype,(()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`));const t={input:e};return Us.runKernel(et,t)}});const Bu=tr({ifft_:function(e){l("complex64"===e.dtype,(()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`));const t={input:e};return Us.runKernel(ht,t)}});const Pu=tr({irfft_:function(e){const t=e.shape[e.shape.length-1],n=e.size/t;let s;if(t<=2){const r=Pi(e,[n,t]);s=Bu(r)}else{const r=[n,2*(t-1)],a=Pi(mu(e),[n,t]),i=Pi(Go(e),[n,t]),o=xu(Hi(a,[0,1],[n,t-2]),1),l=di(xu(Hi(i,[0,1],[n,t-2]),1),$u(-1)),u=Ui([a,o],1),c=Ui([i,l],1),h=Pi(nr(u,c),[r[0],r[1]]);s=Bu(h)}if(s=mu(s),3===e.rank&&0!==e.shape[0]){const t=s,n=e.shape[0];s=Pi(s,[n,s.shape[0]/n,s.shape[1]]),t.dispose()}return s}});const Wu=tr({split_:function(e,t,n=0){const s={x:Zs(e,"x","split")},r={numOrSizeSplits:t,axis:n};return Us.runKernel($n,s,r)}});const Vu=tr({rfft_:function(e,t){l("float32"===e.dtype,(()=>`The dtype for rfft() must be real value but got ${e.dtype}`));let n=e.shape[e.shape.length-1];const s=e.size/n;let r;if(null!=t&&t<n){const s=e.shape.map((e=>0)),a=e.shape.map((e=>e));a[e.shape.length-1]=t,r=Hi(e,s,a),n=t}else if(null!=t&&t>n){const s=e.shape.map((e=>e));s[e.shape.length-1]=t-n,r=Ui([e,El(s)],e.shape.length-1),n=t}else r=e;const a=To(r),i=Pi(nr(r,a),[s,n]),o=zu(i),u=Math.floor(n/2)+1,c=mu(o),h=Go(o),p=Wu(c,[u,n-u],c.shape.length-1),d=Wu(h,[u,n-u],h.shape.length-1),f=r.shape.slice();return f[r.shape.length-1]=u,Pi(nr(p[0],d[0]),f)}});const Uu=tr({sqrt_:function(e){const t={x:Zs(e,"x","sqrt")};return Us.runKernel(Nn,t)}});const Gu=tr({squaredDifference_:function(e,t){let n=Zs(e,"a","squaredDifference"),s=Zs(t,"b","squaredDifference");[n,s]=Ds(n,s),Co(n.shape,s.shape);const r={a:n,b:s};return Us.runKernel(Tn,r,{})}});const Hu=tr({squeeze_:function(e,t){const n=Zs(e,"x","squeeze");return Pi(n,w(n.shape,t).newShape)}});const ju=tr({stack_:function(e,t=0){const n=Qs(e,"tensors","stack","string_or_numeric");l(n.length>=1,(()=>"Pass at least one tensor to tf.stack")),n.length>0&&l(t<=n[0].rank,(()=>"Axis must be <= rank of the tensor"));const s=n,r={axis:t};return Us.runKernel(Xt,s,r)}});const qu=tr({step_:function(e,t=0){const n={x:Zs(e,"x","step")},s={alpha:t};return Us.runKernel(Un,n,s)}});const Ku=tr({stridedSlice_:function(e,t,n,s,r=0,a=0,i=0,o=0,l=0){const u={x:Zs(e,"x","stridedSlice")},c={begin:t,end:n,strides:s,beginMask:r,endMask:a,ellipsisMask:i,newAxisMask:o,shrinkAxisMask:l};return Us.runKernel(Fn,u,c)}});const Xu=tr({tan_:function(e){const t={x:Zs(e,"x","tan")};return Us.runKernel(Dn,t)}});function Yu(e,t){c(e);const n=Xs(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return sr(e,null,n,t)}function Ju(e,t,n){if(c(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const s=Xs(e,n);if(2!==s.length&&1!==s.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return sr(e,t,s,n)}const Zu=tr({topk_:function(e,t=1,n=!0){const s=Zs(e,"x","topk");if(0===s.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const r=s.shape[s.shape.length-1];if(t>r)throw new Error(`'k' passed to topk() must be <= the last dimension (${r}) but got ${t}`);const a={x:s},i={k:t,sorted:n},[o,l]=Us.runKernel(Mn,a,i);return{values:o,indices:l}}});const Qu=tr({truncatedNormal_:function(e,t=0,n=1,s,r){if(null!=s&&"bool"===s)throw new Error("Unsupported data type $ { dtype }");const a=new lu(t,n,s,!0,r),i=jr(e,s);for(let e=0;e<i.values.length;e++)i.values[e]=a.nextValue();return i.toTensor()}});const ec=tr({unique_:function(e,t=0){const n=Zs(e,"x","unique","string_or_numeric");l(n.rank>0,(()=>"The input tensor must be at least 1D"));const s={x:n},r={axis:t},[a,i]=Us.runKernel(Bn,s,r);return{values:a,indices:i}}});const tc=tr({unsortedSegmentSum_:function(e,t,n){const s=Zs(e,"x","unsortedSegmentSum"),r=Zs(t,"segmentIds","unsortedSegmentSum","int32");l(f(n),(()=>"numSegments must be of dtype int"));const a={x:s,segmentIds:r},i={numSegments:n};return Us.runKernel(Wn,a,i)}});const nc=tr({unstack_:function(e,t=0){const n=Zs(e,"x","unstack","string_or_numeric");l(t>=-n.shape.length&&t<n.shape.length,(()=>`Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`));const s={value:n},r={axis:t};return Us.runKernel(Pn,s,r)}});function sc(e,t=!0,n,s){return Us.makeVariable(e,t,n,s)}function rc(e,t){const n=[];for(let e=0;e<t.length;e++)t[e]&&n.push(e);const s=jr(e,"int32"),r=jr([n.length,e.length],"int32");for(let t=0;t<n.length;t++){const a=s.indexToLoc(n[t]),i=t*e.length;r.values.set(a,i)}return r.toTensor()}const ac=async function(e){const t=Zs(e,"condition","whereAsync","bool"),n=await t.data(),s=rc(t.shape,n);return e!==t&&t.dispose(),s};const ic=async function(e,t,n){const s=Zs(e,"tensor","boolMask"),r=Zs(t,"mask","boolMask","bool"),a=null==n?0:n,i=r.rank,o=s.shape;l(i>0,(()=>"mask cannot be scalar")),u(o.slice(a,a+i),r.shape,"mask's shape must match the first K dimensions of tensor's shape,");let c=1;for(let e=a;e<a+i;e++)c*=o[e];const h=o.slice(0,a).concat([c],o.slice(a+i)),p=Pi(s,h),d=Pi(r,[-1]),f=await ac(d),m=Hu(f,[1]),g=Wo(p,m,a);return e!==s&&s.dispose(),t!==r&&r.dispose(),m.dispose(),p.dispose(),d.dispose(),f.dispose(),g};function oc(e,t,n=null){if(0===e.rank)return fi(e);if(1!==e.rank&&null===n)return oc(Pi(e,[-1]),t,n);if(1===e.rank||"number"==typeof n||Array.isArray(n)&&1===n.length){if(1===t)return ul(fi(e),n);if(t===1/0)return ol(fi(e),n);if(t===-1/0)return Rl(fi(e),n);if("euclidean"===t||2===t)return Uu(ul(Xl(fi(e),$u(2,"int32")),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(n)&&2===n.length){if(1===t)return ol(ul(fi(e),n[0]),n[1]-1);if(t===1/0)return ol(ul(fi(e),n[1]),n[0]);if(t===-1/0)return Rl(ul(fi(e),n[1]),n[0]);if("fro"===t||"euclidean"===t)return Uu(ul(Ol(e),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${n}`)}const lc=tr({norm_:function(e,t="euclidean",n=null,s=!1){const r=oc(e=Zs(e,"x","norm"),t,n);let a=r.shape;if(s){const t=x(n,e.shape);a=fl(r.shape,t)}return Pi(r,a)}});const uc=tr({movingAverage_:function(e,t,n,s,r=!0){const a=Zs(e,"v","movingAverage"),i=Zs(t,"x","movingAverage"),o=Zs(n,"decay","movingAverage");_s(a,i),l(d(a.shape,i.shape),(()=>"Shape mismatch in v and x"));const u=$u(1),c=ll(u,o);let h=di(ll(i,a),c);if(r){l(null!=s,(()=>"When using zeroDebias: true, step is required."));const e=Zs(s,"step","movingAverage");h=pi(h,ll(u,Xl(o,e)))}return ci(a,h)}});const cc=tr({scatterND_:function(e,t,n){const s=Zs(e,"indices","scatterND","int32"),r=Zs(t,"updates","scatterND");Ca(r,s,n);const a={indices:s,updates:r},i={shape:n};return Us.runKernel(fn,a,i)}});const hc=tr({sparseToDense_:function(e,t,n,s=0){const r=Zs(e,"sparseIndices","sparseToDense","int32"),a=Zs(t,"sparseValues","sparseToDense"),i=Zs(s,"defaultValue","sparseToDense",a.dtype);!function(e,t,n,s){if("int32"!==e.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`);const r=e.rank>0?e.shape[0]:1,a=e.rank>1?e.shape[1]:1;if(n.length!==a)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${a}.`);const i=t.size;if(0!==t.rank&&(1!==t.rank||i!==r))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${r}]`);if(t.dtype!==s.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(r,a,n,i);const o={sparseIndices:r,sparseValues:a,defaultValue:i},l={outputShape:n};return Us.runKernel(Rn,o,l)}});const pc=tr({gatherND_:function(e,t){const n=Zs(t,"indices","gatherND","int32"),s={params:Zs(e,"x","gatherND"),indices:n};return Us.runKernel(ot,s)}});const dc=tr({dropout_:function(e,t,n,s){const r=Zs(e,"x","dropout");if(l("float32"===r.dtype,(()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${r.dtype} tensor instead.`)),l(t>=0&&t<1,(()=>`rate must be a float in the range [0, 1), but got ${t}.`)),0===t)return e instanceof vs?r.clone():r;const a=function(e,t){if(null==t)return e.shape.slice();if(d(e.shape,t))return t;if(e.shape.length===t.length){const n=[];for(let s=0;s<e.shape.length;s++)null==t[s]&&null!=e.shape[s]?n.push(e.shape[s]):n.push(t[s]);return n}return t}(r,n),i=1-t,o=pi(Po(ci(du(a,0,1,"float32",s),i)),i);return di(r,o)}});function fc(e){return Math.floor(Math.pow(2,Math.ceil(Math.log(e)/Math.log(2))))}function mc(e,t,n){const s=1-e%2,r=new Float32Array(e);for(let a=0;a<e;++a){const i=2*Math.PI*a/(e+s-1);r[a]=t-n*Math.cos(i)}return Yu(r,"float32")}const gc=async function(e,t,n=1){const s=Zs(e,"predictions","inTopK"),r=Zs(t,"targets","inTopK");l(s.rank>1,(()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${s.rank}`)),l(s.rank-1===r.rank,(()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${s.rank} and targets rank ${r.rank}`)),u(s.shape.slice(0,s.shape.length-1),r.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const a=s.shape[s.shape.length-1];l(n>0&&n<=a,(()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${a}), but got ${n}`));const i=await s.data(),o=await r.data(),[c,h]=[i.length/a,a],p=k("bool",c);for(let e=0;e<c;e++){const t=e*h,s=i.subarray(t,t+h),r=[];for(let e=0;e<s.length;e++)r.push({value:s[e],index:e});r.sort(((e,t)=>t.value-e.value)),p[e]=0;for(let t=0;t<n;t++)if(r[t].index===o[e]){p[e]=1;break}}return e!==s&&s.dispose(),t!==r&&r.dispose(),rr(p,r.shape,"bool")};const yc=tr({conv2DBackpropFilter_:function(e,t,n,s,r,a="NHWC",i){let o=e;3===e.rank&&(o=Pi(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let u=t;3===u.rank&&(u=Pi(t,[1,t.shape[0],t.shape[1],t.shape[2]])),l(4===o.rank,(()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${o.shape}.`)),l(4===u.rank,(()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${u.shape}.`)),l(4===n.length,(()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`));const c="NHWC"===a?o.shape[3]:o.shape[1],h="NHWC"===a?u.shape[3]:u.shape[1];l(c===n[2],(()=>`Error in conv2dDerFilter: depth of input ${c}) must match input depth in filter (${n[2]}.`)),l(h===n[3],(()=>`Error in conv2dDerFilter: depth of dy (${h}) must match output depth for filter (${n[3]}).`)),null!=i&&l(f(r),(()=>`Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`));const p={x:o,dy:u},d={strides:s,pad:r,dataFormat:a,dimRoundingMode:i,filterShape:n};return Us.runKernel(Se,p,d)}});function bc(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return di(e,qu(t));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function xc(e,t){let n=t;const s=Io(e.shape,t.shape);return s.length>0&&(n=ul(n,s)),Pi(n,e.shape)}function wc(e,t,n,s){if("linear"===t)return e;if("relu"===t)return yu(e);if("elu"===t)return Fo(e);if("relu6"===t)return bu(e);if("prelu"===t)return Yl(e,n);if("leakyrelu"===t)return Ko(e,s);throw new Error(`Unknown fused activation ${t}.`)}const kc=(e,t)=>!(e>0)||"linear"===t;const vc=tr({fusedConv2d_:function({x:e,filter:t,strides:n,pad:s,dataFormat:r="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:o,activation:u="linear",preluActivationWeights:c,leakyreluAlpha:h}){if(u=u||"linear",!1===kc(Us.state.gradientDepth,u)){let l=oo(e,t,n,s,r,a,i);return null!=o&&(l=ci(l,o)),wc(l,u,c,h)}const p=Zs(e,"x","conv2d"),d=Zs(t,"filter","conv2d");let m=p,g=!1;3===p.rank&&(g=!0,m=Pi(p,[1,p.shape[0],p.shape[1],p.shape[2]])),l(4===m.rank,(()=>`Error in fused conv2d: input must be rank 4, but got rank ${m.rank}.`)),l(4===d.rank,(()=>`Error in fused conv2d: filter must be rank 4, but got rank ${d.rank}.`)),null!=i&&l(f(s),(()=>`Error in fused conv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`)),l(m.shape[3]===d.shape[2],(()=>`Error in conv2d: depth of input (${m.shape[3]}) must match input depth for filter ${d.shape[2]}.`)),l(zi(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),l("NHWC"===r,(()=>`Error in conv2d: got dataFormat of ${r} but only NHWC is currently supported.`));const y=Ai(m.shape,d.shape,n,a,s,i);let b,x;null!=o&&(b=Zs(o,"bias","fused conv2d"),[b]=Ds(b,p),Co(y.outShape,b.shape)),null!=c&&(x=Zs(c,"prelu weights","fused conv2d"));const w=(e,t)=>{const[r,i,o,c]=t,h=bc(e,o,u);l(Li(a),(()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`));const p=[uo(i.shape,h,r,n,s),yc(i,h,r.shape,n,s)];if(null!=c){const e=xc(c,h);p.push(e)}return p},k={x:m,filter:d,bias:b,preluActivationWeights:x},v={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i,activation:u,leakyreluAlpha:h};if(null==o){return nl(((e,t,n)=>{let s=Us.runKernel(qn,k,v);return n([t,e,s]),g&&(s=Pi(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:w}}))(m,d)}return nl(((e,t,n,s)=>{let r=Us.runKernel(qn,k,v);return s([t,e,r,n]),g&&(r=Pi(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:w}}))(m,d,b)}});const Nc=tr({depthwiseConv2dNativeBackpropFilter_:function(e,t,n,s,r,a=[1,1],i){let o=e;3===e.rank&&(o=Pi(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;3===l.rank&&(l=Pi(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const u={x:o,dy:l},c={strides:s,pad:r,dimRoundingMode:i,dilations:a,filterShape:n};return Us.runKernel(Be,u,c)}});const Ic=tr({depthwiseConv2dNativeBackpropInput_:function(e,t,n,s,r,a=[1,1],i){let o=t,l=!1;3===t.rank&&(l=!0,o=Pi(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const u={dy:o,filter:n},c={strides:s,pad:r,dimRoundingMode:i,dilations:a,inputShape:e},h=Us.runKernel(Pe,u,c);return l?Pi(h,[h.shape[1],h.shape[2],h.shape[3]]):h}});const Cc=tr({fusedDepthwiseConv2d_:function({x:e,filter:t,strides:n,pad:s,dataFormat:r="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:o,activation:u="linear",preluActivationWeights:c,leakyreluAlpha:h}){if(!1===kc(Us.state.gradientDepth,u)){let l=wo(e,t,n,s,r,a,i);return null!=o&&(l=ci(l,o)),wc(l,u,c,h)}const p=Zs(e,"x","depthwiseConv2d"),d=Zs(t,"filter","depthwiseConv2d");let m=p,g=!1;3===p.rank&&(g=!0,m=Pi(p,[1,p.shape[0],p.shape[1],p.shape[2]])),l(4===m.rank,(()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${m.rank}.`)),l(4===d.rank,(()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${d.rank}.`)),l(m.shape[3]===d.shape[2],(()=>`Error in fused depthwiseConv2d: number of input channels (${m.shape[3]}) must match the inChannels dimension in filter ${d.shape[2]}.`)),null==a&&(a=[1,1]),l(zi(n,a),(()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),null!=i&&l(f(s),(()=>`Error in fused depthwiseConv2d: pad must be an integer when using dimRoundingMode ${i} but got pad ${s}.`));const y=Ai(m.shape,d.shape,n,a,s,i,!0);let b,x;null!=o&&(b=Zs(o,"bias","fused conv2d"),[b]=Ds(b,p),Co(y.outShape,b.shape)),null!=c&&(x=Zs(c,"prelu weights","fused depthwiseConv2d"));const w=(e,t)=>{l(Li(a),(()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`));const[r,o,c,h]=t,p=bc(e,c,u),d=Ic(o.shape,p,r,n,s,a,i),f=Nc(o,p,r.shape,n,s,a,i);if(null!=h){return[d,f,xc(b,p)]}return[d,f]},k={x:m,filter:d,bias:b,preluActivationWeights:x},v={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i,activation:u,leakyreluAlpha:h};if(null==o){return nl(((e,t,n)=>{let s=Us.runKernel(Kn,k,v);return n([t,e,s]),g&&(s=Pi(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:w}}))(m,d)}return nl(((e,t,n,s)=>{let r=Us.runKernel(Kn,k,v);return s([t,e,r,n]),g&&(r=Pi(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:w}}))(m,d,b)}});const $c=tr({fusedMatMul_:function({a:e,b:t,transposeA:n=!1,transposeB:s=!1,bias:r,activation:a="linear",preluActivationWeights:i,leakyreluAlpha:o}){if(!1===kc(Us.state.gradientDepth,a)){let l=ha(e,t,n,s);return null!=r&&(l=ci(l,r)),wc(l,a,i,o)}let u=Zs(e,"a","fused matMul"),c=Zs(t,"b","fused matMul");[u,c]=Ds(u,c);const h=n?u.shape[u.rank-2]:u.shape[u.rank-1],f=s?c.shape[c.rank-1]:c.shape[c.rank-2],m=n?u.shape[u.rank-1]:u.shape[u.rank-2],g=s?c.shape[c.rank-2]:c.shape[c.rank-1],y=u.shape.slice(0,-2),b=c.shape.slice(0,-2),x=p(y),w=p(b);l(u.rank>=2&&c.rank>=2&&u.rank===c.rank,(()=>`Error in fused matMul: inputs must have the same rank of at least 2, got ranks ${u.rank} and ${c.rank}.`)),l(d(y,b),(()=>`Error in fused matMul: outer dimensions (${y}) and (${b}) of Tensors with shapes ${u.shape} and ${c.shape} must match.`)),l(h===f,(()=>`Error in fused matMul: inner shapes (${h}) and (${f}) of Tensors with shapes ${u.shape} and ${c.shape} and transposeA=${n} and transposeB=${s} must match.`));const k=u.shape.slice(0,-2).concat([m,g]),v=Pi(u,n?[x,h,m]:[x,m,h]),N=Pi(c,s?[w,g,f]:[w,f,g]);let I,C;null!=r&&(I=Zs(r,"bias","fused matMul"),[I]=Ds(I,u),Co(k,I.shape)),null!=i&&(C=Zs(i,"prelu weights","fused matMul"));const $=(e,t)=>{const[i,o,l,u]=t,c=bc(Pi(e,l.shape),l,a);let h,p;if(n||s?!n&&s?(h=ha(c,o,!1,!1),p=ha(c,i,!0,!1)):n&&!s?(h=ha(o,c,!1,!0),p=ha(i,c,!1,!1)):(h=ha(o,c,!0,!0),p=ha(c,i,!0,!0)):(h=ha(c,o,!1,!0),p=ha(i,c,!0,!1)),null!=r){return[h,p,xc(u,c)]}return[h,p]},S={a:v,b:N,bias:I,preluActivationWeights:C},T={transposeA:n,transposeB:s,activation:a,leakyreluAlpha:o};if(null==r){return nl(((e,t,n)=>{const s=Us.runKernel(jn,S,T);return n([e,t,s]),{value:Pi(s,k),gradFunc:$}}))(v,N)}return nl(((e,t,n,s)=>{const r=Us.runKernel(jn,S,T);return s([e,t,r,n]),{value:Pi(r,k),gradFunc:$}}))(v,N,I)}});var Sc=Object.freeze({__proto__:null,conv2d:vc,depthwiseConv2d:Cc,matMul:$c});const Tc=tr({hammingWindow_:function(e){return mc(e,.54,.46)}});const Ec=tr({hannWindow_:function(e){return mc(e,.5,.5)}});const Ac=tr({frame_:function(e,t,n,s=!1,r=0){let a=0;const i=[];for(;a+t<=e.size;)i.push(Hi(e,a,t)),a+=n;if(s)for(;a<e.size;){const s=a+t-e.size,o=Ui([Hi(e,a,t-s),Bo([s],r)]);i.push(o),a+=n}return 0===i.length?Ju([],[0,t]):Pi(Ui(i),[i.length,t])}});const Rc=tr({stft_:function(e,t,n,s,r=Ec){null==s&&(s=fc(t));const a=Ac(e,t,n),i=di(a,r(t));return Vu(i,s)}});const Fc=tr({cropAndResize_:function(e,t,n,s,r="bilinear",a=0){const i=Zs(e,"image","cropAndResize"),o=Zs(t,"boxes","cropAndResize","float32"),u=Zs(n,"boxInd","cropAndResize","int32"),c=o.shape[0];l(4===i.rank,(()=>`Error in cropAndResize: image must be rank 4,but got rank ${i.rank}.`)),l(2===o.rank&&4===o.shape[1],(()=>`Error in cropAndResize: boxes must be have size [${c},4] but had shape ${o.shape}.`)),l(1===u.rank&&u.shape[0]===c,(()=>`Error in cropAndResize: boxInd must be have size [${c}] but had shape ${o.shape}.`)),l(2===s.length,(()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${s.length}.`)),l(s[0]>=1&&s[1]>=1,(()=>`cropSize must be atleast [1,1], but was ${s}`)),l("bilinear"===r||"nearest"===r,(()=>`method must be bilinear or nearest, but was ${r}`));const h={image:i,boxes:o,boxInd:u},p={method:r,extrapolationValue:a,cropSize:s};return Us.runKernel(Oe,h,p)}});const Dc=tr({flipLeftRight_:function(e){const t=Zs(e,"image","flipLeftRight","float32");l(4===t.rank,(()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`));const n={image:t};return Us.runKernel(nt,n,{})}});const _c=tr({rotateWithOffset_:function(e,t,n=0,s=.5){const r=Zs(e,"image","rotateWithOffset","float32");l(4===r.rank,(()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${r.rank}.`));const a={image:r},i={radians:t,fillValue:n,center:s};return Us.runKernel(Hn,a,i)}});function Oc(e,t,n,s,r,a){null==s&&(s=.5),null==r&&(r=Number.NEGATIVE_INFINITY),null==a&&(a=0);const i=e.shape[0];return n=Math.min(n,i),l(0<=s&&s<=1,(()=>`iouThreshold must be in [0, 1], but was '${s}'`)),l(2===e.rank,(()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`)),l(4===e.shape[1],(()=>`boxes must have 4 columns, but 2nd dimension was ${e.shape[1]}`)),l(1===t.rank,(()=>"scores must be a 1D tensor")),l(t.shape[0]===i,(()=>`scores has incompatible shape with boxes. Expected ${i}, but was ${t.shape[0]}`)),l(0<=a&&a<=1,(()=>`softNmsSigma must be in [0, 1], but was '${a}'`)),{maxOutputSize:n,iouThreshold:s,scoreThreshold:r,softNmsSigma:a}}const Mc=tr({nonMaxSuppression_:function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY){const a=Zs(e,"boxes","nonMaxSuppression"),i=Zs(t,"scores","nonMaxSuppression"),o=Oc(a,i,n,s,r),l={maxOutputSize:n=o.maxOutputSize,iouThreshold:s=o.iouThreshold,scoreThreshold:r=o.scoreThreshold};return Us.runKernel(Gt,{boxes:a,scores:i},l)}});function Lc(e,t,n){const s=function(e,t,n){return function(e,t,n){let s=0,r=e.length,a=0,i=!1;for(;s<r;){a=s+(r-s>>>1);const o=n(t,e[a]);o>0?s=a+1:(r=a,i=!o)}return i?s:-s-1}(e,t,n||zc)}(e,t,n),r=s<0?-(s+1):s;e.splice(r,0,t)}function zc(e,t){return e>t?1:e<t?-1:0}function Bc(e,t,n,s,r){return Vc(e,t,n,s,r,0)}function Pc(e,t,n,s,r,a){return Vc(e,t,n,s,r,0,!1,a,!0)}function Wc(e,t,n,s,r,a){return Vc(e,t,n,s,r,a,!0)}function Vc(e,t,n,s,r,a,i=!1,o=!1,l=!1){const u=[];for(let e=0;e<t.length;e++)t[e]>r&&u.push({score:t[e],boxIndex:e,suppressBeginIndex:0});u.sort(Hc);const c=a>0?-.5/a:0,h=[],p=[];for(;h.length<n&&u.length>0;){const t=u.pop(),{score:n,boxIndex:a,suppressBeginIndex:i}=t;if(n<r)break;let o=!1;for(let n=h.length-1;n>=i;--n){const i=Uc(e,a,h[n]);if(i>=s){o=!0;break}if(t.score=t.score*Gc(s,c,i),t.score<=r)break}t.suppressBeginIndex=h.length,o||(t.score===n?(h.push(a),p.push(t.score)):t.score>r&&Lc(u,t,Hc))}const d=h.length,f=n-d;o&&f>0&&(h.push(...new Array(f).fill(0)),p.push(...new Array(f).fill(0)));const m={selectedIndices:h};return i&&(m.selectedScores=p),l&&(m.validOutputs=d),m}function Uc(e,t,n){const s=e.subarray(4*t,4*t+4),r=e.subarray(4*n,4*n+4),a=Math.min(s[0],s[2]),i=Math.min(s[1],s[3]),o=Math.max(s[0],s[2]),l=Math.max(s[1],s[3]),u=Math.min(r[0],r[2]),c=Math.min(r[1],r[3]),h=Math.max(r[0],r[2]),p=Math.max(r[1],r[3]),d=(o-a)*(l-i),f=(h-u)*(p-c);if(d<=0||f<=0)return 0;const m=Math.max(a,u),g=Math.max(i,c),y=Math.min(o,h),b=Math.min(l,p),x=Math.max(y-m,0)*Math.max(b-g,0);return x/(d+f-x)}function Gc(e,t,n){const s=Math.exp(t*n*n);return n<=e?s:0}function Hc(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}const jc=async function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY){const a=Zs(e,"boxes","nonMaxSuppressionAsync"),i=Zs(t,"scores","nonMaxSuppressionAsync"),o=Oc(a,i,n,s,r);n=o.maxOutputSize,s=o.iouThreshold,r=o.scoreThreshold;const l=await Promise.all([a.data(),i.data()]),u=l[0],c=l[1],{selectedIndices:h}=Bc(u,c,n,s,r);return a!==e&&a.dispose(),i!==t&&i.dispose(),Yu(h,"int32")};const qc=tr({nonMaxSuppressionWithScore_:function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=0){const i=Zs(e,"boxes","nonMaxSuppression"),o=Zs(t,"scores","nonMaxSuppression"),l=Oc(i,o,n,s,r,a),u={boxes:i,scores:o},c={maxOutputSize:n=l.maxOutputSize,iouThreshold:s=l.iouThreshold,scoreThreshold:r=l.scoreThreshold,softNmsSigma:a=l.softNmsSigma},h=Us.runKernel(jt,u,c);return{selectedIndices:h[0],selectedScores:h[1]}}});const Kc=async function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=0){const i=Zs(e,"boxes","nonMaxSuppressionAsync"),o=Zs(t,"scores","nonMaxSuppressionAsync"),l=Oc(i,o,n,s,r,a);n=l.maxOutputSize,s=l.iouThreshold,r=l.scoreThreshold,a=l.softNmsSigma;const u=await Promise.all([i.data(),o.data()]),c=u[0],h=u[1],{selectedIndices:p,selectedScores:d}=Wc(c,h,n,s,r,a);return i!==e&&i.dispose(),o!==t&&o.dispose(),{selectedIndices:Yu(p,"int32"),selectedScores:Yu(d)}};const Xc=tr({nonMaxSuppressionPadded_:function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=!1){const i=Zs(e,"boxes","nonMaxSuppression"),o=Zs(t,"scores","nonMaxSuppression"),l=Oc(i,o,n,s,r,null),u={boxes:i,scores:o},c={maxOutputSize:l.maxOutputSize,iouThreshold:l.iouThreshold,scoreThreshold:l.scoreThreshold,padToMaxOutputSize:a},h=Us.runKernel(Ht,u,c);return{selectedIndices:h[0],validOutputs:h[1]}}});const Yc=async function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=!1){const i=Zs(e,"boxes","nonMaxSuppressionAsync"),o=Zs(t,"scores","nonMaxSuppressionAsync"),l=Oc(i,o,n,s,r,null),u=l.maxOutputSize,c=l.iouThreshold,h=l.scoreThreshold,[p,d]=await Promise.all([i.data(),o.data()]),{selectedIndices:f,validOutputs:m}=Pc(p,d,u,c,h,a);return i!==e&&i.dispose(),o!==t&&o.dispose(),{selectedIndices:Yu(f,"int32"),validOutputs:$u(m,"int32")}};const Jc=tr({resizeBilinear_:function(e,t,n=!1,s=!1){const r=Zs(e,"images","resizeBilinear");l(3===r.rank||4===r.rank,(()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${r.rank}.`)),l(2===t.length,(()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`)),l(!1===s||!1===n,(()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false."));let a=r,i=!1;3===r.rank&&(i=!0,a=Pi(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const[]=t,o={images:a},u={alignCorners:n,halfPixelCenters:s,size:t},c=Us.runKernel(ln,o,u);return i?Pi(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const Zc=tr({resizeNearestNeighbor_:function(e,t,n=!1,s=!1){const r=Zs(e,"images","resizeNearestNeighbor");l(3===r.rank||4===r.rank,(()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${r.rank}.`)),l(2===t.length,(()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`)),l("float32"===r.dtype||"int32"===r.dtype,(()=>"`images` must have `int32` or `float32` as dtype")),l(!1===s||!1===n,(()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false."));let a=r,i=!1;3===r.rank&&(i=!0,a=Pi(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const[]=t,o={images:a},u={alignCorners:n,halfPixelCenters:s,size:t},c=Us.runKernel(an,o,u);return i?Pi(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const Qc=tr({transform_:function(e,t,n="nearest",s="constant",r=0,a){const i=Zs(e,"image","transform","float32"),o=Zs(t,"transforms","transform","float32");l(4===i.rank,(()=>`Error in transform: image must be rank 4,but got rank ${i.rank}.`)),l(2===o.rank&&(o.shape[0]===i.shape[0]||1===o.shape[0])&&8===o.shape[1],(()=>"Error in transform: Input transform should be batch x 8 or 1 x 8")),l(null==a||2===a.length,(()=>`Error in transform: outputShape must be [height, width] or null, but got ${a}.`));const u={image:i,transforms:o},c={interpolation:n,fillMode:s,fillValue:r,outputShape:a};return Us.runKernel(Ln,u,c)}});const eh=tr({bandPart_:function(e,t,n){l(t%1==0,(()=>`bandPart(): numLower must be an integer, got ${t}.`)),l(n%1==0,(()=>`bandPart(): numUpper must be an integer, got ${n}.`));const s=Zs(e,"a","bandPart");l(s.rank>=2,(()=>`bandPart(): Rank must be at least 2, got ${s.rank}.`));const r=s.shape,[a,i]=s.shape.slice(-2);if(!(t<=a))throw new Error(`bandPart(): numLower (${t}) must not be greater than the number of rows (${a}).`);if(!(n<=i))throw new Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${i}).`);t<0&&(t=a),n<0&&(n=i);const o=Pi(fu(0,a,1,"int32"),[-1,1]),u=fu(0,i,1,"int32"),c=ll(o,u),h=wl(Yo(c,$u(+t,"int32")),Uo(c,$u(-n,"int32"))),p=El([a,i],s.dtype);return Pi(ju(nc(Pi(s,[-1,a,i])).map((e=>So(h,e,p)))),r)}});const th=tr({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,l(null!=e&&e.length>0,(()=>"Gram-Schmidt process: input must not be null, undefined, or empty"));const n=e[0].shape[0];for(let t=1;t<e.length;++t)l(e[t].shape[0]===n,(()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${n})`))}else t=!0,e=Wu(e,e.shape[0],0).map((e=>Hu(e,[0])));l(e.length<=e[0].shape[0],(()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`));const n=[],s=e;for(let t=0;t<e.length;++t)n.push(Us.tidy((()=>{let e=s[t];if(t>0)for(let s=0;s<t;++s){const t=di(ul(di(n[s],e)),n[s]);e=ll(e,t)}return pi(e,lc(e,"euclidean"))})));return t?ju(n,0):n}});function nh(e,t=!1){return Us.tidy((()=>{l(2===e.shape.length,(()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`));const n=e.shape[0],s=e.shape[1];let r=zo(n),a=Kr(e);const i=Ju([[1]],[1,1]);let o=Kr(i);const u=n>=s?s:n;for(let e=0;e<u;++e){const t=a,l=o,u=r;[o,a,r]=Us.tidy((()=>{const t=Hi(a,[e,e],[n-e,1]),l=lc(t),u=Hi(a,[e,e],[1,1]),c=So(Vo(u,0),Ju([[-1]]),Ju([[1]])),h=ll(u,di(c,l)),p=pi(t,h);o=1===p.shape[0]?Kr(i):Ui([i,Hi(p,[1,0],[p.shape[0]-1,p.shape[1]])],0);const d=rl(pi(ha(c,h),l)),f=Hi(a,[e,0],[n-e,s]),m=di(d,o),g=da(o);if(0===e)a=ll(f,ha(m,ha(g,f)));else{const t=ll(f,ha(m,ha(g,f)));a=Ui([Hi(a,[0,0],[e,s]),t],0)}const y=da(m),b=Hi(r,[0,e],[n,r.shape[1]-e]);if(0===e)r=ll(b,ha(ha(b,o),y));else{const t=ll(b,ha(ha(b,o),y));r=Ui([Hi(r,[0,0],[n,e]),t],1)}return[o,a,r]})),ai([t,l,u])}return!t&&n>s&&(r=Hi(r,[0,0],[n,s]),a=Hi(a,[0,0],[s,s])),[r,a]}))}const sh=tr({qr_:function(e,t=!1){if(l(e.rank>=2,(()=>`qr() requires input tensor to have a rank >= 2, but got rank ${e.rank}`)),2===e.rank)return nh(e,t);{const n=e.shape.slice(0,e.shape.length-2).reduce(((e,t)=>e*t)),s=nc(Pi(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),r=[],a=[];s.forEach((e=>{const[n,s]=nh(e,t);r.push(n),a.push(s)}));return[Pi(ju(r,0),e.shape),Pi(ju(a,0),e.shape)]}}});var rh;(rh=e.Reduction||(e.Reduction={}))[rh.NONE=0]="NONE",rh[rh.MEAN=1]="MEAN",rh[rh.SUM=2]="SUM",rh[rh.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS";const ah=tr({computeWeightedLoss_:function(t,n,s=e.Reduction.SUM_BY_NONZERO_WEIGHTS){const r=Zs(t,"losses","computeWeightedLoss");let a=null;null!=n&&(a=Zs(n,"weights","computeWeightedLoss"));const i=null==a?r:di(r,a);if(s===e.Reduction.NONE)return i;if(s===e.Reduction.SUM)return ul(i);if(s===e.Reduction.MEAN){if(null==a)return Tl(i);{const e=r.size/a.size,t=pi(ul(i),ul(a));return e>1?pi(t,$u(e)):t}}if(s===e.Reduction.SUM_BY_NONZERO_WEIGHTS){if(null==a)return pi(ul(i),$u(r.size));{const e=di(a,Al(r.shape)),t=qr(ul(Bl(e,$u(0))),"float32");return pi(ul(i),t)}}throw Error(`Unknown reduction: ${s}`)}});const ih=tr({absoluteDifference_:function(t,n,s,r=e.Reduction.SUM_BY_NONZERO_WEIGHTS){const a=Zs(t,"labels","absoluteDifference"),i=Zs(n,"predictions","absoluteDifference");let o=null;null!=s&&(o=Zs(s,"weights","absoluteDifference")),u(a.shape,i.shape,"Error in absoluteDifference: ");const l=fi(ll(a,i));return ah(l,o,r)}});const oh=tr({cosineDistance_:function(t,n,s,r,a=e.Reduction.SUM_BY_NONZERO_WEIGHTS){const i=Zs(t,"labels","cosineDistance"),o=Zs(n,"predictions","cosineDistance");let l=null;null!=r&&(l=Zs(r,"weights","cosineDistance")),u(i.shape,o.shape,"Error in cosineDistance: ");const c=$u(1),h=ll(c,ul(di(i,o),s,!0));return ah(h,l,a)}});const lh=tr({hingeLoss_:function(t,n,s,r=e.Reduction.SUM_BY_NONZERO_WEIGHTS){let a=Zs(t,"labels","hingeLoss");const i=Zs(n,"predictions","hingeLoss");let o=null;null!=s&&(o=Zs(s,"weights","hingeLoss")),u(a.shape,i.shape,"Error in hingeLoss: ");const l=$u(1);a=ll(di($u(2),a),l);const c=yu(ll(l,di(a,i)));return ah(c,o,r)}});const uh=tr({huberLoss_:function(t,n,s,r=1,a=e.Reduction.SUM_BY_NONZERO_WEIGHTS){const i=Zs(t,"labels","huberLoss"),o=Zs(n,"predictions","huberLoss");let l=null;null!=s&&(l=Zs(s,"weights","huberLoss")),u(i.shape,o.shape,"Error in huberLoss: ");const c=$u(r),h=fi(ll(o,i)),p=Fl(h,c),d=ll(h,p),f=ci(di($u(.5),Ol(p)),di(c,d));return ah(f,l,a)}});const ch=tr({logLoss_:function(t,n,s,r=1e-7,a=e.Reduction.SUM_BY_NONZERO_WEIGHTS){const i=Zs(t,"labels","logLoss"),o=Zs(n,"predictions","logLoss");let l=null;null!=s&&(l=Zs(s,"weights","logLoss")),u(i.shape,o.shape,"Error in logLoss: ");const c=$u(1),h=$u(r),p=rl(di(i,Qo(ci(o,h)))),d=di(ll(c,i),Qo(ci(ll(c,o),h))),f=ll(p,d);return ah(f,l,a)}});const hh=tr({meanSquaredError_:function(t,n,s,r=e.Reduction.SUM_BY_NONZERO_WEIGHTS){const a=Zs(t,"labels","meanSquaredError"),i=Zs(n,"predictions","meanSquaredError");let o=null;null!=s&&(o=Zs(s,"weights","meanSquaredError")),u(a.shape,i.shape,"Error in meanSquaredError: ");const l=Gu(a,i);return ah(l,o,r)}});const ph=tr({sigmoidCrossEntropy_:function(t,n,s,r=0,a=e.Reduction.SUM_BY_NONZERO_WEIGHTS){let i=Zs(t,"multiClassLabels","sigmoidCrossEntropy");const o=Zs(n,"logits","sigmoidCrossEntropy");let l=null;if(null!=s&&(l=Zs(s,"weights","sigmoidCrossEntropy")),u(i.shape,o.shape,"Error in sigmoidCrossEntropy: "),r>0){const e=$u(r),t=$u(1),n=$u(.5);i=ci(di(i,ll(t,e)),di(n,e))}const c=function(e,t){const n=Zs(e,"labels","sigmoidCrossEntropyWithLogits"),s=Zs(t,"logits","sigmoidCrossEntropyWithLogits");u(n.shape,s.shape,"Error in sigmoidCrossEntropyWithLogits: ");const r=yu(s),a=di(s,n),i=el(_o(rl(fi(s))));return ci(ll(r,a),i)}(i,o);return ah(c,l,a)}});const dh=tr({softmaxCrossEntropy_:function(t,n,s,r=0,a=e.Reduction.SUM_BY_NONZERO_WEIGHTS){let i=Zs(t,"onehotLabels","softmaxCrossEntropy");const o=Zs(n,"logits","softmaxCrossEntropy");let l=null;if(null!=s&&(l=Zs(s,"weights","softmaxCrossEntropy")),u(i.shape,o.shape,"Error in softmaxCrossEntropy: "),r>0){const e=$u(r),t=$u(1),n=$u(i.shape[1]);i=ci(di(i,ll(t,e)),pi(e,n))}const c=function(e,t,n=-1){if(-1===n&&(n=t.rank-1),n!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${n}`);return nl(((e,t,s)=>{const r=xl(t,[n],!0),a=ll(qr(t,"float32"),r);s([e,a]);const i=rl(di(a,e));return{value:ul(i,[n]),gradFunc:(e,t)=>{const[s,r]=t,a=fl(e.shape,[n]);return[di(Pi(e,a),ll(qr(s,"float32"),_o(r))),di(Pi(e,a),ll(_o(r),qr(s,"float32")))]}}}))(e,t)}(i,o);return ah(c,l,a)}}),fh={fft:zu,ifft:Bu,rfft:Vu,irfft:Pu},mh={hammingWindow:Tc,hannWindow:Ec,frame:Ac,stft:Rc},gh={flipLeftRight:Dc,resizeNearestNeighbor:Zc,resizeBilinear:Jc,rotateWithOffset:_c,cropAndResize:Fc,nonMaxSuppression:Mc,nonMaxSuppressionAsync:jc,nonMaxSuppressionWithScore:qc,nonMaxSuppressionWithScoreAsync:Kc,nonMaxSuppressionPadded:Xc,nonMaxSuppressionPaddedAsync:Yc,transform:Qc},yh={bandPart:eh,gramSchmidt:th,qr:sh},bh={absoluteDifference:ih,computeWeightedLoss:ah,cosineDistance:oh,hingeLoss:lh,huberLoss:uh,logLoss:ch,meanSquaredError:hh,sigmoidCrossEntropy:ph,softmaxCrossEntropy:dh};class xh extends Ha{minimize(e,t=!1,n){const{value:s,grads:r}=this.computeGradients(e,n);if(null!=n){const e=n.map((e=>({name:e.name,tensor:r[e.name]})));this.applyGradients(e)}else this.applyGradients(r);return ai(r),t?s:(s.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(e,t){return tl(e,t)}dispose(){null!=this.iterations_&&ai(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:$u(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(e){throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(e){return this.iterations_=(await e[0].tensor.data())[0],e.slice(1)}}Object.defineProperty(xh,Symbol.hasInstance,{value:e=>null!=e.minimize&&null!=e.computeGradients&&null!=e.applyGradients});class wh extends xh{constructor(e,t,n=null){super(),this.learningRate=e,this.rho=t,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=Us.backend.epsilon())}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Us.registeredVariables[t];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:`${t}/accum_grad`,variable:ri((()=>To(s).variable(false)))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:`${t}/accum_var`,variable:ri((()=>To(s).variable(false)))});const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const a=this.accumulatedGrads[n].variable,i=this.accumulatedUpdates[n].variable;ri((()=>{const e=ci(di(a,this.rho),di(Ol(r),1-this.rho)),t=di(pi(Uu(ci(i,this.epsilon)),Uu(ci(a,this.epsilon))),r),n=ci(di(i,this.rho),di(Ol(t),1-this.rho));a.assign(e),i.assign(n);const o=ci(di(t,-this.learningRate),s);s.assign(o)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(ai(this.accumulatedGrads.map((e=>e.variable))),ai(this.accumulatedUpdates.map((e=>e.variable))))}async getWeights(){const e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){const t=(e=await this.extractIterations(e)).length/2;this.accumulatedGrads=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)}))),this.accumulatedUpdates=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.rho,t.epsilon)}}wh.className="Adadelta",qa(wh);class kh extends xh{constructor(e,t=.1){super(),this.learningRate=e,this.initialAccumulatorValue=t,this.accumulatedGrads=[]}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Us.registeredVariables[t];if(null==this.accumulatedGrads[n]){const e=!1;this.accumulatedGrads[n]={originalName:`${t}/accumulator`,variable:ri((()=>Bo(s.shape,this.initialAccumulatorValue).variable(e)))}}const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const a=this.accumulatedGrads[n].variable;ri((()=>{const e=ci(a,Ol(r));a.assign(e);const t=ci(di(pi(r,Uu(ci(e,Us.backend.epsilon()))),-this.learningRate),s);s.assign(t)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&ai(this.accumulatedGrads.map((e=>e.variable)))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);this.accumulatedGrads=e.map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}}kh.className="Adagrad",qa(kh);class vh extends xh{constructor(e,t,n,s=null){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=s,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],ri((()=>{this.accBeta1=$u(t).variable(),this.accBeta2=$u(n).variable()})),null==s&&(this.epsilon=Us.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);ri((()=>{const n=ll(1,this.accBeta1),s=ll(1,this.accBeta2);t.forEach(((t,r)=>{const a=Us.registeredVariables[t];null==this.accumulatedFirstMoment[r]&&(this.accumulatedFirstMoment[r]={originalName:`${t}/m`,variable:ri((()=>To(a).variable(false)))}),null==this.accumulatedSecondMoment[r]&&(this.accumulatedSecondMoment[r]={originalName:`${t}/v`,variable:ri((()=>To(a).variable(false)))});const i=Array.isArray(e)?e[r].tensor:e[t];if(null==i)return;const o=this.accumulatedFirstMoment[r].variable,l=this.accumulatedSecondMoment[r].variable,u=ci(di(o,this.beta1),di(i,1-this.beta1)),c=ci(di(l,this.beta2),di(Ol(i),1-this.beta2)),h=pi(u,n),p=pi(c,s);o.assign(u),l.assign(c);const d=ci(di(pi(h,ci(Uu(p),this.epsilon)),-this.learningRate),a);a.assign(d)})),this.accBeta1.assign(di(this.accBeta1,this.beta1)),this.accBeta2.assign(di(this.accBeta2,this.beta2))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&ai(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedSecondMoment&&ai(this.accumulatedSecondMoment.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),ri((()=>{this.accBeta1.assign(Xl(this.beta1,this.iterations_+1)),this.accBeta2.assign(Xl(this.beta2,this.iterations_+1))}));const t=e.length/2;this.accumulatedFirstMoment=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)}))),this.accumulatedSecondMoment=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}}vh.className="Adam",qa(vh);class Nh extends xh{constructor(e,t,n,s=null,r=0){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=s,this.decay=r,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],ri((()=>{this.iteration=$u(0).variable(),this.accBeta1=$u(t).variable()})),null==s&&(this.epsilon=Us.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);ri((()=>{const n=ll(1,this.accBeta1),s=pi(-this.learningRate,ci(di(this.iteration,this.decay),1));t.forEach(((t,r)=>{const a=Us.registeredVariables[t];null==this.accumulatedFirstMoment[r]&&(this.accumulatedFirstMoment[r]={originalName:`${t}/m`,variable:To(a).variable(false)}),null==this.accumulatedWeightedInfNorm[r]&&(this.accumulatedWeightedInfNorm[r]={originalName:`${t}/v`,variable:To(a).variable(false)});const i=Array.isArray(e)?e[r].tensor:e[t];if(null==i)return;const o=this.accumulatedFirstMoment[r].variable,l=this.accumulatedWeightedInfNorm[r].variable,u=ci(di(o,this.beta1),di(i,1-this.beta1)),c=di(l,this.beta2),h=fi(i),p=Sl(c,h);o.assign(u),l.assign(p);const d=ci(di(pi(s,n),pi(u,ci(p,this.epsilon))),a);a.assign(d)})),this.iteration.assign(ci(this.iteration,1)),this.accBeta1.assign(di(this.accBeta1,this.beta1))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&ai(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedWeightedInfNorm&&ai(this.accumulatedWeightedInfNorm.map((e=>e.variable)))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}}Nh.className="Adamax",qa(Nh);class Ih extends xh{constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const r=Us.registeredVariables[t];ri((()=>{const e=ci(di(this.c,s),r);r.assign(e)}))})),this.incrementIterations()}setLearningRate(e){this.learningRate=e,null!=this.c&&this.c.dispose(),this.c=ii($u(-e))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(e){if(0!==(e=await this.extractIterations(e)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,t){return new e(t.learningRate)}}Ih.className="SGD",qa(Ih);class Ch extends Ih{constructor(e,t,n=!1){super(e),this.learningRate=e,this.momentum=t,this.useNesterov=n,this.accumulations=[],this.m=$u(this.momentum)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Us.registeredVariables[t];if(null==this.accumulations[n]){const e=!1;this.accumulations[n]={originalName:`${t}/momentum`,variable:ri((()=>To(s).variable(e)))}}const r=this.accumulations[n].variable,a=Array.isArray(e)?e[n].tensor:e[t];null!=a&&ri((()=>{let e;const t=ci(di(this.m,r),a);e=this.useNesterov?ci(di(this.c,ci(a,di(t,this.m))),s):ci(di(this.c,t),s),r.assign(t),s.assign(e)}))})),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&ai(this.accumulations.map((e=>e.variable)))}setMomentum(e){this.momentum=e}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);this.accumulations=e.map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}}Ch.className="Momentum",qa(Ch);class $h extends xh{constructor(e,t=.9,n=0,s=null,r=!1){if(super(),this.learningRate=e,this.decay=t,this.momentum=n,this.epsilon=s,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=r,null==s&&(this.epsilon=Us.backend.epsilon()),null==e)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Us.registeredVariables[t],r=!1;null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:`${t}/rms`,variable:ri((()=>To(s).variable(r)))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:`${t}/momentum`,variable:ri((()=>To(s).variable(r)))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:`${t}/mg`,variable:ri((()=>To(s).variable(r)))});const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const i=this.accumulatedMeanSquares[n].variable,o=this.accumulatedMoments[n].variable;ri((()=>{const e=ci(di(i,this.decay),di(Ol(a),1-this.decay));if(this.centered){const t=this.accumulatedMeanGrads[n].variable,r=ci(di(t,this.decay),di(a,1-this.decay)),l=pi(di(a,this.learningRate),Uu(ll(e,ci(Ol(r),this.epsilon)))),u=ci(di(o,this.momentum),l);i.assign(e),t.assign(r),o.assign(u);const c=ll(s,u);s.assign(c)}else{const e=ci(di(i,this.decay),di(Ol(a),1-this.decay)),t=ci(di(o,this.momentum),pi(di(a,this.learningRate),Uu(ci(e,this.epsilon))));i.assign(e),o.assign(t);const n=ll(s,t);s.assign(n)}}))})),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&ai(this.accumulatedMeanSquares.map((e=>e.variable))),null!=this.accumulatedMeanGrads&&this.centered&&ai(this.accumulatedMeanGrads.map((e=>e.variable))),null!=this.accumulatedMoments&&ai(this.accumulatedMoments.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);const t=this.centered?e.length/3:e.length/2,n=!1;this.accumulatedMeanSquares=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.accumulatedMoments=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.centered&&(this.accumulatedMeanGrads=e.slice(2*t,3*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}}$h.className="RMSProp",qa($h);class Sh{static sgd(e){return new Ih(e)}static momentum(e,t,n=!1){return new Ch(e,t,n)}static rmsprop(e,t=.9,n=0,s=null,r=!1){return new $h(e,t,n,s,r)}static adam(e=.001,t=.9,n=.999,s=null){return new vh(e,t,n,s)}static adadelta(e=.001,t=.95,n=null){return new wh(e,t,n)}static adamax(e=.002,t=.9,n=.999,s=null,r=0){return new Nh(e,t,n,s,r)}static adagrad(e,t=.1){return new kh(e,t)}}const Th={sgd:Sh.sgd,momentum:Sh.momentum,adadelta:Sh.adadelta,adagrad:Sh.adagrad,rmsprop:Sh.rmsprop,adamax:Sh.adamax,adam:Sh.adam},Eh="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:e=>e();function Ah(){return new Promise((e=>Eh((()=>e()))))}function Rh(e,t){const n=e[0].length;e.forEach(((e,t)=>{l(e.length===n,(()=>`Error in concat${n}D: rank of tensors[${t}] must be the same as the rank of the rest (${n})`))})),l(t>=0&&t<n,(()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`));const s=e[0];e.forEach(((e,r)=>{for(let a=0;a<n;a++)l(a===t||e[a]===s[a],(()=>`Error in concat${n}D: Shape of tensors[${r}] (${e}) does not match the shape of the rest (${s}) along the non-concatenated axis ${r}.`))}))}function Fh(e,t){const n=e[0].slice();for(let s=1;s<e.length;s++)n[t]+=e[s][t];return n}function Dh(e){return e<=30?e:_(e,Math.floor(Math.sqrt(e)))}function _h(e,t,n){return[n*("number"==typeof e?e:e[0]),t*("number"==typeof e?e:e[1])]}function Oh(e,t,n,s=!0){let r=[];if(s)r=r.concat(t.slice(0)),r.push(e[0]/n),r=r.concat(e.slice(1));else{r=r.concat(e[0]);const n=t.length;for(let s=0;s<n;++s)r=r.concat([e[s+1]/t[s],t[s]]);r=r.concat(e.slice(n+1))}return r}function Mh(e,t,n=!0){const s=[];if(n){s.push(t);for(let n=t+1;n<e;++n)n<=2*t?(s.push(n),s.push(n-(t+1))):s.push(n)}else{const n=[],r=[];for(let s=1;s<e;++s)s>=2*t+1||s%2==1?r.push(s):n.push(s);s.push(...n),s.push(0),s.push(...r)}return s}function Lh(e,t,n,s=!0){const r=[];s?r.push(e[0]/n):r.push(e[0]*n);for(let n=1;n<e.length;++n)n<=t.length?s?r.push(t[n-1]*e[n]):r.push(e[n]/t[n-1]):r.push(e[n]);return r}function zh(e,t){const n=[0];for(let s=0;s<t;++s)n.push(e[s][0]);return n}function Bh(e,t,n){const s=e.slice(0,1);for(let r=0;r<n;++r)s.push(e[r+1]-t[r][0]-t[r][1]);return s}const Ph=1.7580993408473768,Wh=1.0507009873554805,Vh=.3275911,Uh=.254829592,Gh=-.284496736,Hh=1.421413741,jh=-1.453152027,qh=1.061405429;function Kh(...e){K().getBool("IS_TEST")||console.warn(...e)}function Xh(e,t){if(e.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${t.length}.`);const n=new Float32Array(2*e.length);for(let s=0;s<n.length;s+=2)n[s]=e[s/2],n[s+1]=t[s/2];return n}function Yh(e){const t=new Float32Array(e.length/2),n=new Float32Array(e.length/2);for(let s=0;s<e.length;s+=2)t[s/2]=e[s],n[s/2]=e[s+1];return{real:t,imag:n}}function Jh(e){const t=Math.ceil(e.length/4),n=new Float32Array(t),s=new Float32Array(t);for(let t=0;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],s[Math.floor(t/4)]=e[t+1];return{real:n,imag:s}}function Zh(e){const t=Math.floor(e.length/4),n=new Float32Array(t),s=new Float32Array(t);for(let t=2;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],s[Math.floor(t/4)]=e[t+1];return{real:n,imag:s}}function Qh(e,t){return{real:e[2*t],imag:e[2*t+1]}}function ep(e,t,n,s){e[2*s]=t,e[2*s+1]=n}function tp(e,t){const n=new Float32Array(e/2),s=new Float32Array(e/2);for(let r=0;r<Math.ceil(e/2);r++){const a=(t?2:-2)*Math.PI*(r/e);n[r]=Math.cos(a),s[r]=Math.sin(a)}return{real:n,imag:s}}function np(e,t,n){const s=(n?2:-2)*Math.PI*(e/t);return{real:Math.cos(s),imag:Math.sin(s)}}const sp="->",rp=/->/g;function ap(e,t){const n=((e=e.replace(/\s/g,"")).length-e.replace(rp,"").length)/sp.length;if(n<1)throw new Error("Equations without an arrow are not supported.");if(n>1)throw new Error('Equation must contain exactly one arrow ("->").');const[s,r]=e.split(sp);l(-1===s.indexOf("..."),(()=>'The ellipsis notation ("...") is not supported yet.'));const a=s.split(","),i=a.length;if(t!==i)throw new Error(`Expected ${i} input tensors, received ${t}`);if(i>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");const o=[];for(let e=0;e<r.length;++e){const t=r[e];if(!a.some((e=>-1!==e.indexOf(t))))throw new Error(`Output subscripts contain the label ${t} not present in the input subscripts.`);-1===o.indexOf(t)&&o.push(t)}for(let e=0;e<s.length;++e){const t=s[e];-1===o.indexOf(t)&&","!==t&&o.push(t)}const u=new Array(a.length);for(let e=0;e<i;++e){if(new Set(a[e].split("")).size!==a[e].length)throw new Error(`Found duplicate axes in input component ${a[e]}. Support for duplicate axes in input is not implemented yet.`);u[e]=[];for(let t=0;t<a[e].length;++t)u[e].push(o.indexOf(a[e][t]))}const c=o.length,h=[];for(let e=r.length;e<c;++e)h.push(e);return{allDims:o,summedDims:h,idDims:u}}function ip(e,t){let n=new Array(e);n.fill(-1);for(let e=0;e<t.length;++e)n[t[e]]=e;const s=[];for(let t=0;t<e;++t)-1===n[t]&&s.push(t);return n=n.filter((e=>-1!==e)),{permutationIndices:n,expandDims:s}}function op(e,t,n){const s=new Array(e);for(let e=0;e<n.length;++e){const r=n[e].shape;for(let n=0;n<t[e].length;++n)void 0===s[t[e][n]]?s[t[e][n]]=r[n]:l(s[t[e][n]]===r[n],(()=>`Expected dimension ${s[t[e][n]]} at axis ${n} of input shaped ${JSON.stringify(r)}, but got dimension ${r[n]}`))}}function lp(e,t){const n=e,s=[];let r=0;0===e.length&&n.push(-1),r=e.length+1;for(let e=0;e<r;++e)s.push([]);const a=[];for(let e=0;e<n.length;++e){const r=cp(t,n[e]);for(const t of r)-1===a.indexOf(t)&&(s[e].push(t),a.push(t))}return{path:n,steps:s}}function up(e){return e.every(((e,t)=>e===t))}function cp(e,t){const n=[];for(let s=0;s<e.length;++s)0!==e[s].length&&-1===e[s].indexOf(t)&&-1!==t||n.push(s);return n}function hp(e,t,n=0){let s=[];if("number"==typeof t)l(e.shape[n]%t==0,(()=>"Number of splits must evenly divide the axis.")),s=new Array(t).fill(e.shape[n]/t);else{l(t.reduce(((e,t)=>(-1===t&&(e+=1),e)),0)<=1,(()=>"There should be only one negative value in split array."));const r=t.indexOf(-1);if(-1!==r){const s=t.reduce(((e,t)=>t>0?e+t:e));t[r]=e.shape[n]-s}l(e.shape[n]===t.reduce(((e,t)=>e+t)),(()=>"The sum of sizes must match the size of the axis dimension.")),s=t}return s}function pp(e,t){let n,s=!1;for(e<=30?(n=e,s=!0):n=_(e,Math.floor(Math.sqrt(e)));!s;)n>t||n===e?s=!0:n=_(e,n+1);return n}function dp(e,t,n){const s=[],r=e.length;for(let a=0;a<r;a++)a!==t?s.push(e[a]):s.push(n);return s}function fp(e,t,n,s){const r=t.shape.length,a=e.shape.length;if(0!==s&&(s<-r||s>r))throw new Error(`Expect batchDims in the range of [-${r}, ${r}], but got ${s}`);if(s<0&&(s+=r),s>a)throw new Error(`batchDims (${s}) must be less than rank(x) (\n    ${a}).`);if(n<s)throw new Error(`batchDims (${s}) must be less than or equal to axis (${n}).`);for(let n=0;n<s;++n)if(e.shape[n]!==t.shape[n])throw new Error(`x.shape[${n}]: ${e.shape[n]} should be equal to indices.shape[${n}]: ${t.shape[n]}.`);const i=e.shape[n],o=[];let l=1,u=1,c=1;for(let t=0;t<s;++t)o.push(e.shape[t]),l*=e.shape[t];for(let t=s;t<n;t++)o.push(e.shape[t]),u*=e.shape[t];for(let e=s;e<r;e++)o.push(t.shape[e]);for(let t=n+1;t<a;t++)o.push(e.shape[t]),c*=e.shape[t];return{batchSize:l,sliceSize:c,outerSize:u,dimSize:i,outputShape:o}}var mp=Object.freeze({__proto__:null,segOpComputeOptimalWindowSize:pp,computeOutShape:dp,collectGatherOpShapeInfo:fp});function gp(e){try{return e.map((e=>ls(e)))}catch(e){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${e}`)}}function yp(e){return e.map((e=>os(e)))}var bp=Object.freeze({__proto__:null,slice_util:Ga,segment_util:mp,fromUint8ToStringArray:gp,fromStringArrayToUint8:yp,upcastType:Rs,axesAreInnerMostDims:hl,combineLocations:pl,computeOutAndReduceShapes:dl,expandShapeToKeepDim:fl,assertAxesAreInnerMostDims:ml,getAxesPermutation:gl,getUndoAxesPermutation:yl,getInnerMostAxes:bl,getBroadcastDims:No,getReductionAxes:Io,assertAndGetBroadcastShape:Co,assertParamsConsistent:Rh,computeOutShape:Fh,computeDilation2DInfo:Si,computePool2DInfo:Ti,computePool3DInfo:Ei,computeConv2DInfo:Ai,computeConv3DInfo:Ri,computeDefaultPad:Fi,tupleValuesAreOne:Li,eitherStridesOrDilationsAreOne:zi,convertConv2DDataFormat:Bi,getFusedDyActivation:bc,getFusedBiasGradient:xc,applyActivation:wc,shouldFuse:kc,PARALLELIZE_THRESHOLD:30,computeOptimalWindowSize:Dh,getImageCenter:_h,getReshaped:Oh,getPermuted:Mh,getReshapedPermuted:Lh,getSliceBeginCoords:zh,getSliceSize:Bh,prepareAndValidate:va,validateUpdateShape:Ia,validateInput:Ca,calculateShapes:$a,SELU_SCALEALPHA:Ph,SELU_SCALE:Wh,ERF_P:Vh,ERF_A1:Uh,ERF_A2:Gh,ERF_A3:Hh,ERF_A4:jh,ERF_A5:qh,warn:Kh,log:function(...e){K().getBool("IS_TEST")||console.log(...e)},mergeRealAndImagArrays:Xh,splitRealAndImagArrays:Yh,complexWithEvenIndex:Jh,complexWithOddIndex:Zh,getComplexWithIndex:Qh,assignToTypedArray:ep,exponents:tp,exponent:np,decodeEinsumEquation:ap,getEinsumPermutation:ip,checkEinsumDimSizes:op,getEinsumComputePath:lp,isIdentityPermutation:up,prepareSplitSize:hp}),xp=Object.freeze({__proto__:null,nonMaxSuppressionV3Impl:Bc,nonMaxSuppressionV4Impl:Pc,nonMaxSuppressionV5Impl:Wc,whereImpl:rc});const wp={kernelName:Z,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>di(e,qu(qr(n,"float32"),-1))}}},kp={kernelName:Q,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=Ol(qr(n,"float32")),s=Uu(ll($u(1),t));return rl(pi(e,s))}}}},vp={kernelName:ee,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=Uu(ll(Ol(qr(n,"float32")),1));return pi(e,t)}}}},Np={kernelName:te,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Co(n.shape,s.shape);return{a:()=>{let t=e;const s=Io(n.shape,r);return s.length>0&&(t=ul(t,s)),Pi(t,n.shape)},b:()=>{let t=e;const n=Io(s.shape,r);return n.length>0&&(t=ul(t,n)),Pi(t,s.shape)}}}},Ip={kernelName:ne,saveAllInputs:!0,gradFunc:(e,t)=>{const n={};return t.forEach(((t,s)=>{n[s]=()=>e.clone()})),n}},Cp={kernelName:ae,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>To(n)}}},$p={kernelName:ie,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>To(n)}}},Sp={kernelName:oe,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>pi(e,Uu(ll($u(1),Ol(qr(n,"float32")))))}}},Tp={kernelName:le,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=Uu(ci($u(1),Ol(qr(n,"float32"))));return pi(e,t)}}}},Ep={kernelName:he,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Co(n.shape,s.shape);return{a:()=>{const t=ci(Ol(n),Ol(s));let a=di(e,pi(s,t));const i=Io(n.shape,r);return i.length>0&&(a=ul(a,i)),Pi(a,n.shape)},b:()=>{const t=ci(Ol(n),Ol(s));let a=rl(di(e,pi(n,t)));const i=Io(s.shape,r);return i.length>0&&(a=ul(a,i)),Pi(a,s.shape)}}}},Ap={kernelName:ue,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>pi(e,ci(Ol(qr(n,"float32")),1))}}},Rp={kernelName:ce,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>pi(e,ll($u(1),Ol(qr(n,"float32"))))}}};const Fp=tr({avgPool3dGrad_:function(e,t,n,s,r,a){const i=Zs(e,"dy","avgPool3dGrad"),o=Zs(t,"input","avgPool3dGrad");let u=i,c=o,h=!1;4===o.rank&&(h=!0,u=Pi(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]]),c=Pi(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),l(5===u.rank,(()=>`Error in avgPool3dGrad: dy must be rank 5 but got rank ${u.rank}.`)),l(5===c.rank,(()=>`Error in avgPool3dGrad: input must be rank 5 but got rank ${c.rank}.`)),null!=a&&l(f(r),(()=>`Error in avgPool3dGrad: pad must be an integer when using, dimRoundingMode ${a} but got pad ${r}.`));const p={dy:u,input:c},d={filterSize:n,strides:s,pad:r,dimRoundingMode:a},m=Us.runKernel(me,p,d);return h?Pi(m,[m.shape[1],m.shape[2],m.shape[3],m.shape[4]]):m}}),Dp={kernelName:fe,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{filterSize:r,strides:a,pad:i,dimRoundingMode:o}=n;return{x:()=>Fp(e,s,r,a,i,o)}}};const _p=tr({avgPoolGrad_:function(e,t,n,s,r){const a=Zs(e,"dy","avgPoolGrad"),i=Zs(t,"input","avgPoolGrad");l(i.rank===a.rank,(()=>`Rank of input (${i.rank}) does not match rank of dy (${a.rank})`));let o=i,u=a,c=!1;3===i.rank&&(c=!0,o=Pi(i,[1,i.shape[0],i.shape[1],i.shape[2]]),u=Pi(a,[1,a.shape[0],a.shape[1],a.shape[2]])),l(4===u.rank,(()=>`Error in avgPoolGrad: dy must be rank 4 but got rank ${u.rank}.`)),l(4===o.rank,(()=>`Error in avgPoolGrad: input must be rank 4 but got rank ${o.rank}.`));const h={dy:u,input:o},p={filterSize:n,strides:s,pad:r},d=Us.runKernel(de,h,p);return c?Pi(d,[d.shape[1],d.shape[2],d.shape[3]]):d}}),Op={kernelName:pe,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{filterSize:r,strides:a,pad:i}=n;return{x:()=>_p(e,s,r,a,i)}}},Mp={kernelName:ge,inputsToSave:["a","b"],gradFunc:(e,t,n)=>{const[s,r]=t,{transposeA:a,transposeB:i}=n;return a||i?!a&&i?{a:()=>ha(e,r,!1,!1),b:()=>ha(e,s,!0,!1)}:a&&!i?{a:()=>ha(r,e,!1,!0),b:()=>ha(s,e,!1,!1)}:{a:()=>ha(r,e,!0,!0),b:()=>ha(e,s,!0,!0)}:{a:()=>ha(e,r,!1,!0),b:()=>ha(s,e,!0,!1)}}},Lp={kernelName:ye,gradFunc:(e,t,n)=>{const{blockShape:s,crops:r}=n;return{x:()=>ql(e,s,r)}}},zp={kernelName:xe,gradFunc:(e,t,n)=>{const s=n,r=s.inputShape,a=s.shape,i=Array.from(a);for(let e=r.length-1;e>=0;e--)if(r[e]===a[e])i[e]=1;else if(1!==r[e])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${a}].`);const o=[];for(let e=0;e<i.length;e++)i[e]>1&&o.push(e);return{x:()=>ul(e,o,!0)}}},Bp={kernelName:we,gradFunc:e=>({x:()=>e.clone()})},Pp={kernelName:ke,gradFunc:e=>({x:()=>To(e)})},Wp={kernelName:ve,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{clipValueMin:r,clipValueMax:a}=n;return{x:()=>So(wl(Uo(s,r),Yo(s,a)),e,To(e))}}},Vp={kernelName:Ie,inputsToSave:["x"],gradFunc:wp.gradFunc},Up={kernelName:Ce,saveAllInputs:!0,gradFunc:(e,t,n)=>{const s=t.map((e=>e.shape)),{axis:r}=n,a=x(r,t[0].shape)[0],i=s.map((e=>e[a]));return Wu(e,i,a).map((e=>()=>e))}},Gp={kernelName:$e,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[s,r]=t,{dilations:a,strides:i,pad:o,dataFormat:u}=n;return l(Li(a),(()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`)),{x:()=>uo(s.shape,e,r,i,o,u),filter:()=>yc(s,e,r.shape,i,o,u)}}},Hp={kernelName:Te,inputsToSave:["dy","filter"],gradFunc:(e,t,n)=>{const[s,r]=t,{strides:a,pad:i,dataFormat:o,dimRoundingMode:l}=n;return{dy:()=>oo(e,r,a,i,o,1,l),filter:()=>yc(e,s,r.shape,a,i,o,l)}}};const jp=tr({conv3DBackpropFilter_:function(e,t,n,s,r){let a=e;4===e.rank&&(a=Pi(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]));let i=t;4===i.rank&&(i=Pi(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]])),l(5===a.rank,(()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${a.shape}.`)),l(5===i.rank,(()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${i.shape}.`)),l(5===n.length,(()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${n}.`)),l(a.shape[4]===n[3],(()=>`Error in conv3dDerFilter: depth of input ${a.shape[4]}) must match input depth in filter (${n[3]}.`)),l(i.shape[4]===n[4],(()=>`Error in conv3dDerFilter: depth of dy (${i.shape[4]}) must match output depth for filter (${n[4]}).`));const o={x:a,dy:i},u={strides:s,pad:r,filterShape:n};return Us.runKernel(Ae,o,u)}}),qp={kernelName:Ee,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:s,strides:r,pad:a}=n;l(Li(s),(()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`));const[i,o]=t;return{x:()=>po(i.shape,e,o,r,a),filter:()=>jp(i,e,o.shape,r,a)}}},Kp={kernelName:Fe,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>di(rl(Ru(qr(n,"float32"))),e)}}},Xp={kernelName:De,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>di(Fu(qr(n,"float32")),e)}}},Yp={kernelName:_e,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{axis:r,exclusive:a,reverse:i}=n;return{x:()=>{const t=gl([r],s.rank);let n=yo(e,r,a,!i);return null!=t&&(n=da(n,t)),n}}}},Jp={kernelName:ze,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:s,strides:r,pad:a,dimRoundingMode:i}=n,o=null==s?[1,1]:s;l(Li(o),(()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${o}'`));const[u,c]=t;return l(4===u.rank,(()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${u.rank}.`)),l(4===c.rank,(()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${c.rank}.`)),l(u.shape[3]===c.shape[2],(()=>`Error in gradient of depthwiseConv2d: number of input channels (${u.shape[3]}) must match the inChannels dimension in filter ${c.shape[2]}.`)),l(zi(r,o),(()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${r} and dilations '${o}'.`)),null!=i&&l(f(a),(()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`)),{x:()=>Ic(u.shape,e,c,r,a,s,i),filter:()=>Nc(u,e,c.shape,r,a,s,i)}}},Zp={kernelName:Ve,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[s,r]=t,a={x:s,filter:r,dy:e},i={x:s,filter:r,dy:e};return{x:()=>Us.runKernel(Ue,a,n),filter:()=>Us.runKernel(Ge,i,n)}}},Qp={kernelName:qe,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t,s={dy:e,y:n};return{x:()=>Us.runKernel(Ke,s)}}},ed={kernelName:Xe,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,s=di(_o(rl(Ol(n))),2/Math.sqrt(Math.PI));return{x:()=>di(e,s)}}},td={kernelName:Je,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>di(e,n)}}},nd={kernelName:Ze,inputsToSave:["input"],gradFunc:(e,t)=>{const[n]=t;return{input:()=>Pi(e,n.shape)}}},sd={kernelName:Qe,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>di(e,_o(n))}}},rd={kernelName:st,gradFunc:e=>({x:()=>To(e)})},ad={kernelName:rt,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Co(n.shape,s.shape);return{a:()=>{const t=pi(e,qr(s,"float32")),a=Io(n.shape,r);return a.length>0?Pi(ul(t,a),n.shape):t},b:()=>{let t=di(e,qr(n,"float32"));const a=Io(s.shape,r);a.length>0&&(t=Pi(ul(t,a),s.shape));const i=Ol(s);return rl(pi(t,qr(i,"float32")))}}}},id={kernelName:at,inputsToSave:["x","mean","variance","scale"],gradFunc:(e,t,n)=>{const{varianceEpsilon:s}=n,[r,a,i,o]=t,l=null==o?$u(1):o,u=Io(a.shape,r.shape),c=[];if(1===a.rank){for(let e=0;e<r.shape.length-1;++e)c.push(r.shape[e]);c.push(1)}const h=ll(r,a),p=di(e,l),d=Cu(ci(i,$u(s))),f=di(di(di(d,d),d),$u(-.5));return{x:()=>1===a.rank?Pi(di(di(e,Lo(Pi(d,[1,1,1,a.shape[0]]),c)),l),r.shape):Pi(di(di(e,d),l),r.shape),mean:()=>{let e=di(di(d,$u(-1)),p);return 1===a.rank&&(e=ul(e,u)),Pi(e,a.shape)},variance:()=>{let e=di(di(f,h),p);return 1===a.rank&&(e=ul(e,u)),Pi(e,a.shape)},scale:()=>{const t=di(h,d);let n=di(e,t);return 1===a.rank&&(n=ul(n,u)),Pi(n,a.shape)},offset:()=>{let t=e;return 1===a.rank&&(t=ul(t,u)),Pi(t,a.shape)}}}},od={kernelName:it,inputsToSave:["x","indices"],gradFunc:(e,t,n)=>{const[s,r]=t,{axis:a}=n,i=x(a,s.shape)[0];return{x:()=>{const t=s.shape,n=r.size,o=t.slice(0,i),l=o.length,u=t.slice(a,t.length).slice(1),c=u.length,h=ld(0,l),p=ld(l+1,l+1+c),d=ud([o,[n],u]),f=Pi(e,d),m=Pi(r,[n]),g=ud([[l],h,p]),y=da(f,g);let b=tc(y,m,s.shape[i]);const x=yl(g);return b=da(b,x),b},indices:()=>r}}};function ld(e,t){const n=[];for(let s=e;s<t;++s)n.push(s);return n}function ud(e){const t=[];for(let n=0;n<e.length;++n)for(let s=0;s<e[n].length;++s)t.push(e[n][s]);return t}const cd={kernelName:ut,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>To(n),b:()=>To(s)}}},hd={kernelName:ct,gradFunc:e=>({x:()=>qr(e,"float32")})},pd={kernelName:dt,gradFunc:e=>({x:()=>To(e)})},dd={kernelName:ft,gradFunc:e=>({x:()=>To(e)})},fd={kernelName:mt,gradFunc:e=>({x:()=>To(e)})},md={kernelName:gt,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{alpha:r}=n,a=Vo(s,0);return{x:()=>So(a,e,di(e,r))}}},gd={kernelName:kt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>pi(e,ci(n,1))}}},yd={kernelName:wt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>pi(e,qr(n,"float32"))}}},bd={kernelName:Ct,inputsToSave:[],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s]=t,{axis:r}=n;return{logits:()=>{const t=_o(s);return ll(e,di(ul(e,r,!0),t))}}}};const xd=tr({localResponseNormalizationBackprop_:function(e,t,n,s=5,r=1,a=1,i=.5){const o={x:e,y:t,dy:n},l={depthRadius:s,bias:r,alpha:a,beta:i};return Us.runKernel(St,o,l)}}),wd={kernelName:$t,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,r]=t,{depthRadius:a,bias:i,alpha:o,beta:l}=n;return{x:()=>xd(s,r,e,a,i,o,l)}}};function kd(e,t,n,s){return t.rank<n.rank&&(t=Pi(t,fl(t.shape,s))),e.rank<n.rank&&(e=Pi(e,fl(e.shape,s))),{x:()=>di(e,qr($o(n,t),e.dtype))}}const vd={kernelName:Tt,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const s=n,{reductionIndices:r}=s,a=t[0],i=kd(e,t[1],a,x(r,a.shape));return{x:()=>i.x()}}},Nd={kernelName:Et,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>di(e,qr(Uo(n,s),"float32")),b:()=>di(e,qr(Xo(n,s),"float32"))}}};const Id=tr({maxPool3dGrad_:function(e,t,n,s,r,a,i){const o=Zs(e,"dy","maxPool3dGrad"),u=Zs(t,"input","maxPool3dGrad"),c=Zs(n,"output","maxPool3dGrad");let h=o,p=u,d=c,m=!1;4===u.rank&&(m=!0,h=Pi(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]]),p=Pi(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]]),d=Pi(c,[1,c.shape[0],c.shape[1],c.shape[2],c.shape[3]])),l(5===h.rank,(()=>`Error in maxPool3dGrad: dy must be rank 5 but got rank ${h.rank}.`)),l(5===p.rank,(()=>`Error in maxPool3dGrad: input must be rank 5 but got rank ${p.rank}.`)),l(5===d.rank,(()=>`Error in maxPool3dGrad: output must be rank 5 but got rank ${d.rank}.`)),null!=i&&l(f(a),(()=>`Error in maxPool3dGrad: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`));const g={dy:h,input:p,output:d},y={filterSize:s,strides:r,pad:a,dimRoundingMode:i},b=Us.runKernel(Dt,g,y);return m?Pi(b,[b.shape[1],b.shape[2],b.shape[3],b.shape[4]]):b}}),Cd={kernelName:Ft,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,r]=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=n;return{x:()=>Id(e,s,r,a,i,o,l)}}};const $d=tr({maxPoolGrad_:function(e,t,n,s,r,a,i){const o=Zs(e,"dy","maxPoolGrad"),u=Zs(t,"input","maxPoolGrad"),c=Zs(n,"output","maxPoolGrad");l(u.rank===o.rank,(()=>`Rank of input (${u.rank}) does not match rank of dy (${o.rank})`)),l(4===o.rank,(()=>`Error in maxPoolGrad: dy must be rank 4 but got rank ${o.rank}.`)),l(4===u.rank,(()=>`Error in maxPoolGrad: input must be rank 4 but got rank ${u.rank}.`)),null!=i&&l(f(a),(()=>`Error in maxPoolGrad: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`));const h={dy:o,input:u,output:c},p={filterSize:s,strides:r,pad:a,dimRoundingMode:i};return Us.runKernel(Rt,h,p)}}),Sd={kernelName:Yt,inputsToSave:["x"],gradFunc:(e,t,n)=>{const s=t[0],{paddings:r}=n,a=r.map((e=>e[0]));return{x:()=>Hi(e,a,s.shape)}}},Td={kernelName:Cn,gradFunc:(e,t,n)=>{const{blockShape:s,paddings:r}=n;return{x:()=>Ki(e,s,r)}}},Ed={kernelName:$n,gradFunc:(e,t,n)=>{const{axis:s}=n;return{x:()=>Ui(e,s)}}};const Ad=[wp,kp,vp,Np,Ip,Cp,$p,Sp,Tp,Ep,Ap,Rp,Dp,Op,Mp,Lp,zp,Bp,Pp,Wp,Vp,Up,Hp,Gp,qp,Kp,Xp,Yp,Jp,Zp,{kernelName:He,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Co(n.shape,s.shape);return{a:()=>{const t=pi(e,qr(s,"float32")),a=Io(n.shape,r);return a.length>0?Pi(ul(t,a),n.shape):t},b:()=>{let t=di(e,qr(n,"float32"));const a=Io(s.shape,r);a.length>0&&(t=Pi(ul(t,a),s.shape));const i=Ol(s);return rl(pi(t,qr(i,"float32")))}}}},Qp,ed,td,nd,sd,ad,rd,id,od,cd,hd,pd,dd,fd,md,gd,yd,bd,wd,vd,vd,Nd,Cd,{kernelName:At,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,r]=t,{filterSize:a,strides:i,pad:o}=n;return{x:()=>$d(e,s,r,a,i,o)}}},{kernelName:Ot,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{axis:r}=n,a=x(r,s.shape),i=p(dl(s.shape,a)[1]);return{x:()=>{const t=s.shape.slice();a.forEach((e=>{t[e]=1}));const n=Pi(e,t);return pi(di(n,Al(s.shape,"float32")),i)}}}},{kernelName:Mt,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const s=n,{axis:r}=s,[a,i]=t,o=kd(e,i,a,x(r,a.shape));return{x:()=>o.x()}}},{kernelName:Lt,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>di(e,qr(Yo(n,s),"float32")),b:()=>di(e,qr(Vo(n,s),"float32"))}}},{kernelName:zt,inputsToSave:["x"],gradFunc:(e,t,n)=>{const s=t[0],{paddings:r}=n,a=r.map((e=>e[0]));return{x:()=>Hi(e,a,s.shape)}}},{kernelName:Bt,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Co(n.shape,s.shape);return{a:()=>{const t=Io(n.shape,r);return t.length>0?Pi(ul(e,t),n.shape):e},b:()=>{const t=di(e,rl(Po(pi(n,s)))),a=Io(s.shape,r);return a.length>0?Pi(ul(t,a),s.shape):t}}}},{kernelName:Wt,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Co(n.shape,s.shape);return{a:()=>{const t=di(e,qr(s,"float32")),a=Io(n.shape,r);return a.length>0?Pi(ul(t,a),n.shape):t},b:()=>{const t=di(e,qr(n,"float32")),a=Io(s.shape,r);return a.length>0?Pi(ul(t,a),s.shape):t}}}},{kernelName:Vt,gradFunc:e=>({x:()=>rl(e)})},{kernelName:Kt,inputsToSave:["indices"],gradFunc:(e,t)=>{const n=t[0];return{indices:()=>El(n.shape,"float32")}}},{kernelName:qt,gradFunc:e=>({x:()=>To(e)})},{kernelName:Xt,saveAllInputs:!0,gradFunc:(e,t,n)=>{const{axis:s}=n;return nc(e,s).map((e=>()=>e))}},Sd,Sd,{kernelName:Jt,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(e,t)=>{const[n,s,r]=t,a=n,i=s,o=Co(a.shape,i.shape);return{a:()=>{const t=qr(i,"float32");let n=di(e,di(t,Xl(a,ll(t,$u(1)))));const s=Io(a.shape,o);return s.length>0&&(n=ul(n,s)),Pi(n,a.shape)},b:()=>{const t=Vo(a,0),n=So(t,Qo(a),To(a));let s=di(e,di(r,n));const l=Io(i.shape,o);return l.length>0&&(s=ul(s,l)),Pi(s,i.shape)}}}},{kernelName:Zt,inputsToSave:["x","alpha"],gradFunc:(e,t)=>{const[n,s]=t,r=Vo(n,0);return{x:()=>So(r,e,di(e,s)),alpha:()=>{let t=So(r,To(e),di(e,n));const a=Io(s.shape,e.shape);return a.length>0&&(t=ul(t,a)),Pi(t,s.shape)}}}},{kernelName:nn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>pi(e,rl(Ol(n)))}}},{kernelName:cn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,s=di(Yo(n,6),qu(n));return{x:()=>di(e,qr(s,"float32"))}}},{kernelName:sn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>di(e,qr(qu(n),"float32"))}}},{kernelName:rn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Pi(e,n.shape)}}},{kernelName:ln,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[s]=t,r={dy:e,images:s};return{images:()=>Us.runKernel(un,r,n)}}},{kernelName:an,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[s]=t,r={dy:e,images:s};return{images:()=>Us.runKernel(on,r,n)}}},{kernelName:hn,gradFunc:(e,t,n)=>{const{dims:s}=n,r=x(s,e.shape);return{x:()=>xu(e,r)}}},{kernelName:pn,gradFunc:e=>({x:()=>To(e)})},{kernelName:dn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>rl(pi(e,di(Xl(n,1.5),2)))}}},{kernelName:mn,inputsToSave:["condition"],gradFunc:(e,t)=>{const[n]=t;return{condition:()=>qr(To(n),"float32"),t:()=>di(e,qr(n,e.dtype)),e:()=>di(e,qr(kl(n),e.dtype))}}},{kernelName:gn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=Vo(n,$u(0)),s=$u(Ph),r=$u(Wh),a=di(e,r),i=di(di(e,s),_o(qr(n,"float32")));return So(t,a,i)}}}},{kernelName:kn,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>di(e,di(n,ll($u(1),n)))}}},{kernelName:wn,gradFunc:e=>({x:()=>To(e)})},{kernelName:bn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>di(mo(qr(n,"float32")),e)}}},{kernelName:xn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>di(go(qr(n,"float32")),e)}}},{kernelName:yn,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{begin:r,size:a}=n,i=s.shape,[o,l]=Va(s,r,a),u=[];for(let t=0;t<e.rank;t++)u.push([o[t],i[t]-o[t]-l[t]]);return{x:()=>Vl(e,u)}}},{kernelName:Sn,outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s]=t,{dim:r}=n,a=di(e,s);return{logits:()=>ll(a,di(ul(a,[r],true),s))}}},{kernelName:vn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>di(e,Gi(n))}}},Td,Td,Ed,Ed,{kernelName:Nn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>pi(e,di(Uu(qr(n,"float32")),2))}}},{kernelName:Tn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=$u(2);return{a:()=>di(e,di(r,ll(n,s))),b:()=>di(e,di(r,ll(s,n)))}}},{kernelName:En,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>di(e,di(qr(n,"float32"),2))}}},{kernelName:Un,gradFunc:e=>({x:()=>To(e)})},{kernelName:An,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Co(n.shape,s.shape);return{a:()=>{let t=e;const s=Io(n.shape,r);return s.length>0&&(t=ul(t,s)),Pi(t,n.shape)},b:()=>{let t=e;const n=Io(s.shape,r);return n.length>0&&(t=ul(t,n)),Pi(rl(t),s.shape)}}}},{kernelName:In,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,r=s.shape.slice(),{axis:a}=n;x(a,s.shape).forEach((e=>{r[e]=1}));const i=Pi(e,r),o=di(i,Al(s.shape,"float32"));return{x:()=>o}}},{kernelName:Dn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>pi(e,Ol(mo(n)))}}},{kernelName:_n,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>di(ll($u(1),Ol(n)),e)}}},{kernelName:On,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{reps:r}=n;return{x:()=>{let t=To(s);if(1===s.rank)for(let n=0;n<r[0];++n)t=ci(t,Hi(e,[n*s.shape[0]],[s.shape[0]]));else if(2===s.rank)for(let n=0;n<r[0];++n)for(let a=0;a<r[1];++a)t=ci(t,Hi(e,[n*s.shape[0],a*s.shape[1]],[s.shape[0],s.shape[1]]));else if(3===s.rank)for(let n=0;n<r[0];++n)for(let a=0;a<r[1];++a)for(let i=0;i<r[2];++i)t=ci(t,Hi(e,[n*s.shape[0],a*s.shape[1],i*s.shape[2]],[s.shape[0],s.shape[1],s.shape[2]]));else{if(4!==s.rank)throw new Error(`Gradient for tile operation is not implemented for rank-${s.rank} tensors yet.`);for(let n=0;n<r[0];++n)for(let a=0;a<r[1];++a)for(let i=0;i<r[2];++i)for(let o=0;o<r[3];++o)t=ci(t,Hi(e,[n*s.shape[0],a*s.shape[1],i*s.shape[2],o*s.shape[3]],[s.shape[0],s.shape[1],s.shape[2],s.shape[3]]))}return t}}}},{kernelName:zn,gradFunc:(e,t,n)=>{const s=n,{perm:r}=s,a=yl(r);return{x:()=>da(e,a)}}},{kernelName:Pn,gradFunc:(e,t,n)=>{const s=n,{axis:r}=s;return{value:()=>ju(e,r)}}},{kernelName:Wn,inputsToSave:["segmentIds"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>function(e,t){const n=Sl(t,To(t)),s=Wo(e,n);let r=Uo(t,$u(0,"int32"));const a=s.rank-r.rank;for(let e=0;e<a;++e)r=Oo(r,e+1);r=wl(r,Al(s.shape,"bool"));const i=To(s);return So(r,s,i)}(e,n)}}},{kernelName:Vn,gradFunc:e=>({x:()=>To(e)})}];for(const e of Ad)ts(e);let Rd;function Fd(){return null==Rd&&(Rd=ui().epsilon()),Rd}Ns().prototype.abs=function(){return this.throwIfDisposed(),fi(this)},Ns().prototype.acos=function(){return this.throwIfDisposed(),mi(this)},Ns().prototype.acosh=function(){return this.throwIfDisposed(),gi(this)},Ns().prototype.add=function(e){return this.throwIfDisposed(),ci(this,e)},Ns().prototype.all=function(e,t){return this.throwIfDisposed(),bi(this,e,t)},Ns().prototype.any=function(e,t){return this.throwIfDisposed(),xi(this,e,t)},Ns().prototype.argMax=function(e){return this.throwIfDisposed(),wi(this,e)},Ns().prototype.argMin=function(e){return this.throwIfDisposed(),ki(this,e)},Ns().prototype.asScalar=function(){return this.throwIfDisposed(),l(1===this.size,(()=>"The array must have only 1 element.")),Pi(this,[])},Ns().prototype.asType=function(e){return this.throwIfDisposed(),qr(this,e)},Ns().prototype.as1D=function(){return this.throwIfDisposed(),Pi(this,[this.size])},Ns().prototype.as2D=function(e,t){return this.throwIfDisposed(),Pi(this,[e,t])},Ns().prototype.as3D=function(e,t,n){return this.throwIfDisposed(),Pi(this,[e,t,n])},Ns().prototype.as4D=function(e,t,n,s){return this.throwIfDisposed(),Pi(this,[e,t,n,s])},Ns().prototype.as5D=function(e,t,n,s,r){return this.throwIfDisposed(),Pi(this,[e,t,n,s,r])},Ns().prototype.asin=function(){return this.throwIfDisposed(),vi(this)},Ns().prototype.asinh=function(){return this.throwIfDisposed(),Ni(this)},Ns().prototype.atan=function(){return this.throwIfDisposed(),Ii(this)},Ns().prototype.atan2=function(e){return this.throwIfDisposed(),Ci(this,e)},Ns().prototype.atanh=function(){return this.throwIfDisposed(),$i(this)},Ns().prototype.avgPool=function(e,t,n,s){return this.throwIfDisposed(),Wi(this,e,t,n,s)},Ns().prototype.batchToSpaceND=function(e,t){return this.throwIfDisposed(),Ki(this,e,t)},Ns().prototype.batchNorm=function(e,t,n,s,r){return this.throwIfDisposed(),Xi(this,e,t,n,s,r)},Ns().prototype.broadcastTo=function(e){return this.throwIfDisposed(),eo(this,e)},Ns().prototype.cast=function(e){return this.throwIfDisposed(),qr(this,e)},Ns().prototype.ceil=function(){return this.throwIfDisposed(),to(this)},Ns().prototype.clipByValue=function(e,t){return this.throwIfDisposed(),no(this,e,t)},Ns().prototype.concat=function(e,t){return this.throwIfDisposed(),e instanceof vs&&(e=[e]),Ui([this,...e],t)},Ns().prototype.conv1d=function(e,t,n,s,r,a){return this.throwIfDisposed(),lo(this,e,t,n,s,r,a)},Ns().prototype.conv2dTranspose=function(e,t,n,s,r){return this.throwIfDisposed(),co(this,e,t,n,s,r)},Ns().prototype.conv2d=function(e,t,n,s,r,a){return this.throwIfDisposed(),oo(this,e,t,n,s,r,a)},Ns().prototype.cos=function(){return this.throwIfDisposed(),mo(this)},Ns().prototype.cosh=function(){return this.throwIfDisposed(),go(this)},Ns().prototype.cumsum=function(e,t,n){return this.throwIfDisposed(),yo(this,e,t,n)},Ns().prototype.depthToSpace=function(e,t){return this.throwIfDisposed(),xo(this,e,t)},Ns().prototype.depthwiseConv2d=function(e,t,n,s,r,a){return this.throwIfDisposed(),wo(this,e,t,n,s,r,a)},Ns().prototype.dilation2d=function(e,t,n,s,r){return this.throwIfDisposed(),vo(this,e,t,n,s,r)},Ns().prototype.divNoNan=function(e){return this.throwIfDisposed(),Eo(this,e)},Ns().prototype.div=function(e){return this.throwIfDisposed(),pi(this,e)},Ns().prototype.dot=function(e){return this.throwIfDisposed(),Ao(this,e)},Ns().prototype.elu=function(){return this.throwIfDisposed(),Fo(this)},Ns().prototype.equal=function(e){return this.throwIfDisposed(),$o(this,e)},Ns().prototype.erf=function(){return this.throwIfDisposed(),Do(this)},Ns().prototype.exp=function(){return this.throwIfDisposed(),_o(this)},Ns().prototype.expandDims=function(e){return this.throwIfDisposed(),Oo(this,e)},Ns().prototype.expm1=function(){return this.throwIfDisposed(),Mo(this)},Ns().prototype.fft=function(){return this.throwIfDisposed(),zu(this)},Ns().prototype.flatten=function(){return this.throwIfDisposed(),Pi(this,[this.size])},Ns().prototype.floor=function(){return this.throwIfDisposed(),Po(this)},Ns().prototype.floorDiv=function(e){return this.throwIfDisposed(),hi(this,e)},Ns().prototype.gather=function(e,t){return this.throwIfDisposed(),Wo(this,e,t)},Ns().prototype.greaterEqual=function(e){return this.throwIfDisposed(),Uo(this,e)},Ns().prototype.greater=function(e){return this.throwIfDisposed(),Vo(this,e)},Ns().prototype.ifft=function(){return this.throwIfDisposed(),Bu(this)},Ns().prototype.irfft=function(){return this.throwIfDisposed(),Pu(this)},Ns().prototype.isFinite=function(){return this.throwIfDisposed(),Ho(this)},Ns().prototype.isInf=function(){return this.throwIfDisposed(),jo(this)},Ns().prototype.isNaN=function(){return this.throwIfDisposed(),qo(this)},Ns().prototype.leakyRelu=function(e){return this.throwIfDisposed(),Ko(this,e)},Ns().prototype.lessEqual=function(e){return this.throwIfDisposed(),Yo(this,e)},Ns().prototype.less=function(e){return this.throwIfDisposed(),Xo(this,e)},Ns().prototype.localResponseNormalization=function(e,t,n,s){return this.throwIfDisposed(),Zo(this,e,t,n,s)},Ns().prototype.logSigmoid=function(){return this.throwIfDisposed(),il(this)},Ns().prototype.logSoftmax=function(e){return this.throwIfDisposed(),cl(this,e)},Ns().prototype.logSumExp=function(e,t){return this.throwIfDisposed(),xl(this,e,t)},Ns().prototype.log=function(){return this.throwIfDisposed(),Qo(this)},Ns().prototype.log1p=function(){return this.throwIfDisposed(),el(this)},Ns().prototype.logicalAnd=function(e){return this.throwIfDisposed(),wl(this,e)},Ns().prototype.logicalNot=function(){return this.throwIfDisposed(),kl(this)},Ns().prototype.logicalOr=function(e){return this.throwIfDisposed(),vl(this,e)},Ns().prototype.logicalXor=function(e){return this.throwIfDisposed(),Nl(this,e)},Ns().prototype.matMul=function(e,t,n){return this.throwIfDisposed(),ha(this,e,t,n)},Ns().prototype.maxPool=function(e,t,n,s){return this.throwIfDisposed(),Il(this,e,t,n,s)},Ns().prototype.max=function(e,t){return this.throwIfDisposed(),ol(this,e,t)},Ns().prototype.maximum=function(e){return this.throwIfDisposed(),Sl(this,e)},Ns().prototype.mean=function(e,t){return this.throwIfDisposed(),Tl(this,e,t)},Ns().prototype.min=function(e,t){return this.throwIfDisposed(),Rl(this,e,t)},Ns().prototype.minimum=function(e){return this.throwIfDisposed(),Fl(this,e)},Ns().prototype.mirrorPad=function(e,t){return this.throwIfDisposed(),Dl(this,e,t)},Ns().prototype.mod=function(e){return this.throwIfDisposed(),_l(this,e)},Ns().prototype.mul=function(e){return this.throwIfDisposed(),di(this,e)},Ns().prototype.neg=function(){return this.throwIfDisposed(),rl(this)},Ns().prototype.norm=function(e,t,n){return this.throwIfDisposed(),lc(this,e,t,n)},Ns().prototype.notEqual=function(e){return this.throwIfDisposed(),Bl(this,e)},Ns().prototype.oneHot=function(e,t=1,n=0){return this.throwIfDisposed(),pa(this,e,t,n)},Ns().prototype.onesLike=function(){return this.throwIfDisposed(),Pl(this)},Ns().prototype.pad=function(e,t){return this.throwIfDisposed(),Vl(this,e,t)},Ns().prototype.pool=function(e,t,n,s,r){return this.throwIfDisposed(),Kl(this,e,t,n,s,r)},Ns().prototype.pow=function(e){return this.throwIfDisposed(),Xl(this,e)},Ns().prototype.prelu=function(e){return this.throwIfDisposed(),Yl(this,e)},Ns().prototype.prod=function(e,t){return this.throwIfDisposed(),Jl(this,e,t)},Ns().prototype.reciprocal=function(){return this.throwIfDisposed(),gu(this)},Ns().prototype.relu=function(){return this.throwIfDisposed(),yu(this)},Ns().prototype.relu6=function(){return this.throwIfDisposed(),bu(this)},Ns().prototype.reshapeAs=function(e){return this.throwIfDisposed(),Pi(this,e.shape)},Ns().prototype.reshape=function(e){return this.throwIfDisposed(),Pi(this,e)},Ns().prototype.resizeBilinear=function(e,t,n){return this.throwIfDisposed(),Jc(this,e,t,n)},Ns().prototype.resizeNearestNeighbor=function(e,t,n){return this.throwIfDisposed(),Zc(this,e,t,n)},Ns().prototype.reverse=function(e){return this.throwIfDisposed(),xu(this,e)},Ns().prototype.rfft=function(){return this.throwIfDisposed(),Vu(this)},Ns().prototype.round=function(){return this.throwIfDisposed(),Iu(this)},Ns().prototype.rsqrt=function(){return this.throwIfDisposed(),Cu(this)},Ns().prototype.selu=function(){return this.throwIfDisposed(),Su(this)},Ns().prototype.separableConv2d=function(e,t,n,s,r,a){return this.throwIfDisposed(),Tu(this,e,t,n,s,r,a)},Ns().prototype.sigmoid=function(){return this.throwIfDisposed(),Gi(this)},Ns().prototype.sign=function(){return this.throwIfDisposed(),Au(this)},Ns().prototype.sin=function(){return this.throwIfDisposed(),Ru(this)},Ns().prototype.sinh=function(){return this.throwIfDisposed(),Fu(this)},Ns().prototype.slice=function(e,t){return this.throwIfDisposed(),Hi(this,e,t)},Ns().prototype.softmax=function(e){return this.throwIfDisposed(),Lu(this,e)},Ns().prototype.softplus=function(){return this.throwIfDisposed(),al(this)},Ns().prototype.spaceToBatchND=function(e,t){return this.throwIfDisposed(),ql(this,e,t)},Ns().prototype.split=function(e,t){return this.throwIfDisposed(),Wu(this,e,t)},Ns().prototype.sqrt=function(){return this.throwIfDisposed(),Uu(this)},Ns().prototype.square=function(){return this.throwIfDisposed(),Ol(this)},Ns().prototype.squaredDifference=function(e){return this.throwIfDisposed(),Gu(this,e)},Ns().prototype.squeeze=function(e){return this.throwIfDisposed(),Hu(this,e)},Ns().prototype.stack=function(e,t){this.throwIfDisposed();const n=e instanceof vs?[this,e]:[this,...e];return ju(n,t)},Ns().prototype.step=function(e){return this.throwIfDisposed(),qu(this,e)},Ns().prototype.stridedSlice=function(e,t,n,s,r,a,i,o){return this.throwIfDisposed(),Ku(this,e,t,n,s,r,a,i,o)},Ns().prototype.sub=function(e){return this.throwIfDisposed(),ll(this,e)},Ns().prototype.sum=function(e,t){return this.throwIfDisposed(),ul(this,e,t)},Ns().prototype.tan=function(){return this.throwIfDisposed(),Xu(this)},Ns().prototype.tanh=function(){return this.throwIfDisposed(),ji(this)},Ns().prototype.tile=function(e){return this.throwIfDisposed(),Lo(this,e)},Ns().prototype.toBool=function(){return this.throwIfDisposed(),qr(this,"bool")},Ns().prototype.toFloat=function(){return this.throwIfDisposed(),qr(this,"float32")},Ns().prototype.toInt=function(){return this.throwIfDisposed(),qr(this,"int32")},Ns().prototype.topk=function(e,t){return this.throwIfDisposed(),Zu(this,e,t)},Ns().prototype.transpose=function(e){return this.throwIfDisposed(),da(this,e)},Ns().prototype.unique=function(e){return this.throwIfDisposed(),ec(this,e)},Ns().prototype.unsortedSegmentSum=function(e,t){return this.throwIfDisposed(),tc(this,e,t)},Ns().prototype.unstack=function(e){return this.throwIfDisposed(),nc(this,e)},Ns().prototype.where=function(e,t){return this.throwIfDisposed(),So(e,this,t)},Ns().prototype.zerosLike=function(){return this.throwIfDisposed(),To(this)};class Dd extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Dd.prototype)}}class _d extends Error{constructor(e){super(e),Object.setPrototypeOf(this,_d.prototype)}}class Od extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Od.prototype)}}class Md extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Md.prototype)}}class Ld extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Ld.prototype)}}Error;function zd(e,t){if(Array.isArray(e)){let n=[];for(let s=0;s<t;s++)n=n.concat(e);return n}{const n=new Array(t);return n.fill(e),n}}function Bd(e,t){if(!e)throw new Ld(t)}function Pd(e,t){let n=0;for(const s of e)s===t&&n++;return n}function Wd(e){return 1===e.length?e[0]:e}function Vd(e){return Array.isArray(e)?e:[e]}function Ud(e){const t=e.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==t[0]?t:"private"+t}function Gd(e){return e.length<=1||-1===e.indexOf("_")?e:e.replace(/[_]+(\w|$)/g,((e,t)=>t.toUpperCase()))}let Hd={};function jd(e){if(null==e)return null;const t={};return t.className=e.getClassName(),t.config=e.getConfig(),t}function qd(e){if(null!=e&&"object"==typeof e)if(Array.isArray(e))e.forEach((e=>qd(e)));else{const t=Object.keys(e);for(const n of t){const t=e[n];null!=t&&"object"==typeof t&&(Array.isArray(t)||"ndarray"!==t.type||"number"!=typeof t.value?qd(t):e[n]=t.value)}}}function Kd(e,t={},n={},s="object",r=!1){if("string"==typeof e){const r=e;let a;if(r in n)a=n[r];else if(r in Hd)a=Hd[r];else if(a=t[r],null==a)throw new Od(`Unknown ${s}: ${e}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return a}{const a=e;if(null==a.className||null==a.config)throw new Od(`${s}: Improper config format: ${JSON.stringify(a)}.\n'className' and 'config' must set.`);const i=a.className;let o,l;if(i in n?[o,l]=n[i]:i in Hd?[o,l]=Hd.className:i in t&&([o,l]=t[i]),null==o)throw new Od(`Unknown ${s}: ${i}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=l){const e={};for(const t of Object.keys(Hd))e[t]=Hd[t];for(const t of Object.keys(n))e[t]=n[t];a.config.customObjects=e;const t=Object.assign({},Hd);for(const e of Object.keys(n))Hd[e]=n[e];qd(a.config);const s=l(o,a.config,n,r);return Hd=Object.assign({},t),s}{const e=Object.assign({},Hd);for(const e of Object.keys(n))Hd[e]=n[e];const t=new o(a.config);return Hd=Object.assign({},e),t}}}function Xd(e,t){return-1*function(e,t){return e<t?-1:e>t?1:0}(e,t)}function Yd(e){if(null==e)return e;const t=[];for(const n of e)-1===t.indexOf(n)&&t.push(n);return t}function Jd(e){if(null==e)throw new Od(`Invalid value in obj: ${JSON.stringify(e)}`);for(const t in e)if(e.hasOwnProperty(t))return!1;return!0}function Zd(e,t,n){if(null!=n&&e.indexOf(n)<0)throw new Od(`${n} is not a valid ${t}.  Valid values are ${e} or null/undefined.`)}function Qd(e,t,n=0,s=1/0){return Bd(n>=0),Bd(s>=n),Array.isArray(e)&&e.length>=n&&e.length<=s&&e.every((e=>typeof e===t))}function ef(e,t){Array.isArray(e)?(l(e.length>0,(()=>`${t} is unexpectedly an empty array.`)),e.forEach(((e,n)=>ef(e,`element ${n+1} of ${t}`)))):l(Number.isInteger(e)&&e>0,(()=>`Expected ${t} to be a positive integer, but got ${tf(e)}.`))}function tf(e){return null===e?"null":Array.isArray(e)?"["+e.map((e=>tf(e))).join(",")+"]":"string"==typeof e?`"${e}"`:`${e}`}function nf(e){return"relu"===e?"relu":"linear"===e?"linear":"elu"===e?"elu":null}function sf(e,t){return ri((()=>Uu(ul(di(e,e),t,!0))))}class rf extends Ha{getConfig(){return{}}}class af extends rf{constructor(e){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return ri((()=>{const t=sf(e,this.axis),n=no(t,0,this.maxValue);return di(e,pi(n,ci(Fd(),t)))}))}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}af.className="MaxNorm",qa(af);class of extends rf{constructor(e){super(),this.defaultAxis=0,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return ri((()=>pi(e,ci(Fd(),sf(e,this.axis)))))}getConfig(){return{axis:this.axis}}}of.className="UnitNorm",qa(of);class lf extends rf{apply(e){return yu(e)}}lf.className="NonNeg",qa(lf);class uf extends rf{constructor(e){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=e.minValue?e.minValue:this.defaultMinValue,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.rate=null!=e.rate?e.rate:this.defaultRate,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return ri((()=>{const t=sf(e,this.axis),n=ci(di(this.rate,no(t,this.minValue,this.maxValue)),di(1-this.rate,t));return di(e,pi(n,ci(Fd(),t)))}))}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}uf.className="MinMaxNorm",qa(uf);const cf={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function hf(e){return jd(e)}function pf(e,t={}){return Kd(e,ja.getMap().classNameMap,t,"constraint")}function df(e){if(null==e)return null;if("string"==typeof e){return pf({className:e in cf?cf[e]:e,config:{}})}return e instanceof rf?e:pf(e)}var ff=Object.freeze({__proto__:null,maxNorm:function(e){return new af(e)},unitNorm:function(e){return new of(e)},nonNeg:function(){return new lf},minMaxNorm:function(e){return new uf(e)}});const mf=["channelsFirst","channelsLast"],gf=["nearest","bilinear"],yf=["valid","same","causal"],bf=["max","avg"],xf=["sum","mul","concat","ave"],wf=new Map;function kf(e){Zd(mf,"DataFormat",e)}function vf(e){Zd(yf,"PaddingMode",e)}function Nf(e){Zd(bf,"PoolMode",e)}const If=[];function Cf(e,t){If.push(e);try{const e=t();return If.pop(),e}catch(e){throw If.pop(),e}}function $f(e){if(!Ef(e))throw new Error("Not a valid tensor name: '"+e+"'");return(0===If.length?"":If.join("/")+"/")+e}function Sf(e){if(!Ef(e))throw new Error("Not a valid tensor name: '"+e+"'");wf.has(e)||wf.set(e,0);const t=wf.get(e);if(wf.set(e,wf.get(e)+1),t>0){const n=`${e}_${t}`;return wf.set(n,1),n}return e}const Tf=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function Ef(e){return!!e.match(Tf)}function Af(e,t,n){null==t&&(t=0),null==n&&(n=e.length);let s=1;for(let r=t;r<n;++r)s*=e[r];return s}function Rf(e){return Yu(e=Array.isArray(e)?new Float32Array(e):e)}function Ff(e){return Rl(Rf(e)).dataSync()[0]}function Df(e){return ol(Rf(e)).dataSync()[0]}function _f(e,t){if(t<e)throw new Od(`end (${t}) < begin (${e}) is forbidden.`);const n=[];for(let s=e;s<t;++s)n.push(s);return n}function Of(e,t){return e.asType(t)}function Mf(e,t=-1){const n=e.shape.slice();return t<0&&(t=n.length+t+1),n.splice(t,0,1),e.reshape(n)}function Lf(e,t,n){return ri((()=>{switch(e.rank){case 1:return Du(e,t,n);case 2:return _u(e,[t,0],[n,e.shape[1]]);case 3:return Ou(e,[t,0,0],[n,e.shape[1],e.shape[2]]);case 4:return Mu(e,[t,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3]]);case 5:return Hi(e,[t,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4]]);case 6:return Hi(e,[t,0,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4],e.shape[5]]);default:throw new Od(`sliceAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function zf(e,t,n){return ri((()=>{switch(e.rank){case 1:return Du(e,t,n);case 2:return _u(e,[0,t],[e.shape[0],n]);case 3:return Ou(e,[0,0,t],[e.shape[0],e.shape[1],n]);case 4:return Mu(e,[0,0,0,t],[e.shape[0],e.shape[1],e.shape[2],n]);default:throw new Od(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function Bf(e,t,n,s){return ri((()=>{switch(e.rank){case 1:return Du(e,t,n);case 2:switch(s){case 1:return Lf(e,t,n);case 2:return zf(e,t,n);default:throw new Od(`The axis is not within the rank of the tensor ${s}`)}case 3:switch(s){case 1:return Lf(e,t,n);case 2:return Ou(e,[0,t,0],[e.shape[0],n,e.shape[2]]);case 3:return zf(e,t,n);default:throw new Od(`The axis is not within the rank of the tensor ${s}`)}case 4:switch(s){case 1:return Lf(e,t,n);case 2:return Mu(e,[0,t,0,0],[e.shape[0],n,e.shape[2],e.shape[3]]);case 3:return Mu(e,[0,0,t,0],[e.shape[0],e.shape[1],n,e.shape[3]]);case 4:return zf(e,t,n);default:throw new Od(`The axis is not within the rank of the tensor ${s}`)}default:throw new Od(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function Pf(e,t=-1){let n;return t<0&&(n=e[0].rank,t=0!==n?n:0),t===e[0].rank&&(t=-1),Ui(e,t)}function Wf(e,t){switch(e.rank){case 1:return so([e,t]);case 2:return ro([e,t],0);case 3:return ao([e,t],0);case 4:return io([e,t],0);default:throw new Od(`concatAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}function Vf(e,t){if(Array.isArray(t)||(t=[t]),e.rank!==t.length)throw new Od(`The length of input n (${t.length}) does not match the number of dimensions in input x (${e.rank})`);return Lo(e,t)}function Uf(e,t=0,n=1,s,r){return pu(e,t,n,s,r)}function Gf(e,t,n,s){if(e.rank<2||t.rank<2)throw new Md(`dot requires both inputs to be rank >= 2 but got x shape = ${e.shape} and y shape = ${t.shape}`);if(t.rank>=3){if(e.shape.slice(-1)[0]!==t.shape.slice(-2)[0])throw new Md(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${e.shape} and  y shape = ${t.shape}`)}if(2===e.rank&&2===t.rank){return $c({a:e,b:t,transposeA:!1,transposeB:!1,bias:s?qf(e.rank,s,"channelsLast"):null,activation:n})}{const r=e.shape.slice(),a=r.pop();e=e.reshape([-1,a]);const i=t.shape.slice(),o=i.pop(),l=i.pop(),u=[...i,o],c=Array.from({length:t.rank},((e,n)=>0===n?t.rank-2:n<=t.rank-2?n-1:n));t=t.transpose(c).reshape([l,-1]);const h=[...r,...u];return $c({a:e,b:t,transposeA:!1,transposeB:!1,bias:s?qf(e.rank,s,"channelsLast"):null,activation:n}).reshape(h)}}function Hf(e,t,n){return ri((()=>(t=Array.isArray(t)?Yu(t,"int32"):t.toInt(),Wo(e,t,n))))}function jf(e){return di(e,e)}function qf(e,t,n){const s=t.shape;if(1!==t.rank&&t.rank!==e)throw new Od(`Unexpected bias dimensions: ${t.rank}; expected it to be 1 or ${e}`);if(5===e){if("channelsFirst"===n)return 1===s.length?t.reshape([1,s[0],1,1,1]):t.reshape([1,s[3],s[0],s[1],s[2]]);if("channelsLast"===n)return 1===s.length?t.reshape([1,1,1,1,s[0]]):t.reshape([1].concat(s))}else if(4===e){if("channelsFirst"===n)return 1===s.length?t.reshape([1,s[0],1,1]):t.reshape([1,s[2],s[0],s[1]]);if("channelsLast"===n)return 1===s.length?t.reshape([1,1,1,s[0]]):t.reshape([1].concat(s))}else if(3===e){if("channelsFirst"===n)return 1===s.length?t.reshape([1,s[0],1]):t.reshape([1,s[1],s[0]]);if("channelsLast"===n)return 1===s.length?t.reshape([1,1,s[0]]):t.reshape([1].concat(s))}else if(e<3)return t;throw new Od(`Unsupported input rank by biasAdd: ${t.rank}`)}function Kf(e,t,n){return ri((()=>(null==n&&(n="channelsLast"),kf(n),e.add(qf(e.rank,t,n)))))}function Xf(e,t,n,s){return ri((()=>dc(e,t,n,s)))}function Yf(e,t,n=!1){return n?e():t()}const Jf=["fanIn","fanOut","fanAvg"],Zf=["normal","uniform","truncatedNormal"];class Qf extends Ha{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class em extends Qf{apply(e,t){return El(e,t)}}em.className="Zeros",qa(em);class tm extends Qf{apply(e,t){return Al(e,t)}}tm.className="Ones",qa(tm);class nm extends Qf{constructor(e){if(super(),"object"!=typeof e)throw new Od(`Expected argument of type ConstantConfig but got ${e}`);if(void 0===e.value)throw new Od(`config must have value set but got ${e}`);this.value=e.value}apply(e,t){return ri((()=>di($u(this.value),Al(e,t))))}getConfig(){return{value:this.value}}}nm.className="Constant",qa(nm);class sm extends Qf{constructor(e){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=e.minval||this.DEFAULT_MINVAL,this.maxval=e.maxval||this.DEFAULT_MAXVAL,this.seed=e.seed}apply(e,t){return du(e,this.minval,this.maxval,t)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}sm.className="RandomUniform",qa(sm);class rm extends Qf{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new Md(`randomNormal does not support dType ${t}.`);return Uf(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}rm.className="RandomNormal",qa(rm);class am extends Qf{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new Md(`truncatedNormal does not support dType ${t}.`);return Qu(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}am.className="TruncatedNormal",qa(am);class im extends Qf{constructor(e){super(),this.gain=null!=e.gain?e.gain:1}apply(e,t){return ri((()=>{if(2!==e.length||e[0]!==e[1])throw new Od("Identity matrix initializer can only be used for 2D square matrices.");return di(this.gain,zo(e[0]))}))}getConfig(){return{gain:this.gain}}}im.className="Identity",qa(im);class om extends Qf{constructor(e){if(super(),e.scale<0)throw new Od(`scale must be a positive float. Got: ${e.scale}`);var t;this.scale=null==e.scale?1:e.scale,this.mode=null==e.mode?"fanIn":e.mode,t=this.mode,Zd(Jf,"FanMode",t),this.distribution=null==e.distribution?"normal":e.distribution,function(e){Zd(Zf,"Distribution",e)}(this.distribution),this.seed=e.seed}apply(e,t){const n=function(e,t="channelsLast"){let n,s;if(kf(t),2===e.length)n=e[0],s=e[1];else if(-1!==[3,4,5].indexOf(e.length)){if("channelsFirst"===t){const t=Af(e,2);n=e[1]*t,s=e[0]*t}else if("channelsLast"===t){const t=Af(e,0,e.length-2);n=e[e.length-2]*t,s=e[e.length-1]*t}}else{const t=Af(e);n=Math.sqrt(t),s=Math.sqrt(t)}return[n,s]}(e),s=n[0],r=n[1];let a=this.scale;if("fanIn"===this.mode?a/=Math.max(1,s):"fanOut"===this.mode?a/=Math.max(1,r):a/=Math.max(1,(s+r)/2),"normal"===this.distribution){const n=Math.sqrt(a);if("float32"!==(t=t||"float32")&&"int32"!==t)throw new Md(`${this.getClassName()} does not support dType ${t}.`);return Qu(e,0,n,t,this.seed)}{const n=Math.sqrt(3*a);return du(e,-n,n,t)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}om.className="VarianceScaling",qa(om);class lm extends om{constructor(e){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return om.className}}lm.className="GlorotUniform",qa(lm);class um extends om{constructor(e){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return om.className}}um.className="GlorotNormal",qa(um);class cm extends om{constructor(e){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return om.className}}cm.className="HeNormal",qa(cm);class hm extends om{constructor(e){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return om.className}}hm.className="HeUniform",qa(hm);class pm extends om{constructor(e){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return om.className}}pm.className="LeCunNormal",qa(pm);class dm extends om{constructor(e){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return om.className}}dm.className="LeCunNormal",qa(dm);class fm extends Qf{constructor(e){if(super(),this.DEFAULT_GAIN=1,this.gain=null==e.gain?this.DEFAULT_GAIN:e.gain,this.seed=e.seed,null!=this.seed)throw new Md("Random seed is not implemented for Orthogonal Initializer yet.")}apply(e,t){return ri((()=>{if(e.length<2)throw new Md("Shape must be at least 2D.");e[0]*e[1]>2e3&&console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${e[0]*e[1]}) elements: Slowness may result.`);const t=Uf(e[0]>e[1]?[e[1],e[0]]:e,0,1,"float32");let n=yh.gramSchmidt(t);return e[0]>e[1]&&(n=n.transpose()),di(this.gain,n)}))}getConfig(){return{gain:this.gain,seed:this.seed}}}fm.className="Orthogonal",qa(fm);const mm={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function gm(e,t={}){return Kd(e,ja.getMap().classNameMap,t,"initializer")}function ym(e){return jd(e)}function bm(e){if("string"==typeof e){const t=e in mm?mm[e]:e;if("GlorotNormal"===t)return new um;if("GlorotUniform"===t)return new lm;if("HeNormal"===t)return new cm;if("HeUniform"===t)return new hm;if("LeCunNormal"===t)return new pm;if("LeCunUniform"===t)return new dm;{const e={};return e.className=t,e.config={},gm(e)}}return e instanceof Qf?e:gm(e)}var xm=Object.freeze({__proto__:null,zeros:function(){return new em},ones:function(){return new tm},constant:function(e){return new nm(e)},randomUniform:function(e){return new sm(e)},randomNormal:function(e){return new rm(e)},truncatedNormal:function(e){return new am(e)},identity:function(e){return new im(e)},varianceScaling:function(e){return new om(e)},glorotUniform:function(e){return new lm(e)},glorotNormal:function(e){return new um(e)},heNormal:function(e){return new cm(e)},heUniform:function(e){return new hm(e)},leCunNormal:function(e){return new pm(e)},leCunUniform:function(e){return new dm(e)},orthogonal:function(e){return new fm(e)}});let wm=0;function km(){return wm++}const vm={};function Nm(e=""){return e in vm||(vm[e]=0),vm[e]+=1,e+vm[e].toString()}function Im(e){return Array.isArray(e)&&Array.isArray(e[0])}function Cm(e){return 0===e.length?[]:Array.isArray(e[0])?e:[e]}function $m(e){let t;if(Array.isArray(e)){if(1!==e.length)throw new Od(`Expected Tensor length to be 1; got ${e.length}`);t=e[0]}else t=e;return t}function Sm(e){if(Array.isArray(e)&&Array.isArray(e[0])){if(1===e.length)return(e=e)[0];throw new Od(`Expected exactly 1 Shape; got ${e.length}`)}return e}function Tm(e){let t=0;for(const n of e)0===n.shape.length?t+=1:t+=n.shape.reduce(((e,t)=>e*t));return t}const Em="Variable";class Am{constructor(e,t="float32",n="Variable",s=!0,r=null){this.dtype=null==t?"float32":t,this.shape=e.shape,this.id=km(),n=null==n?Em:n,this.originalName=$f(n),this.name=Sf(this.originalName),this.trainable_=s,this.constraint=r,this.val=sc(e,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(e){return this.assertNotDisposed(),function(e,t){if(e.shape.toString()!==t.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(e.shape)+" vs. "+JSON.stringify(t.shape))}(this.val,e),this.val.id!==e.id&&(this.val.assign(e),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(e){this.trainable_=e,this.val.trainable=e}}function Rm(e){return e.map((e=>e.read()))}function Fm(e){e.forEach((e=>{e[0].write(e[1])}))}class Dm{constructor(e){this.dtype=e.dtype,this.shape=e.shape,null!=e.shape?this.ndim=e.shape.length:this.ndim=e.ndim,this.maxNDim=e.maxNDim,this.minNDim=e.minNDim,this.axes=e.axes||{}}}class _m{constructor(e,t,n,s,r,a,i){this.dtype=e,this.shape=t,this.sourceLayer=n,this.inputs=s,this.callArgs=r,this.outputTensorIndex=i,this.id=km(),null!=a&&(this.originalName=$f(a),this.name=Sf(this.originalName)),this.rank=t.length}}let Om=0;class Mm{constructor(e,t){this.callArgs=t,this.id=Om++,this.outboundLayer=e.outboundLayer,this.inboundLayers=e.inboundLayers,this.nodeIndices=e.nodeIndices,this.tensorIndices=e.tensorIndices,this.inputTensors=e.inputTensors,this.outputTensors=e.outputTensors,this.inputMasks=e.inputMasks,this.outputMasks=e.outputMasks,this.inputShapes=e.inputShapes,this.outputShapes=e.outputShapes;for(const t of e.inboundLayers)null!=t&&t.outboundNodes.push(this);e.outboundLayer.inboundNodes.push(this)}getConfig(){const e=[];for(const t of this.inboundLayers)null!=t?e.push(t.name):e.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:e,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let Lm=0;class zm extends Ha{constructor(e={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=Lm++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let t=e.name;if(!t){const e=this.getClassName();t=Ud(e)+"_"+Nm(e)}if(this.name=t,this.trainable_=null==e.trainable||e.trainable,null!=e.inputShape||null!=e.batchInputShape){let t;if(null!=e.batchInputShape)t=e.batchInputShape;else if(null!=e.inputShape){let n=null;null!=e.batchSize&&(n=e.batchSize),t=[n].concat(e.inputShape)}this.batchInputShape=t;let n=e.dtype;null==n&&(n=e.inputDType),null==n&&(n="float32"),this.dtype=n}null!=e.weights?this.initialWeights=e.weights:this.initialWeights=null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(e,t){return e.name+"_ib-"+t.toString()}getNodeAtIndex(e,t){if(0===this.inboundNodes.length)throw new _d(`The layer has never been called and thus has no defined ${t}.`);if(this.inboundNodes.length<=e)throw new Od(`Asked to get ${t} at node ${e}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[e]}getInputAt(e){return Wd(this.getNodeAtIndex(e,"input").inputTensors)}getOutputAt(e){return Wd(this.getNodeAtIndex(e,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new Dd(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);if(0===this.inboundNodes.length)throw new Dd(`Layer ${this.name} is not connected, no input to return.`);return Wd(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new Dd(`Layer ${this.name} has no inbound nodes.`);if(this.inboundNodes.length>1)throw new Dd(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);return Wd(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map((e=>e()))}get updates(){return this._updates}get built(){return this._built}set built(e){this._built=e}get trainable(){return this.trainable_}set trainable(e){this._trainableWeights.forEach((t=>t.trainable=e)),this.trainable_=e}get trainableWeights(){return this.trainable_?this._trainableWeights.filter((e=>e.trainable)):[]}set trainableWeights(e){this._trainableWeights=e}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter((e=>!e.trainable)).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(e){this._nonTrainableWeights=e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(e){if(e=Vd(e),null==this.inputSpec||0===this.inputSpec.length)return;const t=Vd(this.inputSpec);if(e.length!==t.length)throw new Od(`Layer ${this.name} expects ${t.length} inputs, but it received ${e.length} input tensors. Input received: ${e}`);for(let n=0;n<e.length;n++){const s=e[n],r=t[n];if(null==r)continue;const a=s.rank;if(null!=r.ndim&&a!==r.ndim)throw new Od(`Input ${n} is incompatible with layer ${this.name}: expected ndim=${r.ndim}, found ndim=${a}`);if(null!=r.maxNDim&&a>r.maxNDim)throw new Od(`Input ${n} is incompatible with layer ${this.name}: expected max_ndim=${r.maxNDim}, found ndim=${a}`);if(null!=r.minNDim&&a<r.minNDim)throw new Od(`Input ${n} is incompatible with layer ${this.name}: expected min_ndim=${r.minNDim}, found ndim=${a}.`);if(null!=r.dtype&&s.dtype!==r.dtype)throw new Od(`Input ${n} is incompatible with layer ${this.name} : expected dtype=${r.dtype}, found dtype=${s.dtype}.`);if(r.axes){const e=s.shape;for(const t in r.axes){const s=Number(t),a=r.axes[t],i=s>=0?e[s]:e[e.length+s];if(null!=a&&-1===[a,null].indexOf(i))throw new Od(`Input ${n} is incompatible with layer ${this.name}: expected axis ${s} of input shape to have value ${a} but got shape ${e}.`)}}if(null!=r.shape)for(let e=0;e<r.shape.length;++e){const t=r.shape[e],a=s.shape[e];if(null!=t&&null!=a&&t!==a)throw new Od(`Input ${n} is incompatible with layer ${this.name}: expected shape=${r.shape}, found shape=${s.shape}.`)}}}call(e,t){return e}invokeCallHook(e,t){null!=this._callHook&&this._callHook(e,t)}setCallHook(e){this._callHook=e}clearCallHook(){this._callHook=null}apply(e,t){t=t||{},this.assertNotDisposed();const n=Vd(e);let s=!0;for(const e of n)if(!(e instanceof _m)){s=!1;break}let r=!0;for(const e of n)if(e instanceof _m){r=!1;break}if(s===r)throw new Od("Arguments to apply() must be all SymbolicTensors or all Tensors");return Cf(this.name,(()=>{if(!this.built){this.assertInputCompatibility(e);const t=[];for(const n of Vd(e))t.push(n.shape);this.build(Wd(t)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&r&&(this._refCount=1)}if(this.assertInputCompatibility(e),r){let s=this.call(e,t);const r=Vd(s),a=[];for(let e of r)-1!==n.indexOf(e)&&(e=e.clone()),a.push(e);if(s=Wd(a),null!=this.activityRegularizer)throw new Md("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return s}{const n=function(e){e=Vd(e);const t=[];for(const n of e)t.push(n.shape);return Wd(t)}(e),s=this.computeOutputShape(n);let r;const a="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(e)?n[0]:n),r=null!=s&&s.length>0&&Array.isArray(s[0])?s.map(((n,s)=>new _m(a,n,this,Vd(e),t,this.name,s))):new _m(a,s,this,Vd(e),t,this.name),this.addInboundNode(e,r,null,null,n,s,t),this._refCount++,null!=this.activityRegularizer)throw new Md("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return r}}))}warnOnIncompatibleInputShape(e){if(null!=this.batchInputShape)if(e.length!==this.batchInputShape.length)console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(e)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);else{let t=!1;this.batchInputShape.forEach(((n,s)=>{null!=n&&null!=e[s]&&e[s]!==n&&(t=!0)})),t&&console.warn(`The shape of the input tensor (${JSON.stringify(e)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`)}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new Dd(`The layer ${this.name} has never been called and thus has no defined output shape.`);const e=[];for(const t of this.inboundNodes){const n=JSON.stringify(t.outputShapes);-1===e.indexOf(n)&&e.push(n)}if(1===e.length){const e=this.inboundNodes[0].outputShapes;return Array.isArray(e)&&Array.isArray(e[0])&&1===e.length?e[0]:e}throw new Dd(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new _d(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return Tm(this.weights)}build(e){this.built=!0}getWeights(e=!1){return Rm(e?this.trainableWeights:this.weights)}setWeights(e){ri((()=>{const t=this.weights;if(t.length!==e.length)throw new Od(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${e.length}, but the layer was expecting ${t.length} weights. Provided weights: ${e}...`);if(0===t.length)return;const n=[],s=Rm(t);for(let r=0;r<s.length;++r){const a=s[r],i=t[r],o=e[r];if(!d(a.shape,o.shape))throw new Od(`Layer weight shape ${a.shape} not compatible with provided weight shape ${o.shape}`);n.push([i,o])}Fm(n)}))}addWeight(e,t,n,s,r,a,i){if(-1!==this._addedWeightNames.indexOf(e))throw new Od(`Duplicate weight name ${e} for layer ${this.name}`);this._addedWeightNames.push(e),null==n&&(n="float32"),this.fastWeightInitDuringBuild&&(s=bm("zeros"));const o=s.apply(t,n),l=new Am(o,n,e,a,i);return o.dispose(),null!=r&&this.addLoss((()=>r.apply(l.read()))),null==a&&(a=!0),a?this._trainableWeights.push(l):this._nonTrainableWeights.push(l),l}setFastWeightInitDuringBuild(e){this.fastWeightInitDuringBuild=e}addLoss(e){null==e||Array.isArray(e)&&0===e.length||(e=Vd(e),void 0!==this._losses&&null!==this._losses&&this.losses.push(...e))}computeOutputShape(e){return e}computeMask(e,t){if(!this.supportsMasking){if(null!=t){if(!Array.isArray(t))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);t.forEach((e=>{if(null!=e)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)}))}return null}return t}addInboundNode(e,t,n,s,r,a,i=null){const o=Vd(e);t=Vd(t),n=Vd(n),s=Vd(s),r=Cm(r),a=Cm(a);const l=[],u=[],c=[];for(const e of o)l.push(e.sourceLayer),u.push(e.nodeIndex),c.push(e.tensorIndex);new Mm({outboundLayer:this,inboundLayers:l,nodeIndices:u,tensorIndices:c,inputTensors:o,outputTensors:t,inputMasks:n,outputMasks:s,inputShapes:r,outputShapes:a},i);for(let e=0;e<t.length;e++)t[e].sourceLayer=this,t[e].nodeIndex=this.inboundNodes.length-1,t[e].tensorIndex=e}getConfig(){const e={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(e.batchInputShape=this.batchInputShape),null!=this.dtype&&(e.dtype=this.dtype),e}disposeWeights(){return this.weights.forEach((e=>e.dispose())),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let e=0;return 0==--this._refCount&&(e=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:e}}}function Bm(e,t,n){if((null==t||null!=n&&n>0)&&(t=e.sourceLayer,n=e.nodeIndex),0===t.inboundNodes.length)return[e];{const e=t.inboundNodes[n];if(0===e.inboundLayers.length)return e.inputTensors;{const t=[];for(let n=0;n<e.inboundLayers.length;n++){const s=Bm(e.inputTensors[n],e.inboundLayers[n],e.nodeIndices[n]);for(const e of s)-1===t.indexOf(e)&&t.push(e)}return t}}}class Pm extends zm{constructor(e){if(super({dtype:e.dtype,name:null!=e.name?e.name:Nm("input").toString()}),null==e.batchSize&&(e.batchSize=null),null==e.sparse&&(e.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=e.sparse,null!=e.inputShape&&null!=e.batchInputShape)throw new Od("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let t=e.batchInputShape;if(null==t){if(null==e.inputShape)throw new Od("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");t=[e.batchSize].concat(e.inputShape)}else if(null!=e.batchSize)throw new Od("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const n=e.dtype||"float32";this.batchInputShape=t,this.dtype=n,this.inputSpec=[{shape:t}];const s=new _m(this.dtype,this.batchInputShape,this,[],{},this.name);s.nodeIndex=0,s.tensorIndex=0,new Mm({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[s],outputTensors:[s],inputMasks:[null],outputMasks:[null],inputShapes:[t],outputShapes:[t]})}apply(e,t){throw new Od(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}function Wm(e){if(null==e.batchShape&&null==e.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=e.batchShape&&null!=e.shape)throw new Od("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let t=e.batchShape;null!=e.shape&&null==t&&(t=[null].concat(e.shape));let n=e.dtype;null==n&&(n="float32");return new Pm({batchInputShape:t,name:e.name,dtype:n,sparse:e.sparse}).inboundNodes[0].outputTensors[0]}async function Vm(e){if(null==e)return;const t=[],n=[],s=[];for(const r in e){const a=e[r];if("number"!=typeof a){const e=a;t.push(e.data()),n.push(r),s.push(e)}}if(t.length>0){const r=await Promise.all(t);for(let t=0;t<r.length;++t)e[n[t]]=r[t][0];ai(s)}}function Um(e){if(null!=e)for(const t in e){const n=e[t];"number"!=typeof n&&n.dispose()}}var Gm;Pm.className="InputLayer",qa(Pm),function(e){e[e.SILENT=0]="SILENT",e[e.VERBOSE=1]="VERBOSE"}(Gm||(Gm={}));class Hm{constructor(){this.validationData=null}setParams(e){this.params=e}async onEpochBegin(e,t){}async onEpochEnd(e,t){}async onBatchBegin(e,t){}async onBatchEnd(e,t){}async onTrainBegin(e){}async onTrainEnd(e){}setModel(e){}}class jm{constructor(e,t=10){null==e&&(e=[]),this.callbacks=e,this.queueLength=t}append(e){this.callbacks.push(e)}setParams(e){for(const t of this.callbacks)t.setParams(e)}setModel(e){for(const t of this.callbacks)t.setModel(e)}async onEpochBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochBegin(e,t)}async onEpochEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochEnd(e,t)}async onBatchBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchBegin(e,t)}async onBatchEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchEnd(e,t)}async onTrainBegin(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainBegin(e)}async onTrainEnd(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainEnd(e)}}class qm extends Hm{constructor(){super()}async onEpochBegin(e){this.seen=0,this.totals={}}async onBatchEnd(e,t){null==t&&(t={});const n=null==t.size?0:t.size;this.seen+=n;for(const e in t){const s=t[e];if("number"==typeof s)this.totals.hasOwnProperty(e)||(this.totals[e]=0),this.totals[e]=this.totals[e]+s*n;else{let t;e in this.totals?t=this.totals[e]:this.totals[e]=0;const r=ri((()=>ci(this.totals[e],di(s,n))));this.totals[e]=r,null!=t&&t.dispose()}}}async onEpochEnd(e,t){if(null!=t)for(const e of this.params.metrics)null!=this.totals[e]&&("number"==typeof this.totals[e]?t[e]=this.totals[e]/this.seen:ri((()=>{const n=di(pi(1,this.seen),this.totals[e]);t[e]=n,this.totals[e].dispose(),ii(t[e])})))}}class Km extends Hm{async onTrainBegin(e){this.epoch=[],this.history={}}async onEpochEnd(e,t){null==t&&(t={}),this.epoch.push(e);for(const e in t)null==this.history[e]&&(this.history[e]=[]),this.history[e].push(t[e])}async syncData(){const e=[],t=[],n=[];for(const s in this.history){const r=this.history[s];for(let a=0;a<r.length;++a)if("number"!=typeof r[a]){const i=r[a];e.push(i.data()),t.push(s),n.push(a)}}const s=await Promise.all(e);for(let e=0;e<s.length;++e){this.history[t[e]][n[e]].dispose(),this.history[t[e]][n[e]]=s[e][0]}}}class Xm extends Hm{constructor(e,t){if(super(),this.currentEpoch=0,this.yieldEvery=t||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=e.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");R(this.yieldEvery)&&(this.maybeWait=function(e,t){let n,s=as();return(...r)=>{const a=as();return a-s<t||(s=a,n=e(...r)),n}}(this.maybeWait.bind(this),this.yieldEvery)),this.trainBegin=e.onTrainBegin,this.trainEnd=e.onTrainEnd,this.epochBegin=e.onEpochBegin,this.epochEnd=e.onEpochEnd,this.batchBegin=e.onBatchBegin,this.batchEnd=e.onBatchEnd,this.yield=e.onYield}async maybeWait(e,t,n){const s=[];null!=this.yield&&(await Vm(n),s.push(this.yield(e,t,n))),s.push(Ah()),await Promise.all(s)}async onEpochBegin(e,t){this.currentEpoch=e,null!=this.epochBegin&&(await Vm(t),await this.epochBegin(e,t))}async onEpochEnd(e,t){const n=[];null!=this.epochEnd&&(await Vm(t),n.push(this.epochEnd(e,t))),"epoch"===this.yieldEvery&&n.push(Ah()),await Promise.all(n)}async onBatchBegin(e,t){null!=this.batchBegin&&(await Vm(t),await this.batchBegin(e,t))}async onBatchEnd(e,t){const n=[];null!=this.batchEnd&&(await Vm(t),n.push(this.batchEnd(e,t))),"batch"===this.yieldEvery?n.push(Ah()):R(this.yieldEvery)&&n.push(this.maybeWait(this.currentEpoch,e,t)),await Promise.all(n)}async onTrainBegin(e){null!=this.trainBegin&&(await Vm(e),await this.trainBegin(e))}async onTrainEnd(e){null!=this.trainEnd&&(await Vm(e),await this.trainEnd(e))}}function Ym(e,t){if(null==e&&(e={}),e instanceof Hm)return[e];if(Array.isArray(e)&&e[0]instanceof Hm)return e;return Vd(e).map((e=>new Xm(e,t)))}class Jm{constructor(){}static registerCallbackConstructor(e,t){l(e>=0&&Number.isInteger(e),(()=>`Verbosity level is expected to be an integer >= 0, but got ${e}`)),Jm.checkForDuplicate(t),null==Jm.constructors[e]&&(Jm.constructors[e]=[]),Jm.constructors[e].push(t)}static checkForDuplicate(e){for(const t in Jm.constructors){Jm.constructors[+t].forEach((t=>{if(t===e)throw new Od("Duplicate callback constructor.")}))}}static clear(){Jm.constructors={}}static createCallbacks(e){const t=[];for(const n in Jm.constructors){const s=+n;e>=s&&t.push(...Jm.constructors[s])}return t.map((e=>new e))}}function Zm(e,t,n,s,r,a,i,o,l){const u=new Km,c=[new qm,...Jm.createCallbacks(t)];null!=e&&c.push(...e),c.push(u);const h=new jm(c);return h.setParams({epochs:n,initialEpoch:s,samples:r,steps:a,batchSize:i,verbose:t,doValidation:o,metrics:l}),{callbackList:h,history:u}}function Qm(e,t={},n=!1){return Kd(e,ja.getMap().classNameMap,t,"layer",n)}function eg(e,t){return ri((()=>{"float32"!==e.dtype&&(e=e.asType("float32"));const n=ul(jf(e),t,!0),s=Bo(n.shape,Fd()),r=Uu(Sl(n,s));return pi(e,r)}))}function tg(e,t){return ri((()=>Tl(jf(ll(t,e)),-1)))}function ng(e,t){return ri((()=>Tl(fi(ll(t,e)),-1)))}function sg(e,t){return ri((()=>{const n=ll(e,t),s=no(fi(e),Fd(),Number.MAX_VALUE),r=fi(pi(n,s));return di(100,Tl(r,-1))}))}function rg(e,t){return ri((()=>{const n=no(t,Fd(),Number.MAX_VALUE),s=Qo(ci(1,n)),r=no(e,Fd(),Number.MAX_VALUE),a=Qo(ci(1,r));return Tl(jf(ll(s,a)),-1)}))}function ag(e,t,n=!1){return ri((()=>{if(n)t=Lu(t);else{const e=ul(t,t.shape.length-1,!0);t=pi(t,e)}return t=no(t,Fd(),1-Fd()),rl(ul(di(e.toFloat(),Qo(t)),t.shape.length-1))}))}function ig(e,t,n=!1){return ri((()=>{const s=Po(function(e){const t=[Af(e.shape)];return e.reshape(t)}(e)).toInt(),r=(t=no(t,Fd(),1-Fd())).shape;return ag(pa(s,r[r.length-1]).reshape(r),t,n)}))}function og(e,t){return ri((()=>{let n;return n=no(t,Fd(),1-Fd()),n=Qo(pi(n,ll(1,n))),Tl(function(e,t){if(!d(e.shape,t.shape))throw new Od(`logits and labels must have the same shape, but got shapes ${JSON.stringify(e.shape)} and ${JSON.stringify(t.shape)}`);return ri((()=>{const n=t.relu(),s=t.abs().neg();return n.sub(t.mul(e)).add(s.exp().log1p())}))}(e,n),-1)}))}function lg(e,t){return ri((()=>{const n=no(e,Fd(),1),s=no(t,Fd(),1);return ul(di(e,Qo(pi(n,s))),-1)}))}function ug(e,t){return ri((()=>{const n=eg(e,-1),s=eg(t,-1),r=di(n,s);return rl(ul(r,-1))}))}Jm.constructors={};const cg={meanSquaredError:tg,meanAbsoluteError:ng,meanAbsolutePercentageError:sg,meanSquaredLogarithmicError:rg,squaredHinge:function(e,t){return ri((()=>{const n=Sl(0,ll(1,di(e,t)));return Tl(jf(n),-1)}))},hinge:function(e,t){return ri((()=>{const n=Sl(0,ll(1,di(e,t)));return Tl(n,-1)}))},categoricalHinge:function(e,t){return ri((()=>{const n=ul(di(e,t),-1),s=ol(di(ll(1,e),t),-1);return Sl(0,ci(1,ll(s,n)))}))},logcosh:function(e,t){return ri((()=>{const n=Math.log(2),s=ll(t,e),r=ll(ci(s,al(di(-2,s))),n);return Tl(r,-1)}))},categoricalCrossentropy:ag,sparseCategoricalCrossentropy:ig,binaryCrossentropy:og,kullbackLeiblerDivergence:lg,poisson:function(e,t){return ri((()=>{const n=Qo(ci(Fd(),t));return Tl(ll(t,di(e,n)),-1)}))},cosineProximity:ug};function hg(e){if("string"==typeof e){if(e in cg)return cg[e];let t=`Unknown loss ${e}`;throw e.toLowerCase().includes("softmaxcrossentropy")&&(t=`Unknown loss ${e}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new Od(t)}return e}function pg(e,t){return ri((()=>{const n=di(.5,Pl(t)),s=Of(Vo(t,n),e.dtype);return Tl($o(e,s),-1)}))}function dg(e,t){return ri((()=>Of($o(wi(e,-1),wi(t,-1)),"float32")))}function fg(e,t){return ri((()=>wl(e.equal(1),t.equal(1)).sum().cast("float32")))}function mg(e,t){return ri((()=>{const n=fg(e,t),s=function(e,t){return ri((()=>wl(e.equal(0),t.equal(1)).sum().cast("float32")))}(e,t),r=n.add(s);return So(Vo(r,0),n.div(r),0).cast("float32")}))}function gg(e,t){return ri((()=>{const n=fg(e,t),s=function(e,t){return ri((()=>wl(e.equal(1),t.equal(0)).sum().cast("float32")))}(e,t),r=n.add(s);return So(Vo(r,0),n.div(r),0).cast("float32")}))}function yg(e,t){return og(e,t)}function bg(e,t){return e.rank===t.rank&&(e=e.squeeze([e.rank-1])),(t=t.argMax(-1)).dtype!==e.dtype&&(t=t.asType(e.dtype)),$o(e,t).asType("float32")}const xg=ag,wg=ig,kg={binaryAccuracy:pg,categoricalAccuracy:dg,precision:mg,categoricalCrossentropy:xg,sparseCategoricalCrossentropy:wg,mse:tg,MSE:tg,mae:ng,MAE:ng,mape:sg,MAPE:sg,cosine:ug};function vg(e){if("string"==typeof e&&e in kg)return kg[e];if("string"!=typeof e&&null!=e)return e;throw new Od(`Unknown metric ${e}`)}function Ng(e){if(Bd(null!==e,`Unknown LossOrMetricFn ${e}`),"string"==typeof e)return e;{let t;for(const n of Object.keys(cg))if(cg[n]===e){t=n;break}if(void 0!==t)return t;for(const n of Object.keys(kg))if(kg[n]===e){t=n;break}return void 0!==t?t:e.name}}const Ig=1048576;function Cg(e,t,n=!1){if(null==e||"object"!=typeof e||Object.getPrototypeOf(e)!==Object.prototype||!$g(e))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(n){const n=JSON.stringify(e);n.length>Ig&&console.warn(`User-defined metadata of model "${t}" is too large in size (length=${n.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`)}}function $g(e){if(null===e)return!0;if("object"==typeof e){if(Object.getPrototypeOf(e)===Object.prototype){const t=Object.keys(e);for(const n of t){if("string"!=typeof n)return!1;if(!$g(e[n]))return!1}return!0}if(Array.isArray(e)){for(const t of e)if(!$g(t))return!1;return!0}return!1}{const t=typeof e;return"string"===t||"number"===t||"boolean"===t}}function Sg(e,t,n,s=console.log){const r=function(e){let t=!0;const n=[],s=[];for(const t in e.nodesByDepth)n.push(e.nodesByDepth[t]);for(const e of n){if(e.length>1||1===e.length&&e[0].inboundLayers.length>1){t=!1;break}s.push(...e)}if(t)for(const n of e.layers){let e=!1;for(const r of n.inboundNodes)if(-1!==s.indexOf(r)){if(e){t=!1;break}e=!0}if(!t)break}return t}(e),a=["Layer (type)","Output shape","Param #"];let i;if(r?(t=t||65,n=n||[.45,.85,1]):(t=t||98,n=n||[.33,.55,.67,1]),n[n.length-1]<=1&&(n=n.map((e=>Math.floor(t*e)))),!r){a.push("Receives inputs"),i=[];for(const t in e.nodesByDepth)i.push(...e.nodesByDepth[t])}s("_".repeat(t)),Tg(a,n,s),s("=".repeat(t));const o=e.layers;for(let e=0;e<o.length;++e)r?Eg(o[e],n,s):Ag(o[e],n,i,s),s((e===o.length-1?"=":"_").repeat(t));e.checkTrainableWeightsConsistency();const l=function(e){let t;t=null!=e.collectedTrainableWeights?Tm(e.collectedTrainableWeights):Tm(e.trainableWeights);return t}(e),u=Tm(e.nonTrainableWeights);s(`Total params: ${l+u}`),s(`Trainable params: ${l}`),s(`Non-trainable params: ${u}`),s("_".repeat(t))}function Tg(e,t,n=console.log){let s="";for(let n=0;n<e.length;++n)n>0&&(s=s.slice(0,s.length-1)+" "),s+=e[n],s=s.slice(0,t[n]),s+=" ".repeat(t[n]-s.length);n(s)}function Eg(e,t,n){let s;try{s=JSON.stringify(e.outputShape)}catch(e){s="multiple"}Tg([`${e.name} (${e.getClassName()})`,s,e.countParams().toString()],t,n)}function Ag(e,t,n,s){let r;try{r=JSON.stringify(e.outputShape)}catch(e){r="multiple"}const a=[];for(const t of e.inboundNodes)if(!(null!=n&&n.length>0&&-1===n.indexOf(t)))for(let e=0;e<t.inboundLayers.length;++e){const n=t.inboundLayers[e].name,s=t.nodeIndices[e],r=t.tensorIndices[e];a.push(`${n}[${s}][${r}]`)}const i=e.name,o=e.getClassName(),l=0===a.length?"":a[0];Tg([`${i} (${o})`,r,e.countParams().toString(),l],t,s);for(let e=1;e<a.length;++e)Tg(["","","",a[e]],t,s)}function Rg(e,t,n){return("inboundNodes"===e||"outputLayers"===e||"inputLayers"===e)&&0===t&&"string"==typeof n}function Fg(e,t){if(null===e)return null;if("string"==typeof e)return Gd(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],s=e.length;for(let r=0;r<s;++r){const s=e[r];Rg(t,r,s)?n.push(s):n.push(Fg(s,t))}return n}{const t={};for(const n of Object.keys(e)){const s=e[n];if("name"===n&&"string"==typeof s)t[n]=s;else{const e=Gd(n);t[e]=Fg(s,e)}}return t}}function Dg(e,t){if(null==e)return null;if("string"==typeof e)return Ud(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],s=e.length;for(let r=0;r<s;++r){const s=e[r];Rg(t,r,s)?n.push(s):n.push(Dg(s,t))}return n}{const t={};for(const n of Object.keys(e)){const s=e[n],r=Ud(n);t[r]="name"!==n&&"className"!==n||"string"!=typeof s?Dg(s,n):s}return t}}const _g="3.4.0";class Og{constructor(e){if(this.id2Value={},this.id2Mask={},this.name2Id={},e instanceof Og)for(const t in e.id2Value)this.id2Value[t]=e.id2Value[t],t in e.id2Mask&&(this.id2Mask[t]=e.id2Mask[t]);else{if(null==e)return;for(const t of e)this.add(t.key,t.value)}}add(e,t,n){if(null!=this.id2Value[e.id])throw new Od(`Duplicate key: name=${e.name}, id=${e.id}`);return this.id2Value[e.id]=function(e,t){if(null==e.dtype||e.dtype===t.dtype)return t;try{return qr(t,e.dtype)}catch(n){throw new Od(`The dtype of the feed (${t.dtype}) can not be cast to the dtype of the key '${e.name}' (${e.dtype}).`)}}(e,t),this.name2Id[e.name]=e.id,null!=n&&(this.id2Mask[e.id]=n),this}addFeed(e){this.add(e.key,e.value)}hasKey(e){return null!=this.id2Value[e.id]}names(){return Object.keys(this.name2Id)}getValue(e){if(e instanceof _m){if(null==this.id2Value[e.id])throw new Od(`Nonexistent key: ${e.name}`);return this.id2Value[e.id]}{const t=this.name2Id[e];if(null==t)throw new Od(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Value[t]}}getMask(e){if(e instanceof _m){if(null==this.id2Value[e.id])throw new Od(`Nonexistent key: ${e.name}`);return this.id2Mask[e.id]}{const t=this.name2Id[e];if(null==t)throw new Od(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Mask[t]}}disposeMasks(){null!=this.id2Mask&&ai(this.id2Mask)}}const Mg={},Lg={};function zg(e,t,n,s){const r=null!=n&&n.training,a=Array.isArray(e),i=a?e:[e],o=i.map((e=>e.name)),u=[],c=t.names();for(const e of o)-1!==c.indexOf(e)?u.push(t.getValue(e)):u.push(null);null!=s&&(s.maxNumTensors=-1/0,s.minNumTensors=1/0);const h=o.join(",")+"|"+t.names().join(",");let p,d;if(null==Mg[h]){const e=function(e,t){l(null!=e&&e.length>0,(()=>"Expected at least one fetch, got none"));let n=[],s={};if(1===e.length){const r=Pg(e[0],t);n=r.sorted,s=r.recipientMap}else{const r=new Set;for(const a of e){const{sorted:e,recipientMap:i}=Pg(a,t);for(const t of e)r.has(t.name)||(n.push(t),r.add(t.name));for(const e in i)null==s[e]&&(s[e]=new Set),i[e].forEach((t=>s[e].add(t)))}}return{sorted:n,recipientCounts:Bg(s)}}(i,t);p=e.sorted,d=e.recipientCounts,Mg[h]=p,Lg[h]=d}p=Mg[h],d={},r||Object.assign(d,Lg[h]);const f=new Og(t);for(let e=0;e<p.length;++e){if(null!=s){const e=si().numTensors;e>s.maxNumTensors&&(s.maxNumTensors=e),e<s.minNumTensors&&(s.minNumTensors=e)}const a=p[e],i=a.sourceLayer;if(i instanceof Pm)continue;const l=[],c=[],h=[];let m=!1;for(const e of a.inputs){const n=f.getValue(e),s=f.getMask(e);l.push(n),c.push(s),null!=s&&(m=!0),r||(d[e.name]--,0!==d[e.name]||t.hasKey(e)||-1!==o.indexOf(e.name)||n.isDisposed||!0===e.sourceLayer.stateful||h.push(n))}m&&((n=n||{}).mask=c[0]);const g=Vd(i.apply(l,n));let y=null;i.supportsMasking&&(y=i.computeMask(l,c));const b=Wg(a),x=Array.isArray(b)?b:[b];for(let e=0;e<x.length;++e){f.hasKey(x[e])||f.add(x[e],g[e],Array.isArray(y)?y[0]:y);const t=o.indexOf(x[e].name);-1!==t&&(u[t]=g[e])}r||ai(h)}return f.disposeMasks(),a?u:u[0]}function Bg(e){const t={};for(const n in e)t[n]=e[n].size;return t}function Pg(e,t){const n=new Set,s=[],r={};for(const e of t.names())n.add(e);const a=[],i=[];for(a.push(e);a.length>0;){const e=a[a.length-1];if(n.has(e.name)){a.pop();continue}const t=i[i.length-1]===a.length-1;if(0===e.inputs.length||t)a.pop(),s.push(e),n.add(e.name),t&&i.pop();else{i.push(a.length-1);for(const t of e.inputs)null==r[t.name]&&(r[t.name]=new Set),r[t.name].add(e.name),n.has(t.name)||a.push(t)}}return{sorted:s,recipientMap:r}}function Wg(e){let t;if(1===e.sourceLayer.inboundNodes.length)t=e.sourceLayer.output;else{let n=null;for(let t=0;t<e.sourceLayer.inboundNodes.length;++t)for(const s of e.sourceLayer.inboundNodes[t].outputTensors)if(s.id===e.id){n=t;break}t=e.sourceLayer.getOutputAt(n)}return t}class Vg extends zm{constructor(e){if(super({}),this.containerNodes=new Set,this.name=e.name,null==this.name){const e=this.getClassName().toLowerCase();this.name=Nm(e)}if(this.supportsMasking=!1,this.trainable_=!0,Array.isArray(e.inputs)?this.inputs=e.inputs.slice():this.inputs=[e.inputs],Array.isArray(e.outputs)?this.outputs=e.outputs.slice():this.outputs=[e.outputs],Yd(this.inputs).length!==this.inputs.length)throw new Od(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map((e=>e.name))}`);Yd(this.outputs).length!==this.outputs.length&&console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map((e=>e.name))}`),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const e of this.outputs){const t=e.sourceLayer,n=e.nodeIndex,s=e.tensorIndex;this.outputLayers.push(t),this.outputLayersNodeIndices.push(n),this.outputLayersTensorIndices.push(s)}for(const e of this.inputs){const t=e.sourceLayer,n=e.nodeIndex,s=e.tensorIndex;Bd(0===n,"input layer has >1 nodes"),Bd(0===s,"input layer has >1 tensors"),this.inputLayers.push(t),this.inputLayersNodeIndices.push(n),this.inputLayersTensorIndices.push(s)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let t=0;t<this.inputLayers.length;t++){const n=this.inputLayers[t];if(!(n instanceof Pm))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${e.inputs}. Input ${t} (0-based) originates from layer type ${n.getClassName()}.`);this.inputNames.push(n.name),this.feedInputShapes.push(n.batchInputShape),this.feedInputNames.push(n.name)}for(const e of this.outputLayers)this.outputNames.push(e.name);this.internalInputShapes=this.inputs.map((e=>e.shape)),this.internalOutputShapes=this.outputs.map((e=>e.shape));const t={},n={},s={},r={},a={},i=[],o=(e,t,n,s,r,l)=>{null!=s&&null!=r&&null!=l||(s=e.sourceLayer,r=e.nodeIndex,l=e.tensorIndex);const u=s.inboundNodes[r];if(-1!==n.indexOf(u))throw new _d(`The tensor ${e.name} at layer "${s.name}" is part of a cycle.`);if(-1!==t.indexOf(u))return;this.containerNodes.add(Vg.nodeKey(s,r)),s.id in a||(a[s.id]=Object.keys(a).length),-1===n.indexOf(u)&&n.push(u);const c=u.inboundLayers.length;for(let e=0;e<c;e++){const s=u.inputTensors[e],r=u.inboundLayers[e],a=u.nodeIndices[e],i=u.tensorIndices[e];o(s,t,n,r,a,i)}for(t.push(u);n.indexOf(u)>=0;)n.splice(n.indexOf(u),1);i.push(u)},l=[],u=[];for(const e of this.outputs)o(e,l,u);const c=i.slice().reverse();for(const e of c){n[e.id]=e,e.id in t||(t[e.id]=0);let a=t[e.id];const i=null==s[e.outboundLayer.id]?0:s[e.outboundLayer.id];a=Math.max(a,i),s[e.outboundLayer.id]=a,r[e.outboundLayer.id]=e.outboundLayer,t[e.id]=a;for(let s=0;s<e.inboundLayers.length;s++){const r=e.inboundLayers[s],i=e.nodeIndices[s],o=r.inboundNodes[i],l=null==t[o.id]?0:t[o.id];t[o.id]=Math.max(a+1,l),n[o.id]=o}}const h={};for(const e in t){const s=t[e];s in h||(h[s]=[]),h[s].push(n[e])}const p={};for(const e in s){const t=s[e];t in p||(p[t]=[]),p[t].push(r[e])}let d=Object.keys(p).map((e=>parseInt(e,10))).sort(Xd);this.layers=[];for(const e of d){const t=p[e];t.sort(((e,t)=>{const n=a[e.id],s=a[t.id];return n<s?-1:n>s?1:0}));for(const e of t)e instanceof Vg&&this.internalContainerRefs.push(e),this.layers.push(e)}this.layersByDepth=p,d=Object.keys(h).map((e=>parseInt(e,10))).sort(Xd);const f=this.inputs.slice(),m=[];for(const e of d)for(const t of h[e]){const e=t.outboundLayer;if(null!=e){for(const n of t.inputTensors)if(-1===f.indexOf(n))throw new _d(`Graph disconnected: cannot obtain value for tensor ${n} at layer "${e.name}". The following previous layers were accessed without issue: ${m}`);for(const e of t.outputTensors)f.push(e);m.push(e.name)}}this.nodesByDepth=h;const g=this.layers.map((e=>e.name));for(const e of g){const t=g.filter((t=>t===e)).length;if(1!==t)throw new _d(`The name "${e}" is used ${t} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(g))}this.outboundNodes=[],this.inboundNodes=[],new Mm({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map((e=>null)),outputMasks:this.outputs.map((e=>null)),inputShapes:this.inputs.map((e=>e.shape)),outputShapes:this.outputs.map((e=>e.shape))}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const e={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(const t of this.layers)e.numDisposedVariables+=t.dispose().numDisposedVariables;for(const t of this.internalContainerRefs)e.numDisposedVariables+=t.dispose().numDisposedVariables}return e.refCountAfterDispose=this._refCount,e}get trainable(){return this.trainable_}set trainable(e){this.layers.forEach((t=>{t._trainableWeights.forEach((t=>t.trainable=e))})),this.trainable_=e}get trainableWeights(){if(this._trainableWeights.length>0)throw new Od("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let e=[];for(const t of this.layers)e=e.concat(t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.layers)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.layers)t.push(...e.trainableWeights);return t.concat(e)}return e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(e,t=!0){const n={};let s=0;for(const e of this.layers)for(const t of e.weights){if(null!=n[t.originalName])throw new Od(`Duplicate weight name: ${t.originalName}`);n[t.originalName]=t,s++}const r=[];for(const s in e){let a=s;if(null==n[s]){const e=s.split("/");a=e.slice(0,-2).concat([e[e.length-1]]).join("/")}if(null!=n[a])r.push([n[a],e[s]]);else if(t)throw new Od(`Provided weight data has no target variable: ${s}`);delete n[a]}if(t){const e=[];for(const t in n)e.push(t);if(e.length>0)throw new Od(`${e.length} of ${s} weights are not set: ${e}`)}Fm(r)}updatedConfig(){const e=this.getConfig(),t={};return t.className=this.getClassName(),t.config=e,t.kerasVersion="tfjs-layers 3.4.0",t.backend="TensorFlow.js",t}toJSON(e,t=!0){const n=Dg(this.updatedConfig());return t?JSON.stringify(n):n}call(e,t){return ri((()=>{e=Vd(e);const n=new Og;for(let t=0;t<this.inputs.length;++t)n.add(this.inputs[t],e[t]);return zg(this.outputs,n,t)}))}computeMask(e,t){return ri((()=>{let n;return e=Vd(e),n=null==t?zd(null,e.length):Vd(t),this.runInternalGraph(e,n)[1]}))}computeOutputShape(e){const t=Cm(e);if(t.length!==this.inputLayers.length)throw new Od(`Invalid inputShape argument ${e}: model has ${this.inputLayers.length} tensor inputs.`);const n={};for(let e=0;e<t.length;e++){const s=this.inputLayers[e],r=t[e];n[s.name+"_0_0"]=r}const s=Object.keys(this.nodesByDepth).map((e=>parseInt(e,10))).sort(Xd);if(s.length>1)for(const e of s){const t=this.nodesByDepth[e];for(const e of t){const t=e.outboundLayer;if(-1!==this.inputLayers.map((e=>e.id)).indexOf(t.id))continue;const s=[];for(let t=0;t<e.inboundLayers.length;t++){const r=e.inboundLayers[t],a=e.nodeIndices[t],i=e.tensorIndices[t],o=n[`${r.name}_${a}_${i}`];s.push(o)}const r=Cm(t.computeOutputShape(Wd(s))),a=t.inboundNodes.indexOf(e);for(let e=0;e<r.length;e++){n[`${t.name}_${a}_${e}`]=r[e]}}}const r=[],a=[];for(let e=0;e<this.outputLayers.length;e++){const t=this.outputLayers[e],n=this.outputLayersNodeIndices[e],s=this.outputLayersTensorIndices[e],r=`${t.name}_${n}_${s}`;a.push(r)}for(let e=0;e<a.length;e++){const t=a[e];Bd(t in n),r.push(n[t])}return Wd(r)}runInternalGraph(e,t){null==t&&(t=zd(null,e.length));const n={};for(let s=0;s<this.inputs.length;++s){const r=this.inputs[s],a=e[s],i=t[s];n[r.id]=[a,i]}const s=Object.keys(this.nodesByDepth).map((e=>parseInt(e,10))).sort(Xd);for(const e of s){const t=this.nodesByDepth[e];for(const e of t){const t=e.outboundLayer,s=e.inputTensors,r=e.outputTensors,a=new Array;for(const e of s)e.id in n&&a.push(n[e.id]);if(a.length===s.length){let s,i,o,l,u={};if(null!=e.callArgs&&(u=e.callArgs),1===a.length){const[e,n]=a[0];null==u.mask&&(u.mask=n),o=Vd(t.call(e,u)),l=Vd(t.computeMask(e,n)),s=[e],i=[n]}else s=a.map((e=>e[0])),i=a.map((e=>e[1])),null==u.mask&&(u.mask=i),o=Vd(t.call(s,u)),l=Vd(t.computeMask(s,i));if(t.activityRegularizer)throw new Md("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let e=0;e<r.length;++e){const t=r[e],s=o[e],a=l[e];n[t.id]=[s,a]}}}}const r=[],a=[],i=[];for(const e of this.outputs){Bd(e.id in n,`Could not compute output ${e.name} : ${e.id}`);const[t,s]=n[e.id];i.push(t.shape),r.push(t),a.push(s)}return[r,a,i]}buildNodeConversionMap(e){const t={};let n;for(const e of this.layers){n=e instanceof Vg?1:0;for(let s=0;s<e.inboundNodes.length;s++){const r=Vg.nodeKey(e,s);this.containerNodes.has(r)&&(t[r]=n,n+=1)}}return t}getLayer(e,t){if(null!=t){if(this.layers.length<=t)throw new Od(`Was asked to retrieve layer at index ${t}, but model only has ${this.layers.length} layer(s).`);return this.layers[t]}if(null==e)throw new Od("Provide either a layer name or layer index");for(const t of this.layers)if(t.name===e)return t;throw new Od(`No such layer: ${e}`)}calculateLosses(){return ri((()=>{const e=[];for(const t of this.layers)for(let n=0;n<t.inboundNodes.length;++n){const s=Vg.nodeKey(t,n);this.containerNodes.has(s)&&e.push(...t.calculateLosses())}return e}))}getConfig(){const e={name:this.name},t=this.buildNodeConversionMap(this.layers),n=[];for(const e of this.layers){const s=e.getClassName(),r=e.getConfig(),a=[];for(let n=0;n<e.inboundNodes.length;n++){const s=e.inboundNodes[n],r=Vg.nodeKey(e,n);let i={};if(this.containerNodes.has(r)){if(s.callArgs)try{JSON.stringify(s.callArgs),i=s.callArgs}catch(t){console.warn(`Layer ${e.name} was passed non-serializable keyword arguments: ${s.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`),i={}}if(s.inboundLayers.length>0){const e=[];for(let n=0;n<s.inboundLayers.length;n++){const r=s.inboundLayers[n],a=s.nodeIndices[n],o=s.tensorIndices[n];let l=t[Vg.nodeKey(r,a)];null==l&&(l=0),e.push([r.name,l,o,i])}a.push(e)}}}const i={};i.name=e.name,i.className=s,i.config=r,i.inboundNodes=a,n.push(i)}e.layers=n;const s=[];for(let e=0;e<this.inputLayers.length;e++){const n=this.inputLayers[e],r=this.inputLayersNodeIndices[e],a=Vg.nodeKey(n,r);if(!this.containerNodes.has(a))continue;let i=t[a];null==i&&(i=0);const o=this.inputLayersTensorIndices[e];s.push([n.name,i,o])}e.inputLayers=s;const r=[];for(let e=0;e<this.outputLayers.length;e++){const n=this.outputLayers[e],s=this.outputLayersNodeIndices[e],a=Vg.nodeKey(n,s);if(!this.containerNodes.has(a))continue;let i=t[a];null==i&&(i=0);const o=this.outputLayersTensorIndices[e];r.push([n.name,i,o])}return e.outputLayers=r,e}static fromConfig(e,t,n={},s=!1){const r={},a={};function i(e,t){e.name in a?a[e.name].push(t):a[e.name]=[t]}function o(e,t){const n=[];let s;for(const a of t){const o=a[0],l=a[1],u=a[2];if(s=null==a[3]?{}:a[3],!(o in r))return void i(e,t);const c=r[o];if(c.inboundNodes.length<=l)return void i(e,t);const h=c.inboundNodes[l];n.push(h.outputTensors[u])}n.length>0&&e.apply(Wd(n),s)}function l(e){const n=e.name,a=Qm(e,null!=t.customObjects?t.customObjects:{});a.setFastWeightInitDuringBuild(s),r[n]=a;e.inboundNodes.forEach((e=>{if(!(e instanceof Array))throw new Od(`Corrupted configuration, expected array for nodeData: ${e}`);i(a,e)}))}const u=t.name,c=t.layers;for(const e of c)l(e);for(;!Jd(a);)for(const e of c){const t=r[e.name];if(t.name in a){const e=a[t.name];delete a[t.name];for(const n of e)o(t,n)}}const h=[],p=[],d=t.inputLayers;for(const e of d){const t=e[0],n=e[1],s=e[2];Bd(t in r);const a=r[t].inboundNodes[n].outputTensors;h.push(a[s])}const f=t.outputLayers;for(const e of f){const t=e[0],n=e[1],s=e[2];Bd(t in r);const a=r[t].inboundNodes[n].outputTensors;p.push(a[s])}return new e({inputs:h,outputs:p,name:u})}get stateful(){if(this._stateful)throw new Od("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const e of this.layers)if(e.stateful)return!0;return!1}resetStates(){ri((()=>{this.layers.forEach((e=>{e.stateful&&e.resetStates()}))}))}}function Ug(e,t,n){const s=t.length;if(null==e||Array.isArray(e)&&0===e.length)return t.map((e=>null));if(1===s)return Array.isArray(e)&&1===e.length?e:"object"==typeof e&&t[0]in e?[e[t[0]]]:[e];if(Array.isArray(e)){if(e.length!==s)throw new Error(`Provided ${n} is an array of ${e.length} element(s), but the model has ${s} outputs. Make sure a set of weights is provided for each model output.`);return e}if("object"==typeof e&&Object.keys(e).length>0&&"object"==typeof e[Object.keys(e)[0]]){const n=[];return t.forEach((t=>{t in e?n.push(e[t]):n.push(null)})),n}throw new Error(`The model has multiple (${s}) outputs, so ${n} must be either an array with ${s} elements or an object with ${t} keys. Provided ${n} not understood: ${JSON.stringify(e)}`)}function Gg(e,t){return Ug(e,t,"classWeight")}async function Hg(e,t,n,s){if(null!=t||null!=s)throw new Error("Support sampleWeight is not implemented yet");if(null!=n){const t=ri((()=>{if(1===e.shape.length)return e.clone();if(2===e.shape.length){if(e.shape[1]>1){const t=1;return e.argMax(t)}if(1===e.shape[1])return e.reshape([e.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${e.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${e.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)})),s=Array.from(await t.data());ai(t);const r=[];return s.forEach((e=>{if(null==n[e])throw new Error(`classWeight must contain all classes in the training data. The class ${e} exists in the data but not in classWeight`);r.push(n[e])})),Yu(r,"float32")}return null}function jg(e,t){return di(e,t)}function qg(e,t){let n,s;const r=t;n=r.xs,s=r.ys,l(null!=n&&null!=s,(()=>`A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${t}`));const a=Kg("input",e.inputNames,n),i=Kg("output",e.outputNames,s),o=a[0].shape[0];l(a.length===e.inputs.length,(()=>`LayersModel has ${e.inputs.length} inputs, but the dataset provides ${a.length} inputs.  (Expected input keys: ${JSON.stringify(e.inputNames)})`)),l(i.length===e.outputs.length,(()=>`LayersModel has ${e.outputs.length} outputs, but the dataset provides ${i.length} outputs.  (Expected output keys: ${JSON.stringify(e.outputNames)})`));for(let t=0;t<a.length;t++)l(a[t].shape[0]===o,(()=>`Batch size mismatch: input ${e.inputNames[t]} has ${a[t].shape[0]}; expected  ${o} based on input ${e.inputNames[0]}.`));for(let t=0;t<i.length;t++)l(i[t].shape[0]===o,(()=>`Batch size mismatch: output ${e.outputNames[t]} has ${i[t].shape[0]}; expected  ${o} based on input ${e.inputNames[0]}.`));return{xs:a,ys:i}}function Kg(e,t,n){if(n instanceof vs)return[n];if(Array.isArray(n))return l(n.length===t.length,(()=>`Received an array of ${n.length} Tensors, but expected ${t.length} to match the ${e} keys ${t}.`)),n;{const s=[];for(const r of t){if(null==n[r])throw new Od(`The feature data generated by the dataset lacks the required ${e} key '${r}'.`);s.push(n[r])}return s}}async function Xg(e,t,n){const s=null!=n.batchesPerEpoch;if(l(null!=e.optimizer,(()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig).")),l(null!=n,(()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call.")),l(null!=n.epochs&&n.epochs>0&&Number.isInteger(n.epochs),(()=>`For fitDataset(), config.epochs is expected to be a positive integer, but got ${n.epochs}`)),l(!s||n.batchesPerEpoch>0&&Number.isInteger(n.batchesPerEpoch),(()=>`For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${n.batchesPerEpoch}`)),l(null==n.validationSplit,(()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead.")),e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");e.isTraining=!0;try{const r=null!=n.validationData;let a,i;if(r)if(Yg(n.validationData))l(null==n.validationBatches||n.validationBatches>0&&Number.isInteger(n.validationBatches),(()=>`For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${n.validationBatches}`));else{const e=function(e){if(3===e.length)throw new Md("Validation with sample weights is not implemented yet.");return{xs:e[0],ys:e[1]}}(n.validationData);a=e.xs,i=e.ys}const o=e.makeTrainFunction(),u=e.getDedupedMetricsNames();let c;c=r?u.slice().concat(u.map((e=>"val_"+e))):u.slice();const h=Ym(n.callbacks,n.yieldEvery),p=null==n.verbose?1:n.verbose,{callbackList:d,history:f}=Zm(h,p,n.epochs,null,null,function(e,t){let n=null;null!=t.batchesPerEpoch?n=t.batchesPerEpoch:Number.isFinite(e.size)&&(n=e.size);return n}(t,n),null,r,c);d.setModel(e),e.history=f,await d.onTrainBegin(),e.stopTraining_=!1;let m=null==n.initialEpoch?0:n.initialEpoch,g=await t.iterator();for(;m<n.epochs;){const l={};await d.onEpochBegin(m);let c=0,h=0;for(s||(g=await t.iterator());!s||c<n.batchesPerEpoch;){const t=await g.next();if(s&&t.done){console.warn(`You provided \`batchesPerEpoch\` as ${n.batchesPerEpoch}, but your dataset iterator ran out of data after ${c} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, `+n.batchesPerEpoch*n.epochs+" batches). You may need to use the repeat() function when building your dataset.");break}if(null!=t.value){const{xs:s,ys:r}=qg(e,t.value),a={};a.batch=h,a.size=s[0].shape[0],await d.onBatchBegin(h,a);const i=[];if(null!=n.classWeight){const t=Gg(n.classWeight,e.outputNames);for(let e=0;e<t.length;++e)i.push(await Hg(r[e],null,t[e]))}const l=s.concat(r).concat(i),p=o(l);ai(l);for(let e=0;e<u.length;++e){const t=u[e],n=p[e];a[t]=n,ii(n)}await d.onBatchEnd(h,a),Um(a),h++,c++}if(s?c>=n.batchesPerEpoch:t.done){if(r){let t;t=Yg(n.validationData)?Vd(await e.evaluateDataset(n.validationData,{batches:n.validationBatches})):Vd(e.evaluate(a,i,{batchSize:null==n.validationBatchSize?32:n.validationBatchSize,verbose:0}));for(let n=0;n<e.metricsNames.length;++n)l[`val_${e.metricsNames[n]}`]=t[n]}break}if(e.stopTraining_)break}if(await d.onEpochEnd(m,l),m++,e.stopTraining_)break}return await d.onTrainEnd(),await e.history.syncData(),e.history}finally{e.isTraining=!1}}function Yg(e){return"function"==typeof e.iterator}function Jg(e){l(e>0&&Number.isInteger(e),(()=>`batchSize is required to be a positive integer, but got ${e}`))}function Zg(e,t,n){return null==e?[null]:Array.isArray(e)?e.map((e=>Lf(e,t,n-t))):Lf(e,t,n-t)}function Qg(e,t){return ri((()=>null==e?null:Array.isArray(e)?e.map((e=>Qg(e,t))):Hf(e,"int32"===t.dtype?t:t.toInt())))}function ey(e,t){const n=[];let s=0,r=null;for(;s<e;)r=s+t,r>=e&&(r=e),n.push([s,r]),s=r;return n}async function ty(e,t,n,s={}){if(e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");let a,i,o,l,u,c,h;e.isTraining=!0;try{const p=null==s.batchSize?32:s.batchSize;Jg(p);const d=!1,f=await e.standardizeUserData(t,n,s.sampleWeight,s.classWeight,d,p);a=f[0],i=f[1],h=f[2];let m,g=!1;if(null!=s.validationData&&s.validationData.length>0){if(g=!0,2!==s.validationData.length)throw 3===s.validationData.length?new Md("validationData including sample weights is not supported yet."):new Od(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${s.validationData} is invalid.`);o=s.validationData[0],l=s.validationData[1];const t=!0,n=await e.standardizeUserData(o,l,null,null,t,p);u=n[0],c=n[1],m=u.concat(c)}else if(null!=s.validationSplit&&s.validationSplit>0&&s.validationSplit<1){g=!0;const e=Math.floor(a[0].shape[0]*(1-s.validationSplit)),t=a[0].shape[0];u=Zg(a,e,t),a=Zg(a,0,e),c=Zg(i,e,t),i=Zg(i,0,e),m=u.concat(c)}else null!=s.validationSteps&&(g=!0);const y=a.concat(i).concat(h);e.checkTrainableWeightsConsistency();const b=e.makeTrainFunction(),x=e.getDedupedMetricsNames();let w,k;g?(e.makeTestFunction(),w=e.testFunction,k=x.slice().concat(x.map((e=>"val_"+e)))):(w=null,m=[],k=x.slice());const v=Ym(s.callbacks,s.yieldEvery);return await async function(e,t,n,s,a,i,o,l,u,c,h,p,d,f,m){null==a&&(a=32),null==i&&(i=1),null==h&&(h=!0),null==d&&(d=0);let g=!1;if(null!=u&&null!=c&&(g=!0),null!=m&&(g=!0,null==f))throw new Od("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");const y=e.checkNumSamples(n,a,f,"steps_per_epoch");let b;null!=y&&(b=_f(0,y)),null==o&&(o=1);const{callbackList:x,history:w}=Zm(l,o,i,d,y,f,a,g,p);x.setModel(e),e.history=w,await x.onTrainBegin(),e.stopTraining_=!1;for(let o=d;o<i;++o){await x.onEpochBegin(o);const i={};if(null!=f)throw new Md("stepsPerEpoch mode is not implemented yet.");{if("batch"===h)throw new Md("batch shuffling is not implemneted yet");h&&r(b);const o=Yu(b),l=ey(y,a);for(let r=0;r<l.length;++r){const h={};if(await x.onBatchBegin(r,h),ri((()=>{const p=l[r][0],d=l[r][1],f=Lf(o,p,d-p);h.batch=r,h.size=d-p;const m=Qg(n,f),y=t(m);for(let e=0;e<s.length;++e){const t=s[e],n=y[e];h[t]=n,ii(n)}if(r===l.length-1&&g){const t=e.testLoop(u,c,a);for(let e=0;e<s.length;++e){const n=s[e],r=t[e];ii(r),i["val_"+n]=r}}})),await x.onBatchEnd(r,h),Um(h),e.stopTraining_)break}o.dispose()}if(await x.onEpochEnd(o,i),e.stopTraining_)break}return await x.onTrainEnd(),await e.history.syncData(),e.history}(e,b,y,x,p,s.epochs,s.verbose,v,w,m,s.shuffle,k,s.initialEpoch,null,null)}finally{e.isTraining=!1,sy(a,t),sy(i,n),sy(u,o),sy(c,l),null!=h&&ai(h)}}function ny(e){const t=[];e instanceof vs&&(e=[e]);for(let n=0;n<e.length;++n){const s=e[n];if(1===s.rank)t.push(Mf(s,1));else{if(0===s.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");t.push(s)}}return t}function sy(e,t){if(null==e)return;const n=[];if(t instanceof vs)n.push(t.id);else if(Array.isArray(t))t.forEach((e=>n.push(e.id)));else if(null!=t)for(const e in t){const s=t[e];n.push(s.id)}const s=[];if(e instanceof vs)-1===n.indexOf(e.id)&&s.push(e);else if(Array.isArray(e))e.forEach((e=>{-1===n.indexOf(e.id)&&s.push(e)}));else if(null!=e)for(const t in e){const r=e[t];-1===n.indexOf(r.id)&&s.push(r)}s.forEach((e=>{e.isDisposed||e.dispose()}))}function ry(e){return Array.isArray(e)}function ay(e){return!function(e){return e instanceof vs}(e)&&!ry(e)}function iy(e,t,n,s=!0,r=""){if(null==t||0===t.length){if(null!=e){let t=!1;if(ry(e)&&e.length>0)t=!0;else if(ay(e)){for(const n in e)if(e.hasOwnProperty(n)){t=!0;break}}else t=!0;if(t)throw new Od(`Error when checking model ${r} expected no data, but got ${e}`)}return[]}if(null==e)return t.map((e=>null));let a;if(ay(e)){e=e,a=[];for(const n of t){if(null==e[n])throw new Od(`No data provided for "${n}". Need data for each key in: ${t}`);a.push(e[n])}}else if(ry(e)){if((e=e).length!==t.length)throw new Od(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${t.length} Tensor(s), but instead got the following list of Tensor(s): ${e}`);a=e}else{if(e=e,t.length>1)throw new Od(`The model ${r} expects ${t.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${e.shape}`);a=[e]}if(a=ny(a),null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;const i=a[e];if(i.shape.length!==n[e].length)throw new Od(`Error when checking ${r}: expected ${t[e]} to have ${n[e].length} dimension(s). but got array with shape ${i.shape}`);for(let a=0;a<n[e].length;++a){if(0===a&&!s)continue;const o=i.shape[a],l=n[e][a];if(null!=l&&l>=0&&o!==l)throw new Od(`Error when checking ${r}: expected ${t[e]} to have shape [${n[e]}], but got array with shape [${i.shape}].`)}}return a}function oy(e,t,n,s=!0,r=""){let a;if(Array.isArray(e)){if(e.length!==t.length)throw new Od(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${t.length} Tensor(s), but instead got ${e.length} Tensors(s).`);a=e}else{if(t.length>1)throw new Od(`The model expects ${t.length} ${r} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(e.shape)}.`);a=[e]}if(null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;const i=a[e];if(i.shape.length!==n[e].length)throw new Od(`Error when checking ${r}: expected ${t[e]} to have ${n[e].length} dimension(s), but got array with shape ${JSON.stringify(i.shape)}`);for(let a=0;a<n[e].length;++a){if(0===a&&!s)continue;const o=i.shape[a],l=n[e][a];if(null!=l&&l!==o)throw new Od(`Error when checking ${r}: expected ${t[e]} to have shape ${JSON.stringify(n[e])} but got array with shape ${JSON.stringify(i.shape)}.`)}}}class ly extends Vg{constructor(e){super(e),this.isTraining=!1}summary(e,t,n=console.log){if(!this.built)throw new Od("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");Sg(this,e,t,n)}compile(e){if(null==e.loss&&(e.loss=[]),this.loss=e.loss,"string"==typeof e.optimizer)this.optimizer_=function(e){const t={Adagrad:()=>Th.adagrad(.01),Adadelta:()=>Th.adadelta(1,.95,Fd()),Adam:()=>Th.adam(.001,.9,.999,Fd()),Adamax:()=>Th.adamax(.002,.9,.999,Fd(),0),RMSProp:()=>Th.rmsprop(.001,.9,0,Fd()),SGD:()=>Th.sgd(.01)};if(t.adagrad=t.Adagrad,t.adadelta=t.Adadelta,t.adam=t.Adam,t.adamax=t.Adamax,t.rmsprop=t.RMSProp,t.sgd=t.SGD,e in t)return t[e]();throw new Od(`Unknown Optimizer ${e}`)}(e.optimizer),this.isOptimizerOwned=!0;else{if(!(e.optimizer instanceof xh))throw new Od("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=e.optimizer,this.isOptimizerOwned=!1}let t=[];if(Array.isArray(e.loss)||"string"==typeof e.loss||"function"==typeof e.loss)if(Array.isArray(e.loss)){if(e.loss.length!==this.outputs.length)throw new Od(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${e.loss}.`);const n=e.loss;t=n.map((e=>hg(e)))}else{const n=hg(e.loss);this.outputs.forEach((e=>{t.push(n)}))}else{e.loss=e.loss;for(const t in e.loss)if(-1===this.outputNames.indexOf(t))throw new Od(`Unknown entry in loss dictionary: "${t}". Only expected the following keys: ${this.outputNames}`);for(const n of this.outputNames)null==e.loss[n]&&console.warn(`Output "${n}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${n} during training`),t.push(hg(e.loss[n]))}this.lossFunctions=t,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let e=0;e<this.outputs.length;++e){const t=this.internalOutputShapes[e],n=this.outputNames[e];this.feedOutputNames.push(n),this.feedOutputShapes.push(t),this.feedLossFns.push(this.lossFunctions[e])}const n=[];this.metrics=e.metrics,this.metricsNames=["loss"],this.metricsTensors=[],Cf("loss",(()=>{for(let e=0;e<this.outputs.length;++e){if(-1!==n.indexOf(e))continue;const t=this.lossFunctions[e];this.outputs.length>1&&(this.metricsTensors.push([t,e]),this.metricsNames.push(this.outputNames[e]+"_loss"))}}));const s=function(e,t){if(null==e||Array.isArray(e)&&0===e.length)return t.map((e=>[]));let n;if("string"==typeof e||"function"==typeof e)n=[e];else{if(!Array.isArray(e)&&"object"!=typeof e)throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${e}`);n=e}if(Array.isArray(n))return t.map((e=>n));{const e=[];for(const s of t){let t=n.hasOwnProperty(s)?n[s]:[];Array.isArray(t)||(t=[t]),e.push(t)}return e}}(e.metrics,this.outputNames),r=(e,t,n)=>{this.outputNames.length>1&&(t=this.outputNames[e]+"_"+t),this.metricsNames.push(t),this.metricsTensors.push([n,e])};Cf("metric",(()=>{for(let e=0;e<this.outputs.length;++e){if(-1!==n.indexOf(e))continue;(t=>{let n,s,a;for(const i of t){if("string"==typeof i&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(i)){const t=this.internalOutputShapes[e];let r;1===t[t.length-1]||this.lossFunctions[e]===og?-1!==["accuracy","acc"].indexOf(i)?s=pg:-1!==["crossentropy","ce"].indexOf(i)&&(s=yg):this.lossFunctions[e]===ig?-1!==["accuracy","acc"].indexOf(i)?s=bg:-1!==["crossentropy","ce"].indexOf(i)&&(s=wg):-1!==["accuracy","acc"].indexOf(i)?s=dg:-1!==["crossentropy","ce"].indexOf(i)&&(s=xg),-1!==["accuracy","acc"].indexOf(i)?r="acc":-1!==["crossentropy","ce"].indexOf(i)&&(r="ce"),a=s,n=""+r}else{const e=vg(i);a=e,n=""+Ng(i)}let t;Cf(n,(()=>{t=a})),r(e,n,t)}})(s[e])}})),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(e,t,n={}){const s=null==n.batchSize?32:n.batchSize;Jg(s);const r=this.standardizeUserDataXY(e,t,!0,s);try{const a=r[0].concat(r[1]);this.makeTestFunction();const i=this.testFunction;return Wd(this.testLoop(i,a,s,n.verbose,n.steps))}finally{sy(r[0],e),sy(r[1],t)}}async evaluateDataset(e,t){return this.makeTestFunction(),async function(e,t,n){const s=null!=(n=n||{}).batches,r=e.testFunction;let a=[];if(n.verbose>0)throw new Md("Verbose mode is not implemented yet.");l(!s||n.batches>0&&Number.isInteger(n.batches),(()=>`Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(n.batches)}`));const i="function"==typeof t.next?t:await t.iterator();let o=0,u=0;for(;!s||u<n.batches;){const t=await i.next();if(a=ri((()=>{if(t.value){const{xs:n,ys:s}=qg(e,t.value),i=n.concat(s),l=ri((()=>r(i)));if(ai(i),0===u)for(let e=0;e<l.length;++e)a.push($u(0));const c=i[0].shape[0];for(let e=0;e<l.length;++e){const t=l[e],n=a[e];a[e]=ri((()=>ci(a[e],di(c,t)))),u>0&&ai(n)}ai(l),o+=c,++u}return a})),t.done){s&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${n.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let e=0;e<a.length;++e){const t=a[e];a[e]=pi(a[e],o),ai(t)}return Wd(a)}(this,e,t)}checkNumSamples(e,t,n,s="steps"){let r;if(null!=n){if(r=null,null!=t)throw new Od(`If ${s} is set, batchSize must be null or undefined.Got batchSize = ${t}`)}else{if(null==e)throw new Od(`Either the input data should have a defined shape, or ${s} shoud be specified.`);r=Array.isArray(e)?e[0].shape[0]:e.shape[0]}return r}execute(e,t){if(Array.isArray(t)&&0===t.length)throw new Od("`outputs` is an empty Array, which is not allowed.");const n=Array.isArray(t),s=n?t:[t],r=this.retrieveSymbolicTensors(s),a=new Og;if(e instanceof vs&&(e=[e]),Array.isArray(e)){if(e.length!==this.inputs.length)throw new Od(`The number of inputs provided (${e.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let t=0;t<this.inputs.length;++t)a.add(this.inputs[t],e[t])}else for(const t of this.inputs){const n=e[t.name];if(null==n)throw new Od(`No value is provided for the model's input ${t.name}`);a.add(t,n)}const i=zg(r,a);return n?i:i[0]}retrieveSymbolicTensors(e){const t=zd(null,e.length);let n=e.length;for(const s of this.layers){const r=Array.isArray(s.output)?s.output:[s.output],a=r.map((e=>e.name));for(let s=0;s<e.length;++s){const i=a.indexOf(e[s]);if(-1!==i&&(t[s]=r[i],n--),0===n)break}if(0===n)break}if(n>0){const n=[];throw t.forEach(((t,s)=>{null==t&&n.push(e[s])})),new Od(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(n)}`)}return t}predictLoop(e,t=32,n=!1){return ri((()=>{const s=this.checkNumSamples(e);if(n)throw new Md("Verbose predictLoop() is not implemented yet.");const r=ey(s,t),a=this.outputs.map((e=>[]));for(let t=0;t<r.length;++t){ri((()=>{const n=r[t][0],s=r[t][1],a=Zg(e,n,s),i=[];if(Array.isArray(a))for(let e=0;e<a.length;++e)i.push({key:this.inputs[e],value:a[e]});else i.push({key:this.inputs[0],value:a});const o=new Og(i);return zg(this.outputs,o)})).forEach(((e,t)=>a[t].push(e)))}return Wd(a.map((e=>Ui(e,0))))}))}predict(e,t={}){const n=ny(e);oy(n,this.inputNames,this.feedInputShapes,!1);try{const s=null==t.batchSize?32:t.batchSize;return Jg(s),this.predictLoop(n,s)}finally{sy(n,e)}}predictOnBatch(e){oy(e,this.inputNames,this.feedInputShapes,!0);const t=(Array.isArray(e)?e[0]:e).shape[0];return this.predictLoop(e,t)}standardizeUserDataXY(e,t,n=!0,s){if(null==this.optimizer_)throw new _d("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const r=[];for(let e=0;e<this.feedOutputShapes.length;++e){const t=this.feedOutputShapes[e];this.feedLossFns[e]===ig?r.push(t.slice(0,t.length-1).concat([1])):r.push(t)}if(function(e,t,n){const s=Yd(e.map((e=>e.shape[0])));s.sort();const r=Yd(t.map((e=>e.shape[0])));if(r.sort(),s.length>1)throw new Od(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(e.map((e=>e.shape)))}`);if(r.length>1)throw new Od(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(t.map((e=>e.shape)))}`);if(s.length>0&&r.length>0&&!d(s,r))throw new Od(`Input Tensors should have the same number of samples as target Tensors. Found ${s[0]} input sample(s) and ${r[0]} target sample(s).`)}(e=iy(e,this.feedInputNames,this.feedInputShapes,!1,"input"),t=iy(t,this.feedOutputNames,r,!1,"target")),function(e,t,n){const s=[tg,og,ag];for(let r=0;r<e.length;++r){const a=e[r],i=t[r],o=n[r];if(null!=i){if(i===ag&&1===a.shape[a.shape.length-1])throw new Od(`You are passing a target array of shape ${a.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==s.indexOf(i)){const e=a.shape.slice(1),t=o.slice(1);for(let n=0;n<e.length;++n){const s=e[n],r=t[n];if(null!=r&&s!==r)throw new Od(`A target Tensor with shape ${a.shape} was passed for an output of shape ${o}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(t,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=s&&s>0&&e[0].shape[0]%s!=0)throw new Od(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${s}. Found: ${e[0].shape[0]} sample(s).`);return[e,t]}async standardizeUserData(e,t,n,s,r=!0,a){const[i,o]=this.standardizeUserDataXY(e,t,r,a);if(null!=n)throw new Error("sample weight is not supported yet.");let l=null;if(null!=s){const e=Gg(s,this.outputNames);l=[];for(let t=0;t<e.length;++t)l.push(await Hg(o[t],null,e[t]))}return[i,o,l]}testLoop(e,t,n,s=0,r){return ri((()=>{const a=this.checkNumSamples(t,n,r,"steps"),i=[];if(s>0)throw new Md("Verbose mode is not implemented yet.");if(null!=r)throw new Md("steps mode in testLoop() is not implemented yet");{const s=ey(a,n),r=Yu(_f(0,a));for(let n=0;n<s.length;++n){const a=s[n][0],o=s[n][1],l=Lf(r,a,o-a),u=Qg(t,l),c=e(u);if(0===n)for(let e=0;e<c.length;++e)i.push($u(0));for(let e=0;e<c.length;++e){const t=c[e];i[e]=ci(i[e],di(o-a,t))}}for(let e=0;e<i.length;++e)i[e]=pi(i[e],a)}return i}))}getDedupedMetricsNames(){const e=this.metricsNames,t=[];for(let n=0;n<e.length;++n){const s=e[n];let r=s;if(Pd(e,s)>1){r+=`_${Pd(e.slice(0,n),s)}`}t.push(r)}return t}makeTrainFunction(){return e=>{const t=[],n=e.slice(0,this.inputs.length),s=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),r=e.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),a=[],i=this.collectedTrainableWeights.map((e=>e.read()));return[this.optimizer_.minimize((()=>{const e=[];for(let t=0;t<this.inputs.length;++t)e.push({key:this.inputs[t],value:n[t]});const i=new Og(e),o=zg(this.outputs,i,{training:!0});let l;for(let e=0;e<this.lossFunctions.length;++e){let n=(0,this.lossFunctions[e])(s[e],o[e]);null!=r[e]&&(n=jg(n,r[e]));const a=Tl(n);t.push(a),l=0===e?n:ci(l,n)}for(let e=0;e<this.metricsTensors.length;++e){let n;if(this.outputs.length>1&&e<this.outputs.length)n=t[e];else{const t=this.metricsTensors[e][0],r=this.metricsTensors[e][1];n=Tl(t(s[r],o[r]))}ii(n),a.push(n)}return l=Tl(l),this.calculateLosses().forEach((e=>{l=ci(l,e)})),l}),!0,i)].concat(a)}}makeTestFunction(){this.testFunction=e=>ri((()=>{const t=[];let n;const s=e.slice(0,this.inputs.length),r=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),a=[];for(let e=0;e<this.inputs.length;++e)a.push({key:this.inputs[e],value:s[e]});const i=new Og(a),o=zg(this.outputs,i);for(let e=0;e<this.lossFunctions.length;++e){const s=this.lossFunctions[e],a=Tl(s(r[e],o[e]));n=0===e?a:ci(n,a),t.push(n)}for(let e=0;e<this.metricsTensors.length;++e){const n=this.metricsTensors[e][0],s=this.metricsTensors[e][1],a=Tl(n(r[s],o[s]));t.push(a)}return t}))}async fit(e,t,n={}){return ty(this,e,t,n)}async fitDataset(e,t){return Xg(this,e,t)}async trainOnBatch(e,t){const n=await this.standardizeUserData(e,t),s=n[0],r=n[1],a=this.makeTrainFunction()(s.concat(r)),i=[];for(const e of a){const t=await e.data();i.push(t[0])}return ai(a),Wd(i)}getNamedWeights(e){const t=[],n=null!=e&&e.trainableOnly,s=n?this.trainableWeights:this.weights,r=this.getWeights(n);for(let e=0;e<s.length;++e)n&&!s[e].trainable||t.push({name:s[e].originalName,tensor:r[e]});return t}set stopTraining(e){this.stopTraining_=e}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(e){this.optimizer_!==e&&(this.optimizer_=e,this.isOptimizerOwned=!1)}dispose(){const e=super.dispose();if(0===e.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const t=si().numTensors;this.optimizer_.dispose(),e.numDisposedVariables+=t-si().numTensors}return e}getLossIdentifiers(){let e;if("string"==typeof this.loss)e=Ud(this.loss);else if(Array.isArray(this.loss)){for(const e of this.loss)if("string"!=typeof e)throw new Error("Serialization of non-string loss is not supported.");e=this.loss.map((e=>Ud(e)))}else{const t=Object.keys(this.loss);e={};const n=this.loss;for(const s of t){if("string"!=typeof n[s])throw new Error("Serialization of non-string loss is not supported.");e[s]=Ud(n[s])}}return e}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[Ud(Ng(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map((e=>Ud(Ng(e))));{const e={};for(const t in this.metrics)e[t]=Ud(Ng(this.metrics[t]));return e}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(e){if(null!=e.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=e.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=e.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");const t=Qm(Fg(e.optimizer_config));let n,s;if("string"==typeof e.loss)n=Gd(e.loss);else if(Array.isArray(e.loss))n=e.loss.map((e=>Gd(e)));else if(null!=e.loss){n={};for(const t in e.loss)n[t]=Gd(e.loss[t])}if(Array.isArray(e.metrics))s=e.metrics.map((e=>Gd(e)));else if(null!=e.metrics){s={};for(const t in e.metrics)s[t]=Gd(e.metrics[t])}this.compile({loss:n,metrics:s,optimizer:t})}async save(e,t){if("string"==typeof e){const t=gr(e);if(0===t.length)throw new Od(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new Od(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new Od("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const n=await ir(this.getNamedWeights(t)),s={modelTopology:this.toJSON(null,!1),format:"layers-model",generatedBy:"TensorFlow.js tfjs-layers v3.4.0",convertedBy:null};if(null!=t&&t.includeOptimizer&&null!=this.optimizer){s.trainingConfig=this.getTrainingConfig();const e="optimizer",{data:t,specs:r}=await ir(await this.optimizer.getWeights(),e);n.specs.push(...r),n.data=hr([n.data,t])}if(null!=this.userDefinedMetadata){const e=!0;Cg(this.userDefinedMetadata,this.name,e),s.userDefinedMetadata=this.userDefinedMetadata}return s.weightData=n.data,s.weightSpecs=n.specs,e.save(s)}setUserDefinedMetadata(e){Cg(e,this.name),this.userDefinedMetadata=e}getUserDefinedMetadata(){return this.userDefinedMetadata}}ly.className="Model",qa(ly);class uy extends ly{}async function cy(e,t){if(null==t&&(t={}),"string"==typeof e){const n=yr(e,t);if(0===n.length)n.push(oa(e,t));else if(n.length>1)throw new Od(`Found more than one (${n.length}) load handlers for URL '${e}'`);e=n[0]}return async function(e,t,n){null==n&&(n={});if(null==e.load)throw new Od("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const s=await e.load();let r=s.modelTopology;null!=r.model_config&&(r=r.model_config);const a=null==n.strict||n.strict,i=null!=s.weightData&&null!=s.weightSpecs&&a,o=Qm(Fg(r),t,i),l=s.trainingConfig;null!=l&&o.loadTrainingConfig(l);null!=s.userDefinedMetadata&&o.setUserDefinedMetadata(s.userDefinedMetadata);if(null!=s.weightData){if(null==s.weightSpecs)throw new Od("LayersModel artifacts contains weight data, but not weight specs. Therefore loading of weights cannot proceed.");const{modelWeights:e,optimizerWeights:t}=function(e,t){const n=or(e,t),s={},r=[];return t.forEach((e=>{"optimizer"===e.group?r.push({name:e.name,tensor:n[e.name]}):s[e.name]=n[e.name]})),{modelWeights:s,optimizerWeights:r}}(s.weightData,s.weightSpecs);o.loadWeights(e,a),null!=o.optimizer&&t.length>0&&await o.optimizer.setWeights(t),ai(e),ai(t.map((e=>e.tensor)))}return o}(e,void 0,t)}uy.className="Functional",qa(uy);class hy extends ly{constructor(e){if(super({inputs:[],outputs:[]}),e=e||{},this.trainable=!0,this.built=!1,this.name=null!=e.name?e.name:Nm("sequential_"),null!=e.layers)for(const t of e.layers)this.add(t)}checkShape(e){if(e.inboundNodes[0].outputTensors[0].shape.some((e=>e<0)))throw new Od(`Negative dimension size caused by adding layer ${e.name} with input shape [${e.inboundNodes[0].inputTensors[0].shape}]`)}add(e){const t=e instanceof hy||e instanceof ly;let n;if(t){if(n=e,1!==n.outputs.length)throw new Od("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==n.inputs.length)throw new Od("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===e.inboundNodes.length){if(null==e.batchInputShape)throw new Od("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const t=Wm({batchShape:e.batchInputShape,dtype:e.dtype,name:e.name+"_input"});e.apply(t)}if(t)this.outputs=n.outputs,this.inputs=n.inputs;else{if(1!==e.inboundNodes.length)throw new Od(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${e.name} which has ${e.inboundNodes.length} pre-existing inbound connections.`);if(1!==e.inboundNodes[0].outputTensors.length)throw new Od("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[e.inboundNodes[0].outputTensors[0]],this.inputs=Bm(this.outputs[0])}this.inboundNodes=[],new Mm({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:zd(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map((e=>e.shape)),outputShapes:this.outputs[0].shape})}else{const t=e.apply(this.outputs[0]);if(Array.isArray(t))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[t],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(e),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const e=this.layers.length-1;this.layers[e].outboundNodes=[],this.outputs=[this.layers[e].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(e,t){return null==this.model&&this.build(),this.model.call(e,t)}build(e){if(Sm(e),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new ly({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(e,t,n=console.log){this.built||this.build(),super.summary(e,t,n)}setWeights(e){null==this.model&&this.build(),this.model.setWeights(e)}evaluate(e,t,n={}){if(!this.built)throw new _d("The model needs to be compiled before being used.");return this.model.evaluate(e,t,n)}async evaluateDataset(e,t){if(!this.built)throw new _d("The model needs to be compiled before being used.");return this.model.evaluateDataset(e,t)}predict(e,t={}){return null==this.model&&this.build(),this.model.predict(e,t)}predictOnBatch(e){return null==this.model&&this.build(),this.model.predictOnBatch(e)}compile(e){this.build(),this.model.compile(e),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(e){this.model.optimizer=e}async fit(e,t,n={}){if(!this.built)throw new _d("The model needs to be compiled before being used.");return this.model.fit(e,t,n)}async fitDataset(e,t){if(!this.built)throw new _d("The model needs to be compiled before being used.");return this.model.fitDataset(e,t)}async trainOnBatch(e,t){return this.model.trainOnBatch(e,t)}static fromConfig(e,t,n={},s=!1){let r,a={};if(t instanceof Array){if(null==t[0].className||"Merge"===t[0].className)throw new Od("Legacy serialization format not supported yet.");r=t}else l(null!=t.layers,(()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field.")),r=t.layers,delete t.layers,a=t;const i=new e(a);if(!(i instanceof hy))throw new Md(`Sequential.fromConfig called on non-Sequential input: ${i}`);for(const e of r){const t=Qm(e,void 0,s);s&&t.setFastWeightInitDuringBuild(!0),i.add(t)}return i}set stopTraining(e){if(null==this.model)throw new Od("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=e}get stopTraining(){if(null==this.model)throw new Od("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const e=[];for(const t of this.layers){const n={};n.className=t.getClassName(),n.config=t.getConfig(),e.push(n)}return{name:this.name,layers:e}}}function py(e){return Wm(e)}hy.className="Sequential",qa(hy);class dy extends Ha{getConfig(){return{}}}class fy extends dy{apply(e,t=1){return function(e,t=1){if(1!==t)throw new Md(`Support for alpha values other than 1 (${t}) is not implemented yet.`);return Fo(e)}(e,t)}}fy.className="elu",qa(fy);class my extends dy{apply(e){return Su(e)}}my.className="selu",qa(my);class gy extends dy{apply(e){return yu(e)}}gy.className="relu",qa(gy);class yy extends dy{apply(e){return ri((()=>Fl(6,yu(e))))}}yy.className="relu6",qa(yy);class by extends dy{apply(e){return e}}by.className="linear",qa(by);class xy extends dy{apply(e){return Gi(e)}}xy.className="sigmoid",qa(xy);class wy extends dy{apply(e){return function(e){return ri((()=>{const t=ci(.5,di(.2,e));return no(t,0,1)}))}(e)}}wy.className="hardSigmoid",qa(wy);class ky extends dy{apply(e){return al(e)}}ky.className="softplus",qa(ky);class vy extends dy{apply(e){return function(e){return ri((()=>pi(e,fi(e).add(1))))}(e)}}vy.className="softsign",qa(vy);class Ny extends dy{apply(e){return ji(e)}}Ny.className="tanh",qa(Ny);class Iy extends dy{apply(e,t=-1){return Lu(e,t)}}Iy.className="softmax",qa(Iy);class Cy extends dy{apply(e,t=-1){return cl(e,t)}}Cy.className="logSoftmax",qa(Cy);class $y extends dy{apply(e,t=1){return ri((()=>Gi(e.mul(t)).mul(e)))}}function Sy(e){return e.getClassName()}function Ty(e,t={}){return Kd(e,ja.getMap().classNameMap,t,"activation")}function Ey(e){if(null==e){const e={className:"linear",config:{}};return Ty(e)}if("string"==typeof e){const t={};return t.className=e,t.config={},Ty(t)}return e instanceof dy?e:Ty(e)}function Ay(e){if(null!=e&&"object"!=typeof e)throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${e}`)}$y.className="swish",qa($y);class Ry extends Ha{}class Fy extends Ry{constructor(e){super(),Ay(e),this.l1=null==e||null==e.l1?.01:e.l1,this.l2=null==e||null==e.l2?.01:e.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(e){return ri((()=>{let t=El([1]);return this.hasL1&&(t=ci(t,ul(di(this.l1,fi(e))))),this.hasL2&&(t=ci(t,ul(di(this.l2,jf(e))))),t.asScalar()}))}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(e,t){return new e({l1:t.l1,l2:t.l2})}}Fy.className="L1L2",qa(Fy);const Dy={l1l2:"L1L2"};function _y(e){return jd(e)}function Oy(e,t={}){return Kd(e,ja.getMap().classNameMap,t,"regularizer")}function My(e){if(null==e)return null;if("string"==typeof e){return Oy({className:e in Dy?Dy[e]:e,config:{}})}return e instanceof Ry?e:Oy(e)}class Ly extends zm{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,null!=e&&(this.maxValue=e.maxValue)}call(e,t){e=$m(e);let n=yu(e);return null!=this.maxValue&&(n=no(n,0,this.maxValue)),n}computeOutputShape(e){return e}getConfig(){const e={maxValue:this.maxValue},t=super.getConfig();return Object.assign(e,t),e}}Ly.className="ReLU",qa(Ly);class zy extends zm{constructor(e){super(null==e?{}:e),this.DEFAULT_ALPHA=.3,null==e&&(e={}),this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=$m(e);return Ko(n,this.alpha)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}zy.className="LeakyReLU",qa(zy);class By extends zm{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==e&&(e={}),this.supportsMasking=!0,this.alphaInitializer=bm(e.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=My(e.alphaRegularizer),this.alphaConstraint=df(e.alphaConstraint),null==e.sharedAxes)this.sharedAxes=null;else if(Array.isArray(e.sharedAxes))this.sharedAxes=e.sharedAxes;else{if("number"!=typeof e.sharedAxes)throw new Od(`Expected sharedAxes to be a number or an array of numbers, but got ${e.sharedAxes}`);this.sharedAxes=[e.sharedAxes]}}build(e){const t=(e=Sm(e)).slice(1);if(null!=this.sharedAxes)for(const e of this.sharedAxes)t[e-1]=1;this.alpha=this.addWeight("alpha",t,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const n={};if(null!=this.sharedAxes)for(let t=1;t<e.length;++t)n[t]=e[t];this.inputSpec=[new Dm({ndim:e.length,axes:n})],this.built=!0}call(e,t){return e=$m(e),Yl(e,this.alpha.read())}getConfig(){const e={alphaInitializer:ym(this.alphaInitializer),alphaRegularizer:_y(this.alphaRegularizer),alphaConstraint:hf(this.alphaConstraint),sharedAxes:this.sharedAxes},t=super.getConfig();return Object.assign(e,t),e}}By.className="PReLU",qa(By);class Py extends zm{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA=1,null==e&&(e={}),null!=e.alpha&&e.alpha!==this.DEFAULT_ALPHA)throw new Md(`Non-default alpha value (${e.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=$m(e);return Fo(n)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}Py.className="ELU",qa(Py);class Wy extends zm{constructor(e){super(null==e?{}:e),this.DEFAULT_THETA=1,null==e&&(e={}),this.theta=null==e.theta?this.DEFAULT_THETA:e.theta}call(e,t){const n=$m(e);return n.mul(Of(n.greater(this.theta),"float32"))}computeOutputShape(e){return e}getConfig(){const e={theta:this.theta},t=super.getConfig();return Object.assign(e,t),e}}Wy.className="ThresholdedReLU",qa(Wy);class Vy extends zm{constructor(e){super(null==e?{}:e),this.DEFAULT_AXIS=1,null==e&&(e={}),this.softmax=(new Iy).apply,this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis}call(e,t){const n=$m(e);return this.softmax(n,this.axis)}computeOutputShape(e){return e}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function Uy(e,t,n){if("number"==typeof e)return zd(e,t);if(e.length!==t)throw new Od(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${e.length} elements.`);for(let r=0;r<t;++r){const a=e[r];if((s=a)!==parseInt(s.toString(),10))throw new Od(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(e)} including a non-integer number ${a}`)}return e;var s}function Gy(e,t,n,s,r=1){if(null==e)return e;let a;return a="same"===n?e:e-(t+(t-1)*(r-1))+1,Math.floor((a+s-1)/s)}function Hy(e,t,n,s){if(null==e)return null;if("valid"===s)e=e*t+Df([n-t,0]);else{if("same"!==s)throw new Od(`Unsupport padding mode: ${s}.`);e*=t}return e}function jy(e,t){return ri((()=>(kf(t),"channelsFirst"===t?da(e,[0,2,3,1]):e)))}function qy(e,t){return ri((()=>(kf(t),"channelsFirst"===t?da(e,[0,2,3,4,1]):e)))}function Ky(e,t,n,s=1,r="valid",a,i=1){return ri((()=>{if(null==a&&(a="channelsLast"),kf(a),3!==e.shape.length)throw new Od(`The input of a conv1dWithBias operation should be 3, but is ${e.shape.length} instead.`);if(3!==t.shape.length)throw new Od(`The kernel for a conv1dWithBias operation should be 3, but is ${t.shape.length} instead`);if(null!=n&&1!==n.shape.length)throw new Od(`The bias for a conv1dWithBias operation should be 1, but is ${t.shape.length} instead`);if("channelsFirst"===a&&(e=da(e,[0,2,1])),"causal"===r)throw new Md("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let o=lo(e,t,s,"same"===r?"same":"valid","NWC",i);return null!=n&&(o=Kf(o,n)),o}))}function Xy(e,t,n,s=[1,1],r="valid",a,i,o=null){return ri((()=>{if(null==a&&(a="channelsLast"),kf(a),3!==e.rank&&4!==e.rank)throw new Od(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${e.rank}.`);if(3!==t.rank&&4!==t.rank)throw new Od(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${e.rank}.`);let l=jy(e,a);if("causal"===r)throw new Md("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return l=vc({x:l,filter:t,strides:s,pad:"same"===r?"same":"valid",dilations:i,dataFormat:"NHWC",bias:n,activation:o}),"channelsFirst"===a&&(l=da(l,[0,3,1,2])),l}))}function Yy(e,t,n,s=[1,1,1],r="valid",a,i){return ri((()=>{if(null==a&&(a="channelsLast"),kf(a),4!==e.rank&&5!==e.rank)throw new Od(`conv3dWithBias expects input to be of rank 4 or 5, but received ${e.rank}.`);if(4!==t.rank&&5!==t.rank)throw new Od(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${e.rank}.`);let o=qy(e,a);if("causal"===r)throw new Md("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return o=ho(o,t,s,"same"===r?"same":"valid","NDHWC",i),null!=n&&(o=Kf(o,n)),"channelsFirst"===a&&(o=da(o,[0,4,1,2,3])),o}))}Vy.className="Softmax",qa(Vy);class Jy extends zm{constructor(e,t){if(super(t),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",Jy.verifyArgs(t),this.rank=e,ef(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new Md(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=Uy(t.kernelSize,e,"kernelSize"),this.strides=Uy(null==t.strides?1:t.strides,e,"strides"),this.padding=null==t.padding?"valid":t.padding,vf(this.padding),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,kf(this.dataFormat),this.activation=Ey(t.activation),this.useBias=null==t.useBias||t.useBias,this.biasInitializer=bm(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=df(t.biasConstraint),this.biasRegularizer=My(t.biasRegularizer),this.activityRegularizer=My(t.activityRegularizer),this.dilationRate=Uy(null==t.dilationRate?1:t.dilationRate,e,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new Od(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new Od(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`)}else if(3===this.rank)if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new Od(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`)}static verifyArgs(e){if(Bd("kernelSize"in e,"required key 'kernelSize' not in config"),"number"!=typeof e.kernelSize&&!Qd(e.kernelSize,"number",1,3))throw new Od(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(e.kernelSize)}.`)}getConfig(){const e={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:Sy(this.activation),useBias:this.useBias,biasInitializer:ym(this.biasInitializer),biasRegularizer:_y(this.biasRegularizer),activityRegularizer:_y(this.activityRegularizer),biasConstraint:hf(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}class Zy extends Jy{constructor(e,t){super(e,t),this.kernel=null,Zy.verifyArgs(t),this.filters=t.filters,ef(this.filters,"filters"),this.kernelInitializer=bm(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=df(t.kernelConstraint),this.kernelRegularizer=My(t.kernelRegularizer)}build(e){e=Sm(e);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new Od(`The channel dimension of the input should be defined. Found ${e[t]}`);const n=e[t],s=this.kernelSize.concat([n,this.filters]);this.kernel=this.addWeight("kernel",s,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[t]:n}}],this.built=!0}call(e,t){return ri((()=>{let t;e=$m(e);const n=null==this.bias?null:this.bias.read(),s=nf(this.activation.getClassName());if(null!=s&&2===this.rank)t=Xy(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate,s);else{if(1===this.rank)t=Ky(e,this.kernel.read(),n,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)t=Xy(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new Md("convolutions greater than 3D are not implemented yet.");t=Yy(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(t=this.activation.apply(t))}return t}))}computeOutputShape(e){e=Sm(e);const t=[],n="channelsLast"===this.dataFormat?e.slice(1,e.length-1):e.slice(2);for(let e=0;e<n.length;++e){const s=Gy(n[e],this.kernelSize[e],this.padding,this.strides[e],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[e]);t.push(s)}let s=[e[0]];return"channelsLast"===this.dataFormat?(s=s.concat(t),s.push(this.filters)):(s.push(this.filters),s=s.concat(t)),s}getConfig(){const e={filters:this.filters,kernelInitializer:ym(this.kernelInitializer),kernelRegularizer:_y(this.kernelRegularizer),kernelConstraint:hf(this.kernelConstraint)},t=super.getConfig();return Object.assign(e,t),e}static verifyArgs(e){if(!("filters"in e)||"number"!=typeof e.filters||e.filters<1)throw new Od(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(e.filters)}`)}}class Qy extends Zy{constructor(e){super(2,e),Qy.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!Qd(e.kernelSize,"number",1,2))throw new Od(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(e.kernelSize)}.`)}}Qy.className="Conv2D",qa(Qy);class eb extends Zy{constructor(e){super(3,e),eb.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&(!Array.isArray(e.kernelSize)||1!==e.kernelSize.length&&3!==e.kernelSize.length))throw new Od(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(e.kernelSize)}.`)}}eb.className="Conv3D",qa(eb);class tb extends Qy{constructor(e){if(super(e),this.inputSpec=[new Dm({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new Od(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(4!==(e=Sm(e)).length)throw new Od("Input should have rank 4; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new Od("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],s=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",s,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new Dm({ndim:4,axes:{[t]:n}})],this.built=!0}call(e,t){return ri((()=>{let t=$m(e);if(4!==t.shape.length)throw new Od(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${t.shape.length}`);const n=t.shape,s=n[0];let r,a;"channelsFirst"===this.dataFormat?(r=2,a=3):(r=1,a=2);const i=n[r],o=n[a],l=this.kernelSize[0],u=this.kernelSize[1],c=this.strides[0],h=this.strides[1],p=[s,Hy(i,c,l,this.padding),Hy(o,h,u,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(t=da(t,[0,2,3,1]));let d=co(t,this.kernel.read(),p,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(d=da(d,[0,3,1,2])),null!=this.bias&&(d=Kf(d,this.bias.read(),this.dataFormat)),null!=this.activation&&(d=this.activation.apply(d)),d}))}computeOutputShape(e){const t=(e=Sm(e)).slice();let n,s,r;"channelsFirst"===this.dataFormat?(n=1,s=2,r=3):(n=3,s=1,r=2);const a=this.kernelSize[0],i=this.kernelSize[1],o=this.strides[0],l=this.strides[1];return t[n]=this.filters,t[s]=Hy(t[s],o,a,this.padding),t[r]=Hy(t[r],l,i,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}tb.className="Conv2DTranspose",qa(tb);class nb extends eb{constructor(e){if(super(e),this.inputSpec=[new Dm({ndim:5})],"same"!==this.padding&&"valid"!==this.padding)throw new Od(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(5!==(e=Sm(e)).length)throw new Od("Input should have rank 5; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new Od("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],s=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",s,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new Dm({ndim:5,axes:{[t]:n}})],this.built=!0}call(e,t){return ri((()=>{let t=$m(e);if(5!==t.shape.length)throw new Od(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${t.shape.length}`);const n=t.shape,s=n[0];let r,a,i;"channelsFirst"===this.dataFormat?(i=2,r=3,a=4):(i=1,r=2,a=3);const o=n[i],l=n[r],u=n[a],c=this.kernelSize[0],h=this.kernelSize[1],p=this.kernelSize[2],d=this.strides[0],f=this.strides[1],m=this.strides[2],g=[s,Hy(o,d,c,this.padding),Hy(l,f,h,this.padding),Hy(u,m,p,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(t=da(t,[0,2,3,4,1]));let y=fo(t,this.kernel.read(),g,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(y=da(y,[0,4,1,2,3])),null!==this.bias&&(y=Kf(y,this.bias.read(),this.dataFormat)),null!==this.activation&&(y=this.activation.apply(y)),y}))}computeOutputShape(e){const t=(e=Sm(e)).slice();let n,s,r,a;"channelsFirst"===this.dataFormat?(n=1,s=2,r=3,a=4):(n=4,s=1,r=2,a=3);const i=this.kernelSize[0],o=this.kernelSize[1],l=this.kernelSize[2],u=this.strides[0],c=this.strides[1],h=this.strides[2];return t[n]=this.filters,t[s]=Hy(t[s],u,i,this.padding),t[r]=Hy(t[r],c,o,this.padding),t[a]=Hy(t[a],h,l,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}nb.className="Conv3DTranspose",qa(nb);class sb extends Zy{constructor(e,t){if(super(e,t),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==t.filters)throw new Od("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=t.kernelInitializer||null!=t.kernelRegularizer||null!=t.kernelConstraint)throw new Od("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=t.padding&&"same"!==t.padding&&"valid"!==t.padding)throw new Od(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(t.padding)}`);this.depthMultiplier=null==t.depthMultiplier?1:t.depthMultiplier,this.depthwiseInitializer=bm(t.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=My(t.depthwiseRegularizer),this.depthwiseConstraint=df(t.depthwiseConstraint),this.pointwiseInitializer=bm(t.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=My(t.pointwiseRegularizer),this.pointwiseConstraint=df(t.pointwiseConstraint)}build(e){if((e=Sm(e)).length<this.rank+2)throw new Od(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank+2}, but received input shape: ${JSON.stringify(e)}`);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t]||e[t]<0)throw new Od(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(e[t])}`);const n=e[t],s=this.kernelSize.concat([n,this.depthMultiplier]),r=[];for(let e=0;e<this.rank;++e)r.push(1);r.push(n*this.depthMultiplier,this.filters);const a=!0;this.depthwiseKernel=this.addWeight("depthwise_kernel",s,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,a,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",r,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,a,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,a,this.biasConstraint):this.bias=null,this.inputSpec=[new Dm({ndim:this.rank+2,axes:{[t]:n}})],this.built=!0}call(e,t){return ri((()=>{let t;if(e=$m(e),1===this.rank)throw new Md("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(e=da(e,[0,2,3,1])),t=Tu(e,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(t=Kf(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),"channelsFirst"===this.dataFormat&&(t=da(t,[0,3,1,2])),t}))}getConfig(){const e=super.getConfig();return delete e.rank,delete e.kernelInitializer,delete e.kernelRegularizer,delete e.kernelConstraint,e.depthwiseInitializer=ym(this.depthwiseInitializer),e.pointwiseInitializer=ym(this.pointwiseInitializer),e.depthwiseRegularizer=_y(this.depthwiseRegularizer),e.pointwiseRegularizer=_y(this.pointwiseRegularizer),e.depthwiseConstraint=hf(this.depthwiseConstraint),e.pointwiseConstraint=hf(this.pointwiseConstraint),e}}sb.className="SeparableConv";class rb extends sb{constructor(e){super(2,e)}}rb.className="SeparableConv2D",qa(rb);class ab extends Zy{constructor(e){super(1,e),ab.verifyArgs(e),this.inputSpec=[{ndim:3}]}getConfig(){const e=super.getConfig();return delete e.rank,delete e.dataFormat,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!Qd(e.kernelSize,"number",1,1))throw new Od(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(e.kernelSize)}.`)}}ab.className="Conv1D",qa(ab);class ib extends zm{constructor(e){super(e),"number"==typeof e.cropping?this.cropping=[[e.cropping,e.cropping],[e.cropping,e.cropping]]:"number"==typeof e.cropping[0]?this.cropping=[[e.cropping[0],e.cropping[0]],[e.cropping[1],e.cropping[1]]]:this.cropping=e.cropping,this.dataFormat=void 0===e.dataFormat?"channelsLast":e.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],e[2]-this.cropping[0][0]-this.cropping[0][1],e[3]-this.cropping[1][0]-this.cropping[1][1]]:[e[0],e[1]-this.cropping[0][0]-this.cropping[0][1],e[2]-this.cropping[1][0]-this.cropping[1][1],e[3]]}call(e,t){return ri((()=>{if(e=$m(e),"channelsLast"===this.dataFormat){const t=Bf(e,this.cropping[0][0],e.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return Bf(t,this.cropping[1][0],e.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const t=Bf(e,this.cropping[0][0],e.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return Bf(t,this.cropping[1][0],e.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}}))}getConfig(){const e={cropping:this.cropping,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}ib.className="Cropping2D",qa(ib);class ob extends zm{constructor(e){var t;super(e),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==e.size?this.DEFAULT_SIZE:e.size,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,kf(this.dataFormat),this.interpolation=null==e.interpolation?"nearest":e.interpolation,t=this.interpolation,Zd(gf,"InterpolationFormat",t)}computeOutputShape(e){if("channelsFirst"===this.dataFormat){const t=null==e[2]?null:this.size[0]*e[2],n=null==e[3]?null:this.size[1]*e[3];return[e[0],e[1],t,n]}{const t=null==e[1]?null:this.size[0]*e[1],n=null==e[2]?null:this.size[1]*e[2];return[e[0],t,n,e[3]]}}call(e,t){return ri((()=>{let t=$m(e);const n=t.shape;if("channelsFirst"===this.dataFormat){t=da(t,[0,2,3,1]);const e=this.size[0]*n[2],s=this.size[1]*n[3],r="nearest"===this.interpolation?t.resizeNearestNeighbor([e,s]):t.resizeBilinear([e,s]);return da(r,[0,3,1,2])}{const e=this.size[0]*n[1],s=this.size[1]*n[2];return"nearest"===this.interpolation?t.resizeNearestNeighbor([e,s]):t.resizeBilinear([e,s])}}))}getConfig(){const e={size:this.size,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}ob.className="UpSampling2D",qa(ob);class lb extends Jy{constructor(e){super(2,e),this.depthwiseKernel=null,this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=bm(e.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=df(e.depthwiseConstraint),this.depthwiseRegularizer=My(e.depthwiseRegularizer)}build(e){if((e=Sm(e)).length<4)throw new Od(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e)}.`);const t="channelsFirst"===this.dataFormat?1:3;if(null==e[t]||e[t]<0)throw new Od(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e[t]}).`);const n=e[t],s=[this.kernelSize[0],this.kernelSize[1],n,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",s,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[n*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return ri((()=>{let t=function(e,t,n=[1,1],s="valid",r,a){return ri((()=>{null==r&&(r="channelsLast"),kf(r);let i=jy(e,r);if(4!==e.rank)throw new Od(`Input for depthwiseConv2d is required to be 4-D, but is instead ${e.rank}-D`);if(4!==t.rank)throw new Od(`depthwiseKernel is required to be 4-D, but is instead ${t.rank}-D`);return i=wo(i,t,n,"same"===s?"same":"valid","NHWC",a),"channelsFirst"===r&&(i=da(i,[0,3,1,2])),i}))}(e=$m(e),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(t=Kf(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),t}))}computeOutputShape(e){e=Sm(e);const t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],s="channelsFirst"===this.dataFormat?e[1]*this.depthMultiplier:e[3]*this.depthMultiplier,r=Gy(t,this.kernelSize[0],this.padding,this.strides[0]),a=Gy(n,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[e[0],s,r,a]:[e[0],r,a,s]}getConfig(){const e=super.getConfig();return e.depthMultiplier=this.depthMultiplier,e.depthwiseInitializer=ym(this.depthwiseInitializer),e.depthwiseRegularizer=_y(this.depthwiseRegularizer),e.depthwiseConstraint=hf(this.depthwiseRegularizer),e}}function ub(e,t,n,s){if(Array.isArray(e)){if(null!=t||null!=n)throw new Od("When inputs is an array, neither initialState or constants should be provided");null!=s&&(n=e.slice(e.length-s,e.length),e=e.slice(0,e.length-s)),e.length>1&&(t=e.slice(1,e.length)),e=e[0]}function r(e){return null==e||Array.isArray(e)?e:[e]}return{inputs:e,initialState:t=r(t),constants:n=r(n)}}function cb(e,t,n,s=!1,r,a,i=!1,o=!1){return ri((()=>{const l=t.shape.length;if(l<3)throw new Od(`Input should be at least 3D, but is ${l}D.`);const u=[1,0].concat(_f(2,l));if(t=da(t,u),null!=a)throw new Md("The rnn() functoin of the deeplearn.js backend does not support constants yet.");i&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=r&&((r=r.asType("bool").asType("float32")).rank===l-1&&(r=Oo(r,-1)),r=da(r,u)),s&&(t=xu(t,0),null!=r&&(r=xu(r,0)));const c=[];let h,p=n;const d=t.shape[0],f=nc(t);let m,g;null!=r&&(m=nc(r));for(let t=0;t<d;++t){const n=f[t],s=ri((()=>e(n,p)));if(null==r)h=s[0],p=s[1];else{const e=ri((()=>{const e=m[t],n=Pl(e).sub(e);return{output:s[0].mul(e).add(p[0].mul(n)),newStates:p.map(((t,r)=>s[1][r].mul(e).add(t.mul(n))))}}));h=e.output,p=e.newStates}o&&c.push(h)}if(o){g=ju(c,1)}return[h,g,p]}))}lb.className="DepthwiseConv2D",qa(lb);class hb extends zm{constructor(e){let t;if(super(e),null==e.cell)throw new Od("cell property is missing for the constructor of RNN.");if(t=Array.isArray(e.cell)?new xb({cells:e.cell}):e.cell,null==t.stateSize)throw new Od("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=t,this.returnSequences=null!=e.returnSequences&&e.returnSequences,this.returnState=null!=e.returnState&&e.returnState,this.goBackwards=null!=e.goBackwards&&e.goBackwards,this._stateful=null!=e.stateful&&e.stateful,this.unroll=null!=e.unroll&&e.unroll,this.supportsMasking=!0,this.inputSpec=[new Dm({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){if(null==this.states_){return _f(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map((e=>null))}return this.states_}setStates(e){this.states_=e}computeOutputShape(e){Im(e)&&(e=e[0]),e=e;let t=this.cell.stateSize;Array.isArray(t)||(t=[t]);const n=t[0];let s;if(s=this.returnSequences?[e[0],e[1],n]:[e[0],n],this.returnState){const n=[];for(const s of t)n.push([e[0],s]);return[s].concat(n)}return s}computeMask(e,t){return ri((()=>{Array.isArray(t)&&(t=t[0]);const e=this.returnSequences?t:null;if(this.returnState){const t=this.states.map((e=>null));return[e].concat(t)}return e}))}get states(){if(null==this.states_){const e=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,t=[];for(let n=0;n<e;++n)t.push(null);return t}return this.states_}set states(e){this.states_=e}build(e){if(null!=this.numConstants)throw new Md("Constants support is not implemented in RNN yet.");Im(e)&&(e=e[0]),e=e;const t=this.stateful?e[0]:null,n=e.slice(2);this.inputSpec[0]=new Dm({shape:[t,null,...n]});const s=[e[0]].concat(e.slice(2));let r;if(this.cell.build(s),r=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!d(this.stateSpec.map((e=>e.shape[e.shape.length-1])),r))throw new Od(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`)}else this.stateSpec=r.map((e=>new Dm({shape:[null,e]})));this.stateful&&this.resetStates()}resetStates(e,t=!1){ri((()=>{if(!this.stateful)throw new Dd("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape[0];if(null==n)throw new Od("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((e=>El([n,e]))):this.states_=[El([n,this.cell.stateSize])];else if(null==e)ai(this.states_),null!=this.keptStates&&(ai(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((e=>El([n,e]))):this.states_[0]=El([n,this.cell.stateSize]);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new Od(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);!0===t?this.keptStates.push(this.states_.slice()):ai(this.states_);for(let t=0;t<this.states_.length;++t){const s=e[t],r=Array.isArray(this.cell.stateSize)?this.cell.stateSize[t]:this.cell.stateSize,a=[n,r];if(!d(s.shape,a))throw new Od(`State ${t} is incompatible with layer ${this.name}: expected shape=${a}, received shape=${s.shape}`);this.states_[t]=s}}this.states_=this.states_.map((e=>ii(e.clone())))}))}apply(e,t){let n=null==t?null:t.initialState,s=null==t?null:t.constants;null==t&&(t={});const r=ub(e,n,s,this.numConstants);e=r.inputs,n=r.initialState,s=r.constants;let a=[],i=[];if(null!=n){t.initialState=n,a=a.concat(n),this.stateSpec=[];for(const e of n)this.stateSpec.push(new Dm({shape:e.shape}));i=i.concat(this.stateSpec)}null!=s&&(t.constants=s,a=a.concat(s),this.numConstants=s.length);if(a[0]instanceof _m){const n=[e].concat(a),s=this.inputSpec.concat(i),r=this.inputSpec;this.inputSpec=s;const o=super.apply(n,t);return this.inputSpec=r,o}return super.apply(e,t)}call(e,t){return ri((()=>{const n=null==t?null:t.mask,s=null==t?null:t.training;let r=null==t?null:t.initialState;e=$m(e),null==r&&(r=this.stateful?this.states_:this.getInitialState(e));const a=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(r.length!==a)throw new Od(`RNN Layer has ${a} state(s) but was passed ${r.length} initial state(s).`);this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const i={training:s},o=cb(((e,t)=>{const n=this.cell.call([e].concat(t),i);return[n[0],n.slice(1)]}),e,r,this.goBackwards,n,null,this.unroll,this.returnSequences),l=o[0],u=o[1],c=o[2];this.stateful&&this.resetStates(c,s);const h=this.returnSequences?u:l;return this.returnState?[h].concat(c):h}))}getInitialState(e){return ri((()=>{let t=El(e.shape);return t=ul(t,[1,2]),t=Mf(t),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map((e=>e>1?Vf(t,[1,e]):t)):this.cell.stateSize>1?[Vf(t,[1,this.cell.stateSize])]:[t]}))}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(e)}getConfig(){const e=super.getConfig(),t={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(t.numConstants=this.numConstants);const n=this.cell.getConfig();return this.getClassName()===hb.className&&(t.cell={className:this.cell.getClassName(),config:n}),Object.assign({},n,e,t)}static fromConfig(e,t,n={}){const s=Qm(t.cell,n);return new e(Object.assign(t,{cell:s}))}}hb.className="RNN",qa(hb);class pb extends zm{}class db extends pb{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,ef(this.units,"units"),this.activation=Ey(null==e.activation?this.DEFAULT_ACTIVATION:e.activation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=bm(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=bm(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=bm(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=My(e.kernelRegularizer),this.recurrentRegularizer=My(e.recurrentRegularizer),this.biasRegularizer=My(e.biasRegularizer),this.kernelConstraint=df(e.kernelConstraint),this.recurrentConstraint=df(e.recurrentConstraint),this.biasConstraint=df(e.biasConstraint),this.dropout=Ff([1,Df([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=Ff([1,Df([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=Sm(e),this.kernel=this.addWeight("kernel",[e[e.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return ri((()=>{if(2!==(e=e).length)throw new Od(`SimpleRNNCell expects 2 input Tensors, got ${e.length}.`);let n=e[1];e=e[0];const s=null!=t.training&&t.training;let r;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=wb({ones:()=>Pl(e),rate:this.dropout,training:s})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=wb({ones:()=>Pl(n),rate:this.recurrentDropout,training:s}));const a=this.dropoutMask,i=this.recurrentDropoutMask;r=Gf(null!=a?di(e,a):e,this.kernel.read()),null!=this.bias&&(r=Kf(r,this.bias.read())),null!=i&&(n=di(n,i));let o=ci(r,Gf(n,this.recurrentKernel.read()));return null!=this.activation&&(o=this.activation.apply(o)),[o,o]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:Sy(this.activation),useBias:this.useBias,kernelInitializer:ym(this.kernelInitializer),recurrentInitializer:ym(this.recurrentInitializer),biasInitializer:ym(this.biasInitializer),kernelRegularizer:_y(this.kernelRegularizer),recurrentRegularizer:_y(this.recurrentRegularizer),biasRegularizer:_y(this.biasRegularizer),activityRegularizer:_y(this.activityRegularizer),kernelConstraint:hf(this.kernelConstraint),recurrentConstraint:hf(this.recurrentConstraint),biasConstraint:hf(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign({},e,t)}}db.className="SimpleRNNCell",qa(db);class fb extends hb{constructor(e){e.cell=new db(e),super(e)}call(e,t){return ri((()=>{null!=this.cell.dropoutMask&&(ai(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(ai(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,s=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:r})}))}static fromConfig(e,t){return new e(t)}}fb.className="SimpleRNN",qa(fb);class mb extends pb{constructor(e){if(super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",e.resetAfter)throw new Od("GRUCell does not support reset_after parameter set to true.");this.units=e.units,ef(this.units,"units"),this.activation=Ey(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=Ey(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=bm(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=bm(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=bm(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=My(e.kernelRegularizer),this.recurrentRegularizer=My(e.recurrentRegularizer),this.biasRegularizer=My(e.biasRegularizer),this.kernelConstraint=df(e.kernelConstraint),this.recurrentConstraint=df(e.recurrentConstraint),this.biasConstraint=df(e.biasConstraint),this.dropout=Ff([1,Df([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=Ff([1,Df([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.implementation=e.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){const t=(e=Sm(e))[e.length-1];this.kernel=this.addWeight("kernel",[t,3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return ri((()=>{if(2!==(e=e).length)throw new Od(`GRUCell expects 2 input Tensors (inputs, h, c), got ${e.length}.`);const n=null!=t.training&&t.training;let s=e[1];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=wb({ones:()=>Pl(e),rate:this.dropout,training:n,count:3})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=wb({ones:()=>Pl(s),rate:this.recurrentDropout,training:n,count:3}));const r=this.dropoutMask,a=this.recurrentDropoutMask;let i,o,l;0<this.dropout&&this.dropout<1&&(e=di(e,r[0]));let u=Gf(e,this.kernel.read());this.useBias&&(u=Kf(u,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(s=di(s,a[0]));const c=this.recurrentKernel.read(),[h,p]=Wu(c,[2*this.units,this.units],c.rank-1),d=Gf(s,h),[f,m,g]=Wu(u,3,u.rank-1),[y,b]=Wu(d,2,d.rank-1);i=this.recurrentActivation.apply(ci(f,y)),o=this.recurrentActivation.apply(ci(m,b));const x=Gf(di(o,s),p);l=this.activation.apply(ci(g,x));const w=ci(di(i,s),di(ci(1,rl(i)),l));return[w,w]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:Sy(this.activation),recurrentActivation:Sy(this.recurrentActivation),useBias:this.useBias,kernelInitializer:ym(this.kernelInitializer),recurrentInitializer:ym(this.recurrentInitializer),biasInitializer:ym(this.biasInitializer),kernelRegularizer:_y(this.kernelRegularizer),recurrentRegularizer:_y(this.recurrentRegularizer),biasRegularizer:_y(this.biasRegularizer),activityRegularizer:_y(this.activityRegularizer),kernelConstraint:hf(this.kernelConstraint),recurrentConstraint:hf(this.recurrentConstraint),biasConstraint:hf(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign({},e,t)}}mb.className="GRUCell",qa(mb);class gb extends hb{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new mb(e),super(e)}call(e,t){return ri((()=>{null!=this.cell.dropoutMask&&(ai(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(ai(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,s=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:r})}))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}gb.className="GRU",qa(gb);class yb extends pb{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,ef(this.units,"units"),this.activation=Ey(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=Ey(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=bm(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=bm(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=bm(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=e.unitForgetBias,this.kernelRegularizer=My(e.kernelRegularizer),this.recurrentRegularizer=My(e.recurrentRegularizer),this.biasRegularizer=My(e.biasRegularizer),this.kernelConstraint=df(e.kernelConstraint),this.recurrentConstraint=df(e.recurrentConstraint),this.biasConstraint=df(e.biasConstraint),this.dropout=Ff([1,Df([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=Ff([1,Df([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.implementation=e.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){var t;const n=(e=Sm(e))[e.length-1];let s;if(this.kernel=this.addWeight("kernel",[n,4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const e=this.biasInitializer,n=this.units;s=new((t=class extends Qf{apply(t,s){const r=e.apply([n]),a=(new tm).apply([n]),i=e.apply([2*n]);return Wf(Wf(r,a),i)}}).className="CustomInit",t)}else s=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,s,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(e,t){return ri((()=>{const n=null!=t.training&&t.training;if(3!==(e=e).length)throw new Od(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);let s=e[1];const r=e[2];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=wb({ones:()=>Pl(e),rate:this.dropout,training:n,count:4})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=wb({ones:()=>Pl(s),rate:this.recurrentDropout,training:n,count:4}));const a=this.dropoutMask,i=this.recurrentDropoutMask;let o,l,u,c;0<this.dropout&&this.dropout<1&&(e=di(e,a[0]));let h=Gf(e,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(s=di(s,i[0])),h=ci(h,Gf(s,this.recurrentKernel.read())),this.useBias&&(h=Kf(h,this.bias.read()));const[p,d,f,m]=Wu(h,4,h.rank-1);o=this.recurrentActivation.apply(p),l=this.recurrentActivation.apply(d),u=ci(di(l,r),di(o,this.activation.apply(f))),c=this.recurrentActivation.apply(m);const g=di(c,this.activation.apply(u));return[g,g,u]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:Sy(this.activation),recurrentActivation:Sy(this.recurrentActivation),useBias:this.useBias,kernelInitializer:ym(this.kernelInitializer),recurrentInitializer:ym(this.recurrentInitializer),biasInitializer:ym(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:_y(this.kernelRegularizer),recurrentRegularizer:_y(this.recurrentRegularizer),biasRegularizer:_y(this.biasRegularizer),activityRegularizer:_y(this.activityRegularizer),kernelConstraint:hf(this.kernelConstraint),recurrentConstraint:hf(this.recurrentConstraint),biasConstraint:hf(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign({},e,t)}}yb.className="LSTMCell",qa(yb);class bb extends hb{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new yb(e),super(e)}call(e,t){return ri((()=>{null!=this.cell.dropoutMask&&(ai(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(ai(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,s=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:r})}))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}bb.className="LSTM",qa(bb);class xb extends pb{constructor(e){super(e),this.cells=e.cells}get stateSize(){const e=[];for(const t of this.cells.slice().reverse())Array.isArray(t.stateSize)?e.push(...t.stateSize):e.push(t.stateSize);return e}call(e,t){return ri((()=>{let n=(e=e).slice(1);const s=[];for(const e of this.cells.slice().reverse())Array.isArray(e.stateSize)?s.push(n.splice(0,e.stateSize.length)):s.push(n.splice(0,1));s.reverse();const r=[];let a;for(let i=0;i<this.cells.length;++i){const o=this.cells[i];n=s[i],a=0===i?[e[0]].concat(n):[a[0]].concat(n),a=o.call(a,t),r.push(a.slice(1))}n=[];for(const e of r.slice().reverse())n.push(...e);return[a[0]].concat(n)}))}build(e){let t;Im(e)&&(e=e[0]),e=e,this.cells.forEach(((n,s)=>{Cf(`RNNCell_${s}`,(()=>{n.build(e),t=Array.isArray(n.stateSize)?n.stateSize[0]:n.stateSize,e=[e[0],t]}))})),this.built=!0}getConfig(){const e=super.getConfig(),t={cells:this.cells.map((e=>({className:e.getClassName(),config:e.getConfig()})))};return Object.assign({},e,t)}static fromConfig(e,t,n={}){const s=[];for(const e of t.cells)s.push(Qm(e,n));return new e({cells:s})}get trainableWeights(){if(!this.trainable)return[];const e=[];for(const t of this.cells)e.push(...t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.cells)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.cells)t.push(...e.trainableWeights);return t.concat(e)}return e}getWeights(){const e=[];for(const t of this.cells)e.push(...t.weights);return Rm(e)}setWeights(e){const t=[];for(const n of this.cells){const s=n.weights.length,r=e.splice(s);for(let e=0;e<n.weights.length;++e)t.push([n.weights[e],r[e]])}Fm(t)}}function wb(e){const{ones:t,rate:n,training:s=!1,count:r=1}=e,a=()=>Xf(t(),n),i=()=>Yf(a,t,s);if(!r||r<=1)return ii(i().clone());return Array(r).fill(void 0).map(i).map((e=>ii(e.clone())))}xb.className="StackedRNNCells",qa(xb);var kb=function(e,t){var n={};for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&t.indexOf(s)<0&&(n[s]=e[s]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(s=Object.getOwnPropertySymbols(e);r<s.length;r++)t.indexOf(s[r])<0&&Object.prototype.propertyIsEnumerable.call(e,s[r])&&(n[s[r]]=e[s[r]])}return n};class vb extends hb{constructor(e){if(e.unroll)throw new Md("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(e.cell))throw new Md("It is not possible at the moment to stack convolutional cells.");super(e),this.inputSpec=[new Dm({ndim:5})]}call(e,t){return ri((()=>{if(null!=this.cell.dropoutMask&&(ai(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(ai(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),t&&t.constants)throw new Od("ConvRNN2D cell does not support constants");const n=null==t?null:t.mask,s=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:r})}))}computeOutputShape(e){let t=this.computeSingleOutputShape(e);return this.returnSequences||(t=[t[0],...t.slice(2)]),this.returnState&&(t=[t,...Array(2).fill([e[0],...t.slice(-3)])]),t}getInitialState(e){return ri((()=>{const{stateSize:t}=this.cell,n=e.shape,s=this.computeSingleOutputShape(n),r=El([s[0],...s.slice(2)]);return Array.isArray(t)?Array(t.length).fill(r):[r]}))}resetStates(e,t=!1){ri((()=>{if(!this.stateful)throw new Dd("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape,s=this.computeSingleOutputShape(n),r=[s[0],...s.slice(2)];if(null==n[0])throw new Od("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.getStates())Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>El(r))):this.states_=[El(r)];else if(null==e)ai(this.states_),null!=this.keptStates&&(ai(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>El(r))):this.states_[0]=El(r);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new Od(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);t?this.keptStates.push(this.states_.slice()):ai(this.states_);for(let t=0;t<this.states_.length;++t){const n=e[t],s=r;if(!d(n.shape,s))throw new Od(`State ${t} is incompatible with layer ${this.name}: expected shape=${s}, received shape=${n.shape}`);this.states_[t]=n}}this.states_=this.states_.map((e=>ii(e.clone())))}))}computeSingleOutputShape(e){const{dataFormat:t,filters:n,kernelSize:s,padding:r,strides:a,dilationRate:i}=this.cell,o="channelsFirst"===t,l=e[o?3:2],u=e[o?4:3],c=Gy(l,s[0],r,a[0],i[0]),h=Gy(u,s[1],r,a[1],i[1]);return[...e.slice(0,2),...o?[n,c,h]:[c,h,n]]}}vb.className="ConvRNN2D";class Nb extends yb{constructor(e){const{filters:t,kernelSize:n,strides:s,padding:r,dataFormat:a,dilationRate:i}=e;super(Object.assign({},e,{units:t})),this.filters=t,ef(this.filters,"filters"),this.kernelSize=Uy(n,2,"kernelSize"),this.kernelSize.forEach((e=>ef(e,"kernelSize"))),this.strides=Uy(s||1,2,"strides"),this.strides.forEach((e=>ef(e,"strides"))),this.padding=r||"valid",vf(this.padding),this.dataFormat=a||"channelsLast",kf(this.dataFormat),this.dilationRate=Uy(i||1,2,"dilationRate"),this.dilationRate.forEach((e=>ef(e,"dilationRate")))}build(e){var t;e=Sm(e);const n="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[n])throw new Od(`The channel dimension of the input should be defined. Found ${e[n]}`);const s=e[n],r=this.kernelSize.concat([s,4*this.filters]);this.kernel=this.addWeight("kernel",r,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);const a=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",a,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let e;if(this.unitForgetBias){const n=this.biasInitializer,s=this.filters;e=new((t=class extends Qf{apply(e,t){return Pf([n.apply([s]),Al([s]),n.apply([2*s])])}}).className="CustomInit",t)}else e=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.filters],null,e,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(e,t){return ri((()=>{if(3!==e.length)throw new Od(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);const n=t.training||!1,s=e[0],r=e[1],a=e[2];0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=wb({ones:()=>Pl(s),rate:this.dropout,training:n,count:4}));const i=this.dropoutMask,o=(e,t,n)=>t&&t[n]?di(t[n],e):e;let l=o(s,i,0),u=o(s,i,1),c=o(s,i,2),h=o(s,i,3);0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=wb({ones:()=>Pl(r),rate:this.recurrentDropout,training:n,count:4}));const p=this.recurrentDropoutMask;let d=o(r,p,0),f=o(r,p,1),m=o(r,p,2),g=o(r,p,3);const[y,b,x,w]=Wu(this.kernel.read(),4,3),[k,v,N,I]=this.useBias?Wu(this.bias.read(),4):[null,null,null,null];l=this.inputConv(l,y,k,this.padding),u=this.inputConv(u,b,v,this.padding),c=this.inputConv(c,x,N,this.padding),h=this.inputConv(h,w,I,this.padding);const[C,$,S,T]=Wu(this.recurrentKernel.read(),4,3);d=this.recurrentConv(d,C),f=this.recurrentConv(f,$),m=this.recurrentConv(m,S),g=this.recurrentConv(g,T);const E=this.recurrentActivation.apply(ci(l,d)),A=this.recurrentActivation.apply(ci(u,f)),R=ci(di(A,a),di(E,this.activation.apply(ci(c,m)))),F=di(this.recurrentActivation.apply(ci(h,g)),this.activation.apply(R));return[F,F,R]}))}getConfig(){const e=super.getConfig(),{units:t}=e,n=kb(e,["units"]),s={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides};return Object.assign({},n,s)}inputConv(e,t,n,s){const r=oo(e,t,this.strides,s||"valid","channelsFirst"===this.dataFormat?"NCHW":"NHWC",this.dilationRate);return n?Kf(r,n,this.dataFormat):r}recurrentConv(e,t){return oo(e,t,1,"same","channelsFirst"===this.dataFormat?"NCHW":"NHWC")}}Nb.className="ConvLSTM2DCell",qa(Nb);class Ib extends vb{constructor(e){const t=new Nb(e);super(Object.assign({},e,{cell:t}))}static fromConfig(e,t){return new e(t)}}Ib.className="ConvLSTM2D",qa(Ib);class Cb extends zm{constructor(e){super(e),this.rate=Math.max(Math.min(e.rate,1),0),this.noiseShape=e.noiseShape,this.seed=e.seed,this.supportsMasking=!0}getNoiseShape(e){if(null==this.noiseShape)return this.noiseShape;const t=e.shape,n=[];for(let e=0;e<this.noiseShape.length;++e)n.push(null==this.noiseShape[e]?t[e]:this.noiseShape[e]);return n}call(e,t){return ri((()=>{this.invokeCallHook(e,t);const n=$m(e);if(0<this.rate&&this.rate<1){const e=null!=t.training&&t.training,s=this.getNoiseShape(n);return Yf((()=>Xf(n,this.rate,s,this.seed)),(()=>n),e)}return e}))}getConfig(){const e={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},t=super.getConfig();return Object.assign(e,t),e}dispose(){return super.dispose()}}Cb.className="Dropout",qa(Cb);class $b extends Cb{constructor(e){super(e),this.inputSpec=[{ndim:3}]}getNoiseShape(e){const t=e.shape;return[t[0],1,t[2]]}}$b.className="SpatialDropout1D",qa($b);class Sb extends zm{constructor(e){if(super(e),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==e.batchInputShape&&null==e.inputShape&&null!=e.inputDim){let t=null;null!=e.batchSize&&(t=e.batchSize),this.batchInputShape=[t,e.inputDim]}this.units=e.units,ef(this.units,"units"),this.activation=Ey(e.activation),null!=e.useBias&&(this.useBias=e.useBias),this.kernelInitializer=bm(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=bm(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=df(e.kernelConstraint),this.biasConstraint=df(e.biasConstraint),this.kernelRegularizer=My(e.kernelRegularizer),this.biasRegularizer=My(e.biasRegularizer),this.activityRegularizer=My(e.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(e){const t=(e=Sm(e))[e.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[t,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:t}}],this.built=!0}computeOutputShape(e){const t=(e=Sm(e)).slice();return t[t.length-1]=this.units,t}call(e,t){return ri((()=>{this.invokeCallHook(e,t);const n=$m(e),s=nf(this.activation.getClassName());let r;return null!=s?r=Gf(n,this.kernel.read(),s,this.bias?this.bias.read():null):(r=Gf(n,this.kernel.read()),null!=this.bias&&(r=Kf(r,this.bias.read())),null!=this.activation&&(r=this.activation.apply(r))),r}))}getConfig(){const e={units:this.units,activation:Sy(this.activation),useBias:this.useBias,kernelInitializer:ym(this.kernelInitializer),biasInitializer:ym(this.biasInitializer),kernelRegularizer:_y(this.kernelRegularizer),biasRegularizer:_y(this.biasRegularizer),activityRegularizer:_y(this.activityRegularizer),kernelConstraint:hf(this.kernelConstraint),biasConstraint:hf(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}Sb.className="Dense",qa(Sb);class Tb extends zm{constructor(e){super(e=e||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=e.dataFormat}computeOutputShape(e){e=Sm(e);for(const t of e.slice(1))if(null==t)throw new Od(`The shape of the input to "Flatten" is not fully defined (got ${e.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[e[0],Af(e,1)]}call(e,t){return ri((()=>{this.invokeCallHook(e,t);let n=$m(e);if("channelsFirst"===this.dataFormat&&n.rank>1){const e=[0];for(let t=2;t<n.rank;++t)e.push(t);e.push(1),n=n.transpose(e)}return function(e){if(e.rank<=1)throw new Od(`batchFlatten requires a minimum rank of 2. Got rank: ${e.rank}.`);const t=[e.shape[0],Af(e.shape,1)];return e.reshape(t)}(n)}))}getConfig(){const e={};null!=this.dataFormat&&(e.dataFormat=this.dataFormat);const t=super.getConfig();return Object.assign(e,t),e}}Tb.className="Flatten",qa(Tb);class Eb extends zm{constructor(e){super(e),this.supportsMasking=!0,this.activation=Ey(e.activation)}call(e,t){return ri((()=>{this.invokeCallHook(e,t);const n=$m(e);return this.activation.apply(n)}))}getConfig(){const e={activation:Sy(this.activation)},t=super.getConfig();return Object.assign(e,t),e}}Eb.className="Activation",qa(Eb);class Ab extends zm{constructor(e){super(e),this.n=e.n,this.inputSpec=[{ndim:2}]}computeOutputShape(e){return[e[0],this.n,e[1]]}call(e,t){return ri((()=>{return e=$m(e),t=e,n=this.n,ri((()=>{if(2!==t.shape.length)throw new Od(`repeat() expects a rank-2 tensor, but received a rank-${t.shape.length} tensor.`);return Vf(Mf(t,1),[1,n,1])}));var t,n}))}getConfig(){const e={n:this.n},t=super.getConfig();return Object.assign(e,t),e}}Ab.className="RepeatVector",qa(Ab);class Rb extends zm{constructor(e){super(e),this.targetShape=e.targetShape;for(let e=0;e<this.targetShape.length;++e)this.isUnknown(this.targetShape[e])&&(this.targetShape[e]=null)}isUnknown(e){return e<0||null==e}fixUnknownDimension(e,t){const n="Total size of new array must be unchanged.",s=t.slice();let r=1,a=null;for(let e=0;e<s.length;++e){const t=s[e];if(this.isUnknown(t)){if(null!==a)throw new Od("Can only specifiy one unknown dimension.");a=e}else r*=t}const i=Af(e);if(null!==a){if(0===r||i%r!=0)throw new Od(n);s[a]=i/r}else if(i!==r)throw new Od(n);return s}computeOutputShape(e){let t=!1;for(let n=0;n<e.length;++n)if(this.isUnknown(e[n])){t=!0;break}return t?e.slice(0,1).concat(this.targetShape):e.slice(0,1).concat(this.fixUnknownDimension(e.slice(1),this.targetShape))}call(e,t){return ri((()=>{this.invokeCallHook(e,t);const n=$m(e),s=n.shape,r=s.slice(0,1).concat(this.fixUnknownDimension(s.slice(1),this.targetShape));return n.reshape(r)}))}getConfig(){const e={targetShape:this.targetShape},t=super.getConfig();return Object.assign(e,t),e}}Rb.className="Reshape",qa(Rb);class Fb extends zm{constructor(e){if(super(e),null==e.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(e.dims))throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${e.dims} instead.`);const t=_f(1,e.dims.length+1);if(!d(e.dims.slice().sort(),t))throw new Error("Invalid permutation `dims`: "+JSON.stringify(e.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=e.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new Dm({ndim:this.dims.length+1})]}computeOutputShape(e){const t=(e=Sm(e)).slice();return this.dims.forEach(((n,s)=>{t[s+1]=e[n]})),t}call(e,t){return da($m(e),this.dimsIncludingBatch)}getConfig(){const e={dims:this.dims},t=super.getConfig();return Object.assign(e,t),e}}Fb.className="Permute",qa(Fb);class Db extends zm{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,this.maskValue=null!=e?null==e.maskValue?0:e.maskValue:0}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={maskValue:this.maskValue};return Object.assign(t,e),t}computeMask(e,t){const n=$m(e);return xi(Bl(n,this.maskValue),-1)}call(e,t){return ri((()=>{this.invokeCallHook(e,t);const n=$m(e),s=xi(Bl(n,this.maskValue),-1,!0);return n.mul(s.asType(n.dtype))}))}}Db.className="Masking",qa(Db);class _b extends zm{constructor(e){if(super(e),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==e.batchInputShape&&null==e.inputShape){let t=null;null!=e.batchSize&&(t=e.batchSize),null==e.inputLength?this.batchInputShape=[t,null]:this.batchInputShape=[t].concat(Vd(e.inputLength))}this.inputDim=e.inputDim,ef(this.inputDim,"inputDim"),this.outputDim=e.outputDim,ef(this.outputDim,"outputDim"),this.embeddingsInitializer=bm(e.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=My(e.embeddingsRegularizer),this.activityRegularizer=My(e.activityRegularizer),this.embeddingsConstraint=df(e.embeddingsConstraint),this.maskZero=e.maskZero,this.supportsMasking=e.maskZero,this.inputLength=e.inputLength}build(e){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(e){}computeMask(e,t){return ri((()=>this.maskZero?(e=$m(e),Bl(e,To(e))):null))}computeOutputShape(e){if(e=Sm(e),null==this.inputLength)return[...e,this.outputDim];const t=Vd(this.inputLength);if(t.length!==e.length-1)throw new Od(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);{let n=0;for(let s=0;s<t.length;++s){const r=t[s],a=e[s+1];if(null!=r&&null!=a&&r!==a)throw new Od(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);null==r&&(t[n]=a),n++}}return[e[0],...t,this.outputDim]}call(e,t){return ri((()=>{this.invokeCallHook(e,t);let n=$m(e);"int32"!==n.dtype&&(n=Of(n,"int32"));return Hf(this.embeddings.read(),n.as1D()).reshape(Sm(this.computeOutputShape(n.shape)))}))}getConfig(){const e={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:ym(this.embeddingsInitializer),embeddingsRegularizer:_y(this.embeddingsRegularizer),activityRegularizer:_y(this.activityRegularizer),embeddingsConstraint:hf(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},t=super.getConfig();return Object.assign(e,t),e}}_b.className="Embedding",qa(_b);class Ob extends zm{constructor(e){super(e||{}),this.supportsMasking=!0}mergeFunction(e){throw new Md}computeElementwiseOpOutputShape(e,t){if(null==e||null==t)return null;if(e.length<t.length)return this.computeElementwiseOpOutputShape(t,e);if(0===t.length)return e;const n=e.slice(0,e.length-t.length);for(let s=0;s<t.length;++s){const r=e[e.length-t.length+s],a=t[s];if(null==r||null==a||r<0||a<0)n.push(null);else if(1===r)n.push(a);else if(1===a)n.push(r);else{if(r!==a)throw new Od("Operands could not be broadcast together with shapes "+JSON.stringify(e)+" "+JSON.stringify(t));n.push(r)}}return n}build(e){if(Array.isArray(e)&&!Array.isArray(e[0])&&(e=[Sm(e)]),(e=e).length<2)throw new Od(`A merge layer should be called on an Array of at least 2 inputs. Got ${e.length} input(s).`);let t=[];for(const n of e)null!=n&&null!==n[0]&&t.push(n[0]);if(t=Yd(t),t.length>1)throw new Od(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(e)}.`);let n=null==e[0]?null:e[0].slice(1);for(let t=1;t<e.length;++t){const s=null==e[t]?null:e[t].slice(1);n=this.computeElementwiseOpOutputShape(n,s)}const s=e.map((e=>e.length));-1===e.indexOf(null)&&1===Yd(s).length?this.reshapeRequired=!1:this.reshapeRequired=!0}call(e,t){return ri((()=>{if(e=e,this.reshapeRequired){const t=[],n=e.map((e=>e.rank));if(-1===n.indexOf(null)){const s=Df(n);for(let n of e){const e=n.rank;for(let t=0;t<s-e;++t)n=Mf(n,1);t.push(n)}return this.mergeFunction(t)}{let n=!1;for(const s of e){const e=s.rank;if(null==e){const e=s.shape,r=e[0],a=e.slice(1).concat([r]);let i=s.reshape([r].concat(Af(e.slice(1))));i=da(i,[1,0]),i=i.reshape(a),t.push(i),n=!0}else if(e>1){const r=_f(1,e).concat([0]);t.push(da(s,r)),n=!0}else t.push(s)}let s=this.mergeFunction(t);const r=s.rank;if(n)if(null==r){const e=s.shape,t=e[e.length-1],n=[t].concat(e.slice(0,e.length-1));s=da(s.reshape([-1,t]),[1,0]).reshape(n)}else if(r>1){const e=[r-1].concat(_f(0,r-1));s=da(s,e)}return s}}return this.mergeFunction(e)}))}computeOutputShape(e){let t;t=null==(e=e)[0]?null:e[0].slice(1);for(let n=1;n<e.length;++n){const s=null==e[n]?null:e[n].slice(1);t=this.computeElementwiseOpOutputShape(t,s)}let n=[];for(const t of e)null!=t&&null!==t[0]&&n.push(t[0]);return n=Yd(n),t=1===n.length?n.concat(t):[null].concat(t),t}computeMask(e,t){return ri((()=>{if(null==t)return null;if(!Array.isArray(t))throw new Od("`mask` should be an Array");if(!Array.isArray(e))throw new Od("`inputs` should be an Array");if(t.length!==e.length)throw new Od(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${e.length} vs ${t.length})`);if(t.every((e=>null==e)))return null;let n=(t=t.map((e=>null==e?e:Oo(e,0))))[0];for(let e=1;e<t.length-1;++e)n=wl(n,t[e]);return n}))}}class Mb extends Ob{constructor(e){super(e)}mergeFunction(e){return ri((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=ci(t,e[n]);return t}))}}Mb.className="Add",qa(Mb);class Lb extends Ob{constructor(e){super(e)}mergeFunction(e){return ri((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=di(t,e[n]);return t}))}}Lb.className="Multiply",qa(Lb);class zb extends Ob{constructor(e){super(e)}mergeFunction(e){return ri((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=ci(t,e[n]);return di(1/e.length,t)}))}}zb.className="Average",qa(zb);class Bb extends Ob{constructor(e){super(e)}mergeFunction(e){return ri((()=>{let t=e[0];for(let n=1;n<e.length;++n)t=Sl(t,e[n]);return t}))}}Bb.className="Maximum",qa(Bb);class Pb extends Ob{constructor(e){super(e)}mergeFunction(e){return ri((()=>{let t=e[0];for(let n=1;n<e.length;++n)t=Fl(t,e[n]);return t}))}}Pb.className="Minimum",qa(Pb);class Wb extends Ob{constructor(e){super(e),this.DEFAULT_AXIS=-1,null==e&&(e={}),this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){if(!Array.isArray(e)||!Array.isArray(e[0])||1===e.length)throw new Od("A `Concatenate` layer should be called on a list of at least 2 inputs");e=e;let t=!0;for(const n of e)if(null!=n){t=!1;break}if(t)return;const n=[];for(let t=0;t<e.length;++t){const s=e[t].slice();s.splice(this.axis,1);let r=!1;for(const e of n)if(d(e,s)){r=!0;break}r||n.push(s)}if(n.length>1)throw new Od("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(e))}mergeFunction(e){return ri((()=>Pf(e,this.axis)))}computeOutputShape(e){if(!Array.isArray(e)||!Array.isArray(e[0]))throw new Od("A `Concatenate` layer should be called on a list of inputs.");const t=e,n=t[0].slice(),s=this.axis<0?n.length+this.axis:this.axis;for(const e of t.slice(1)){if(null==n[s]||null==e[s]){n[s]=null;break}n[s]+=e[s]}return n}computeMask(e,t){if(null==t)return null;if(!Array.isArray(t))throw new Od("`mask` should be an array for Concatenate");if(!Array.isArray(e))throw new Od("`inputs` should be an array for Concatenate");if(t.length!==e.length)throw new Od(`Mismatch in the length of mask (${t.length}) and the legnth of inputs (${e.length})`);return ri((()=>{let n=!0;if(t.forEach((e=>{null==e||(n=!1)})),n)return null;const s=[];for(let n=0;n<e.length;++n)null==t[n]?s.push(Pl(e[n]).asType("bool")):t[n].rank<e[n].rank?s.push(Oo(t[n],-1)):s.push(t[n]);const r=Ui(s,this.axis);return bi(r,-1,!1)}))}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function Vb(e,t){for(;e<0;)e+=t;return e}Wb.className="Concatenate",qa(Wb);class Ub extends Ob{constructor(e){super(e),this.axes=e.axes,this.normalize=null!=e.normalize&&e.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){l(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const t=e[0],n=e[1];if(t.length>3||n.length>3)throw new Md("Dot layer does not support tensors of 4D or higher rank yet.");const s=this.interpretAxes(t,n);if(t[s[0]]!==n[s[1]])throw new Od(`Dimension incompatibility: ${t[s[0]]} !== ${n[s[1]]}`)}mergeFunction(e){if(2!==e.length)throw new Od(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${e.length} input(s).`);let t,n=e[0],s=e[1];return t=Array.isArray(this.axes)?this.axes.map(((t,n)=>Vb(t,e[n].shape.length))):[Vb(this.axes,n.shape.length),Vb(this.axes,s.shape.length)],this.normalize&&(n=eg(n,t[0]),s=eg(s,t[1])),function(e,t,n){if(e.shape.length>3||t.shape.length>3)throw new Md("batchDot is not implemented for tensors of 4D or higher rank yet");if(l(e.shape.length>=2,(()=>`batchDot requires the rank of x to be >= 2, but got ${e.shape.length}`)),l(e.shape.length>=2,(()=>`batchDot requires the rank of y to be >= 2, but got ${t.shape.length}`)),"number"==typeof n&&(n=[n,n]),"complex64"===e.dtype||"complex64"===t.dtype)throw new Md("batchDot is not implemented for complex64-type Tensors yet.");const s=e.shape.length,r=t.shape.length;null==n&&(n=[s-1,r-2]);const a=n;return ri((()=>{let n,i;if(s>r){n=s-r;const e=[];for(let t=0;t<n;++t)e.push(1);t=t.reshape(t.shape.concat(e))}else if(r>s){n=r-s;const t=[];for(let e=0;e<n;++e)t.push(1);e=e.reshape(e.shape.concat(t))}else n=0;if(2===e.shape.length&&2===t.shape.length)i=a[0]===a[1]?e.mul(t).sum(a[0]):e.transpose([1,0]).mul(t).sum(a[1]);else{const n=a[0]!==e.shape.length-1,s=a[1]===t.shape.length-1;i=e.matMul(t,n,s)}if(n>0){let e;e=s>r?s+r-3:s-1;const t=[];for(let s=e;s<e+n;++s)t.push(s);i=i.squeeze(t)}return 1===i.shape.length&&(i=i.expandDims(1)),i}))}(n,s,t)}interpretAxes(e,t){let n;return n=Array.isArray(this.axes)?this.axes:[Vb(this.axes,e.length),Vb(this.axes,t.length)],n}computeOutputShape(e){l(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const t=e[0].slice(),n=e[1].slice();if(t.length>3||n.length>3)throw new Md("Dot layer does not support tensors of 4D or higher rank yet.");const s=this.interpretAxes(t,n);t.splice(s[0],1),n.splice(s[1],1),n.splice(0,1);const r=t.concat(n);return 1===r.length&&r.push(1),r}computeMask(e,t){return null}getConfig(){const e={axes:this.axes,normalize:this.normalize},t=super.getConfig();return Object.assign(e,t),e}}Ub.className="Dot",qa(Ub);class Gb extends zm{constructor(e){super(e),this.supportsMasking=!0,this.stddev=e.stddev}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={stddev:this.stddev};return Object.assign(t,e),t}call(e,t){return ri((()=>{this.invokeCallHook(e,t);const n=$m(e);return Yf((()=>Uf(n.shape,0,this.stddev).add(n)),(()=>n),t.training||!1)}))}}Gb.className="GaussianNoise",qa(Gb);class Hb extends zm{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return ri((()=>{this.invokeCallHook(e,t);const n=$m(e);if(this.rate>0&&this.rate<1){return Yf((()=>{const e=Math.sqrt(this.rate/(1-this.rate));return n.mul(Uf(n.shape,1,e))}),(()=>n),t.training||!1)}return n}))}}Hb.className="GaussianDropout",qa(Hb);class jb extends zm{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate,this.noiseShape=e.noiseShape}_getNoiseShape(e){return this.noiseShape||$m(e).shape}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return ri((()=>{if(this.rate<1&&this.rate>0){const n=this._getNoiseShape(e);return Yf((()=>{const t=$m(e),s=-1.7580993408473766;let r=Uo(du(n),this.rate);r=Of(r,"float32");const a=((1-this.rate)*(1+this.rate*s**2))**-.5,i=-a*s*this.rate;return t.mul(r).add(r.add(-1).mul(s)).mul(a).add(i)}),(()=>$m(e)),t.training||!1)}return e}))}}function qb(e,t,n,s,r,a=.001){let i;if(2===e.rank)i=Yi(e,t,n,s,r,a);else if(3===e.rank)i=Ji(e,t,n,s,r,a);else{if(4!==e.rank)throw new Md(`batchNormalization is not implemented for array of rank ${e.rank} yet`);i=Zi(e,t,n,s,r,a)}return i}function Kb(e,t,n,s,r=.001){return d(s.slice().sort(),_f(0,e.rank-1))?function(e,t,n,s,r=.001){return ri((()=>{const a=Ml(e,s),i=a.mean,o=a.variance;return[qb(e,i,o,n,t,r),i,o]}))}(e,t,n,s,r):function(e,t,n,s,r=.001){return ri((()=>{const a=Ml(e,s),i=a.mean,o=a.variance,l=[];for(const t of _f(0,e.rank))-1!==s.indexOf(t)?l.push(1):l.push(e.shape[t]);const u=i.reshape(l),c=o.reshape(l),h=null==t?null:t.reshape(l),p=null==n?null:n.reshape(l);return[qb(e,u,c,p,h,r),i,o]}))}(e,t,n,s,r)}jb.className="AlphaDropout",qa(jb);class Xb extends zm{constructor(e){null==e&&(e={}),super(e),this.supportsMasking=!0,this.axis=null==e.axis?-1:e.axis,this.momentum=null==e.momentum?.99:e.momentum,this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=bm(e.betaInitializer||"zeros"),this.gammaInitializer=bm(e.gammaInitializer||"ones"),this.movingMeanInitializer=bm(e.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=bm(e.movingVarianceInitializer||"ones"),this.betaConstraint=df(e.betaConstraint),this.gammaConstraint=df(e.gammaConstraint),this.betaRegularizer=My(e.betaRegularizer),this.gammaRegularizer=My(e.gammaRegularizer)}build(e){e=Sm(e);const t=this.axis>=0?this.axis:this.axis+e.length,n=e[t];if(null==n)throw new Od(`Axis ${t} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(e)}.`);this.inputSpec=[new Dm({ndim:e.length,axes:{[t]:n}})];const s=[n];this.scale&&(this.gamma=this.addWeight("gamma",s,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",s,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",s,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",s,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(e,t){return ri((()=>{const n=null!=t.training&&t.training,s=$m(e),r=s.shape,a=r.length,i=_f(0,a),o=this.axis>=0?this.axis:this.axis+a;i.splice(o,1);const l=zd(1,a);l[o]=r[o];const u=i.slice();u.sort();const c=!d(u,_f(0,a).slice(0,a-1));if(!n)return(()=>{if(c){const e=this.movingMean.read().reshape(l),t=this.movingVariance.read().reshape(l),n=this.center?this.beta.read().reshape(l):null,r=this.scale?this.gamma.read().reshape(l):null;return qb(s,e,t,n,r,this.epsilon)}return qb(s,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[h,p,f]=Kb(s,this.gamma.read(),this.beta.read(),i,this.epsilon),m=(e,t,n)=>{ri((()=>{const s=1-n,r=e.read(),a=r.sub(t).mul(s);e.write(r.sub(a))}))};return(()=>{m(this.movingMean,p,this.momentum),m(this.movingVariance,f,this.momentum)})(),h}))}getConfig(){const e={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:ym(this.betaInitializer),gammaInitializer:ym(this.gammaInitializer),movingMeanInitializer:ym(this.movingMeanInitializer),movingVarianceInitializer:ym(this.movingVarianceInitializer),betaRegularizer:_y(this.betaRegularizer),gammaRegularizer:_y(this.gammaRegularizer),betaConstraint:hf(this.betaConstraint),gammaConstraint:hf(this.gammaConstraint)},t=super.getConfig();return Object.assign(e,t),e}}Xb.className="BatchNormalization",qa(Xb);class Yb extends zm{constructor(e){if(null==e&&(e={}),super(e),this.axis=null==e.axis?-1:e.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw new Error(`Expected axis to be an integer, but received ${this.axis}`)}else{if(!Array.isArray(this.axis))throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);for(const e of this.axis)if(!Number.isInteger(e))throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`)}this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=bm(e.betaInitializer||"zeros"),this.gammaInitializer=bm(e.gammaInitializer||"ones"),this.betaRegularizer=My(e.betaRegularizer),this.gammaRegularizer=My(e.gammaRegularizer),this.supportsMasking=!0}build(e){const t=(e=Sm(e)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let e=0;e<this.axis.length;++e)this.axis[e]<0&&(this.axis[e]+=t);for(const e of this.axis)if(e<0||e>=t)throw new Error(`Invalid axis: ${e}`);if(this.axis.length!==Yd(this.axis).length)throw new Error(`Found duplicate axes in: ${this.axis}`);const n=this.axis.map((t=>e[t]));this.scale?this.gamma=this.addWeight("gamma",n,"float32",this.gammaInitializer,this.gammaRegularizer,true):this.gamma=null,this.center?this.beta=this.addWeight("beta",n,"float32",this.betaInitializer,this.betaRegularizer,true):this.beta=null,this.built=!0}call(e,t){const n=$m(e),s=n.shape,r=s.length;return ri((()=>{let{mean:e,variance:t}=Ml(n,this.axis,!0);const a=zd(1,r);for(const e of this.axis)a[e]=s[e];const i=e=>null!=e&&e.shape.length!==r&&this.axis!==[r-1]?e.reshape(a):e;let o=i(this.gamma.read()),l=i(this.beta.read());const u=[],c=[];for(let e=0;e<r;++e)-1!==this.axis.indexOf(e)?(u.push(s[e]),c.push(1)):(u.push(1),c.push(s[e]));return e=e.tile(u),t=t.tile(u),o=o.tile(c),l=l.tile(c),qb(n,e,t,l,o,this.epsilon)}))}getConfig(){const e={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:ym(this.betaInitializer),gammaInitializer:ym(this.gammaInitializer),betaRegularizer:_y(this.betaRegularizer),gammaRegularizer:_y(this.gammaRegularizer)},t=super.getConfig();return Object.assign(e,t),e}}Yb.className="LayerNormalization",qa(Yb);class Jb extends zm{constructor(e){if(null==e&&(e={}),super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,null==e.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof e.padding)this.padding=[[e.padding,e.padding],[e.padding,e.padding]];else{if(e.padding=e.padding,2!==e.padding.length)throw new Od(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${e.padding.length} array.`);let t,n;if("number"==typeof e.padding[0])t=[e.padding[0],e.padding[0]],n=[e.padding[1],e.padding[1]];else{if(e.padding=e.padding,2!==e.padding[0].length)throw new Od(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e.padding[0].length} array.`);if(t=e.padding[0],2!==e.padding[1].length)throw new Od(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e.padding[1].length} array.`);n=e.padding[1]}this.padding=[t,n]}this.inputSpec=[new Dm({ndim:4})]}computeOutputShape(e){let t,n;return e=Sm(e),"channelsFirst"===this.dataFormat?(t=null!=e[2]&&e[2]>=0?e[2]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[3]&&e[3]>=0?e[3]+this.padding[1][0]+this.padding[1][1]:null,[e[0],e[1],t,n]):(t=null!=e[1]&&e[1]>=0?e[1]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[2]&&e[2]>=0?e[2]+this.padding[1][0]+this.padding[1][1]:null,[e[0],t,n,e[3]])}call(e,t){return ri((()=>{return t=$m(e),n=this.padding,s=this.dataFormat,ri((()=>{if(4!==t.rank)throw new Od(`temporalPadding expects input tensor to be 4-D, but received a ${t.rank}-D tensor.`);if(null==n&&(n=[[1,1],[1,1]]),2!==n.length||2!==n[0].length||2!==n[1].length)throw new Od("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==s&&(s="channelsLast"),"channelsLast"!==s&&"channelsFirst"!==s)throw new Od(`Unknown data format: ${s}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let e;return e="channelsFirst"===s?[[0,0],[0,0],n[0],n[1]]:[[0,0],n[0],n[1],[0,0]],Vl(t,e)}));var t,n,s}))}getConfig(){const e={padding:this.padding,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}function Zb(e,t,n,s,r,a){return ri((()=>{let i;kf(r),Nf(a),vf(s),null==n&&(n=[1,1]),null==s&&(s="valid"),null==r&&(r="channelsLast"),null==a&&(a="max"),e=jy(e,r);const o="same"===s?"same":"valid";return i="max"===a?Il(e,t,n,o):Wi(e,t,n,o),"channelsFirst"===r&&(i=da(i,[0,3,1,2])),i}))}function Qb(e,t,n,s,r,a){return ri((()=>{let i;kf(r),Nf(a),vf(s),null==n&&(n=[1,1,1]),null==s&&(s="valid"),null==r&&(r="channelsLast"),null==a&&(a="max"),e=qy(e,r);const o="same"===s?"same":"valid";return i="max"===a?Cl(e,t,n,o):Vi(e,t,n,o),"channelsFirst"===r&&(i=da(i,[0,4,1,2,3])),i}))}Jb.className="ZeroPadding2D",qa(Jb);class ex extends zm{constructor(e){if(null==e.poolSize&&(e.poolSize=2),super(e),"number"==typeof e.poolSize)this.poolSize=[e.poolSize];else{if(!Array.isArray(e.poolSize)||1!==e.poolSize.length||"number"!=typeof e.poolSize[0])throw new Od(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.poolSize)}`);this.poolSize=e.poolSize}if(ef(this.poolSize,"poolSize"),null==e.strides)this.strides=this.poolSize;else if("number"==typeof e.strides)this.strides=[e.strides];else{if(!Array.isArray(e.strides)||1!==e.strides.length||"number"!=typeof e.strides[0])throw new Od(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.strides)}`);this.strides=e.strides}ef(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,vf(this.padding),this.inputSpec=[new Dm({ndim:3})]}computeOutputShape(e){const t=Gy((e=Sm(e))[1],this.poolSize[0],this.padding,this.strides[0]);return[e[0],t,e[2]]}call(e,t){return ri((()=>{this.invokeCallHook(e,t),e=Mf($m(e),2);const n=this.poolingFunction($m(e),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return Hu(n,[2])}))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides},t=super.getConfig();return Object.assign(e,t),e}}class tx extends ex{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return kf(r),vf(s),Zb(e,t,n,s,r,"max")}}tx.className="MaxPooling1D",qa(tx);class nx extends ex{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return kf(r),vf(s),Zb(e,t,n,s,r,"avg")}}nx.className="AveragePooling1D",qa(nx);class sx extends zm{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(2!==e.strides.length)throw new Od(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides];ef(this.poolSize,"poolSize"),ef(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,kf(this.dataFormat),vf(this.padding),this.inputSpec=[new Dm({ndim:4})]}computeOutputShape(e){e=Sm(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2];return t=Gy(t,this.poolSize[0],this.padding,this.strides[0]),n=Gy(n,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n]:[e[0],t,n,e[3]]}call(e,t){return ri((()=>(this.invokeCallHook(e,t),this.poolingFunction($m(e),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class rx extends sx{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return kf(r),vf(s),Zb(e,t,n,s,r,"max")}}rx.className="MaxPooling2D",qa(rx);class ax extends sx{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return kf(r),vf(s),Zb(e,t,n,s,r,"avg")}}ax.className="AveragePooling2D",qa(ax);class ix extends zm{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(3!==e.strides.length)throw new Od(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides,e.strides];ef(this.poolSize,"poolSize"),ef(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,kf(this.dataFormat),vf(this.padding),this.inputSpec=[new Dm({ndim:5})]}computeOutputShape(e){e=Sm(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],s="channelsFirst"===this.dataFormat?e[4]:e[3];return t=Gy(t,this.poolSize[0],this.padding,this.strides[0]),n=Gy(n,this.poolSize[1],this.padding,this.strides[1]),s=Gy(s,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n,s]:[e[0],t,n,s,e[4]]}call(e,t){return ri((()=>(this.invokeCallHook(e,t),this.poolingFunction($m(e),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class ox extends ix{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return kf(r),vf(s),Qb(e,t,n,s,r,"max")}}ox.className="MaxPooling3D",qa(ox);class lx extends ix{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return kf(r),vf(s),Qb(e,t,n,s,r,"avg")}}lx.className="AveragePooling3D",qa(lx);class ux extends zm{constructor(e){super(e),this.inputSpec=[new Dm({ndim:3})]}computeOutputShape(e){return[e[0],e[2]]}call(e,t){throw new Md}}class cx extends ux{constructor(e){super(e||{})}call(e,t){return ri((()=>{const t=$m(e);return Tl(t,1)}))}}cx.className="GlobalAveragePooling1D",qa(cx);class hx extends ux{constructor(e){super(e||{})}call(e,t){return ri((()=>{const t=$m(e);return ol(t,1)}))}}hx.className="GlobalMaxPooling1D",qa(hx);class px extends zm{constructor(e){super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,kf(this.dataFormat),this.inputSpec=[new Dm({ndim:4})]}computeOutputShape(e){return e=e,"channelsLast"===this.dataFormat?[e[0],e[3]]:[e[0],e[1]]}call(e,t){throw new Md}getConfig(){const e={dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class dx extends px{call(e,t){return ri((()=>{const t=$m(e);return"channelsLast"===this.dataFormat?Tl(t,[1,2]):Tl(t,[2,3])}))}}dx.className="GlobalAveragePooling2D",qa(dx);class fx extends px{call(e,t){return ri((()=>{const t=$m(e);return"channelsLast"===this.dataFormat?ol(t,[1,2]):ol(t,[2,3])}))}}fx.className="GlobalMaxPooling2D",qa(fx);class mx extends zm{constructor(e){super(e),this.layer=e.layer}build(e){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(e){null!=this.layer&&(this.layer.trainable=e)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(e){this.layer.setWeights(e)}getConfig(){const e={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},t=super.getConfig();return Object.assign(e,t),e}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(e)}static fromConfig(e,t,n={}){const s=Qm(t.layer,n);delete t.layer;const r={layer:s};return Object.assign(r,t),new e(r)}}class gx extends mx{constructor(e){super(e),this.supportsMasking=!0}build(e){if((e=Sm(e)).length<3)throw new Od(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(e)}`);this.inputSpec=[{shape:e}];const t=[e[0]].concat(e.slice(2));this.layer.built||(this.layer.build(t),this.layer.built=!0),super.build(e)}computeOutputShape(e){const t=[(e=Sm(e))[0]].concat(e.slice(2)),n=this.layer.computeOutputShape(t),s=e[1];return[n[0],s].concat(n.slice(1))}call(e,t){return ri((()=>cb(((e,n)=>[$m(this.layer.call(e,t)),[]]),e=$m(e),[],!1,null,null,!1,!0)[1]))}}gx.className="TimeDistributed",qa(gx);class yx extends mx{constructor(e){super(e);const t=e.layer.getConfig(),n={};n.className=e.layer.getClassName(),n.config=t,this.forwardLayer=Qm(n),t.goBackwards=!0!==t.goBackwards;const s={};var r;if(s.className=e.layer.getClassName(),s.config=t,this.backwardLayer=Qm(s),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===e.mergeMode?"concat":e.mergeMode,r=this.mergeMode,Zd(xf,"BidirectionalMergeMode",r),e.weights)throw new Md("weights support is not implemented for Bidirectional layer yet.");this._stateful=e.layer.stateful,this.returnSequences=e.layer.returnSequences,this.returnState=e.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=e.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(e){this._trainable=e,null!=this.forwardLayer&&(this.forwardLayer.trainable=e),null!=this.backwardLayer&&(this.backwardLayer.trainable=e)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(e){const t=e.length,n=Math.floor(t/2);this.forwardLayer.setWeights(e.slice(0,n)),this.backwardLayer.setWeights(e.slice(n))}computeOutputShape(e){let t,n,s,r=this.forwardLayer.computeOutputShape(e);return Array.isArray(r)&&Array.isArray(r[0])||(r=[r]),r=r,this.returnState?(s=r.slice(1),t=r[0]):t=r[0],t=t,"concat"===this.mergeMode?(t[t.length-1]*=2,n=[t]):n=null==this.mergeMode?[t,t.slice()]:[t],this.returnState?null==this.mergeMode?n.concat(s).concat(s.slice()):[t].concat(s).concat(s.slice()):Wd(n)}apply(e,t){let n=null==t?null:t.initialState,s=null==t?null:t.constants;null==t&&(t={});const r=ub(e,n,s,this.numConstants);if(e=r.inputs,n=r.initialState,s=r.constants,Array.isArray(e)&&(n=e.slice(1),e=e[0]),(null==n||0===n.length)&&null==s)return super.apply(e,t);const a=[],i=[];if(null!=n){const e=n.length;if(e%2>0)throw new Od("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");t.initialState=n,a.push(...n);const s=n.map((e=>new Dm({shape:e.shape})));this.forwardLayer.stateSpec=s.slice(0,e/2),this.backwardLayer.stateSpec=s.slice(e/2),i.push(...s)}if(null!=s)throw new Md("Support for constants in Bidirectional layers is not implemented yet.");const o=a[0]instanceof _m;for(const e of a)if(e instanceof _m!==o)throw new Od("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(o){const n=[e].concat(a),s=this.inputSpec.concat(i),r=this.inputSpec;this.inputSpec=s;const o=super.apply(n,t);return this.inputSpec=r,o}return super.apply(e,t)}call(e,t){return ri((()=>{const n=t.initialState;let s,r,a,i;if(null==n)s=this.forwardLayer.call(e,t),r=this.backwardLayer.call(e,t);else{const a=n.slice(0,n.length/2),i=n.slice(n.length/2);s=this.forwardLayer.call(e,Object.assign(t,{initialState:a})),r=this.backwardLayer.call(e,Object.assign(t,{initialState:i}))}return this.returnState&&(Array.isArray(s)&&(a=s.slice(1).concat(r.slice(1))),s=s[0],r=r[0]),this.returnSequences&&(r=xu(r,1)),"concat"===this.mergeMode?i=Pf([s,r]):"sum"===this.mergeMode?i=ci(s,r):"ave"===this.mergeMode?i=di(.5,ci(s,r)):"mul"===this.mergeMode?i=di(s,r):null==this.mergeMode&&(i=[s,r]),this.returnState?null==this.mergeMode?i.concat(a):[i].concat(a):i}))}resetStates(e){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(e){Cf(this.forwardLayer.name,(()=>{this.forwardLayer.build(e)})),Cf(this.backwardLayer.name,(()=>{this.backwardLayer.build(e)})),this.built=!0}computeMask(e,t){let n;if(Array.isArray(t)&&(t=t[0]),n=this.returnSequences?null==this.mergeMode?[t,t]:t:null==this.mergeMode?[null,null]:null,this.returnState){const e=this.forwardLayer.states.map((e=>null));return Array.isArray(n)?n.concat(e).concat(e):[n].concat(e).concat(e)}return n}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(e),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(e)}getConfig(){const e={mergeMode:this.mergeMode},t=super.getConfig();return Object.assign(e,t),e}static fromConfig(e,t){const n=Qm(t.layer);if(delete t.layer,null!=t.numConstants)throw new Md("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const s=t;return s.layer=n,new e(s)}}function bx(e){return new nx(e)}function xx(e){return new ax(e)}function wx(e){return new lx(e)}function kx(e){return new hx(e)}function vx(e){return new fx(e)}function Nx(e){return new tx(e)}function Ix(e){return new rx(e)}yx.className="Bidirectional",qa(yx);const Cx=kx,$x=vx,Sx=Nx,Tx=Ix;var Ex=Object.freeze({__proto__:null,inputLayer:function(e){return new Pm(e)},elu:function(e){return new Py(e)},reLU:function(e){return new Ly(e)},leakyReLU:function(e){return new zy(e)},prelu:function(e){return new By(e)},softmax:function(e){return new Vy(e)},thresholdedReLU:function(e){return new Wy(e)},conv1d:function(e){return new ab(e)},conv2d:function(e){return new Qy(e)},conv2dTranspose:function(e){return new tb(e)},conv3d:function(e){return new eb(e)},conv3dTranspose:function(e){return new nb(e)},separableConv2d:function(e){return new rb(e)},cropping2D:function(e){return new ib(e)},upSampling2d:function(e){return new ob(e)},depthwiseConv2d:function(e){return new lb(e)},activation:function(e){return new Eb(e)},dense:function(e){return new Sb(e)},dropout:function(e){return new Cb(e)},spatialDropout1d:function(e){return new $b(e)},flatten:function(e){return new Tb(e)},repeatVector:function(e){return new Ab(e)},reshape:function(e){return new Rb(e)},permute:function(e){return new Fb(e)},embedding:function(e){return new _b(e)},add:function(e){return new Mb(e)},average:function(e){return new zb(e)},concatenate:function(e){return new Wb(e)},maximum:function(e){return new Bb(e)},minimum:function(e){return new Pb(e)},multiply:function(e){return new Lb(e)},dot:function(e){return new Ub(e)},batchNormalization:function(e){return new Xb(e)},layerNormalization:function(e){return new Yb(e)},zeroPadding2d:function(e){return new Jb(e)},averagePooling1d:bx,avgPool1d:function(e){return bx(e)},avgPooling1d:function(e){return bx(e)},averagePooling2d:xx,avgPool2d:function(e){return xx(e)},avgPooling2d:function(e){return xx(e)},averagePooling3d:wx,avgPool3d:function(e){return wx(e)},avgPooling3d:function(e){return wx(e)},globalAveragePooling1d:function(e){return new cx(e)},globalAveragePooling2d:function(e){return new dx(e)},globalMaxPooling1d:kx,globalMaxPooling2d:vx,maxPooling1d:Nx,maxPooling2d:Ix,maxPooling3d:function(e){return new ox(e)},gru:function(e){return new gb(e)},gruCell:function(e){return new mb(e)},lstm:function(e){return new bb(e)},lstmCell:function(e){return new yb(e)},simpleRNN:function(e){return new fb(e)},simpleRNNCell:function(e){return new db(e)},convLstm2d:function(e){return new Ib(e)},convLstm2dCell:function(e){return new Nb(e)},rnn:function(e){return new hb(e)},stackedRNNCells:function(e){return new xb(e)},bidirectional:function(e){return new yx(e)},timeDistributed:function(e){return new gx(e)},globalMaxPool1d:Cx,globalMaxPool2d:$x,maxPool1d:Sx,maxPool2d:Tx,Layer:zm,RNN:hb,RNNCell:pb,input:py,gaussianNoise:function(e){return new Gb(e)},gaussianDropout:function(e){return new Hb(e)},alphaDropout:function(e){return new jb(e)},masking:function(e){return new Db(e)}});var Ax=Object.freeze({__proto__:null,binaryAccuracy:function(e,t){return pg(e,t)},binaryCrossentropy:function(e,t){return yg(e,t)},sparseCategoricalAccuracy:function(e,t){return bg(e,t)},categoricalAccuracy:function(e,t){return dg(e,t)},categoricalCrossentropy:function(e,t){return xg(e,t)},precision:function(e,t){return mg(e,t)},recall:function(e,t){return gg(e,t)},cosineProximity:function(e,t){return ug(e,t)},meanAbsoluteError:function(e,t){return ng(e,t)},meanAbsolutePercentageError:function(e,t){return sg(e,t)},MAPE:function(e,t){return sg(e,t)},mape:function(e,t){return sg(e,t)},meanSquaredError:function(e,t){return tg(e,t)},MSE:function(e,t){return tg(e,t)},mse:function(e,t){return tg(e,t)}}),Rx=Object.freeze({__proto__:null,modelFromJSON:async function(e,t){"modelTopology"in e||(e={modelTopology:e});let n=(e=e).modelTopology;null!=n.model_config&&(n=n.model_config);const s=Qm(Fg(n),t);if(null!=e.weightsManifest){const t=await ta(e.weightsManifest,e.pathPrefix,s.weights.map((e=>e.originalName))),n={};for(const e of s.weights)n[e.originalName]=t[e.originalName];s.loadWeights(n),ai(t)}return s}});var Fx=Object.freeze({__proto__:null,l1l2:function(e){return new Fy(e)},l1:function(e){return Ay(t=e),new Fy({l1:null!=t?t.l1:null,l2:0});var t},l2:function(e){return Ay(t=e),new Fy({l2:null!=t?t.l2:null,l1:0});var t}});class Dx extends Hm{constructor(){super(...arguments),this.model=null}setModel(e){if(!(e instanceof ly))throw new Error("model must be a LayersModel, not some other Container");this.model=e}}function _x(e,t){return e<t}function Ox(e,t){return e>t}class Mx extends Dx{constructor(e){if(super(),null==e&&(e={}),e.restoreBestWeights)throw new Md("restoreBestWeights = True is not implemented in EarlyStopping yet.");this.monitor=e.monitor||"val_loss",this.minDelta=Math.abs(e.minDelta||0),this.patience=e.patience||0,this.verbose=e.verbose||0,this.mode=e.mode||"auto",this.baseline=e.baseline,-1===["auto","min","max"].indexOf(this.mode)&&(console.warn(`EarlyStopping mode '${this.mode}' is invalid. Falling back to mode 'auto'.`),this.mode="auto"),"min"===this.mode?this.monitorFunc=_x:"max"===this.mode||-1!==this.monitor.indexOf("acc")?this.monitorFunc=Ox:this.monitorFunc=_x,this.monitorFunc===_x&&(this.minDelta*=-1)}async onTrainBegin(e){this.wait=0,this.stoppedEpoch=0,null!=this.baseline?this.best=this.baseline:this.best=this.monitorFunc===_x?1/0:-1/0}async onEpochEnd(e,t){await Vm(t);const n=this.getMonitorValue(t);null!=n&&(this.monitorFunc(n-this.minDelta,this.best)?(this.best=n,this.wait=0):(this.wait++,this.wait>=this.patience&&(this.stoppedEpoch=e,this.model.stopTraining=!0)))}async onTrainEnd(e){this.stoppedEpoch>0&&this.verbose&&console.log(`Epoch ${this.stoppedEpoch}: early stopping.`)}getMonitorValue(e){null==e&&(e={});const t=e[this.monitor];return null==t&&console.warn(`Metric for EarlyStopping ${this.monitor} is not available. Available metrics are: ${Object.keys(e)}`),t}}const Lx={earlyStopping:function(e){return new Mx(e)}};var zx,Bx;!function(e){e[e.DT_INVALID=0]="DT_INVALID",e[e.DT_FLOAT=1]="DT_FLOAT",e[e.DT_DOUBLE=2]="DT_DOUBLE",e[e.DT_INT32=3]="DT_INT32",e[e.DT_UINT8=4]="DT_UINT8",e[e.DT_INT16=5]="DT_INT16",e[e.DT_INT8=6]="DT_INT8",e[e.DT_STRING=7]="DT_STRING",e[e.DT_COMPLEX64=8]="DT_COMPLEX64",e[e.DT_INT64=9]="DT_INT64",e[e.DT_BOOL=10]="DT_BOOL",e[e.DT_QINT8=11]="DT_QINT8",e[e.DT_QUINT8=12]="DT_QUINT8",e[e.DT_QINT32=13]="DT_QINT32",e[e.DT_BFLOAT16=14]="DT_BFLOAT16",e[e.DT_FLOAT_REF=101]="DT_FLOAT_REF",e[e.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",e[e.DT_INT32_REF=103]="DT_INT32_REF",e[e.DT_UINT8_REF=104]="DT_UINT8_REF",e[e.DT_INT16_REF=105]="DT_INT16_REF",e[e.DT_INT8_REF=106]="DT_INT8_REF",e[e.DT_STRING_REF=107]="DT_STRING_REF",e[e.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",e[e.DT_INT64_REF=109]="DT_INT64_REF",e[e.DT_BOOL_REF=110]="DT_BOOL_REF",e[e.DT_QINT8_REF=111]="DT_QINT8_REF",e[e.DT_QUINT8_REF=112]="DT_QUINT8_REF",e[e.DT_QINT32_REF=113]="DT_QINT32_REF",e[e.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF"}(zx||(zx={})),function(e){let t;!function(e){e[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"}(t=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))}(Bx||(Bx={}));const Px={};function Wx(e){return Px[e]}function Vx(e,t,n,s,r){const a=t.inputParams[e];if(a&&void 0!==a.inputIndexStart){const e=a.inputIndexStart,i=0===a.inputIndexEnd?void 0:void 0===a.inputIndexEnd?e+1:a.inputIndexEnd;if("tensor"===a.type)return Ux(t.inputNames[a.inputIndexStart],n,s,r);if("tensors"===a.type){return t.inputNames.slice(e,i).map((e=>Ux(e,n,s,r)))}const o=Ux(t.inputNames.slice(e)[0],n,s,r),l=o.dataSync();return"number"===a.type?l[0]:L(o.shape,l)}const i=t.attrParams[e];return i&&i.value}function Ux(e,t,n,s){const[r,a]=jx(e);if(null!=s){const e=s.getHashTableHandleByName(r);if(null!=e)return e}const i=n.currentContextIds.find((e=>!!t[Hx(r,e)]));return void 0!==i?t[Hx(r,i)][a]:void 0}function Gx(e,t){const[n,s]=jx(e);return[Hx(n,t&&t.currentContextId),s]}function Hx(e,t){return t?`${e}-${t}`:e}function jx(e){const t=e.split(":");if(1===t.length)return[e,0];return[t[0],Number(t[t.length-1])]}function qx(e,t,n){let s=Vx("pad",e,t,n);if("explicit"===s){s=Vx("explicitPaddings",e,t,n);const r=[[0,0],[0,0],[0,0],[0,0]];for(let e=0;e<4;e++)r[e][0]=s[2*e],r[e][1]=s[2*e+1];return r}return s}function Kx(e){return e.kept?e:Kr(e)}var Xx=Object.freeze({__proto__:null,json:[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]});var Yx=Object.freeze({__proto__:null,json:[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]});var Jx=Object.freeze({__proto__:null,json:[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]}]});var Zx=Object.freeze({__proto__:null,json:[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number"}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}]});var Qx=Object.freeze({__proto__:null,json:[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}]});var ew=Object.freeze({__proto__:null,json:[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]});var tw=Object.freeze({__proto__:null,json:[{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}]});var nw=Object.freeze({__proto__:null,json:[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}]});var sw=Object.freeze({__proto__:null,json:[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]}]});var rw=Object.freeze({__proto__:null,json:[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]}]});var aw=Object.freeze({__proto__:null,json:[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]});var iw=Object.freeze({__proto__:null,json:[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]}]});var ow=Object.freeze({__proto__:null,json:[{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}]});var lw=Object.freeze({__proto__:null,json:[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}]});var uw=Object.freeze({__proto__:null,json:[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}]});var cw=Object.freeze({__proto__:null,json:[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}]});var hw=Object.freeze({__proto__:null,json:[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]}]});class pw{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const e=[].concat(...[Xx,Yx,Jx,Zx,Qx,ew,tw,aw,rw,nw,iw,ow,lw,uw,cw,hw,sw].map((e=>e.json)));this.opMappers=e.reduce(((e,t)=>(e[t.tfOpName]=t,e)),{})}transformGraph(e,t={}){const n=e.node,s=[],r=[],a=[],i=n.reduce(((e,t)=>(e[t.name]=this.mapNode(t),t.op.startsWith("Placeholder")?s.push(e[t.name]):"Const"===t.op?r.push(e[t.name]):null!=t.input&&0!==t.input.length||a.push(e[t.name]),e)),{});let o=[];const l=[];let u={},c={};null!=t&&(u=this.mapSignatureEntries(t.inputs),c=this.mapSignatureEntries(t.outputs));const h=Object.keys(i);h.forEach((e=>{const t=i[e];t.inputNames.forEach((e=>{const[n]=Gx(e);t.inputs.push(i[n]),i[n].children.push(t)}))})),0===Object.keys(c).length?h.forEach((e=>{const t=i[e];0===t.children.length&&l.push(t)})):Object.keys(c).forEach((e=>{const[t]=Gx(e),n=i[t];null!=n&&(n.signatureKey=c[e],l.push(n))})),Object.keys(u).length>0?Object.keys(u).forEach((e=>{const[t]=Gx(e),n=i[t];n&&(n.signatureKey=u[e],o.push(n))})):o=s;let p={};null!=e.library&&null!=e.library.function&&(p=e.library.function.reduce(((e,t)=>(e[t.signature.name]=this.mapFunction(t),e)),{}));const d={nodes:i,inputs:o,outputs:l,weights:r,placeholders:s,signature:t,functions:p};return a.length>0&&(d.initNodes=a),d}mapSignatureEntries(e){return Object.keys(e||{}).reduce(((t,n)=>(t[e[n].name]=n,t)),{})}mapNode(e){const t=Wx(e.op)||this.opMappers[e.op]||{};null==e.attr&&(e.attr={});const n={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map((e=>e.startsWith("^")?e.substr(1):e)),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr};return null!=t.inputs&&(n.inputParams=t.inputs.reduce(((e,t)=>(e[t.name]={type:t.type,inputIndexStart:t.start,inputIndexEnd:t.end},e)),{})),null!=t.attrs&&(n.attrParams=t.attrs.reduce(((t,n)=>{const s=n.type;let r;switch(n.type){case"string":r=fw(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=fw(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"string[]":r=Iw(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=Iw(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number":r=gw(e.attr,n.tfName,n.defaultValue||0),void 0===r&&n.tfDeprecatedName&&(r=gw(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number[]":r=Nw(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=Nw(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool":r=mw(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=mw(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool[]":r=$w(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=$w(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape":r=vw(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=vw(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape[]":r=Cw(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=Cw(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype":r=xw(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=xw(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype[]":r=ww(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=ww(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"func":r=bw(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=bw(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${n.type} for op: ${e.op}`)}return t[n.name]={value:r,type:s},t}),{})),n}mapFunction(e){const t=e.nodeDef,n=[];let s={};null!=t&&(s=t.reduce(((e,t)=>(e[t.name]=this.mapNode(t),"Const"===t.op&&n.push(e[t.name]),e)),{}));const r=[],a=[];e.signature.inputArg.forEach((e=>{const[t]=Gx(e.name),n={name:t,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:yw(e.type),type:"dtype"}},children:[]};n.signatureKey=e.name,r.push(n),s[t]=n}));Object.keys(s).forEach((e=>{const t=s[e];t.inputNames.forEach((e=>{const[n]=Gx(e);t.inputs.push(s[n]),s[n].children.push(t)}))}));const i=e.ret;e.signature.outputArg.forEach((e=>{const[t,n]=Gx(i[e.name]),r=s[t];null!=r&&(r.defaultOutput=n,a.push(r))}));const o=this.mapArgsToSignature(e);return{nodes:s,inputs:r,outputs:a,weights:n,placeholders:[],signature:o}}mapArgsToSignature(e){return{methodName:e.signature.name,inputs:e.signature.inputArg.reduce(((e,t)=>(e[t.name]=this.mapArgToTensorInfo(t),e)),{}),outputs:e.signature.outputArg.reduce(((t,n)=>(t[n.name]=this.mapArgToTensorInfo(n,e.ret),t)),{})}}mapArgToTensorInfo(e,t){let n=e.name;return null!=t&&(n=t[n]),{name:n,dtype:e.type}}}function dw(e,t){const n=Array.isArray(e)?String.fromCharCode.apply(null,e):function(e){const t=K().global;if(void 0!==t.atob)return t.atob(e);if("undefined"!=typeof Buffer)return new Buffer(e,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(e);return t?n:n.toLowerCase()}function fw(e,t,n,s=!1){const r=e[t];return null!=r?dw(r.s,s):n}function mw(e,t,n){const s=e[t];return s?s.b:n}function gw(e,t,n){const s=e[t]||{},r=null!=s.i?s.i:null!=s.f?s.f:n;return"number"==typeof r?r:parseInt(r,10)}function yw(e){switch("string"==typeof e&&(e=zx[e]),e){case zx.DT_FLOAT:return"float32";case zx.DT_INT32:case zx.DT_INT64:case zx.DT_INT8:case zx.DT_UINT8:return"int32";case zx.DT_BOOL:return"bool";case zx.DT_DOUBLE:return"float32";case zx.DT_STRING:return"string";default:return null}}function bw(e,t,n){const s=e[t];return s&&s.func?s.func.name:n}function xw(e,t,n){const s=e[t];return s&&s.type?yw(s.type):n}function ww(e,t,n){const s=e[t];return s&&s.list&&s.list.type?s.list.type.map((e=>yw(e))):n}function kw(e){if(!e.unknownRank)return null!=e.dim?e.dim.map((e=>"number"==typeof e.size?e.size:parseInt(e.size,10))):[]}function vw(e,t,n){const s=e[t];return s&&s.shape?kw(s.shape):n}function Nw(e,t,n){const s=e[t];return s?((s.list.f&&s.list.f.length?s.list.f:s.list.i)||[]).map((e=>"number"==typeof e?e:parseInt(e,10))):n}function Iw(e,t,n,s=!1){const r=e[t];return r&&r.list&&r.list.s?r.list.s.map((e=>dw(e,s))):n}function Cw(e,t,n){const s=e[t];return s&&s.list&&s.list.shape?s.list.shape.map((e=>kw(e))):n}function $w(e,t,n){const s=e[t];return s&&s.list&&s.list.b?s.list.b:n}class Sw{constructor(e,t,n){this.node=e,this.tensorMap=t,this.context=n,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map((e=>this.getInput(e))),null!=e.rawAttrs&&(this.attrs=Object.keys(e.rawAttrs).reduce(((e,t)=>(e[t]=this.getAttr(t),e)),{}))}getInput(e){return Ux(e,this.tensorMap,this.context)}getAttr(e,t){const n=this.node.rawAttrs[e];if(null!=n.tensor)return Ux(e,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return gw(this.node.rawAttrs,e,t);if(null!=n.s)return fw(this.node.rawAttrs,e,t);if(null!=n.b)return mw(this.node.rawAttrs,e,t);if(null!=n.shape)return vw(this.node.rawAttrs,e,t);if(null!=n.type)return xw(this.node.rawAttrs,e,t);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return Nw(this.node.rawAttrs,e,t);if(null!=n.list.s)return Iw(this.node.rawAttrs,e,t);if(null!=n.list.shape)return Cw(this.node.rawAttrs,e,t);if(null!=n.list.b)return $w(this.node.rawAttrs,e,t);if(null!=n.list.type)return ww(this.node.rawAttrs,e,t)}return t}}function Tw(e,t,n=""){if("number"!=typeof e&&"number"!=typeof t){l(e.length===t.length,(()=>n+` Shapes ${e} and ${t} must match`));for(let s=0;s<e.length;s++){const r=e[s],a=t[s];l(r<0||a<0||r===a,(()=>n+` Shapes ${e} and ${t} must match`))}}}function Ew(e){return"number"!=typeof e&&!e.some((e=>e<0))}function Aw(e,t,n){let s=Rw(e,n);const r=!Ew(s);if(r&&0===t.length)throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${s}`);if(r&&t.forEach((e=>{s=Rw(e.shape,s)})),!Ew(s))throw new Error(`Non-fully-defined elementShape: ${s}`);return s}function Rw(e,t){if("number"==typeof e)return t;if("number"==typeof t)return e;if(e.length!==t.length)throw new Error(`Incompatible ranks during merge: ${e} vs. ${t}`);const n=[];for(let s=0;s<e.length;++s){const r=e[s],a=t[s];if(r>=0&&a>=0&&r!==a)throw new Error(`Incompatible shape during merge: ${e} vs. ${t}`);n[s]=r>=0?r:a}return n}class Fw{constructor(e,t,n,s,r,a,i){this.name=e,this.dtype=t,this.maxSize=n,this.elementShape=s,this.identicalElementShapes=r,this.dynamicSize=a,this.clearAfterRead=i,this.tensors=[],this.closed_=!1,this.idTensor=$u(0),ii(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.tensor.id)||t.tensor.dispose()})),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||e>=this.size())throw new Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);const t=this.tensors[e];if(t.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor}readMany(e){return e.map((e=>this.read(e)))}write(e,t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||!this.dynamicSize&&e>=this.maxSize)throw new Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);const n=this.tensors[e]||{};if(t.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},\n          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=t.shape),Tw(this.elementShape,t.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${e}.`),n.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);if(n.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);n.tensor=t,ii(t),n.written=!0,this.tensors[e]=n}writeMany(e,t){if(e.length!==t.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`);e.forEach(((e,n)=>this.write(e,t[n])))}gather(e,t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`);if(e)e=e.slice(0,this.size());else{e=[];for(let t=0;t<this.size();t++)e.push(t)}if(0===e.length)return rr([],[0].concat(this.elementShape));const n=this.readMany(e);return Tw(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),ju(n,0)}concat(e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);if(0===this.size())return rr([],[0].concat(this.elementShape));const t=[];for(let e=0;e<this.size();e++)t.push(e);const n=this.readMany(t);return Tw(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),Ui(n,0)}scatter(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);const n=Math.max(...e);if(!this.dynamicSize&&n>=this.maxSize)throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(e,nc(t,0))}split(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);let n=0;const s=e.map((e=>(n+=e,n)));if(n!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${t.shape}`);if(!this.dynamicSize&&e.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);const r=0===n?0:t.size/n,a=[];ri((()=>{t=Pi(t,[1,n,r]);for(let n=0;n<e.length;++n){const i=[0,0===n?0:s[n-1],0],o=[1,e[n],r];a[n]=Pi(Hi(t,i,o),this.elementShape)}return a}));const i=[];for(let t=0;t<e.length;t++)i[t]=t;this.writeMany(i,a)}}class Dw{constructor(e,t,n,s=-1){this.tensors=e,this.elementShape=t,this.elementDtype=n,null!=e&&e.forEach((e=>{if(n!==e.dtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${e.dtype}`);Tw(t,e.shape,"TensorList shape mismatch: "),ii(e)})),this.idTensor=$u(0),this.maxNumElements=s,ii(this.idTensor)}get id(){return this.idTensor.id}copy(){return new Dw([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.id)||t.dispose()})),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(e,t,n=-1){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(-1!==n&&this.tensors.length!==n)throw new Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);Tw(e,this.elementShape,"TensorList shape mismatch: ");const s=Aw(this.elementShape,this.tensors,e);return ri((()=>{const e=this.tensors.map((e=>Pi(e,s)));return ju(e,0)}))}popBack(e,t){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const n=Aw(this.elementShape,this.tensors,e),s=this.tensors.pop();return Tw(s.shape,e,"TensorList shape mismatch: "),Pi(s,n)}pushBack(e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(Tw(e.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");ii(e),this.tensors.push(e)}resize(e){if(e<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${e}`);if(-1!==this.maxNumElements&&e>this.maxNumElements)throw new Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);this.tensors.length=e}getItem(e,t,n){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(e<0||e>this.tensors.length)throw new Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[e])throw new Error(`element at index ${e} is null.`);Tw(this.tensors[e].shape,t,"TensorList shape mismatch: ");const s=Aw(this.elementShape,this.tensors,t);return Pi(this.tensors[e],s)}setItem(e,t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(e<0||-1!==this.maxNumElements&&e>=this.maxNumElements)throw new Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);Tw(this.elementShape,t.shape,"TensorList shape mismatch: "),ii(t),this.tensors[e]=t}gather(e,t,n){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);Tw(this.elementShape,n,"TensorList shape mismatch: "),e=e.slice(0,this.size());const s=Aw(this.elementShape,this.tensors,n);return 0===e.length?rr([],[0].concat(s)):ri((()=>{const t=e.map((e=>Pi(this.tensors[e],s)));return ju(t,0)}))}concat(e,t){if(e&&e!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);Tw(this.elementShape,t,"TensorList shape mismatch: ");const n=Aw(this.elementShape,this.tensors,t);return 0===this.size()?rr([],[0].concat(n)):ri((()=>{const e=this.tensors.map((e=>Pi(e,n)));return Ui(e,0)}))}}const _w=async(e,t,n)=>{switch(e.op){case"If":case"StatelessIf":{const s=Vx("thenBranch",e,t,n),r=Vx("elseBranch",e,t,n),a=Vx("cond",e,t,n),i=Vx("args",e,t,n);return(await a.data())[0]?n.functionMap[s].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap):n.functionMap[r].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap)}case"While":case"StatelessWhile":{const s=Vx("body",e,t,n),r=Vx("cond",e,t,n),a=Vx("args",e,t,n),i=await n.functionMap[r].executeFunctionAsync(a,n.tensorArrayMap,n.tensorListMap),o=a.map((e=>e.id));let l=await i[0].data();i.forEach((e=>{e.kept||-1!==o.indexOf(e.id)||e.dispose()}));let u=a;for(;l[0];){const e=u;u=await n.functionMap[s].executeFunctionAsync(u,n.tensorArrayMap,n.tensorListMap);const t=u.map((e=>e.id));e.forEach((e=>{e.kept||-1!==o.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}));const a=await n.functionMap[r].executeFunctionAsync(u,n.tensorArrayMap,n.tensorListMap);l=await a[0].data(),a.forEach((e=>{e.kept||-1!==o.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}))}return u}case"LoopCond":return[Kx(Vx("pred",e,t,n))];case"Switch":{const s=Vx("pred",e,t,n);let r=Vx("data",e,t,n);return r.kept||(r=Kx(r)),(await s.data())[0]?[void 0,r]:[r,void 0]}case"Merge":{const s=e.inputNames.find((e=>void 0!==Ux(e,t,n)));if(s){return[Kx(Ux(s,t,n))]}return}case"Enter":{const s=Vx("frameName",e,t,n),r=Vx("tensor",e,t,n);return n.enterFrame(s),[Kx(r)]}case"Exit":{const s=Vx("tensor",e,t,n);return n.exitFrame(),[Kx(s)]}case"NextIteration":{const s=Vx("tensor",e,t,n);return n.nextIteration(),[Kx(s)]}case"TensorArrayV3":{const s=Vx("size",e,t,n),r=Vx("dtype",e,t,n),a=Vx("elementShape",e,t,n),i=Vx("dynamicSize",e,t,n),o=Vx("clearAfterRead",e,t,n),l=Vx("identicalElementShapes",e,t,n),u=Vx("name",e,t,n),c=new Fw(u,r,s,a,l,i,o);return n.addTensorArray(c),[c.idTensor,$u(1)]}case"TensorArrayWriteV3":{const s=Vx("tensorArrayId",e,t,n),r=Vx("index",e,t,n),a=Vx("tensor",e,t,n),i=n.getTensorArray(s.id);return i.write(r,a),[i.idTensor]}case"TensorArrayReadV3":{const s=Vx("tensorArrayId",e,t,n),r=Vx("index",e,t,n);return[n.getTensorArray(s.id).read(r)]}case"TensorArrayGatherV3":{const s=Vx("tensorArrayId",e,t,n),r=Vx("indices",e,t,n),a=Vx("dtype",e,t,n);return[n.getTensorArray(s.id).gather(r,a)]}case"TensorArrayScatterV3":{const s=Vx("tensorArrayId",e,t,n),r=Vx("indices",e,t,n),a=Vx("tensor",e,t,n),i=n.getTensorArray(s.id);return i.scatter(r,a),[i.idTensor]}case"TensorArrayConcatV3":{const s=Vx("tensorArrayId",e,t,n),r=n.getTensorArray(s.id),a=Vx("dtype",e,t,n);return[r.concat(a)]}case"TensorArraySplitV3":{const s=Vx("tensorArrayId",e,t,n),r=Vx("tensor",e,t,n),a=Vx("lengths",e,t,n),i=n.getTensorArray(s.id);return i.split(a,r),[i.idTensor]}case"TensorArraySizeV3":{const s=Vx("tensorArrayId",e,t,n);return[$u(n.getTensorArray(s.id).size(),"int32")]}case"TensorArrayCloseV3":{const s=Vx("tensorArrayId",e,t,n),r=n.getTensorArray(s.id);return r.clearAndClose(),[r.idTensor]}case"TensorListSetItem":{const s=Vx("tensorListId",e,t,n),r=Vx("index",e,t,n),a=Vx("tensor",e,t,n),i=n.getTensorList(s.id);return i.setItem(r,a),[i.idTensor]}case"TensorListGetItem":{const s=Vx("tensorListId",e,t,n),r=Vx("index",e,t,n),a=Vx("elementShape",e,t,n),i=Vx("elementDType",e,t,n);return[n.getTensorList(s.id).getItem(r,a,i)]}case"TensorListScatterV2":case"TensorListScatter":{const s=Vx("indices",e,t,n),r=function(e,t,n,s){if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const r=Math.max(...t);if(null!=s&&-1!==s&&r>=s)throw new Error(`Max index must be < array size (${r}  vs. ${s})`);const a=new Dw([],n,e.dtype,s),i=nc(e,0);return t.forEach(((e,t)=>{a.setItem(e,i[t])})),a}(Vx("tensor",e,t,n),s,Vx("elementShape",e,t,n),Vx("numElements",e,t,n));return n.addTensorList(r),[r.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const s=Vx("elementShape",e,t,n),r=Vx("elementDType",e,t,n);let a;a="TensorListReserve"===e.op?"numElements":"maxNumElements";const i=function(e,t,n){return new Dw([],e,t,n)}(s,r,Vx(a,e,t,n));return n.addTensorList(i),[i.idTensor]}case"TensorListGather":{const s=Vx("tensorListId",e,t,n),r=Vx("indices",e,t,n),a=Vx("elementShape",e,t,n),i=Vx("elementDType",e,t,n);return[n.getTensorList(s.id).gather(r,i,a)]}case"TensorListStack":{const s=Vx("tensorListId",e,t,n),r=Vx("elementShape",e,t,n),a=Vx("elementDType",e,t,n),i=Vx("numElements",e,t,n);return[n.getTensorList(s.id).stack(r,a,i)]}case"TensorListFromTensor":{const s=function(e,t,n){const s=e.dtype;if(e.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${e.shape}`);if(e.dtype!==n)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${n}`);Tw(e.shape.slice(1),t,"TensorList shape mismatch: ");const r=nc(e);return new Dw(r,t,s)}(Vx("tensor",e,t,n),Vx("elementShape",e,t,n),Vx("elementDType",e,t,n));return n.addTensorList(s),[s.idTensor]}case"TensorListConcat":{const s=Vx("tensorListId",e,t,n),r=n.getTensorList(s.id),a=Vx("dtype",e,t,n),i=Vx("elementShape",e,t,n);return[r.concat(a,i)]}case"TensorListPushBack":{const s=Vx("tensorListId",e,t,n),r=Vx("tensor",e,t,n),a=n.getTensorList(s.id);return a.pushBack(r),[a.idTensor]}case"TensorListPopBack":{const s=Vx("tensorListId",e,t,n),r=Vx("elementShape",e,t,n),a=Vx("elementDType",e,t,n);return[n.getTensorList(s.id).popBack(r,a)]}case"TensorListSplit":{const s=Vx("tensor",e,t,n),r=Vx("elementShape",e,t,n),a=function(e,t,n){let s=0;const r=t.map((e=>(s+=e,s)));if(s!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${s}, and tensor's shape is: ${e.shape}`);const a=Rw(e.shape.slice(1),n),i=0===s?0:e.size/s,o=ri((()=>{const n=[];e=Pi(e,[1,s,i]);for(let s=0;s<t.length;++s){const o=[0,0===s?0:r[s-1],0],l=[1,t[s],i];n[s]=Pi(Hi(e,o,l),a)}return e.dispose(),n})),l=new Dw([],n,e.dtype,t.length);for(let e=0;e<o.length;e++)l.setItem(e,o[e]);return l}(s,Vx("lengths",e,t,n),r);return n.addTensorList(a),[a.idTensor]}default:throw TypeError(`Node type ${e.op} is not implemented`)}};function Ow(e,t,n){const[s,r]=Vx("fusedOps",e,t,n),a="biasadd"===s,i="prelu"===r,o="fusedbatchnorm"===s,l=Vx("numArgs",e,t,n);if(a){if(i&&2!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(o)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");const u=Vx("strides",e,t,n),c=qx(e,t,n),h=Vx("dataFormat",e,t,n).toUpperCase(),p=Vx("dilations",e,t,n),[d,f]=Vx("args",e,t,n);return{stride:u,pad:c,dataFormat:h,dilations:p,biasArg:d,preluArg:f,activationFunc:r,leakyreluAlpha:Vx("leakyreluAlpha",e,t,n)}}function Mw(e,t,n){return{boxes:Vx("boxes",e,t,n),scores:Vx("scores",e,t,n),maxOutputSize:Vx("maxOutputSize",e,t,n),iouThreshold:Vx("iouThreshold",e,t,n),scoreThreshold:Vx("scoreThreshold",e,t,n),softNmsSigma:Vx("softNmsSigma",e,t,n)}}class Lw{constructor(e,t){this.keyDType=e,this.valueDType=t,this.handle=$u(0),this.tensorMap=new Map,ii(this.handle)}get id(){return this.handle.id}clearAndClose(){this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return $u(this.size(),"int32")}async import(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),ri((()=>{const e=nc(t),s=n.length,r=e.length;l(s===r,(()=>`The number of elements doesn't match, keys has ${s} elements, the values has ${r} elements.`));for(let t=0;t<s;t++){const s=n[t],r=e[t];ii(r),this.tensorMap.set(s,r)}return this.handle}))}async find(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return ri((()=>{const e=[];for(let s=0;s<n.length;s++){const r=n[s],a=this.findWithDefault(r,t);e.push(a)}return ju(e)}))}findWithDefault(e,t){const n=this.tensorMap.get(e);return null!=n?n:t}checkKeyAndValueTensor(e,t){if(e.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${e.dtype}`);if(t.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${t.dtype}`)}}function zw(e,t,n,s){const r=((e,t,n)=>{switch(e.category){case"arithmetic":return ri((()=>((e,t,n)=>{switch(e.op){case"BiasAdd":case"AddV2":case"Add":return[ci(Vx("a",e,t,n),Vx("b",e,t,n))];case"AddN":return[yi(Vx("tensors",e,t,n))];case"FloorMod":case"Mod":return[_l(Vx("a",e,t,n),Vx("b",e,t,n))];case"Mul":return[di(Vx("a",e,t,n),Vx("b",e,t,n))];case"RealDiv":case"Div":return[pi(Vx("a",e,t,n),Vx("b",e,t,n))];case"DivNoNan":return[Eo(Vx("a",e,t,n),Vx("b",e,t,n))];case"FloorDiv":return[hi(Vx("a",e,t,n),Vx("b",e,t,n))];case"Sub":return[ll(Vx("a",e,t,n),Vx("b",e,t,n))];case"Minimum":return[Fl(Vx("a",e,t,n),Vx("b",e,t,n))];case"Maximum":return[Sl(Vx("a",e,t,n),Vx("b",e,t,n))];case"Pow":return[Xl(Vx("a",e,t,n),Vx("b",e,t,n))];case"SquaredDifference":return[Gu(Vx("a",e,t,n),Vx("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"basic_math":return ri((()=>((e,t,n)=>{switch(e.op){case"Abs":case"ComplexAbs":return[fi(Vx("x",e,t,n))];case"Acos":return[mi(Vx("x",e,t,n))];case"Acosh":return[gi(Vx("x",e,t,n))];case"Asin":return[vi(Vx("x",e,t,n))];case"Asinh":return[Ni(Vx("x",e,t,n))];case"Atan":return[Ii(Vx("x",e,t,n))];case"Atan2":return[Ci(Vx("x",e,t,n),Vx("y",e,t,n))];case"Atanh":return[$i(Vx("x",e,t,n))];case"Ceil":return[to(Vx("x",e,t,n))];case"Complex":return[nr(Vx("real",e,t,n),Vx("imag",e,t,n))];case"Cos":return[mo(Vx("x",e,t,n))];case"Cosh":return[go(Vx("x",e,t,n))];case"Elu":return[Fo(Vx("x",e,t,n))];case"Erf":return[Do(Vx("x",e,t,n))];case"Exp":return[_o(Vx("x",e,t,n))];case"Expm1":return[Mo(Vx("x",e,t,n))];case"Floor":return[Po(Vx("x",e,t,n))];case"Log":return[Qo(Vx("x",e,t,n))];case"Log1p":return[el(Vx("x",e,t,n))];case"Imag":return[Go(Vx("x",e,t,n))];case"Neg":return[rl(Vx("x",e,t,n))];case"Reciprocal":return[gu(Vx("x",e,t,n))];case"Real":return[mu(Vx("x",e,t,n))];case"Relu":return[yu(Vx("x",e,t,n))];case"Round":return[Iu(Vx("x",e,t,n))];case"Selu":return[Su(Vx("x",e,t,n))];case"Sigmoid":return[Gi(Vx("x",e,t,n))];case"Sin":return[Ru(Vx("x",e,t,n))];case"Sign":return[Au(Vx("x",e,t,n))];case"Sinh":return[Fu(Vx("x",e,t,n))];case"Softplus":return[al(Vx("x",e,t,n))];case"Sqrt":return[Uu(Vx("x",e,t,n))];case"Square":return[Ol(Vx("x",e,t,n))];case"Tanh":return[ji(Vx("x",e,t,n))];case"Tan":return[Xu(Vx("x",e,t,n))];case"ClipByValue":return[no(Vx("x",e,t,n),Vx("clipValueMin",e,t,n),Vx("clipValueMax",e,t,n))];case"Relu6":return[bu(Vx("x",e,t,n))];case"Rsqrt":return[Cu(Ux(e.inputNames[0],t,n))];case"Prod":return[Jl(Vx("x",e,t,n),Vx("axes",e,t,n))];case"LeakyRelu":return[Ko(Vx("x",e,t,n),Vx("alpha",e,t,n))];case"Prelu":return[Yl(Vx("x",e,t,n),Vx("alpha",e,t,n))];case"IsNan":return[qo(Ux(e.inputNames[0],t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"control":return _w(e,t,n);case"convolution":return ri((()=>((e,t,n)=>{switch(e.op){case"Conv1D":{const s=Vx("stride",e,t,n),r=Vx("pad",e,t,n),a=Vx("dataFormat",e,t,n).toUpperCase(),i=Vx("dilation",e,t,n);return[lo(Vx("x",e,t,n),Vx("filter",e,t,n),s,r,a,i)]}case"Conv2D":{const s=Vx("strides",e,t,n),r=qx(e,t,n),a=Vx("dataFormat",e,t,n).toUpperCase(),i=Vx("dilations",e,t,n);return[oo(Vx("x",e,t,n),Vx("filter",e,t,n),[s[1],s[2]],r,a,[i[1],i[2]])]}case"_FusedConv2D":{const{stride:s,pad:r,dataFormat:a,dilations:i,biasArg:o,preluArg:l,activationFunc:u,leakyreluAlpha:c}=Ow(e,t,n);return[vc({x:Vx("x",e,t,n),filter:Vx("filter",e,t,n),strides:[s[1],s[2]],pad:r,dataFormat:a,dilations:[i[1],i[2]],bias:o,activation:u,preluActivationWeights:l,leakyreluAlpha:c})]}case"FusedDepthwiseConv2dNative":{const{stride:s,pad:r,dataFormat:a,dilations:i,biasArg:o,preluArg:l,activationFunc:u,leakyreluAlpha:c}=Ow(e,t,n);return[Cc({x:Vx("x",e,t,n),filter:Vx("filter",e,t,n),strides:[s[1],s[2]],pad:r,dataFormat:a,dilations:[i[1],i[2]],bias:o,activation:u,preluActivationWeights:l,leakyreluAlpha:c})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const s=Vx("outputShape",e,t,n),r=Vx("strides",e,t,n),a=qx(e,t,n);return[co(Vx("x",e,t,n),Vx("filter",e,t,n),s,[r[1],r[2]],a)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const s=Vx("strides",e,t,n),r=qx(e,t,n),a=Vx("dilations",e,t,n),i=Vx("dataFormat",e,t,n).toUpperCase();return[wo(Vx("input",e,t,n),Vx("filter",e,t,n),[s[1],s[2]],r,i,[a[1],a[2]])]}case"Conv3D":{const s=Vx("strides",e,t,n),r=Vx("pad",e,t,n),a=Vx("dataFormat",e,t,n).toUpperCase(),i=Vx("dilations",e,t,n);return[ho(Vx("x",e,t,n),Vx("filter",e,t,n),[s[1],s[2],s[3]],r,a,[i[1],i[2],i[3]])]}case"AvgPool":{const s=Vx("strides",e,t,n),r=Vx("pad",e,t,n),a=Vx("kernelSize",e,t,n);return[Wi(Vx("x",e,t,n),[a[1],a[2]],[s[1],s[2]],r)]}case"MaxPool":{const s=Vx("strides",e,t,n),r=Vx("pad",e,t,n),a=Vx("kernelSize",e,t,n);return[Il(Vx("x",e,t,n),[a[1],a[2]],[s[1],s[2]],r)]}case"MaxPoolWithArgmax":{const s=Vx("strides",e,t,n),r=Vx("pad",e,t,n),a=Vx("kernelSize",e,t,n),i=Vx("includeBatchInIndex",e,t,n),{result:o,indexes:l}=$l(Vx("x",e,t,n),[a[1],a[2]],[s[1],s[2]],r,i);return[o,l]}case"AvgPool3D":{const s=Vx("strides",e,t,n),r=Vx("pad",e,t,n),a=Vx("kernelSize",e,t,n);return[Vi(Vx("x",e,t,n),[a[1],a[2],a[3]],[s[1],s[2],s[3]],r)]}case"MaxPool3D":{const s=Vx("strides",e,t,n),r=Vx("pad",e,t,n),a=Vx("kernelSize",e,t,n);return[Cl(Vx("x",e,t,n),[a[1],a[2],a[3]],[s[1],s[2],s[3]],r)]}case"Dilation2D":{const s=Vx("strides",e,t,n),r=Vx("pad",e,t,n),a=Vx("dilations",e,t,n),i=s[1],o=s[2],l=a[1],u=a[2];return[vo(Vx("x",e,t,n),Vx("filter",e,t,n),[i,o],r,[l,u],"NHWC")]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"creation":return ri((()=>((e,t,n)=>{switch(e.op){case"Fill":{const s=Vx("shape",e,t,n),r=Vx("dtype",e,t,n);return[Bo(s,Vx("value",e,t,n),r)]}case"LinSpace":return[Jo(Vx("start",e,t,n),Vx("stop",e,t,n),Vx("num",e,t,n))];case"Multinomial":{const s=Vx("logits",e,t,n),r=Vx("numSamples",e,t,n),a=Vx("seed",e,t,n);return[zl(s,r,a)]}case"OneHot":{const s=Vx("indices",e,t,n),r=Vx("depth",e,t,n),a=Vx("onValue",e,t,n),i=Vx("offValue",e,t,n);return[pa(s,r,a,i)]}case"Ones":return[Al(Vx("shape",e,t,n),Vx("dtype",e,t,n))];case"OnesLike":return[Pl(Vx("x",e,t,n))];case"RandomUniform":return[du(Vx("shape",e,t,n),Vx("minval",e,t,n),Vx("maxval",e,t,n),Vx("dtype",e,t,n))];case"Range":return[fu(Vx("start",e,t,n),Vx("stop",e,t,n),Vx("step",e,t,n),Vx("dtype",e,t,n))];case"TruncatedNormal":{const s=Vx("shape",e,t,n),r=Vx("mean",e,t,n),a=Vx("stdDev",e,t,n),i=Vx("seed",e,t,n);return[Qu(s,r,a,Vx("dtype",e,t,n),i)]}case"Zeros":return[El(Vx("shape",e,t,n),Vx("dtype",e,t,n))];case"ZerosLike":return[To(Vx("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"dynamic":return(async(e,t,n)=>{switch(e.op){case"NonMaxSuppressionV5":{const{boxes:s,scores:r,maxOutputSize:a,iouThreshold:i,scoreThreshold:o,softNmsSigma:l}=Mw(e,t,n),u=await gh.nonMaxSuppressionWithScoreAsync(s,r,a,i,o,l);return[u.selectedIndices,u.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:s,scores:r,maxOutputSize:a,iouThreshold:i,scoreThreshold:o}=Mw(e,t,n),l=Vx("padToMaxOutputSize",e,t,n),u=await gh.nonMaxSuppressionPaddedAsync(s,r,a,i,o,l);return[u.selectedIndices,u.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:s,scores:r,maxOutputSize:a,iouThreshold:i,scoreThreshold:o}=Mw(e,t,n);return[await gh.nonMaxSuppressionAsync(s,r,a,i,o)]}case"Where":{const s=qr(Vx("condition",e,t,n),"bool"),r=[await ac(s)];return s.dispose(),r}case"ListDiff":return Eu(Vx("x",e,t,n),Vx("y",e,t,n));default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n);case"evaluation":return ri((()=>((e,t,n)=>{switch(e.op){case"TopKV2":{const s=Vx("x",e,t,n),r=Vx("k",e,t,n),a=Vx("sorted",e,t,n),i=Zu(s,r,a);return[i.values,i.indices]}case"Unique":{const s=Vx("x",e,t,n),r=ec(s);return[r.values,r.indices]}case"UniqueV2":{const s=Vx("x",e,t,n),r=Vx("axis",e,t,n),a=ec(s,r);return[a.values,a.indices]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"image":return ri((()=>((e,t,n)=>{switch(e.op){case"ResizeBilinear":{const s=Vx("images",e,t,n),r=Vx("size",e,t,n),a=Vx("alignCorners",e,t,n),i=Vx("halfPixelCenters",e,t,n);return[gh.resizeBilinear(s,[r[0],r[1]],a,i)]}case"ResizeNearestNeighbor":{const s=Vx("images",e,t,n),r=Vx("size",e,t,n),a=Vx("alignCorners",e,t,n),i=Vx("halfPixelCenters",e,t,n);return[gh.resizeNearestNeighbor(s,[r[0],r[1]],a,i)]}case"CropAndResize":{const s=Vx("image",e,t,n),r=Vx("boxes",e,t,n),a=Vx("boxInd",e,t,n),i=Vx("cropSize",e,t,n),o=Vx("method",e,t,n),l=Vx("extrapolationValue",e,t,n);return[gh.cropAndResize(s,r,a,i,o,l)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"graph":return ri((()=>((e,t,n)=>{switch(e.op){case"Const":return t[e.name];case"PlaceholderWithDefault":const s=Vx("default",e,t,n);return[Ux(e.name,t,n)||s];case"Placeholder":return[Ux(e.name,t,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":return[Kx(Vx("x",e,t,n))];case"IdentityN":return Vx("x",e,t,n).map((e=>Kx(e)));case"Snapshot":return[Kx(Vx("x",e,t,n))];case"Shape":return[Yu(Vx("x",e,t,n).shape,"int32")];case"ShapeN":return Vx("x",e,t,n).map((e=>Yu(e.shape)));case"Size":return[$u(Vx("x",e,t,n).size,"int32")];case"Rank":return[$u(Vx("x",e,t,n).rank,"int32")];case"NoOp":return[$u(1)];case"Print":const r=Vx("x",e,t,n),a=Vx("data",e,t,n),i=Vx("message",e,t,n),o=Vx("summarize",e,t,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(i);for(let e=0;e<a.length;e++)console.log(Array.prototype.slice.call(a[e].dataSync()).slice(0,o));return[r];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"logical":return ri((()=>((e,t,n)=>{switch(e.op){case"Equal":return[$o(Vx("a",e,t,n),Vx("b",e,t,n))];case"NotEqual":return[Bl(Vx("a",e,t,n),Vx("b",e,t,n))];case"Greater":return[Vo(Vx("a",e,t,n),Vx("b",e,t,n))];case"GreaterEqual":return[Uo(Vx("a",e,t,n),Vx("b",e,t,n))];case"Less":return[Xo(Vx("a",e,t,n),Vx("b",e,t,n))];case"LessEqual":return[Yo(Vx("a",e,t,n),Vx("b",e,t,n))];case"LogicalAnd":return[wl(Vx("a",e,t,n),Vx("b",e,t,n))];case"LogicalNot":return[kl(Vx("a",e,t,n))];case"LogicalOr":return[vl(Vx("a",e,t,n),Vx("b",e,t,n))];case"Select":case"SelectV2":return[So(Vx("condition",e,t,n),Vx("a",e,t,n),Vx("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"matrices":return ri((()=>((e,t,n)=>{switch(e.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[ha(Vx("a",e,t,n),Vx("b",e,t,n),Vx("transposeA",e,t,n),Vx("transposeB",e,t,n))];case"Einsum":return[Ro(Vx("equation",e,t,n),...Vx("tensors",e,t,n))];case"Transpose":return[da(Vx("x",e,t,n),Vx("perm",e,t,n))];case"_FusedMatMul":const[s,r]=Vx("fusedOps",e,t,n),a="biasadd"===s,i="prelu"===r,o=Vx("numArgs",e,t,n),l=Vx("leakyreluAlpha",e,t,n);if(a){if(i&&2!==o)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==o)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[u,c]=Vx("args",e,t,n);return[$c({a:Vx("a",e,t,n),b:Vx("b",e,t,n),transposeA:Vx("transposeA",e,t,n),transposeB:Vx("transposeB",e,t,n),bias:u,activation:r,preluActivationWeights:c,leakyreluAlpha:l})];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"normalization":return ri((()=>((e,t,n)=>{switch(e.op){case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[Xi(Vx("x",e,t,n),Vx("mean",e,t,n),Vx("variance",e,t,n),Vx("offset",e,t,n),Vx("scale",e,t,n),Vx("epsilon",e,t,n))];case"LRN":return[Zo(Vx("x",e,t,n),Vx("radius",e,t,n),Vx("bias",e,t,n),Vx("alpha",e,t,n),Vx("beta",e,t,n))];case"Softmax":return[Lu(Vx("x",e,t,n))];case"LogSoftmax":return[cl(Vx("x",e,t,n))];case"SparseToDense":return[hc(Vx("sparseIndices",e,t,n),Vx("outputShape",e,t,n),Vx("sparseValues",e,t,n),Vx("defaultValue",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"reduction":return ri((()=>((e,t,n)=>{switch(e.op){case"Max":{const s=Vx("axis",e,t,n),r=Vx("keepDims",e,t,n);return[ol(Vx("x",e,t,n),s,r)]}case"Mean":{const s=Vx("axis",e,t,n),r=Vx("keepDims",e,t,n);return[Tl(Vx("x",e,t,n),s,r)]}case"Min":{const s=Vx("axis",e,t,n),r=Vx("keepDims",e,t,n);return[Rl(Vx("x",e,t,n),s,r)]}case"Sum":{const s=Vx("axis",e,t,n),r=Vx("keepDims",e,t,n);return[ul(Vx("x",e,t,n),s,r)]}case"All":{const s=Vx("axis",e,t,n),r=Vx("keepDims",e,t,n);return[bi(Vx("x",e,t,n),s,r)]}case"Any":{const s=Vx("axis",e,t,n),r=Vx("keepDims",e,t,n);return[xi(Vx("x",e,t,n),s,r)]}case"ArgMax":{const s=Vx("axis",e,t,n);return[wi(Vx("x",e,t,n),s)]}case"ArgMin":{const s=Vx("axis",e,t,n);return[ki(Vx("x",e,t,n),s)]}case"Prod":{const s=Vx("axis",e,t,n),r=Vx("keepDims",e,t,n);return[Jl(Vx("x",e,t,n),s,r)]}case"Cumsum":{const s=Vx("axis",e,t,n),r=Vx("exclusive",e,t,n),a=Vx("reverse",e,t,n);return[yo(Vx("x",e,t,n),s,r,a)]}case"Bincount":const s=Vx("x",e,t,n),r=Vx("weights",e,t,n),a=Vx("size",e,t,n);return[Qi(s,r,a)];case"DenseBincount":{const s=Vx("x",e,t,n),r=Vx("weights",e,t,n),a=Vx("size",e,t,n),i=Vx("binaryOutput",e,t,n);return[bo(s,r,a,i)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"slice_join":return ri((()=>((e,t,n)=>{switch(e.op){case"ConcatV2":case"Concat":{const s=Vx("n",e,t,n),r=Vx("axis",e,t,n);let a=Vx("tensors",e,t,n);return a=a.slice(0,s),[Ui(a,r)]}case"Gather":{const s=Vx("x",e,t,n),r=Vx("indices",e,t,n);return[Wo(s,qr(r,"int32"),0)]}case"GatherV2":{const s=Vx("axis",e,t,n),r=Vx("batchDims",e,t,n),a=Vx("x",e,t,n),i=Vx("indices",e,t,n);return[Wo(a,qr(i,"int32"),s,r)]}case"Reverse":{const s=Vx("dims",e,t,n),r=[];for(let e=0;e<s.length;e++)s[e]&&r.push(e);const a=Vx("x",e,t,n);return[xu(a,r)]}case"ReverseV2":{const s=Vx("axis",e,t,n),r=Vx("x",e,t,n);return[xu(r,s)]}case"Slice":{const s=Vx("begin",e,t,n),r=Vx("size",e,t,n);return[Hi(Vx("x",e,t,n),s,r)]}case"StridedSlice":{const s=Vx("begin",e,t,n),r=Vx("end",e,t,n),a=Vx("strides",e,t,n),i=Vx("beginMask",e,t,n),o=Vx("endMask",e,t,n),l=Vx("ellipsisMask",e,t,n),u=Vx("newAxisMask",e,t,n),c=Vx("shrinkAxisMask",e,t,n),h=Vx("x",e,t,n);return[Ku(h,s,r,a,i,o,l,u,c)]}case"Pack":return ri((()=>{const s=Vx("axis",e,t,n),r=Vx("tensors",e,t,n),a=r[0].shape,i=Hu(r[0]).shape,o=r.map((e=>{const t=d(e.shape,a);if(!t&&!d(Hu(e).shape,i))throw new Error("the input tensors shape does not match");return t?e:Pi(e,a)}));return[ju(o,s)]}));case"Unpack":{const s=Vx("axis",e,t,n),r=Vx("tensor",e,t,n);return nc(r,s)}case"Tile":{const s=Vx("reps",e,t,n);return[Lo(Vx("x",e,t,n),s)]}case"Split":case"SplitV":{const s=Vx("axis",e,t,n),r=Vx("numOrSizeSplits",e,t,n),a=Vx("x",e,t,n);return Wu(a,r,s)}case"ScatterNd":{const s=Vx("indices",e,t,n),r=Vx("values",e,t,n),a=Vx("shape",e,t,n);return[cc(s,r,a)]}case"GatherNd":{const s=Vx("x",e,t,n),r=Vx("indices",e,t,n);return[pc(s,r)]}case"SparseToDense":{const s=Vx("sparseIndices",e,t,n),r=Vx("outputShape",e,t,n),a=Vx("sparseValues",e,t,n),i=Vx("defaultValue",e,t,n);return[hc(s,a,r,a.dtype===i.dtype?i:qr(i,a.dtype))]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"spectral":return ri((()=>((e,t,n)=>{switch(e.op){case"FFT":return[zu(Vx("x",e,t,n))];case"IFFT":return[Bu(Vx("x",e,t,n))];case"RFFT":return[Vu(Vx("x",e,t,n))];case"IRFFT":return[Pu(Vx("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"transformation":return ri((()=>((e,t,n)=>{switch(e.op){case"Cast":return[qr(Vx("x",e,t,n),Vx("dtype",e,t,n))];case"ExpandDims":{const s=Vx("axis",e,t,n);return[Oo(Vx("x",e,t,n),s)]}case"Squeeze":{const s=Vx("axis",e,t,n);return[Hu(Vx("x",e,t,n),s)]}case"Reshape":return[Pi(Vx("x",e,t,n),Vx("shape",e,t,n))];case"MirrorPad":return[Dl(Vx("x",e,t,n),Vx("padding",e,t,n),Vx("mode",e,t,n))];case"PadV2":case"Pad":return[Vl(Vx("x",e,t,n),Vx("padding",e,t,n),Vx("constantValue",e,t,n))];case"SpaceToBatchND":{const s=Vx("blockShape",e,t,n),r=Vx("paddings",e,t,n);return[ql(Vx("x",e,t,n),s,r)]}case"BatchToSpaceND":{const s=Vx("blockShape",e,t,n),r=Vx("crops",e,t,n);return[Ki(Vx("x",e,t,n),s,r)]}case"DepthToSpace":{const s=Vx("blockSize",e,t,n),r=Vx("dataFormat",e,t,n).toUpperCase();return[xo(Vx("x",e,t,n),s,r)]}case"BroadcastTo":return[eo(Vx("x",e,t,n),Vx("shape",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"hash_table":return(async(e,t,n,s)=>{switch(e.op){case"HashTable":case"HashTableV2":{const r=Vx("keyDType",e,t,n),a=Vx("valueDType",e,t,n),i=new Lw(r,a);return s.addHashTable(e.name,i),[i.handle]}case"LookupTableImport":case"LookupTableImportV2":{const r=Vx("tableHandle",e,t,n,s),a=Vx("keys",e,t,n),i=Vx("values",e,t,n),o=s.getHashTableById(r.id);return[await o.import(a,i)]}case"LookupTableFind":case"LookupTableFindV2":{const r=Vx("tableHandle",e,t,n,s),a=Vx("keys",e,t,n),i=Vx("defaultValue",e,t,n),o=s.getHashTableById(r.id);return[await o.find(a,i)]}case"LookupTableSize":case"LookupTableSizeV2":{const r=Vx("tableHandle",e,t,n,s);return[s.getHashTableById(r.id).tensorSize()]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n,s);case"custom":const r=Wx(e.op);if(r&&r.customExecutor)return r.customExecutor(new Sw(e,t,n));throw TypeError(`Custom op ${e.op} is not registered.`);default:throw TypeError(`Unknown op '${e.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(e,t,n);return G(r)?r.then((e=>[].concat(e))):[].concat(r)}class Bw{constructor(e={},t={},n={},s={}){this.weightMap=e,this.tensorArrayMap=t,this.tensorListMap=n,this.functionMap=s,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(e,t){return{id:e,frameName:t,iterationId:0}}set currentContext(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const e=[];for(let t=0;t<this.contexts.length-1;t++){const n=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(n))}e.push(""),this._currentContextIds=e}contextIdforContexts(e){return e?e.map((e=>0===e.id&&0===e.iterationId?"":`${e.frameName}-${e.iterationId}`)).join("/"):""}enterFrame(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(e){return this.weightMap[e]}addTensorArray(e){this.tensorArrayMap[e.id]=e}getTensorArray(e){return this.tensorArrayMap[e]}addTensorList(e){this.tensorListMap[e.id]=e}getTensorList(e){return this.tensorListMap[e]}dispose(e){for(const t in this.tensorArrayMap)this.tensorArrayMap[t].clearAndClose(e);for(const t in this.tensorListMap)this.tensorListMap[t].clearAndClose(e)}}function Pw(e,t,n,s){const r=new Set,a=[];let i=null,o=null;const l=new Set,u=Object.keys(e).map((e=>jx(e)[0]));let c=[];null!=s&&(c=s.map((e=>jx(e.name)[0])));const h=[...t];for(;h.length>0;){const e=h.pop();(Gw(e)||Hw(e)||jw(e))&&null==i&&(i=e,o=i.children.map((e=>e.name)).filter((e=>r.has(e)))),r.add(e.name),null==n[e.name]&&(-1===u.indexOf(e.name)&&-1===c.indexOf(e.name)&&(0!==e.inputs.length?e.inputs.forEach((e=>{l.has(e.name)||(l.add(e.name),h.push(e))})):a.push(e.name)))}return{inputs:e,outputs:t,usedNodes:r,missingInputs:a,dynamicNode:i,syncInputs:o}}const Ww=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],Vw=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"],Uw=["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"];function Gw(e){return Ww.indexOf(e.op)>=0}function Hw(e){return Vw.indexOf(e.op)>=0}function jw(e){return Uw.indexOf(e.op)>=0}class qw{constructor(e,t){this.graph=e,this.parent=t,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this._outputs=e.outputs,this._inputs=e.inputs,this._initNodes=e.initNodes,this._signature=e.signature,this._functions=e.functions,null!=e.functions&&Object.keys(e.functions).forEach((t=>{this._functionExecutorMap[t]=new qw(e.functions[t],this)}))}get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(e){const t=Object.keys(e).map((t=>e[t].map((e=>e.id))));this._weightIds=[].concat(...t),this._weightMap=e}set resourceManager(e){this._resourceManager=e}get inputs(){return this._inputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get outputs(){return this._outputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get inputNodes(){return this._inputs.map((e=>e.signatureKey||e.name))}get outputNodes(){return this._outputs.map((e=>{const t=e.signatureKey||e.name;return e.defaultOutput?`${t}:${e.defaultOutput}`:t}))}get functions(){return Object.keys(this._functions).reduce(((e,t)=>(e[t]=this._functions[t].signature,e)),{})}getCompilationKey(e,t){const n=e.map((e=>e.name)).sort(),s=t.map((e=>e.name)).sort();return n.join(this.SEPERATOR)+"--"+s.join(this.SEPERATOR)}compile(e,t){const n=Pw(e,t,this.weightMap,this._initNodes),{missingInputs:s,dynamicNode:r,syncInputs:a}=n;if(null!=r)throw new Error(`This execution contains the node '${r.name}', which has the dynamic op '${r.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${a}]`);if(s.length>0){const n=t.map((e=>e.name)),r=Object.keys(e);throw new Error(`Cannot compute the outputs [${n}] from the provided inputs [${r}]. Missing the following inputs: [${s}]`)}return function(e,t,n){const{usedNodes:s,inputs:r}=n,a=[],i=Object.keys(r).map((e=>jx(e)[0])).map((t=>e.nodes[t])),o=e.initNodes;i.forEach((e=>{s.has(e.name)&&a.push(e)})),e.weights.forEach((e=>{s.has(e.name)&&a.push(e)})),null!=o&&o.forEach((e=>{s.has(e.name)&&a.push(e)}));const l=new Set,u=[];for(;a.length>0;){const e=a.pop();l.add(e.name),t[e.name]||u.push(e),e.children.forEach((e=>{!l.has(e.name)&&s.has(e.name)&&e.inputs.every((e=>l.has(e.name)))&&a.push(e)}))}return u}(this.graph,this.weightMap,n)}execute(e,t){e=this.mapInputs(e);const n=Object.keys(e).sort();this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t);const s=n.map((e=>this.graph.nodes[jx(e)[0]])),r=t.map((e=>jx(e)[0]));let a=r.map((e=>this.graph.nodes[e]));0===a.length&&(a=this._outputs);const i=this.getCompilationKey(s,a);let o=this.compiledMap.get(i);null==o&&(o=this.compile(e,a),this.compiledMap.set(i,o));const l={},u={};return ri((()=>{const n=new Bw(this.weightMap,l,u,this.functionExecutorMap),s=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,r]=jx(t),a=[];a[r]=e[t],s[n]=a}));const a=this.getFrozenTensorIds(s),i={};for(let e=0;e<o.length;e++){const t=o[e];if(!s[t.name]){const e=zw(t,s,n,this._resourceManager);if(G(e))throw new Error(`The execution of the op '${t.op}' returned a promise. Please use model.executeAsync() instead.`);s[t.name]=e,this.checkTensorForDisposal(t.name,t,s,n,a,r,i)}}return null==this.parent&&n.dispose(a),t.map((e=>Ux(e,s,n)))}))}getFrozenTensorIds(e){const t=[].concat.apply([],Object.keys(e).map((t=>e[t])).map((e=>e.map((e=>e.id)))));return new Set(t)}checkTensorForDisposal(e,t,n,s,r,a,i){"control"!==t.category&&-1===a.indexOf(e)&&(n[e].forEach((e=>{null!=e&&(i[e.id]=(i[e.id]||0)+t.children.length)})),t.inputs.forEach((e=>{if("control"!==e.category){const t=function(e,t,n){return t[Hx(e,n.currentContextId)]}(e.name,n,s);null!=t&&t.forEach((e=>{if(e&&!e.kept&&!r.has(e.id)){const t=i[e.id];1===t?(e.dispose(),delete i[e.id]):null!=t&&i[e.id]--}}))}})))}async executeAsync(e,t){return this._executeAsync(e,t)}async _executeAsync(e,t,n=!1,s={},r={}){n||(e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t));const a=new Bw(this.weightMap,s,r,this.functionExecutorMap),i=await this.executeWithControlFlow(e,a,t,n),o=t.map((e=>Ux(e,i,a))),l=o.map((e=>e.id)),u=Object.keys(e).map((t=>e[t].id)),c=new Set([...l,...u,...this.weightIds]);return Object.keys(i).forEach((e=>{i[e].forEach((e=>{!e||e.kept||e.isDisposed||c.has(e.id)||e.dispose()}))})),null==this.parent&&a.dispose(c),o}async executeFunctionAsync(e,t,n){const s=e.reduce(((e,t,n)=>(e[this.inputs[n].name]=t,e)),{});return this._executeAsync(s,this.outputNodes,!0,t,n)}async executeWithControlFlow(e,t,n,s){const r=Object.keys(e),a=r.map((e=>this.graph.nodes[jx(e)[0]])),i=n.map((e=>jx(e)[0]));let o=i.map((e=>this.graph.nodes[e]));0===o.length&&(o=this._outputs);const{usedNodes:l,missingInputs:u,dynamicNode:c,syncInputs:h}=Pw(e,o,this.weightMap,this._initNodes),p=[...a,...this.graph.weights,...this._initNodes||[]].map((e=>({node:e,contexts:t.currentContext}))),d=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,s]=jx(t),r=[];r[s]=e[t],d[n]=r}));const f={},m=this.getFrozenTensorIds(d),g={};for(;p.length>0;){const e=this.processStack(a,p,t,d,g,m,i,f,l);await Promise.all(e)}null!=c||s||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const y=o.filter((e=>!Gw(e)&&!Ux(e.name,d,t))).map((e=>e.name));if(y.length>0){let e="";throw null!=c&&(e=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${h}]`),new Error(`Cannot compute the outputs [${y}] from the provided inputs [${r}]. Consider providing the following inputs: [${u}]. ${e}`)}return d}processStack(e,t,n,s,r,a,i,o,l){const u=[];for(;t.length>0;){const e=t.pop();n.currentContext=e.contexts;let c="";if("Enter"===e.node.op&&Vx("isConstant",e.node,s,n)&&([c]=Gx(e.node.name,n)),null==s[e.node.name]){const h=zw(e.node,s,n,this._resourceManager);c||([c]=Gx(e.node.name,n));const p=n.currentContext;G(h)?u.push(h.then((u=>(s[c]=u,n.currentContext=p,this.checkTensorForDisposal(c,e.node,s,n,a,i,o),this.processChildNodes(e.node,t,n,s,r,l),u)))):(s[c]=h,this.checkTensorForDisposal(c,e.node,s,n,a,i,o),this.processChildNodes(e.node,t,n,s,r,l))}else this.processChildNodes(e.node,t,n,s,r,l)}return u}processChildNodes(e,t,n,s,r,a){e.children.forEach((e=>{const[i]=Gx(e.name,n);!r[i]&&a.has(e.name)&&("Merge"===e.op?e.inputNames.some((e=>!!Ux(e,s,n)))&&(r[i]=!0,t.push({contexts:n.currentContext,node:e})):e.inputNames.every((e=>!!Ux(e,s,n)))&&(r[i]=!0,t.push({contexts:n.currentContext,node:e})))}))}dispose(){Object.keys(this.weightMap).forEach((e=>this.weightMap[e].forEach((e=>e.dispose()))))}checkInputShapeAndType(e){Object.keys(e).forEach((t=>{const n=e[t],[s]=jx(t),r=this.graph.nodes[s];if(r.attrParams.shape&&r.attrParams.shape.value){const e=r.attrParams.shape.value;l(e.length===n.shape.length&&n.shape.every(((t,n)=>-1===e[n]||e[n]===t)),(()=>`The shape of dict['${r.name}'] provided in model.execute(dict) must be [${e}], but was [${n.shape}]`))}r.attrParams.dtype&&r.attrParams.dtype.value&&l(n.dtype===r.attrParams.dtype.value,(()=>`The dtype of dict['${r.name}'] provided in model.execute(dict) must be ${r.attrParams.dtype.value}, but was ${n.dtype}`))}))}mapInputs(e){const t={};for(const n in e)if(null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[n]){t[this._signature.inputs[n].name]=e[n]}else t[n]=e[n];return t}checkInputs(e){const t=Object.keys(e).filter((e=>{const[t]=jx(e);return null==this.graph.nodes[t]}));if(t.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${t}] that are not part of graph`)}mapOutputs(e){return e.map((e=>{if(null!=this._signature&&null!=this._signature.outputs&&null!=this._signature.outputs[e]){return this._signature.outputs[e].name}return e}),{})}checkOutputs(e){e.forEach((e=>{const[t]=jx(e);if(!this.graph.nodes[t])throw new Error(`The output '${e}' is not found in the graph`)}))}}class Kw{constructor(e={},t={}){this.hashTableNameToHandle=e,this.hashTableMap=t}addHashTable(e,t){this.hashTableNameToHandle[e]=t.handle,this.hashTableMap[t.id]=t}getHashTableHandleByName(e){return this.hashTableNameToHandle[e]}getHashTableById(e){return this.hashTableMap[e]}dispose(){for(const e in this.hashTableMap)this.hashTableMap[e].clearAndClose(),delete this.hashTableMap[e];for(const e in this.hashTableNameToHandle)this.hashTableNameToHandle[e].dispose(),delete this.hashTableNameToHandle[e]}}class Xw{constructor(e,t={}){this.modelUrl=e,this.loadOptions=t,this.version="n/a",null==t&&(this.loadOptions={}),this.resourceManager=new Kw}get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}findIOHandler(){const e=this.modelUrl;if(null!=e.load)this.handler=e;else if(null!=this.loadOptions.requestInit)this.handler=oa(e,this.loadOptions);else{const t=yr(e,this.loadOptions);if(0===t.length)t.push(oa(e,this.loadOptions));else if(t.length>1)throw new Error(`Found more than one (${t.length}) load handlers for URL '${[e]}'`);this.handler=t[0]}}async load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const e=await this.handler.load();return this.loadSync(e)}loadSync(e){this.artifacts=e;const t=this.artifacts.modelTopology;let n;n=null!=this.artifacts.userDefinedMetadata&&null!=this.artifacts.userDefinedMetadata.signature?this.artifacts.userDefinedMetadata.signature:this.artifacts.signature,this.signature=n,this.version=`${t.versions.producer}.${t.versions.minConsumer}`;const s=or(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new qw(pw.Instance.transformGraph(t,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(s),this.executor.resourceManager=this.resourceManager,null!=e.modelInitializer&&null!=e.modelInitializer.node){const t=pw.Instance.transformGraph(e.modelInitializer);this.initializer=new qw(t),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializer.executeAsync({},[])}return!0}async save(e,t){if("string"==typeof e){const t=gr(e);if(0===t.length)throw new Error(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new Error(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return e.save(this.artifacts)}predict(e,t){return this.execute(e,this.outputNodes)}normalizeInputs(e){if(!(e instanceof vs||Array.isArray(e)))return e;if((e=Array.isArray(e)?e:[e]).length!==this.inputNodes.length)throw new Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${e.length} input tensors.`);return this.inputNodes.reduce(((t,n,s)=>(t[n]=e[s],t)),{})}normalizeOutputs(e){return e=e||this.outputNodes,Array.isArray(e)?e:[e]}execute(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=this.executor.execute(e,t);return n.length>1?n:n[0]}async executeAsync(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=await this.executor.executeAsync(e,t);return n.length>1?n:n[0]}convertTensorMapToTensorsMap(e){return Object.keys(e).reduce(((t,n)=>(t[n]=[e[n]],t)),{})}dispose(){this.executor.dispose(),this.initializer&&this.initializer.dispose(),this.resourceManager.dispose()}}const Yw="3.4.0";function Jw(e,t,n=new Map,s=new Set){if(null==e)return null;if(s.has(e))throw new Error("Circular references are not supported.");if(n.has(e))return n.get(e);const r=t(e);if(r.recurse&&null!==r.value)throw new Error("A deep map function may not return both a value and recurse=true.");if(r.recurse){if(nk(e)){const r=Array.isArray(e)?[]:{};s.add(e);for(const a in e){const i=Jw(e[a],t,n,s);r[a]=i}return s.delete(e),r}throw new Error(`Can't recurse into non-iterable type: ${e}`)}return n.set(e,r.value),r.value}function Zw(e,t=ek){return Qw(e,t)}function Qw(e,t,n=new Set){const s=e[0];if(n.has(s))throw new Error("Circular references are not supported.");const r=t(e);if(r.recurse&&null!==r.value)throw new Error("A deep zip function may not return both a value and recurse=true.");if(r.recurse){if(nk(s)){const r=Array.isArray(s)?[]:{};n.add(s);for(const a in s){const s=Qw(e.map((e=>e[a])),t,n);r[a]=s}return n.delete(s),r}throw new Error(`Can't recurse into non-iterable type: ${s}`)}return r.value}function ek(e){return null===e?null:nk(e[0])?{value:null,recurse:!0}:{value:e,recurse:!1}}async function tk(e,t){const n=new Map;Jw(e,t,n);for(const e of Array.from(n.keys())){const t=n.get(e);if(G(t)){const s=await t;n.set(e,s)}}return Jw(e,t,n)}function nk(e){return null!=e&&!ArrayBuffer.isView(e)&&(Array.isArray(e)||"object"==typeof e&&!(e instanceof vs))}function sk(e){return function(e,t){return Jw(e,t)}(e,rk)}function rk(e){return e instanceof vs?{value:e.clone(),recurse:!1}:nk(e)?{value:null,recurse:!0}:{value:e,recurse:!1}}class ak{constructor(e){if(this.capacity=e,this.begin=0,this.end=0,null==e)throw new RangeError("Can't create a ring buffer of unknown capacity.");if(e<1)throw new RangeError("Can't create ring buffer of capacity < 1.");this.data=new Array(e),this.doubledCapacity=2*e}wrap(e){for(;e<0;)e+=this.doubledCapacity;return e%this.doubledCapacity}get(e){if(e<0)throw new RangeError("Can't get item at a negative index.");return this.data[e%this.capacity]}set(e,t){if(e<0)throw new RangeError("Can't set item at a negative index.");this.data[e%this.capacity]=t}length(){let e=this.end-this.begin;return e<0&&(e=this.doubledCapacity+e),e}isFull(){return this.length()===this.capacity}isEmpty(){return 0===this.length()}push(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.set(this.end,e),this.end=this.wrap(this.end+1)}pushAll(e){for(const t of e)this.push(t)}pop(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");this.end=this.wrap(this.end-1);const e=this.get(this.end);return this.set(this.end,void 0),e}unshift(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.begin=this.wrap(this.begin-1),this.set(this.begin,e)}shift(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const e=this.get(this.begin);return this.set(this.begin,void 0),this.begin=this.wrap(this.begin+1),e}shuffleExcise(e){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const t=this.wrap(this.begin+e),n=this.get(t);return this.set(t,this.pop()),n}}class ik extends ak{constructor(){super(ik.INITIAL_CAPACITY)}isFull(){return!1}push(e){super.isFull()&&this.expand(),super.push(e)}unshift(e){super.isFull()&&this.expand(),super.unshift(e)}expand(){const e=2*this.capacity,t=new Array(e),n=this.length();for(let e=0;e<n;e++)t[e]=this.get(this.wrap(this.begin+e));this.data=t,this.capacity=e,this.doubledCapacity=2*this.capacity,this.begin=0,this.end=n}}function ok(e){return new hk(e)}function lk(e){return new pk(e)}function uk(e,t){return new Nk(e,t)}ik.INITIAL_CAPACITY=32;class ck{async toArray(){const e=[];let t=await this.next();for(;!t.done;)e.push(t.value),t=await this.next();return e}async toArrayForTest(){const e=this.prefetch(100),t=[];let n=await e.next();for(;!n.done;)t.push(n.value),n=await e.next();return t}async resolveFully(){let e=await this.next();for(;!e.done;)e=await this.next()}async resolveWhile(e){let t=await this.next(),n=e(t.value);for(;!t.done&&n;)t=await this.next(),n=e(t.value)}handleErrors(e){return new xk(this,e)}filter(e){return new yk(this,e)}map(e){return new bk(this,e)}mapAsync(e){return new wk(this,e)}serialMapAsync(e){return new wk(this,e).serial()}flatmap(e){return new vk(this,e)}async forEachAsync(e){return this.map(e).resolveFully()}async serialForEach(e){return this.serialMapAsync(e).resolveWhile((e=>!0===e))}rowMajorBatch(e,t=!0){return new gk(this,e,t)}columnMajorBatch(e,t=!0,n=ek){return this.rowMajorBatch(e,t).map((e=>Zw(e,n)))}concatenate(e,t){return new Nk(ok([this,e]),t)}take(e){return e<0||null==e?this:new mk(this,e)}skip(e){return e<0||null==e?this:new fk(this,e)}prefetch(e){return new $k(this,e)}shuffle(e,t){return new Sk(this,e,t)}serial(){return new dk(this)}}class hk extends ck{constructor(e){super(),this.items=e,this.trav=0}summary(){return`Array of ${this.items.length} items`}async next(){if(this.trav>=this.items.length)return{value:null,done:!0};const e=this.items[this.trav];return this.trav++,{value:sk(e),done:!1}}}class pk extends ck{constructor(e){super(),this.nextFn=e}summary(){return"Function call"}async next(){try{return this.nextFn()}catch(e){throw e.message=`Error thrown while iterating through a dataset: ${e.message}`,e}}}class dk extends ck{constructor(e){super(),this.upstream=e,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Serial`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){return this.upstream.next()}}class fk extends ck{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Skip`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;this.count++<this.maxCount;){const e=await this.upstream.next();if(e.done)return e;ai(e.value)}return this.upstream.next()}}class mk extends ck{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0}summary(){return`${this.upstream.summary()} -> Take`}async next(){return this.count++>=this.maxCount?{value:null,done:!0}:this.upstream.next()}}class gk extends ck{constructor(e,t,n=!0){super(),this.upstream=e,this.batchSize=t,this.enableSmallLastBatch=n,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> RowMajorBatch`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){const e=[];for(;e.length<this.batchSize;){const t=await this.upstream.next();if(t.done)return this.enableSmallLastBatch&&e.length>0?{value:e,done:!1}:{value:null,done:!0};e.push(t.value)}return{value:e,done:!1}}}class yk extends ck{constructor(e,t){super(),this.upstream=e,this.predicate=t,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Filter`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;){const e=await this.upstream.next();if(e.done||this.predicate(e.value))return e;ai(e.value)}}}class bk extends ck{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Map`}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=Ms(e.value),n=this.transform(e.value),s=Ms(n);for(const e of t)Os(e,s)||e.dispose();return{value:n,done:!1}}}class xk extends ck{constructor(e,t){super(),this.upstream=e,this.handler=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> handleErrors`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;)try{return await this.upstream.next()}catch(e){if(!this.handler(e))return{value:null,done:!0}}}}class wk extends ck{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> AsyncMap`}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=Ms(e.value),n=await this.transform(e.value),s=Ms(n);for(const e of t)Os(e,s)||e.dispose();return{value:n,done:!1}}}class kk extends ck{constructor(){super(),this.outputQueue=new ik,this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;0===this.outputQueue.length();)if(!await this.pump())return{value:null,done:!0};return{value:this.outputQueue.shift(),done:!1}}}class vk extends kk{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Flatmap`}async pump(){const e=await this.upstream.next();if(e.done)return!1;const t=Ms(e.value),n=this.transform(e.value),s=Ms(n);this.outputQueue.pushAll(n);for(const e of t)Os(e,s)||e.dispose();return!0}}class Nk extends ck{constructor(e,t){super(),this.baseErrorHandler=t,this.lastRead=null,this.iterator=null,this.moreIterators=e}summary(){return"TODO: fill in upstream of chained summaries -> Chained"}async next(){return this.lastRead=this.readFromChain(this.lastRead),this.lastRead}async readFromChain(e){if(await e,null==this.iterator){const e=await this.moreIterators.next();if(e.done)return{value:null,done:!0};this.iterator=e.value,null!=this.baseErrorHandler&&(this.iterator=this.iterator.handleErrors(this.baseErrorHandler))}const t=await this.iterator.next();return t.done?(this.iterator=null,this.readFromChain(e)):t}}var Ik;!function(e){e[e.FAIL=0]="FAIL",e[e.SHORTEST=1]="SHORTEST",e[e.LONGEST=2]="LONGEST"}(Ik||(Ik={}));class Ck extends ck{constructor(e,t=Ik.FAIL){super(),this.iterators=e,this.mismatchMode=t,this.count=0,this.currentPromise=null}summary(){return"{TODO: fill in upstream of zip summaries} -> Zip"}async nextState(e){await e;let t=0,n=0;const s=await tk(this.iterators,(function(e){if(e instanceof ck){return{value:e.next().then((e=>(t++,e.done&&n++,e.value))),recurse:!1}}return{value:null,recurse:!0}}));if(t===n)return{value:null,done:!0};if(n>0)switch(this.mismatchMode){case Ik.FAIL:throw new Error(`Zipped streams should have the same length. Mismatched at element ${this.count}.`);case Ik.SHORTEST:return{value:null,done:!0};case Ik.LONGEST:}return this.count++,{value:s,done:!1}}async next(){return this.currentPromise=this.nextState(this.currentPromise),this.currentPromise}}class $k extends ck{constructor(e,t){super(),this.upstream=e,this.bufferSize=t,this.buffer=new ak(t)}summary(){return`${this.upstream.summary()} -> Prefetch`}refill(){for(;!this.buffer.isFull();){const e=this.upstream.next();this.buffer.push(e)}}next(){return this.refill(),this.buffer.shift()}}class Sk extends $k{constructor(e,t,n){super(e,t),this.upstream=e,this.windowSize=t,this.upstreamExhausted=!1,this.random=ou(n||as().toString()),this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}randomInt(e){return Math.floor(this.random()*e)}chooseIndex(){return this.randomInt(this.buffer.length())}async serialNext(){for(this.upstreamExhausted||this.refill();!this.buffer.isEmpty();){const e=this.chooseIndex(),t=await this.buffer.shuffleExcise(e);if(!t.done)return this.refill(),t;this.upstreamExhausted=!0}return{value:null,done:!0}}}class Tk{constructor(){this.size=null}batch(e,t=!0){const n=this;let s;return l(e>0,(()=>`batchSize needs to be positive, but it is\n      ${e}`)),s=this.size===1/0||null==this.size?this.size:t?Math.ceil(this.size/e):Math.floor(this.size/e),Ek((async()=>(await n.iterator()).columnMajorBatch(e,t,Ak)),s)}concatenate(e){const t=this;let n;return n=this.size===1/0||e.size===1/0?1/0:null!=this.size&&null!=e.size?this.size+e.size:null,Ek((async()=>(await t.iterator()).concatenate(await e.iterator())),n)}filter(e){const t=this;let n;return n=this.size===1/0?1/0:null,Ek((async()=>(await t.iterator()).filter((t=>ri((()=>e(t)))))),n)}async forEachAsync(e){return(await this.iterator()).forEachAsync(e)}map(e){const t=this;return Ek((async()=>(await t.iterator()).map((t=>ri((()=>e(t)))))),this.size)}mapAsync(e){const t=this;return Ek((async()=>(await t.iterator()).mapAsync(e)),this.size)}prefetch(e){if(null==e)throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");const t=this;return Ek((async()=>(await t.iterator()).prefetch(e)),this.size)}repeat(e){const t=this;let n;return n=null!=this.size&&e>0?this.size*e:0===e?0:null!=this.size&&(void 0===e||e<0)?1/0:null,Ek((async()=>uk(lk((async()=>({value:await t.iterator(),done:!1}))).take(e))),n)}skip(e){const t=this;let n;return n=null!=this.size&&e>=0&&this.size>=e?this.size-e:null!=this.size&&(this.size<e||void 0===e||e<0)?0:null,Ek((async()=>(await t.iterator()).skip(e)),n)}shuffle(e,t,n=!0){if(null==e||e<0)throw null==this.size?new RangeError("`Dataset.shuffle()` requires bufferSize to be specified."):new RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);const s=this,r=ou(t||as().toString());return Ek((async()=>{let t=r.int32();return n&&(t+=r.int32()),(await s.iterator()).shuffle(e,t.toString())}),this.size)}take(e){const t=this;let n;return n=null!=this.size&&this.size>e?e:null!=this.size&&this.size<=e?this.size:null,Ek((async()=>(await t.iterator()).take(e)),n)}async toArray(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArray()}async toArrayForTest(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArrayForTest()}}function Ek(e,t=null){return new class extends Tk{constructor(){super(...arguments),this.size=t}async iterator(){return e()}}}function Ak(e){if(null===e)return null;const t=e[0];if(null==(n=t)||null===(s=n)||"object"!=typeof s&&"function"!=typeof s||Array.isArray(n)||"object"==typeof n&&n instanceof vs||$(n)){return{value:function(e){if(0===e.length)throw new Error("Can't make a batch of zero elements.");return e[0]instanceof vs?ju(e):rr(e)}(e),recurse:!1}}var n,s;return{value:null,recurse:!0}}Tk.MAX_BUFFER_SIZE=1e4;class Rk extends Tk{constructor(e){super(),this.input=e}async iterator(){return(await this.input.iterator()).decodeUTF8().split("\n").map((e=>(e.endsWith("\r")&&(e=e.slice(0,-1)),e)))}}const Fk='"',Dk=Symbol("out"),_k=Symbol("field"),Ok=Symbol("quote"),Mk=Symbol("quoteafterquote"),Lk=Symbol("quoteinquote");class zk extends Tk{constructor(e,t){super(),this.input=e,this.hasHeader=!0,this.fullColumnNames=null,this.columnNamesValidated=!1,this.columnConfigs=null,this.configuredColumnsOnly=!1,this.delimiter=",",this.delimWhitespace=!1,this.base=new Rk(e),t||(t={}),this.hasHeader=!1!==t.hasHeader,this.fullColumnNames=t.columnNames,this.columnConfigs=t.columnConfigs,this.configuredColumnsOnly=t.configuredColumnsOnly,t.delimWhitespace?(l(null==t.delimiter,(()=>"Delimiter should not be provided when delimWhitespace is true.")),this.delimWhitespace=!0,this.delimiter=" "):this.delimiter=t.delimiter?t.delimiter:","}async columnNames(){return this.columnNamesValidated||await this.setColumnNames(),this.configuredColumnsOnly?Object.keys(this.columnConfigs):this.fullColumnNames}async setColumnNames(){const e=await this.maybeReadHeaderLine();if(!this.fullColumnNames&&!e)throw new Error("Column names must be provided if there is no header line.");this.fullColumnNames&&e&&l(e.length===this.fullColumnNames.length,(()=>"The length of provided columnNames ("+this.fullColumnNames.length.toString()+") does not match the length of the header line read from file ("+e.length.toString()+").")),this.fullColumnNames||(this.fullColumnNames=e);const t=this.fullColumnNames.reduce(((e,t)=>(e[t]=e[t]+1||1,e)),{}),n=Object.keys(t).filter((e=>t[e]>1));if(l(0===n.length,(()=>"Duplicate column names found: "+n.toString())),this.columnConfigs)for(const e of Object.keys(this.columnConfigs)){if(-1===this.fullColumnNames.indexOf(e))throw new Error('The key "'+e+'" provided in columnConfigs does not match any of the column names ('+this.fullColumnNames.toString()+").")}this.columnNamesValidated=!0}async maybeReadHeaderLine(){if(this.hasHeader){const e=await this.base.iterator(),t=await e.next();if(t.done)throw new Error("No data was found for CSV parsing.");const n=t.value;return this.parseRow(n,!1)}return null}async iterator(){this.columnNamesValidated||await this.setColumnNames();let e=await this.base.iterator();return this.hasHeader&&(e=e.skip(1)),e.map((e=>this.makeDataElement(e)))}makeDataElement(e){const t=this.parseRow(e),n={},s={};for(let r=0;r<this.fullColumnNames.length;r++){const a=this.fullColumnNames[r],i=this.columnConfigs?this.columnConfigs[a]:null;if(!this.configuredColumnsOnly||i){const o=t[r];let l=null;if(""===o)if(i&&void 0!==i.default)l=i.default;else{if(i&&(i.required||i.isLabel))throw new Error(`Required column ${a} is empty in this line: ${e}`);l=void 0}else{const e=Number(o);if(isNaN(e))l=i&&"bool"===i.dtype?this.getBoolean(o):o;else if(i&&i.dtype)switch(i.dtype){case"float32":l=e;break;case"int32":l=Math.floor(e);break;case"bool":l=this.getBoolean(o);break;default:l=e}else l=e}i&&i.isLabel?s[a]=l:n[a]=l}}return 0===Object.keys(s).length?n:{xs:n,ys:s}}getBoolean(e){return"1"===e||"true"===e.toLowerCase()?1:0}parseRow(e,t=!0){const n=[];let s=0;const r=e.length;let a=Dk;for(let t=0;t<r;t++)switch(a){case Dk:switch(e.charAt(t)){case Fk:s=t+1,a=Ok;break;case this.delimiter:if(s=t+1," "===this.delimiter&&this.delimWhitespace)break;n.push(""),a=Dk;break;default:a=_k,s=t}break;case _k:switch(e.charAt(t)){case this.delimiter:n.push(e.substring(s,t)),a=Dk,s=t+1}break;case Ok:switch(e.charAt(t)){case Fk:a=Mk}break;case Mk:switch(e.charAt(t)){case this.delimiter:n.push(e.substring(s,t-1)),a=Dk,s=t+1;break;case Fk:a=Ok;break;default:a=Lk}break;case Lk:switch(e.charAt(t)){case Fk:a=Ok}}if(a===Mk?n.push(e.substring(s,r-1)):n.push(e.substring(s)),t&&n.length!==this.fullColumnNames.length)throw new Error(`Invalid row in csv file. Should have ${this.fullColumnNames.length} elements in a row, but got ${n}`);return n}}class Bk extends ck{constructor(e){super(),this.microphoneConfig=e,this.isClosed=!1,this.fftSize=e.fftSize||1024;const t=Math.log2(this.fftSize);if(this.fftSize<0||t<4||t>14||!Number.isInteger(t))throw new Error(`Invalid fftSize: it must be a power of 2 between 2 to 4 and 2 to 14, but got ${this.fftSize}`);if(this.numFrames=e.numFramesPerSpectrogram||43,this.sampleRateHz=e.sampleRateHz,this.columnTruncateLength=e.columnTruncateLength||this.fftSize,this.audioTrackConstraints=e.audioTrackConstraints,this.smoothingTimeConstant=e.smoothingTimeConstant||0,this.includeSpectrogram=!1!==e.includeSpectrogram,this.includeWaveform=!0===e.includeWaveform,!this.includeSpectrogram&&!this.includeWaveform)throw new Error("Both includeSpectrogram and includeWaveform are false. At least one type of data should be returned.")}summary(){return"microphone"}static async create(e={}){if(K().get("IS_NODE"))throw new Error("microphone API is only supported in browser environment.");const t=new Bk(e);return await t.start(),t}async start(){try{this.stream=await navigator.mediaDevices.getUserMedia({audio:null==this.audioTrackConstraints||this.audioTrackConstraints,video:!1})}catch(e){throw new Error(`Error thrown while initializing video stream: ${e.message}`)}if(!this.stream)throw new Error("Could not obtain audio from microphone.");const e=window.AudioContext||window.webkitAudioContext;if(this.audioContext=new e,this.sampleRateHz){if(this.audioContext.sampleRate!==this.sampleRateHz)throw new Error(`Mismatch in sampling rate: Expected: ${this.sampleRateHz}; Actual: ${this.audioContext.sampleRate}`)}else this.sampleRateHz=this.audioContext.sampleRate;const t=this.audioContext.createMediaStreamSource(this.stream);this.analyser=this.audioContext.createAnalyser(),this.analyser.fftSize=2*this.fftSize,this.analyser.smoothingTimeConstant=this.smoothingTimeConstant,t.connect(this.analyser),this.freqData=new Float32Array(this.fftSize),this.timeData=new Float32Array(this.fftSize)}async next(){if(this.isClosed)return{value:null,done:!0};let e,t;const n=await this.getAudioData();if(this.includeSpectrogram){const t=this.flattenQueue(n.freqDataQueue);e=this.getTensorFromAudioDataArray(t,[this.numFrames,this.columnTruncateLength,1])}if(this.includeWaveform){const e=this.flattenQueue(n.timeDataQueue);t=this.getTensorFromAudioDataArray(e,[this.numFrames*this.fftSize,1])}return{value:{spectrogram:e,waveform:t},done:!1}}async capture(){return(await this.next()).value}async getAudioData(){const e=[],t=[];let n=0;return new Promise((s=>{const r=setInterval((()=>{this.includeSpectrogram&&(this.analyser.getFloatFrequencyData(this.freqData),this.freqData[0]===-1/0&&s({freqDataQueue:e,timeDataQueue:t}),e.push(this.freqData.slice(0,this.columnTruncateLength))),this.includeWaveform&&(this.analyser.getFloatTimeDomainData(this.timeData),t.push(this.timeData.slice())),++n===this.numFrames&&(clearInterval(r),s({freqDataQueue:e,timeDataQueue:t}))}),this.fftSize/this.sampleRateHz*1e3)}))}stop(){this.isClosed||(this.isClosed=!0,this.analyser.disconnect(),this.audioContext.close(),null!=this.stream&&this.stream.getTracks().length>0&&this.stream.getTracks()[0].stop())}toArray(){throw new Error("Can not convert infinite audio stream to array.")}getSampleRate(){return this.sampleRateHz}flattenQueue(e){const t=e[0].length,n=new Float32Array(e.length*t);return e.forEach(((e,s)=>n.set(e,s*t))),n}getTensorFromAudioDataArray(e,t){const n=new Float32Array(p(t));return n.set(e,n.length-e.length),rr(n,t)}}class Pk extends ck{constructor(e,t){if(super(),this.webcamVideoElement=e,this.webcamConfig=t,this.isClosed=!0,this.resize=!1,this.needToResize())if(this.resize=!0,this.cropSize=[this.webcamConfig.resizeHeight,this.webcamConfig.resizeWidth],this.cropBoxInd=Yu([0],"int32"),this.webcamConfig.centerCrop){const e=1*this.webcamConfig.resizeWidth/this.webcamVideoElement.width,t=1*this.webcamConfig.resizeHeight/this.webcamVideoElement.height,n=(1-e)/2,s=(1-t)/2,r=n+e,a=t+s;this.cropBox=Ju([s,n,a,r],[1,4])}else this.cropBox=Ju([0,0,1,1],[1,4])}summary(){return"webcam"}static async create(e,t={}){if(K().get("IS_NODE"))throw new Error("tf.data.webcam is only supported in browser environment.");if(!e){if(e=document.createElement("video"),!t.resizeWidth||!t.resizeHeight)throw new Error("Please provide webcam video element, or resizeWidth and resizeHeight to create a hidden video element.");e.width=t.resizeWidth,e.height=t.resizeHeight}const n=new Pk(e,t);return await n.start(),n}async start(){this.webcamConfig.facingMode&&l("user"===this.webcamConfig.facingMode||"environment"===this.webcamConfig.facingMode,(()=>`Invalid webcam facing mode: ${this.webcamConfig.facingMode}. Please provide 'user' or 'environment'`));try{this.stream=await navigator.mediaDevices.getUserMedia({video:{deviceId:this.webcamConfig.deviceId,facingMode:this.webcamConfig.facingMode?this.webcamConfig.facingMode:"user",width:this.webcamVideoElement.width,height:this.webcamVideoElement.height}})}catch(e){throw e.message=`Error thrown while initializing video stream: ${e.message}`,e}if(!this.stream)throw new Error("Could not obtain video from webcam.");try{this.webcamVideoElement.srcObject=this.stream}catch(e){console.log(e),this.webcamVideoElement.src=window.URL.createObjectURL(this.stream)}return this.webcamVideoElement.play(),this.isClosed=!1,new Promise((e=>{this.webcamVideoElement.onloadedmetadata=()=>{e()}}))}async next(){if(this.isClosed)return{value:null,done:!0};let e;try{e=wa(this.webcamVideoElement)}catch(e){throw new Error(`Error thrown converting video to pixels: ${JSON.stringify(e)}`)}if(!this.resize)return{value:e,done:!1};try{return{value:this.cropAndResizeFrame(e),done:!1}}catch(e){throw new Error(`Error thrown cropping the video: ${e.message}`)}finally{e.dispose()}}needToResize(){return!(!this.webcamConfig.resizeWidth||!this.webcamConfig.resizeHeight||this.webcamVideoElement.width===this.webcamConfig.resizeWidth&&this.webcamVideoElement.height===this.webcamConfig.resizeHeight)}cropAndResizeFrame(e){return ri((()=>{const t=Oo(qr(e,"float32"),0);let n;n=gh.cropAndResize(t,this.cropBox,this.cropBoxInd,this.cropSize,"bilinear");const s=n.shape;return Pi(n,s.slice(1))}))}async capture(){return(await this.next()).value}stop(){this.stream.getTracks().forEach((e=>e.stop()));try{this.webcamVideoElement.srcObject=null}catch(e){console.log(e),this.webcamVideoElement.src=null}this.isClosed=!0}toArray(){throw new Error("Can not convert infinite video stream to array.")}}class Wk{}class Vk extends ck{split(e){return new Uk(this,e)}}class Uk extends Vk{constructor(e,t){super(),this.upstream=e,this.impl=new Gk(e,t)}summary(){return this.impl.summary()}async next(){return this.impl.next()}}class Gk extends kk{constructor(e,t){super(),this.upstream=e,this.separator=t,this.carryover=""}summary(){return`${this.upstream.summary()} -> Split('${this.separator}')`}async pump(){const e=await this.upstream.next();if(e.done)return""!==this.carryover&&(this.outputQueue.push(this.carryover),this.carryover="",!0);const t=e.value.split(this.separator);t[0]=this.carryover+t[0];for(const e of t.slice(0,-1))this.outputQueue.push(e);return this.carryover=t[t.length-1],!0}}class Hk extends ck{decodeUTF8(){return new jk(this)}}class jk extends Vk{constructor(e){super(),this.upstream=e,this.impl=new qk(e)}summary(){return this.impl.summary()}async next(){return this.impl.next()}}class qk extends kk{constructor(e){if(super(),this.upstream=e,K().get("IS_BROWSER"))this.decoder=new TextDecoder("utf-8");else{const{StringDecoder:e}=require("string_decoder");this.decoder=new e("utf8")}}summary(){return`${this.upstream.summary()} -> Utf8`}async pump(){const e=await this.upstream.next();let t,n;return!e.done&&(t=e.value,n=K().get("IS_BROWSER")?this.decoder.decode(t,{stream:!0}):this.decoder.write(Buffer.from(t.buffer)),this.outputQueue.push(n),!0)}}class Kk extends Hk{constructor(e,t={}){super(),this.file=e,this.options=t,l(e instanceof Uint8Array||!!K().get("IS_BROWSER")&&(e instanceof File||e instanceof Blob),(()=>"FileChunkIterator only supports File, Blob and Uint8Array right now.")),this.offset=t.offset||0,this.chunkSize=t.chunkSize||1048576}summary(){return`FileChunks ${this.file}`}async next(){if(this.offset>=(this.file instanceof Uint8Array?this.file.byteLength:this.file.size))return{value:null,done:!0};const e=new Promise(((e,t)=>{const n=this.offset+this.chunkSize;if(this.file instanceof Uint8Array)e(new Uint8Array(this.file.slice(this.offset,n)));else{const s=new FileReader;s.onload=n=>{let r=s.result;if(r instanceof ArrayBuffer&&(r=new Uint8Array(r)),!(r instanceof Uint8Array))return t(new TypeError("FileReader returned unknown type."));e(r)},s.onabort=e=>t(new Error("Aborted")),s.onerror=e=>t(new Error(e.type));const r=this.file.slice(this.offset,n);s.readAsArrayBuffer(r)}this.offset=n}));return{value:await e,done:!1}}}const Xk=e=>({method:e.method,headers:e.headers,body:e.body,mode:e.mode,credentials:e.credentials,cache:e.cache,redirect:e.redirect,referrer:e.referrer,integrity:e.integrity});function Yk(e){return"string"==typeof e&&"file://"===e.substr(0,7)}class Jk extends Wk{constructor(e,t={}){super(),this.input=e,this.options=t}async iterator(){if(Yk(this.input)&&K().get("IS_NODE")){const e=require("fs");this.input=e.readFileSync(this.input.substr(7))}return new Kk(this.input,this.options)}}class Zk extends Wk{constructor(e,t={}){super(),this.url=e,this.fileOptions=t}async iterator(){return Yk(this.url)?new Jk(this.url,this.fileOptions).iterator():async function(e,t={}){let n,s;"string"==typeof e?n=e:(n=e.url,s=Xk(e));const r=await is(n,s);if(r.ok){const e=new Uint8Array(await r.arrayBuffer());return new Kk(e,t)}throw new Error(r.statusText)}(this.url,this.fileOptions)}}const Qk="3.4.0";var ev=Object.freeze({__proto__:null,array:function(e){return Ek((async()=>ok(e)),e.length)},Dataset:Tk,zip:function(e){if(!nk(e))throw new Error("The argument to zip() must be an object or array.");let t;if(Array.isArray(e))for(let n=0;n<e.length;n++)t=null==t?e[n].size:Math.min(t,e[n].size);else if(e instanceof Object)for(const n in e)t=null==t?e[n].size:Math.min(t,e[n].size);return Ek((async()=>function(e,t=Ik.FAIL){return new Ck(e,t)}(await tk(e,(e=>{if(e instanceof Tk)return{value:e.iterator(),recurse:!1};if(nk(e))return{value:null,recurse:!0};throw new Error("Leaves of the structure passed to zip() must be Datasets, not primitives.")})),Ik.SHORTEST)),t)},CSVDataset:zk,TextLineDataset:Rk,csv:function(e,t={}){return new zk(new Zk(e),t)},func:function(e){const t=lk(e);return Ek((async()=>t))},generator:function(e){return Ek((async()=>{const t=await e();return lk((()=>t.next()))}))},microphone:async function(e){return Bk.create(e)},webcam:async function(e,t){return Pk.create(e,t)},FileDataSource:Jk,URLDataSource:Zk,version_data:Qk});function tv(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&l("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the CPU backend.`))}))}const nv=rc;class sv extends n{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new t(this,ni())}nextDataId(){return sv.nextDataId++}write(e,t,n){this.firstUse&&(this.firstUse=!1,K().get("IS_NODE")&&Kh("\n============================\nHi there 👋. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================"));const s={id:this.nextDataId()};return this.data.set(s,{values:e,dtype:n,refCount:1}),s}makeTensorInfo(e,t,n){let s;if("string"===t&&null!=n&&n.length>0&&E(n[0])){const r=n.map((e=>os(e)));s=this.write(r,e,t)}else s=this.write(n,e,t);return{dataId:s,shape:e,dtype:t}}refCount(e){if(this.data.has(e)){return this.data.get(e).refCount}return 0}incRef(e){this.data.get(e).refCount++}decRef(e){if(this.data.has(e)){this.data.get(e).refCount--}}move(e,t,n,s,r){this.data.set(e,{values:t,dtype:s,refCount:r})}numDataIds(){return this.data.numDataIds()}async read(e){return this.readSync(e)}readSync(e){const{dtype:t,complexTensorInfos:n}=this.data.get(e);if("complex64"===t){return Xh(this.readSync(n.real.dataId),this.readSync(n.imag.dataId))}return this.data.get(e).values}bufferSync(e){const t=this.readSync(e.dataId);let n=t;if("string"===e.dtype)try{n=t.map((e=>ls(e)))}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return jr(e.shape,e.dtype,n)}makeOutput(e,t,n){const s=this.write(e,t,n);return ni().makeTensorFromDataId(s,t,n,this)}disposeData(e,t=!1){if(this.data.has(e)){if(this.data.get(e).refCount--,!t&&this.data.get(e).refCount>0)return!1;const{complexTensorInfos:n}=this.data.get(e);null!=n&&(this.disposeData(n.real.dataId,!0),this.disposeData(n.imag.dataId,!0)),this.data.delete(e)}return!0}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}async time(e){const t=as();e();return{kernelMs:as()-t}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){tv([e],"where");const t=this.readSync(e.dataId);return nv(e.shape,t)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}function rv(e){const t=new Float32Array(e.length);for(let n=0;n<e.length;++n)t[n]=Math.abs(e[n]);return t}sv.nextDataId=0;const av={kernelName:Z,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend;tv(t,"abs");let s=new Float32Array(p(t.shape));return s=rv(n.data.get(t.dataId).values),n.makeOutput(s,t.shape,"float32")}};function iv(e){return(t,n,s,r,a)=>{const i=Co(t,n),o=i.length,l=O(i),u=k(a,p(i)),c=t.length,h=n.length,d=O(t),f=O(n),m=No(t,i),g=No(n,i);if(m.length+g.length===0)for(let t=0;t<u.length;++t)u[t]=e(s[t%s.length],r[t%r.length]);else for(let t=0;t<u.length;++t){const n=U(t,o,l),a=n.slice(-c);m.forEach((e=>a[e]=0));const i=V(a,c,d),p=n.slice(-h);g.forEach((e=>p[e]=0));const y=V(p,h,f);u[t]=e(s[i],r[y])}return[u,i]}}function ov(e){const{inputs:t,backend:n}=e,{real:s,imag:r}=t,a=n.data.get(s.dataId).values,i=n.data.get(r.dataId).values,o=n.makeTensorInfo(s.shape,"complex64");return n.data.get(o.dataId).complexTensorInfos={real:n.makeTensorInfo(s.shape,"float32",a),imag:n.makeTensorInfo(r.shape,"float32",i)},o}const lv={kernelName:Ne,backendName:"cpu",kernelFunc:ov};function uv(e,t,n="float32"){if("complex64"===n){return ov({inputs:{real:uv(e,t,"float32"),imag:uv(e,t,"float32")},backend:e})}const s=B(p(t),n);return e.makeTensorInfo(t,n,s)}function cv(e){const{inputs:t,backend:n}=e,{x:s}=t;return n.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const hv={kernelName:ct,backendName:"cpu",kernelFunc:cv};function pv(e){const{inputs:t,backend:n}=e,{input:s}=t,r=n.data.get(s.dataId).complexTensorInfos.real,a=n.data.get(r.dataId).values;return n.makeTensorInfo(r.shape,r.dtype,a)}const dv={kernelName:tn,backendName:"cpu",kernelFunc:pv};function fv(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{dtype:a}=s;if("complex64"===a){if("complex64"===r.dtype)return cv({inputs:{x:r},backend:n});const e=uv(n,r.shape,r.dtype),t=fv({inputs:{x:r},backend:n,attrs:{dtype:"float32"}}),s=ov({inputs:{real:t,imag:e},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),s}if("complex64"===r.dtype){const e=pv({inputs:{input:r},backend:n}),t=fv({inputs:{x:e},backend:n,attrs:{dtype:a}});return n.disposeIntermediateTensorInfo(e),t}if(!C(r.dtype,a)){const e=cv({inputs:{x:r},backend:n});return{dataId:e.dataId,shape:e.shape,dtype:a}}if("int32"===a){const e=n.data.get(r.dataId).values,t=Int32Array.from(e);return n.makeTensorInfo(r.shape,"int32",t)}if("bool"===a){const e=n.data.get(r.dataId).values,t=rs([0],r.dtype),[s,a]=iv(((e,t)=>e!==t?1:0))(r.shape,[],e,t,"bool");return n.makeTensorInfo(a,"bool",s)}throw new Error(`Error in Cast: failed to cast ${r.dtype} to ${a}`)}const mv={kernelName:we,backendName:"cpu",kernelFunc:fv};function gv(e,t,n,s){return null==n?({inputs:n,backend:r})=>{const{a:a,b:i}=n,o=r;tv([a,i],e);const l=o.data.get(a.dataId).values,u=o.data.get(i.dataId).values,c=s||a.dtype,[h,p]=t(a.shape,i.shape,l,u,c);return o.makeTensorInfo(p,c,h)}:({inputs:e,backend:r})=>{const{a:a,b:i}=e,o=r;if("complex64"===a.dtype||"complex64"===i.dtype){const e=fv({inputs:{x:a},backend:o,attrs:{dtype:"complex64"}}),t=o.data.get(e.dataId),s=t.complexTensorInfos.real,r=t.complexTensorInfos.imag,l=o.data.get(s.dataId).values,u=o.data.get(r.dataId).values,c=fv({inputs:{x:i},backend:o,attrs:{dtype:"complex64"}}),h=o.data.get(c.dataId),p=h.complexTensorInfos.real,d=h.complexTensorInfos.imag,f=o.data.get(p.dataId).values,m=o.data.get(d.dataId).values,[g,y,b]=n(a.shape,i.shape,l,u,f,m),x=o.makeTensorInfo(b,"float32",g),w=o.makeTensorInfo(b,"float32",y),k=ov({inputs:{real:x,imag:w},backend:o});return o.disposeIntermediateTensorInfo(e),o.disposeIntermediateTensorInfo(c),o.disposeIntermediateTensorInfo(x),o.disposeIntermediateTensorInfo(w),k}{const e=o.data.get(a.dataId).values,n=o.data.get(i.dataId).values,r=s||a.dtype,[l,u]=t(a.shape,i.shape,e,n,r);return o.makeTensorInfo(u,r,l)}}}function yv(e){return(t,n,s,r,a,i)=>{const o=Co(t,n),l=p(o),u=o.length,c=O(o),h=k("float32",l),d=k("float32",l),f=No(t,o),m=No(n,o),g=Xh(s,r),y=Xh(a,i),b=t.length,x=O(t),w=n.length,v=O(n);if(f.length+m.length===0)for(let t=0;t<h.length;t++){const n=t%g.length,s=t%y.length,r=e(g[2*n],g[2*n+1],y[2*s],y[2*s+1]);h[t]=r.real,d[t]=r.imag}else for(let t=0;t<h.length;t++){const n=U(t,u,c),s=n.slice(-b);f.forEach((e=>s[e]=0));const r=V(s,b,x),a=n.slice(-w);m.forEach((e=>a[e]=0));const i=V(a,w,v),o=e(g[2*r],g[2*r+1],y[2*i],y[2*i+1]);h[t]=o.real,d[t]=o.imag}return[h,d,o]}}const bv=iv(((e,t)=>e+t)),xv=yv(((e,t,n,s)=>({real:e+n,imag:t+s}))),wv=gv(te,bv,xv),kv={kernelName:te,backendName:"cpu",kernelFunc:wv};function vv(e,t,n,s,r){const a=p(s),i=B(r,n);for(let n=0;n<e.length;n++){const s=e[n];if(s<0)throw new Error("Input x must be non-negative!");s>=r||(i[s]+=a>0?t[n]:1)}return i}function Nv(e,t,n,s=!1){const r=e.shape[0],a=e.shape[1],i=jr([r,n],t.dtype);for(let o=0;o<r;o++)for(let r=0;r<a;r++){const a=e.get(o,r);if(a<0)throw new Error("Input x must be non-negative!");a>=n||(s?i.set(1,o,a):t.size>0?i.set(i.get(o,a)+t.get(o,r),o,a):i.set(i.get(o,a)+1,o,a))}return i}function Iv(e){return(t,n,s)=>{const r=k(n,t.length);for(let n=0;n<t.length;++n)r[n]=e(t[n],s);return r}}function Cv(e,t,n){return({inputs:s,attrs:r,backend:a})=>{const{x:i}=s;if(tv(i,e),"string"===i.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const o=a,l=o.data.get(i.dataId).values,u=p(i.shape),c=n||i.dtype,h=v(c,u);for(let e=0;e<u;++e)h[e]=t(l[e],r);return o.makeTensorInfo(i.shape,c,h)}}function $v(e,t,n){return({inputs:s,attrs:r,backend:a})=>{const{x:i}=s;if(tv(i,e),"string"===i.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const o=a,l=o.data.get(i.dataId).values,u=n||i.dtype,c=t(l,u,r);return o.makeTensorInfo(i.shape,u,c)}}const Sv=Iv((e=>Math.ceil(e))),Tv=$v(ke,Sv),Ev={kernelName:ke,backendName:"cpu",kernelFunc:Tv};function Av(e,t,n,s){const r=v(n,p(t));if(s&&"string"!==n){let t=0;e.forEach((e=>{const n=p(e.shape);r.set(e.vals,t),t+=n}))}else{let s=0;e.forEach((e=>{const a="string"===n?gp(e.vals):e.vals;let i=0;for(let n=0;n<e.shape[0];++n){const o=n*t[1]+s;for(let t=0;t<e.shape[1];++t)r[o+t]=a[i++]}s+=e.shape[1]}))}return r}const Rv=Iv((e=>Math.exp(e))),Fv=$v(Je,Rv),Dv={kernelName:Je,backendName:"cpu",kernelFunc:Fv},_v=Iv((e=>Math.expm1(e))),Ov=$v(Qe,_v),Mv={kernelName:Qe,backendName:"cpu",kernelFunc:Ov},Lv=Iv((e=>Math.floor(e))),zv=$v(st,Lv),Bv={kernelName:st,backendName:"cpu",kernelFunc:zv};function Pv(e,t,n){const s=jr(n,e.dtype);for(let n=0;n<s.size;++n){const r=s.indexToLoc(n).slice(),a=r[0],i=r[2],o=t.locToIndex([a,i]);r[2]=t.values[o];const l=e.locToIndex(r);s.values[n]=e.values[l]}return s}const Wv=iv(((e,t)=>e>t?1:0)),Vv=gv(lt,Wv,null,"bool"),Uv={kernelName:lt,backendName:"cpu",kernelFunc:Vv},Gv=iv(((e,t)=>e<t?1:0)),Hv=gv(yt,Gv,null,"bool"),jv={kernelName:yt,backendName:"cpu",kernelFunc:Hv};function qv(e,t,n){const s=(t-e)/(n-1),r=B(n,"float32");r[0]=e;for(let e=1;e<r.length;e++)r[e]=r[e-1]+s;return r}const Kv=Iv((e=>Math.log(e))),Xv=$v(wt,Kv),Yv={kernelName:wt,backendName:"cpu",kernelFunc:Xv};function Jv(e,t,n,s){const r=k(s,p(n));for(let n=0;n<r.length;++n){const s=n*t;let a=e[s];for(let n=0;n<t;++n){const t=e[s+n];t>a&&(a=t)}r[n]=a}return r}const Zv=iv(((e,t)=>Math.max(e,t))),Qv=gv(Et,Zv),eN={kernelName:Et,backendName:"cpu",kernelFunc:Qv},tN=iv(((e,t)=>Math.min(e,t))),nN=gv(Lt,tN),sN={kernelName:Lt,backendName:"cpu",kernelFunc:nN},rN=iv(((e,t)=>e*t)),aN=yv(((e,t,n,s)=>({real:e*n-t*s,imag:e*s+t*n}))),iN=gv(Wt,rN,aN),oN={kernelName:Wt,backendName:"cpu",kernelFunc:iN};function lN(e,t,n){const s=ss(-1,n);return rN([],t,s,e,n)}const uN={kernelName:Vt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;tv(s,"neg");const r=n.data.get(s.dataId).values,[a,i]=lN(r,s.shape,s.dtype);return n.makeTensorInfo(i,s.dtype,a)}},cN=iv(((e,t)=>e!==t?1:0)),hN=gv(Ut,cN,null,"bool"),pN={kernelName:Ut,backendName:"cpu",kernelFunc:hN};function dN(e,t,n,s,r){const a=t.length,i=p(t),o=O(t),l=O(r),u=k(n,p(r));for(let t=0;t<i;++t){const n=U(t,a,o),r=new Array(n.length);for(let e=0;e<r.length;e++)r[e]=n[s[e]];u[V(r,a,l)]=e[t]}return u}function fN(e){const{inputs:t,attrs:n,backend:s}=e,{x:r}=t,{perm:a}=n;tv(r,"transpose");const i=r.shape.length,o=new Array(i);for(let e=0;e<o.length;e++)o[e]=r.shape[a[e]];const l=dN(s.data.get(r.dataId).values,r.shape,r.dtype,a,o);return{dataId:s.write(l,o,r.dtype),shape:o,dtype:r.dtype}}const mN={kernelName:zn,backendName:"cpu",kernelFunc:fN};function gN(e,t,n,s){const[r,a]=dl(e,s),i=Rs(t,"int32"),o=B(p(r),i),l=p(a);for(let e=0;e<o.length;++e){const t=e*l;let s=1;for(let e=0;e<l;++e)s*=n[t+e];o[e]=s}return{outVals:o,outShape:r,outDtype:i}}const yN={kernelName:Qt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;tv(r,"prod");const o=r.shape.length,l=x(a,r.shape),u=gl(l,o);let c=l,h=r;const p=[];null!=u&&(h=fN({inputs:{x:r},backend:n,attrs:{perm:u}}),p.push(h),c=bl(c.length,o));const d=n.data.get(h.dataId).values,{outVals:f,outShape:m,outDtype:g}=gN(h.shape,h.dtype,d,c);let y=m;return i&&(y=fl(m,l)),p.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(y,g,f)}};function bN(e,t,n,s){if(e===t||e<t&&n<0||t<e&&n>1)return B(0,s);const r=B(Math.abs(Math.ceil((t-e)/n)),s);t<e&&1===n&&(n=-1),r[0]=e;for(let e=1;e<r.length;e++)r[e]=r[e-1]+n;return r}const xN=Iv((e=>1/Math.sqrt(e))),wN=$v(dn,xN),kN={kernelName:dn,backendName:"cpu",kernelFunc:wN};function vN(e,t,n,s,r){const a=Pa(s,t,n),i=p(n),o=O(s);if(a){const n=Wa(t,o);return"string"===r?e.slice(n,n+i):e.subarray(n,n+i)}const l=jr(s,r,"string"===r?gp(e):e),u=jr(n,r);for(let e=0;e<u.size;++e){const n=u.indexToLoc(e),s=n.map(((e,n)=>e+t[n]));u.set(l.get(...s),...n)}return"string"===r?yp(u.values):u.values}function NN(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,size:i}=s;tv(r,"slice");const[o,l]=Va(r,a,i);Ta(r,o,l);const u=vN(n.data.get(r.dataId).values,o,l,r.shape,r.dtype);return n.makeTensorInfo(l,r.dtype,u)}const IN={kernelName:yn,backendName:"cpu",kernelFunc:NN},CN=iv(((e,t)=>{const n=e-t;return n*n})),$N=gv(Tn,CN),SN={kernelName:Tn,backendName:"cpu",kernelFunc:$N};function TN(e,t,n,s){const r=jr(e,t.dtype);for(let e=0;e<r.size;e++){const a=r.indexToLoc(e),i=new Array(a.length);for(let e=0;e<i.length;e++)i[e]=a[e]*n[e]+s[e];r.set(t.get(...i),...a)}return r}const EN=iv(((e,t)=>e-t)),AN=yv(((e,t,n,s)=>({real:e-n,imag:t-s}))),RN=gv(An,EN,AN),FN={kernelName:An,backendName:"cpu",kernelFunc:RN};function DN(e,t){const n=new Array(e.rank);for(let s=0;s<n.length;s++)n[s]=e.shape[s]*t[s];const s=jr(n,e.dtype);for(let t=0;t<s.values.length;++t){const n=s.indexToLoc(t),r=new Array(e.rank);for(let t=0;t<r.length;t++)r[t]=n[t]%e.shape[t];const a=e.locToIndex(r);s.values[t]=e.values[a]}return s}function _N(e,t,n,s,r){const a=t[t.length-1],[i,o]=[e.length/a,a],l=k(n,i*s),u=k("int32",i*s);for(let t=0;t<i;t++){const n=t*o,r=e.subarray(n,n+o),a=[];for(let e=0;e<r.length;e++)a.push({value:r[e],index:e});a.sort(((e,t)=>t.value-e.value));const i=t*s,c=l.subarray(i,i+s),h=u.subarray(i,i+s);for(let e=0;e<s;e++)c[e]=a[e].value,h[e]=a[e].index}const c=t.slice();return c[c.length-1]=s,[jr(c,n,l),jr(c,"int32",u)]}function ON(e,t,n,s){const r=x(t,n)[0],a=[1,n[0],1];for(let e=0;e<r;e++)a[0]*=n[e];a[1]=n[r];for(let e=r+1;e<n.length;e++)a[2]*=n[e];const i={},o=new Int32Array(n[r]),l=new bs(a,s,e),u=[],c=1===a[0]&&1===a[2];for(let t=0;t<n[r];t++){let n;if(c)n=e[t].toString();else{const e=[];for(let n=0;n<a[0];n++)for(let s=0;s<a[2];s++)e.push(l.get(n,t,s));n=e.join(",")}if(void 0!==i[n])o[t]=i[n];else{const e=Object.keys(i).length;i[n]=e,o[t]=e,u.push(t)}}const h=a.slice();h[1]=Object.keys(i).length;const p=new bs(h,s);u.forEach(((e,t)=>{for(let n=0;n<a[0];n++)for(let s=0;s<a[2];s++)p.set(l.get(n,e,s),n,t,s)}));const d=n.slice();return d[r]=h[1],{outputValues:p.values,outputShape:d,indices:o}}var MN=Object.freeze({__proto__:null,simpleAbsImpl:rv,addImpl:bv,bincountImpl:vv,bincountReduceImpl:Nv,ceilImpl:Sv,concatImpl:Av,expImpl:Rv,expm1Impl:_v,floorImpl:Lv,gatherV2Impl:Pv,greaterImpl:Wv,lessImpl:Gv,linSpaceImpl:qv,logImpl:Kv,maxImpl:Jv,maximumImpl:Zv,minimumImpl:tN,multiplyImpl:rN,negImpl:lN,notEqualImpl:cN,prodImpl:gN,rangeImpl:bN,rsqrtImpl:xN,sliceImpl:vN,squaredDifferenceImpl:CN,stridedSliceImpl:TN,subImpl:EN,tileImpl:DN,topKImpl:_N,transposeImpl:dN,uniqueImpl:ON});li("cpu",(()=>new sv),1);const LN=Cv(qe,(e=>e>=0?e:Math.exp(e)-1)),zN={kernelName:qe,backendName:"cpu",kernelFunc:LN};function BN(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{alpha:a}=s;tv([r],"leakyRelu");const i=p(r.shape),o=n.data.get(r.dataId).values,l=k("float32",i);for(let e=0;e<o.length;e++)l[e]=o[e]<0?a*o[e]:o[e];return n.makeTensorInfo(r.shape,"float32",l)}const PN={kernelName:gt,backendName:"cpu",kernelFunc:BN},WN=iv(((e,t)=>e<0?t*e:e));function VN(e){const{inputs:t,backend:n}=e,{x:s,alpha:r}=t;tv([s,r],"prelu");const a=n.data.get(s.dataId).values,i=n.data.get(r.dataId).values,[o,l]=WN(s.shape,r.shape,a,i,s.dtype);return n.makeTensorInfo(l,s.dtype,o)}const UN={kernelName:Zt,backendName:"cpu",kernelFunc:VN},GN=Cv(sn,(e=>Math.max(0,e))),HN={kernelName:sn,backendName:"cpu",kernelFunc:GN},jN=Cv(cn,(e=>Math.min(Math.max(0,e),6))),qN={kernelName:cn,backendName:"cpu",kernelFunc:jN};function KN(e,t,n,s,r){if("linear"===n)return cv({inputs:{x:t},backend:e});if("relu"===n)return GN({inputs:{x:t},backend:e});if("elu"===n)return LN({inputs:{x:t},backend:e});if("relu6"===n)return jN({inputs:{x:t},backend:e});if("prelu"===n)return VN({inputs:{x:t,alpha:s},backend:e});if("leakyrelu"===n)return BN({inputs:{x:t},backend:e,attrs:{alpha:r}});throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}function XN(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{shape:a}=s,i=p(r.shape),o=b(a,i),u=p(o);l(i===u,(()=>`The new shape (${o}) has ${u} elements and the old shape (${r.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`)),n.incRef(r.dataId);const c=n.data.get(r.dataId);if(null!=c.complexTensorInfos){const e=c.complexTensorInfos.real,t=c.complexTensorInfos.imag;e.shape=o,t.shape=o}return{dataId:r.dataId,shape:o,dtype:r.dtype}}const YN={kernelName:rn,backendName:"cpu",kernelFunc:XN};function JN(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a}=t,{transposeA:i,transposeB:o}=s;tv([r,a],"matMul");const u=r.shape.length,c=a.shape.length,h=i?r.shape[u-2]:r.shape[u-1],d=o?a.shape[c-1]:a.shape[c-2],f=i?r.shape[u-1]:r.shape[u-2],m=o?a.shape[c-2]:a.shape[c-1],g=r.shape.slice(0,-2),y=a.shape.slice(0,-2),b=p(g),x=p(y);l(u>=2&&c>=2&&(b===x||1===b||1===x),(()=>`Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input batch dimensions of (${g}) and (${y}).`));const w=(b>x?r.shape.slice(0,-2):a.shape.slice(0,-2)).concat([f,m]);l(h===d,(()=>`Error in matMul: inner shapes (${h}) and (${d}) of Tensors with shapes ${r.shape} and ${a.shape} and transposeA=${i} and transposeB=${o} must match.`));const k=o?[x,m,d]:[x,d,m],v=XN({inputs:{x:r},backend:n,attrs:{shape:i?[b,h,f]:[b,f,h]}}),N=XN({inputs:{x:a},backend:n,attrs:{shape:k}}),I=i?v.shape[1]:v.shape[2],C=i?v.shape[2]:v.shape[1],$=o?N.shape[1]:N.shape[2],S=Math.max(b,x),T=n.data.get(v.dataId).values,E=n.data.get(N.dataId).values,A=O(v.shape),R=O(N.shape),[F,D,_]=i?[A[0],1,A[1]]:[A[0],A[1],1],[M,L,z]=o?[1,R[1],R[0]]:[R[1],1,R[0]],B=C*$,P=jr([S,C,$],v.dtype),W=P.values,V=n.blockSize;for(let e=0;e<S;e++)for(let t=0;t<C;t+=V)for(let n=0;n<$;n+=V)for(let s=0;s<I;s+=V){const r=Math.min(t+V,C),a=Math.min(n+V,$),i=Math.min(s+V,I);for(let o=t;o<r;o++)for(let t=n;t<a;t++){let n=0;for(let r=s;r<i;r++){const s=Math.min(e,b-1)*F,a=Math.min(e,x-1)*z;n+=T[s+o*D+r*_]*E[r*M+t*L+a]}W[e*B+(o*$+t)]+=n}}return n.disposeIntermediateTensorInfo(v),n.disposeIntermediateTensorInfo(N),n.makeTensorInfo(w,P.dtype,P.values)}const ZN={kernelName:ge,backendName:"cpu",kernelFunc:JN};const QN={kernelName:jn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a,bias:i,preluActivationWeights:o}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=s;let p,d,f;const m=[];p=JN({inputs:{a:r,b:a},attrs:{transposeA:l,transposeB:u},backend:n}),i&&(d=wv({inputs:{a:p,b:i},backend:n}),m.push(p),p=d),c&&(f=KN(n,p,c,o,h),m.push(p),p=f);for(const e of m)n.disposeIntermediateTensorInfo(e);return p}},eI=Cv(Q,(e=>Math.acos(e))),tI={kernelName:Q,backendName:"cpu",kernelFunc:eI},nI=Cv(ee,(e=>Math.acosh(e))),sI={kernelName:ee,backendName:"cpu",kernelFunc:nI};const rI={kernelName:ne,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,s=t;tv(t,"addN");const r=s.map((e=>n.data.get(e.dataId).values)),a=jr(s[0].shape,s[0].dtype),i=a.values;for(let e=0;e<s.length;e++){const t=r[e];for(let e=0;e<i.length;e++)i[e]+=t[e]}return n.makeTensorInfo(a.shape,a.dtype,a.values)}};const aI={kernelName:se,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;tv(r,"all");const o=x(a,r.shape);let l=o;const u=gl(l,r.shape.length);let c=r;null!=u&&(c=fN({inputs:{x:r},backend:n,attrs:{perm:u}}),l=bl(l.length,r.shape.length)),ml("all",l,c.shape.length);const[h,d]=dl(c.shape,l),f=p(d),m=B(p(h),c.dtype),g=n.data.get(c.dataId).values;for(let e=0;e<m.length;++e){const t=e*f;let n=g[t];for(let e=0;e<f;++e){const s=g[t+e];n=n&&s}m[e]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const y=n.makeTensorInfo(h,c.dtype,m);if(i){const e=XN({inputs:{x:y},backend:n,attrs:{shape:fl(h,o)}});return n.disposeIntermediateTensorInfo(y),e}return y}};const iI={kernelName:re,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;tv(r,"any");const o=x(a,r.shape);let l=o;const u=gl(l,r.shape.length);let c=r;null!=u&&(c=fN({inputs:{x:r},backend:n,attrs:{perm:u}}),l=bl(l.length,r.shape.length)),ml("any",l,c.shape.length);const[h,d]=dl(c.shape,l),f=p(d),m=B(p(h),c.dtype),g=n.data.get(c.dataId).values;for(let e=0;e<m.length;++e){const t=e*f;let n=g[t];for(let e=0;e<f;++e){const s=g[t+e];n=n||s}m[e]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const y=n.makeTensorInfo(h,c.dtype,m);if(i){const e=XN({inputs:{x:y},backend:n,attrs:{shape:fl(h,o)}});return n.disposeIntermediateTensorInfo(y),e}return y}};const oI={kernelName:ae,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;tv(r,"argMax");let i=x(a,r.shape);const o=gl(i,r.shape.length);let l=r;const u=[];null!=o&&(l=fN({inputs:{x:r},backend:n,attrs:{perm:o}}),u.push(l),i=bl(i.length,l.shape.length)),i=[i[0]],ml("argMax",i,l.shape.length);const[c,h]=dl(l.shape,i),d=B(p(c),"int32"),f=p(h),m=n.data.get(l.dataId).values;for(let e=0;e<d.length;++e){const t=e*f;let n=m[t],s=0;for(let e=0;e<f;++e){const r=m[t+e];r>n&&(n=r,s=e)}d[e]=s}return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(c,"int32",d)}};const lI={kernelName:ie,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;tv(r,"argMin");let i=x(a,r.shape);const o=gl(i,r.shape.length);let l=r;const u=[];null!=o&&(l=fN({inputs:{x:r},backend:n,attrs:{perm:o}}),u.push(l),i=bl(i.length,l.shape.length)),i=[i[0]],ml("argMin",i,l.shape.length);const[c,h]=dl(l.shape,i),d=B(p(c),"int32"),f=p(h),m=n.data.get(l.dataId).values;for(let e=0;e<d.length;++e){const t=e*f;let n=m[t],s=0;for(let e=0;e<f;++e){const r=m[t+e];r<n&&(n=r,s=e)}d[e]=s}return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(c,"int32",d)}},uI=Cv(oe,(e=>Math.asin(e))),cI={kernelName:oe,backendName:"cpu",kernelFunc:uI},hI=Cv(le,(e=>Math.asinh(e))),pI={kernelName:le,backendName:"cpu",kernelFunc:hI},dI=Cv(ue,(e=>Math.atan(e))),fI={kernelName:ue,backendName:"cpu",kernelFunc:dI},mI=iv(((e,t)=>Math.atan2(e,t))),gI=gv(he,mI),yI={kernelName:he,backendName:"cpu",kernelFunc:gI},bI=Cv(ce,(e=>Math.atanh(e))),xI={kernelName:ce,backendName:"cpu",kernelFunc:bI};function wI(e,t,n,s,r,a){const i=r.strideHeight,o=r.strideWidth,l=r.dilationHeight,u=r.dilationWidth,c=r.effectiveFilterHeight,h=r.effectiveFilterWidth,p=r.padInfo.top,d=r.padInfo.left,f="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,m=jr(r.outShape,n),g=m.values,y=r.outShape[1]*r.outShape[2]*r.outShape[3],b=r.outShape[2]*r.outShape[3],x=r.outShape[3];for(let t=0;t<r.batchSize;++t){const n=t*y,m=t*s[0];for(let t=0;t<r.inChannels;++t)for(let y=0;y<r.outHeight;++y){const w=y*i-p,k=Math.max(0,w),v=Math.min(r.inHeight,c+w),N=n+y*b;for(let n=0;n<r.outWidth;++n){const i=n*o-d,c=Math.max(0,i),p=Math.min(r.inWidth,h+i);let y=f,b=0,w=0;for(let n=k;n<v;n+=l){const r=m+n*s[1];for(let n=c;n<p;n+=u){const i=e[r+n*s[2]+t];"max"===a&&i>y?y=i:"avg"===a&&(b+=i,w++)}if(isNaN(y))break}g[N+n*x+t]="avg"===a?b/w:y}}}return m}function kI(e,t,n,s,r=!1,a=!1){const i=jr(s.outShape,"int32"),o=s.strideHeight,l=s.strideWidth,u=s.dilationHeight,c=s.dilationWidth,h=s.effectiveFilterHeight,p=s.effectiveFilterWidth,d=s.padInfo.top,f=s.padInfo.left,m=jr(t,n,e);for(let e=0;e<s.batchSize;++e)for(let t=0;t<s.inChannels;++t)for(let n=0;n<s.outHeight;++n){const g=n*o-d;let y=g;for(;y<0;)y+=u;const b=Math.min(s.inHeight,h+g);for(let o=0;o<s.outWidth;++o){const h=o*l-f;let d=h;for(;d<0;)d+=c;const x=Math.min(s.inWidth,p+h);let w=Number.NEGATIVE_INFINITY,k=-1;for(let n=y;n<b;n+=u){const i=n-g;for(let o=d;o<x;o+=c){const l=o-h,u=m.get(e,n,o,t);u>w&&(w=u,k=r?a?((e*s.inHeight+n)*s.inWidth+o)*s.inChannels+t:(n*s.inWidth+o)*s.inChannels+t:i*p+l)}}i.set(k,e,n,o,t)}}return i}function vI(e,t,n,s,r,a){const i=r.strideDepth,o=r.strideHeight,l=r.strideWidth,u=r.dilationDepth,c=r.dilationHeight,h=r.dilationWidth,p=r.effectiveFilterDepth,d=r.effectiveFilterHeight,f=r.effectiveFilterWidth,m=r.padInfo.front,g=r.padInfo.top,y=r.padInfo.left,b="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,x=jr(r.outShape,n),w=x.values,k=r.outShape[1]*r.outShape[2]*r.outShape[3]*r.outShape[4],v=r.outShape[2]*r.outShape[3]*r.outShape[4],N=r.outShape[3]*r.outShape[4],I=r.outShape[4];for(let t=0;t<r.batchSize;++t){const n=t*k,x=t*s[0];for(let t=0;t<r.inChannels;++t)for(let k=0;k<r.outDepth;++k){const C=k*i-m;let $=C;for(;$<0;)$+=u;const S=Math.min(r.inDepth,p+C),T=n+k*v;for(let n=0;n<r.outHeight;++n){const i=n*o-g;let p=i;for(;p<0;)p+=c;const m=Math.min(r.inHeight,d+i),k=T+n*N;for(let n=0;n<r.outWidth;++n){const i=n*l-y;let o=i;for(;o<0;)o+=h;const d=Math.min(r.inWidth,f+i),g=k+n*I;let v=b,N=0,C=0;for(let n=$;n<S;n+=u){const r=x+n*s[1];for(let n=p;n<m;n+=c){const i=r+n*s[2];for(let n=o;n<d;n+=h){const r=e[i+n*s[3]+t];if("max"===a&&r>v?v=r:"avg"===a&&(N+=r,C++),isNaN(v))break}if(isNaN(v))break}if(isNaN(v))break}w[g+t]="avg"===a?N/C:v}}}}return x}const NI={kernelName:pe,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;tv(r,"avgPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:u}=s;l(zi(i,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const c=Ti(r.shape,a,i,1,o,u);let h;if(1===c.filterWidth&&1===c.filterHeight&&d(c.inShape,c.outShape))h=cv({inputs:{x:r},backend:n});else{const e=n.data.get(r.dataId).values,t=O(r.shape),s=wI(e,r.shape,r.dtype,t,c,"avg");h=n.makeTensorInfo(c.outShape,r.dtype,s.values)}return h}};const II={kernelName:fe,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:l,dataFormat:u}=s;tv(r,"avgPool3d");const c=Ei(r.shape,a,i,1,o,l,u),h=vI(n.data.get(r.dataId).values,r.shape,r.dtype,O(r.shape),c,"avg");return n.makeTensorInfo(h.shape,"float32",h.values)}};const CI={kernelName:me,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,{filterSize:i,strides:o,pad:l,dimRoundingMode:u}=s;tv([r,a],"avgPool3DGrad");const c=Ei(a.shape,i,o,1,l,u),h=c.strideDepth,p=c.strideHeight,d=c.strideWidth,f=c.filterDepth,m=c.filterHeight,g=c.filterWidth,y=c.dilationDepth,b=c.dilationHeight,x=c.dilationWidth,w=c.effectiveFilterDepth,k=c.effectiveFilterHeight,v=c.effectiveFilterWidth,N=w-1-c.padInfo.front,I=v-1-c.padInfo.left,C=k-1-c.padInfo.top,$=jr(a.shape,"float32"),S=1/(f*m*g),T=n.bufferSync(r);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inDepth;++n)for(let s=0;s<c.inHeight;++s)for(let r=0;r<c.inWidth;++r){const a=n-N,i=s-C,o=r-I;let l=0;for(let n=0;n<w;n+=y){const s=(a+n)/h;if(!(s<0||s>=c.outDepth||Math.floor(s)!==s))for(let n=0;n<k;n+=b){const r=(i+n)/p;if(!(r<0||r>=c.outHeight||Math.floor(r)!==r))for(let n=0;n<v;n+=x){const a=(o+n)/d;if(a<0||a>=c.outWidth||Math.floor(a)!==a)continue;l+=T.get(e,s,r,a,t)}}}$.set(l*S,e,n,s,r,t)}return n.makeTensorInfo($.shape,$.dtype,$.values)}};const $I={kernelName:de,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,i=a;tv([r,a],"avgPoolGrad");const{filterSize:o,strides:l,pad:u}=s,c=Ti(i.shape,o,l,1,u),h=c.strideHeight,p=c.strideWidth,d=c.filterHeight,f=c.filterWidth,m=c.dilationHeight,g=c.dilationWidth,y=c.effectiveFilterHeight,b=c.effectiveFilterWidth,x=b-1-c.padInfo.left,w=y-1-c.padInfo.top,k=jr(i.shape,"float32"),v=1/(d*f),N=n.data.get(r.dataId).values,I=jr(r.shape,"float32",N);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inHeight;++n)for(let s=0;s<c.inWidth;++s){const r=n-w,a=s-x;let i=0;for(let n=0;n<y;n+=m){const s=(r+n)/h;if(!(s<0||s>=c.outHeight||Math.floor(s)!==s))for(let n=0;n<b;n+=g){const r=(a+n)/p;if(r<0||r>=c.outWidth||Math.floor(r)!==r)continue;i+=I.get(e,s,r,t)}}k.set(i*v,e,n,s,t)}return n.makeTensorInfo(k.shape,k.dtype,k.values)}};const SI={kernelName:at,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,scale:a,offset:i,mean:o,variance:u}=t;l(o.shape.length===u.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),l(null==i||o.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),l(null==a||o.shape.length===a.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks.")),tv([r,o,u,a,i],"batchNorm");let{varianceEpsilon:c}=s;null==c&&(c=.001);const h=n.data.get(r.dataId).values,p=n.data.get(o.dataId).values,d=n.data.get(u.dataId).values,f=a?n.data.get(a.dataId).values:new Float32Array([1]),m=i?n.data.get(i.dataId).values:new Float32Array([0]),g=new Float32Array(h.length),y=m.length,b=f.length,x=d.length,w=p.length;let k=0,v=0,N=0,I=0;for(let e=0;e<h.length;++e)g[e]=m[k++]+(h[e]-p[v++])*f[N++]/Math.sqrt(d[I++]+c),k>=y&&(k=0),v>=w&&(v=0),N>=b&&(N=0),I>=x&&(I=0);return n.makeTensorInfo(r.shape,r.dtype,g)}};const TI={kernelName:ye,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,crops:i}=s;tv([r],"batchToSpaceND");const o=a.reduce(((e,t)=>e*t)),l=Oh(r.shape,a,o),u=Mh(l.length,a.length),c=Lh(r.shape,a,o),h=zh(i,a.length),p=Bh(c,i,a.length),d=XN({inputs:{x:r},backend:n,attrs:{shape:l}}),f=fN({inputs:{x:d},backend:n,attrs:{perm:u}}),m=XN({inputs:{x:f},backend:n,attrs:{shape:c}}),g=NN({inputs:{x:m},backend:n,attrs:{begin:h,size:p}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}};const EI={kernelName:be,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i}=s,o=vv(n.data.get(r.dataId).values,n.data.get(a.dataId).values,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,o)}},AI=Cv(ve,((e,t)=>{const n=t;return e>n.clipValueMax?n.clipValueMax:e<n.clipValueMin?n.clipValueMin:e})),RI={kernelName:ve,backendName:"cpu",kernelFunc:AI},FI={kernelName:Ie,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend,s=new Float32Array(p(t.shape)),r=n.data.get(t.dataId),a=r.complexTensorInfos.real,i=r.complexTensorInfos.imag,o=n.data.get(a.dataId).values,l=n.data.get(i.dataId).values;for(let e=0;e<o.length;e++){const t=o[e],n=l[e];s[e]=Math.hypot(t,n)}return n.makeOutput(s,t.shape,"float32")}};function DI(e){const{inputs:t,backend:n}=e,{input:s}=t,r=n.data.get(s.dataId).complexTensorInfos.imag,a=n.data.get(r.dataId).values;return n.makeTensorInfo(r.shape,r.dtype,a)}const _I={kernelName:pt,backendName:"cpu",kernelFunc:DI};function OI(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s,a=x(r,t[0].shape)[0];let i=Fh(t.map((e=>e.shape)),a);if(0===p(i))return n.makeTensorInfo(i,t[0].dtype,[]);const o=t.filter((e=>p(e.shape)>0));if(1===o.length)return cv({inputs:{x:o[0]},backend:n});if(Rh(o.map((e=>e.shape)),a),"complex64"===o[0].dtype){const e=o.map((e=>pv({inputs:{input:e},backend:n}))),t=o.map((e=>DI({inputs:{input:e},backend:n}))),s=OI({inputs:e,backend:n,attrs:{axis:a}}),r=OI({inputs:t,backend:n,attrs:{axis:a}}),i=ov({inputs:{real:s,imag:r},backend:n});return e.forEach((e=>n.disposeIntermediateTensorInfo(e))),t.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(r),i}const l=o.map((e=>{const t=p(e.shape.slice(a));return XN({inputs:{x:e},backend:n,attrs:{shape:[-1,t]}})})),u=l.map((e=>({vals:n.data.get(e.dataId).values,shape:e.shape})));i=Fh(l.map((e=>e.shape)),1);const c=1===l[0].shape[0],h=Av(u,i,t[0].dtype,c),d=Fh(o.map((e=>e.shape)),a),f=n.makeTensorInfo(d,t[0].dtype,h);return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}const MI={kernelName:Ce,backendName:"cpu",kernelFunc:OI};function LI(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dataFormat:l,dilations:u,dimRoundingMode:c}=s;tv([r,a],"conv2d");const h=Bi(l),p=Ai(r.shape,a.shape,i,u,o,c,!1,h),d=p.filterHeight,f=p.filterWidth,m=p.dilationHeight,g=p.dilationWidth,y=p.padInfo.left,b=p.padInfo.top,x="channelsLast"===p.dataFormat,w=new bs(p.outShape,r.dtype),k=O(r.shape),v=O(a.shape),N=k[0],I=x?k[1]:k[2],C=x?k[2]:1,$=x?1:k[1],S=w.strides[0],T=x?w.strides[1]:w.strides[2],E=x?w.strides[2]:1,A=x?1:w.strides[1],R=n.data.get(r.dataId).values,F=n.data.get(a.dataId).values,D=w.values;for(let e=0;e<p.batchSize;++e){const t=e*N,n=e*S;for(let e=0;e<p.outHeight;++e){const s=n+e*T,r=e*p.strideHeight-b;for(let e=0;e<d;++e){const n=r+e*m;if(n<0||n>=p.inHeight)continue;const a=e*v[0],i=t+n*I;for(let e=0;e<p.outWidth;++e){const t=s+e*E,n=e*p.strideWidth-y;for(let e=0;e<f;++e){const s=n+e*g;if(s<0||s>=p.inWidth)continue;const r=i+s*C;let o=a+e*v[1];for(let e=0;e<p.inChannels;++e){const n=R[r+e*$];for(let e=0;e<p.outChannels;++e)D[t+e*A]+=n*F[o+e];o+=p.outChannels}}}}}}return n.makeTensorInfo(w.shape,w.dtype,D)}const zI={kernelName:$e,backendName:"cpu",kernelFunc:LI};const BI={kernelName:Se,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,pad:o,dataFormat:l,dimRoundingMode:u,filterShape:c}=s;tv([r,a],"conv2dBackpropFilter");const h=Bi(l),p=Ai(r.shape,c,i,1,o,u,!1,h),{strideHeight:d,strideWidth:f,filterHeight:m,filterWidth:g}=p,y="channelsLast"===p.dataFormat,b=new bs(p.filterShape,"float32"),x=p.padInfo.left,w=p.padInfo.top,k=n.data.get(r.dataId).values,v=n.data.get(a.dataId).values,N=new bs(r.shape,r.dtype,k),I=new bs(a.shape,a.dtype,v);for(let e=0;e<m;++e){const t=Math.max(0,Math.ceil((w-e)/d)),n=Math.min(p.outHeight,(p.inHeight+w-e)/d);for(let s=0;s<g;++s){const r=Math.max(0,Math.ceil((x-s)/f)),a=Math.min(p.outWidth,(p.inWidth+x-s)/f);for(let i=0;i<p.inChannels;++i)for(let o=0;o<p.outChannels;++o){let l=0;for(let u=0;u<p.batchSize;++u)for(let c=t;c<n;++c){const t=e+c*d-w;for(let e=r;e<a;++e){const n=s+e*f-x;l+=y?N.get(u,t,n,i)*I.get(u,c,e,o):N.get(u,i,t,n)*I.get(u,o,c,e)}}b.set(l,e,s,i,o)}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}};const PI={kernelName:Te,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{inputShape:i,strides:o,pad:l,dataFormat:u,dimRoundingMode:c}=s;tv([r,a],"conv2dBackpropInput");const h=O(a.shape),p=O(r.shape);let d=Bi(u);const f=Ai(i,a.shape,o,1,l,c,!1,d),m=new bs(f.inShape,"float32"),g=m.values,y=n.data.get(r.dataId).values,b=n.data.get(a.dataId).values,[x,w,k]=h,{batchSize:v,filterHeight:N,filterWidth:I,inChannels:C,inHeight:$,inWidth:S,outChannels:T,outHeight:E,outWidth:A,strideHeight:R,strideWidth:F}=f;d=f.dataFormat;const D=N-1-f.padInfo.top,_=I-1-f.padInfo.left,M="channelsLast"===d,L=m.strides[0],z=M?m.strides[1]:m.strides[2],B=M?m.strides[2]:1,P=M?1:m.strides[1],W=p[0],V=M?p[1]:p[2],U=M?p[2]:1,G=M?1:p[1];for(let e=0;e<v;++e)for(let t=0;t<C;++t)for(let n=0;n<$;++n){const s=n-D,r=Math.max(0,Math.ceil(s/R)),a=Math.min(E,(N+s)/R);for(let i=0;i<S;++i){const o=i-_,l=Math.max(0,Math.ceil(o/F)),u=Math.min(A,(I+o)/F);let c=0;for(let n=r;n<a;++n){const r=n*R-s;for(let s=l;s<u;++s){const a=W*e+V*n+U*s,i=x*(N-1-r)+w*(I-1-(s*F-o))+k*t;for(let e=0;e<T;++e){c+=y[a+G*e]*b[i+e]}}}g[L*e+z*n+B*i+P*t]=c}}return n.makeTensorInfo(m.shape,m.dtype,m.values)}};const WI={kernelName:Ee,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l}=s;tv([r,a],"conv3d");const u=Ri(r.shape,a.shape,i,l,o),{filterDepth:c,filterHeight:h,filterWidth:p,dilationDepth:d,dilationHeight:f,dilationWidth:m,padInfo:g}=u,y=g.front,b=g.left,x=g.top,w=new bs(u.outShape,r.dtype),k=n.data.get(r.dataId).values,v=n.data.get(a.dataId).values,N=w.values,I=O(r.shape),C=O(a.shape);for(let e=0;e<u.batchSize;++e){const t=e*I[0],n=e*w.strides[0];for(let e=0;e<u.outDepth;++e){const s=n+e*w.strides[1],r=e*u.strideDepth-y;for(let e=0;e<c;++e){const n=r+e*d;if(n<0||n>=u.inDepth)continue;const a=e*C[0],i=t+n*I[1];for(let e=0;e<u.outHeight;++e){const t=s+e*w.strides[2],n=e*u.strideHeight-x;for(let e=0;e<h;++e){const s=n+e*f;if(s<0||s>=u.inHeight)continue;const r=a+e*C[1],o=i+s*I[2];for(let e=0;e<u.outWidth;++e){const n=t+e*u.outChannels,s=e*u.strideWidth-b;for(let e=0;e<p;++e){const t=s+e*m;if(t<0||t>=u.inWidth)continue;const a=r+e*C[2],i=o+t*u.inChannels;let l=a;for(let e=0;e<u.inChannels;++e){const t=k[i+e];for(let e=0;e<u.outChannels;++e)N[n+e]+=t*v[l+e];l+=u.outChannels}}}}}}}}return n.makeTensorInfo(w.shape,w.dtype,w.values)}};const VI={kernelName:Ae,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,pad:o,filterShape:l}=s;tv([r,a],"conv3dBackpropFilterV2");const u=O(r.shape),c=O(a.shape),h=Ri(r.shape,l,i,1,o),p=h.strideDepth,d=h.strideHeight,f=h.strideWidth,m=h.filterDepth,g=h.filterHeight,y=h.filterWidth,b=new bs(h.filterShape,"float32"),x=b.values,[w,k,v,N]=b.strides,I=n.data.get(a.dataId).values,[C,$,S,T]=c,E=n.data.get(r.dataId).values,[A,R,F,D]=u,_=h.padInfo.front,M=h.padInfo.left,L=h.padInfo.top;for(let e=0;e<m;++e){const t=Math.max(0,Math.ceil((_-e)/p)),n=Math.min(h.outDepth,(h.inDepth+_-e)/p),s=e*w;for(let r=0;r<g;++r){const a=Math.max(0,Math.ceil((L-r)/d)),i=Math.min(h.outHeight,(h.inHeight+L-r)/d),o=r*k+s;for(let s=0;s<y;++s){const l=Math.max(0,Math.ceil((M-s)/f)),u=Math.min(h.outWidth,(h.inWidth+M-s)/f),c=s*v+o;for(let o=0;o<h.inChannels;++o){const m=o*N+c;for(let c=0;c<h.outChannels;++c){let g=0;for(let m=0;m<h.batchSize;++m){const h=m*A,y=m*C;for(let m=t;m<n;++m){const t=(e+m*p-_)*R+h,n=m*$+y;for(let e=a;e<i;++e){const a=(r+e*d-L)*F+t,i=e*S+n;for(let e=l;e<u;++e){const t=e*T+i;g+=E[(s+e*f-M)*D+a+o]*I[t+c]}}}}x[m+c]=g}}}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}};const UI={kernelName:Re,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{pad:i,strides:o,inputShape:l}=s;tv([r],"conv3dBackpropInputV2");const u=O(r.shape),c=O(a.shape),h=Ri(l,a.shape,o,1,i),p=new bs(h.inShape,"float32"),d=p.values,[f,m,g,y]=p.strides,b=n.data.get(r.dataId).values,[x,w,k,v]=u,N=n.data.get(a.dataId).values,[I,C,$,S]=c,{batchSize:T,filterDepth:E,filterHeight:A,filterWidth:R,inChannels:F,inDepth:D,inHeight:_,inWidth:M,outChannels:L,outDepth:z,outHeight:B,outWidth:P,strideDepth:W,strideHeight:V,strideWidth:U}=h,G=E-1-h.padInfo.front,H=A-1-h.padInfo.top,j=R-1-h.padInfo.left;for(let e=0;e<T;++e)for(let t=0;t<F;++t)for(let n=0;n<D;++n){const s=n-G,r=Math.max(0,Math.ceil(s/W)),a=Math.min(z,(E+s)/W);for(let i=0;i<_;++i){const o=i-H,l=Math.max(0,Math.ceil(o/V)),u=Math.min(B,(A+o)/V);for(let c=0;c<M;++c){const h=c-j,p=Math.max(0,Math.ceil(h/U)),T=Math.min(P,(R+h)/U);let F=0;for(let n=r;n<a;++n){const r=n*W-s;for(let s=l;s<u;++s){const a=s*V-o;for(let i=p;i<T;++i){const o=x*e+w*n+k*s+v*i,l=I*(E-1-r)+C*(A-1-a)+$*(R-1-(i*U-h))+S*t;for(let e=0;e<L;++e){F+=b[o+e]*N[l+e]}}}}d[f*e+m*n+g*i+y*c+t]=F}}}return n.makeTensorInfo(p.shape,p.dtype,p.values)}},GI=Cv(Fe,(e=>Math.cos(e))),HI={kernelName:Fe,backendName:"cpu",kernelFunc:GI},jI=Cv(De,(e=>Math.cosh(e))),qI={kernelName:De,backendName:"cpu",kernelFunc:jI};const KI={kernelName:Oe,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{image:r,boxes:a,boxInd:i}=t,{cropSize:o,method:l,extrapolationValue:u}=s,[c,h,p,d]=r.shape,f=a.shape[0],[m,g]=o,y=jr([f,m,g,d],"float32"),b=n.data.get(a.dataId).values,x=n.data.get(i.dataId).values,w=n.data.get(r.dataId).values,k=O(r.shape),v=O(y.shape);for(let e=0;e<f;e++){const t=4*e,n=b[t],s=b[t+1],r=b[t+2],a=b[t+3],i=x[e];if(i>=c)continue;const o=m>1?(r-n)*(h-1)/(m-1):0,f=g>1?(a-s)*(p-1)/(g-1):0;for(let t=0;t<m;t++){const c=m>1?n*(h-1)+t*o:.5*(n+r)*(h-1);if(c<0||c>h-1)for(let n=0;n<g;n++)for(let s=0;s<d;s++){const r=s+n*v[2]+t*v[1]+e*v[0];y.values[r]=u}else if("bilinear"===l){const n=Math.floor(c),r=Math.ceil(c),o=c-n;for(let l=0;l<g;l++){const c=g>1?s*(p-1)+l*f:.5*(s+a)*(p-1);if(c<0||c>p-1){for(let n=0;n<d;n++){const s=n+l*v[2]+t*v[1]+e*v[0];y.values[s]=u}continue}const h=Math.floor(c),m=Math.ceil(c),b=c-h;for(let s=0;s<d;s++){let a=s+h*k[2]+n*k[1]+i*k[0];const u=w[a];a=s+m*k[2]+n*k[1]+i*k[0];const c=w[a];a=s+h*k[2]+r*k[1]+i*k[0];const p=w[a];a=s+m*k[2]+r*k[1]+i*k[0];const d=u+(c-u)*b,f=p+(w[a]-p)*b;a=s+l*v[2]+t*v[1]+e*v[0],y.values[a]=d+(f-d)*o}}}else for(let n=0;n<g;++n){const r=g>1?s*(p-1)+n*f:.5*(s+a)*(p-1);if(r<0||r>p-1){for(let s=0;s<d;s++){const r=s+n*v[2]+t*v[1]+e*v[0];y.values[r]=u}continue}const o=Math.round(r),l=Math.round(c);for(let s=0;s<d;s++){const r=s+o*k[2]+l*k[1]+i*k[0],a=s+n*v[2]+t*v[1]+e*v[0];y.values[a]=w[r]}}}}return n.makeTensorInfo(y.shape,y.dtype,y.values)}};const XI={kernelName:_e,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,exclusive:i,reverse:o}=s;tv(r,"cumsum");const l=gl([a],r.shape.length);let u=r;null!=l&&(u=fN({inputs:{x:r},backend:n,attrs:{perm:l}}));const c=bl(1,r.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);const h=Rs(u.dtype,"int32"),d=B(p(u.shape),h),f=n.data.get(u.dataId).values,m=u.shape[u.shape.length-1],g=o?(e,t)=>e+m-t-1:(e,t)=>e+t;for(let e=0;e<f.length;e+=m)for(let t=0;t<m;t++){const n=g(e,t);if(0===t)d[n]=i?0:f[n];else{const s=g(e,t-1);d[n]=i?f[s]+d[s]:f[n]+d[s]}}const y=n.makeTensorInfo(u.shape,h,d);if(null!=l){const e=fN({inputs:{x:y},backend:n,attrs:{perm:yl(l)}});return n.disposeIntermediateTensorInfo(y),n.disposeIntermediateTensorInfo(u),e}return y}};const YI={kernelName:Me,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i,binaryOutput:o}=s;if(1===r.shape.length){const e=vv(n.data.get(r.dataId).values,n.data.get(a.dataId).values,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,e)}if(2===r.shape.length){const e=Nv(n.bufferSync(r),n.bufferSync(a),i,o);return n.makeTensorInfo(e.shape,a.dtype,e.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`)}};const JI={kernelName:Le,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockSize:a,dataFormat:i}=s;l("NHWC"===i,(()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${i}`)),l(a>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${a}`));const o=r.shape[0],u=r.shape[1],c=r.shape[2],h=r.shape[3],p=u*a,d=c*a,f=h/(a*a),m=n.data.get(r.dataId).values,g=new Float32Array(o*p*d*f);let y=0;for(let e=0;e<o;++e)for(let t=0;t<p;++t){const n=Math.floor(t/a),s=t%a;for(let t=0;t<d;++t){const r=Math.floor(t/a),i=(s*a+t%a)*f;for(let t=0;t<f;++t){const s=t+i+h*(r+c*(n+u*e));g[y++]=m[s]}}}return n.makeTensorInfo([o,p,d,f],r.dtype,g)}};function ZI(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:u,dimRoundingMode:c}=s;tv([r,a],"depthwiseConv2DNative");const h=O(r.shape),p=O(a.shape);let d=u;null==d&&(d=[1,1]),l(zi(i,d),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${d}'`));const f=Ai(r.shape,a.shape,i,d,o,c,!0),{filterHeight:m,filterWidth:g,dilationHeight:y,dilationWidth:b,padInfo:x}=f,w=x.left,k=x.top,v=f.outChannels/f.inChannels,N=new bs(f.outShape,r.dtype),I=n.data.get(r.dataId).values,C=n.data.get(a.dataId).values,$=N.values;for(let e=0;e<f.batchSize;++e){const t=e*h[0],n=e*N.strides[0];for(let e=0;e<f.outHeight;++e){const s=n+e*N.strides[1],r=e*f.strideHeight-w;for(let e=0;e<m;++e){const n=r+e*y;if(n<0||n>=f.inHeight)continue;const a=e*p[0],i=t+n*h[1];for(let e=0;e<f.outWidth;++e){const t=s+e*N.strides[2],n=e*f.strideWidth-k;for(let e=0;e<g;++e){const s=n+e*b;if(s<0||s>=f.inWidth)continue;const r=a+e*p[1],o=i+s*f.inChannels;let l=t,u=r;for(let e=0;e<f.inChannels;++e){const t=I[o+e];for(let e=0;e<v;++e)$[l+e]+=t*C[u+e];l+=v,u+=v}}}}}}return n.makeTensorInfo(N.shape,N.dtype,N.values)}const QI={kernelName:ze,backendName:"cpu",kernelFunc:ZI};const eC={kernelName:Be,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,filterShape:c}=s;tv([r,a],"depthwiseConv2dNativeBackpropFilter");const h=Ai(r.shape,c,i,o,l,u,!0),{strideHeight:p,strideWidth:d,filterHeight:f,filterWidth:m}=h,g=new bs(h.filterShape,"float32"),y=h.padInfo.left,b=h.padInfo.top,x=h.outChannels/h.inChannels,w=n.data.get(r.dataId).values,k=new bs(r.shape,r.dtype,w),v=n.data.get(a.dataId).values,N=new bs(a.shape,a.dtype,v);for(let e=0;e<f;++e){const t=Math.max(0,Math.ceil((b-e)/p)),n=Math.min(h.outHeight,(h.inHeight+b-e)/p);for(let s=0;s<m;++s){const r=Math.max(0,Math.ceil((y-s)/d)),a=Math.min(h.outWidth,(h.inWidth+y-s)/d);for(let i=0;i<h.outChannels;++i){const o=Math.trunc(i/x),l=i%x;let u=0;for(let l=0;l<h.batchSize;++l)for(let c=t;c<n;++c){const t=e+c*p-b;for(let e=r;e<a;++e){const n=s+e*d-y;u+=k.get(l,t,n,o)*N.get(l,c,e,i)}}g.set(u,e,s,o,l)}}}return n.makeTensorInfo(g.shape,g.dtype,g.values)}};const tC={kernelName:Pe,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,inputShape:c}=s;tv([r,a],"depthwiseConv2DNativeBackpropInput");const h=O(r.shape),p=O(a.shape),d=Ai(c,a.shape,i,o,l,u,!0),f=new bs(d.inShape,"float32"),m=f.values,[g,y,b]=f.strides,x=n.data.get(r.dataId).values,[w,k,v]=h,N=n.data.get(a.dataId).values,[I,C,$]=p,{batchSize:S,filterHeight:T,filterWidth:E,inChannels:A,inHeight:R,inWidth:F,outChannels:D,outHeight:_,outWidth:M,strideHeight:L,strideWidth:z}=d,B=T-1-d.padInfo.top,P=E-1-d.padInfo.left,W=D/A;for(let e=0;e<S;++e)for(let t=0;t<A;++t)for(let n=0;n<R;++n){const s=n-B,r=Math.max(0,Math.ceil(s/L)),a=Math.min(_,(T+s)/L);for(let i=0;i<F;++i){const o=i-P,l=Math.max(0,Math.ceil(o/z)),u=Math.min(M,(E+o)/z);let c=0;for(let n=r;n<a;++n){const r=n*L-s;for(let s=l;s<u;++s){const a=w*e+k*n+v*s,i=I*(T-1-r)+C*(E-1-(s*z-o))+$*t;for(let e=0;e<W;++e){c+=x[a+(t*W+e)]*N[i+e]}}}m[g*e+y*n+b*i+t]=c}}return n.makeTensorInfo(f.shape,f.dtype,f.values)}};const nC={kernelName:We,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,r=p(s.shape),a=n.data.get(s.dataId).values,i=jr([r,r],s.dtype),o=i.values;for(let e=0;e<a.length;e++)o[e*r+e]=a[e];const l=[...s.shape,...s.shape];return n.makeTensorInfo(l,i.dtype,i.values)}},sC={kernelName:Ve,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:r}=e,{strides:a,pad:i,dilations:o}=n,l=t,u=l.data.get(s.dataId).values,c=s.shape.length,h=l.data.get(r.dataId).values,d=r.shape.length,{batchSize:f,inHeight:m,inWidth:g,inChannels:y,outHeight:b,outWidth:x,padInfo:w,strideHeight:k,strideWidth:N,filterHeight:I,filterWidth:C,dilationHeight:$,dilationWidth:S,outShape:T}=Si(s.shape,r.shape,a,i,"NHWC",o),E=p(T),A=T.length,R=v(s.dtype,E);for(let e=0;e<f;++e)for(let t=0;t<b;++t){const n=t*k-w.top;for(let a=0;a<x;++a){const i=a*N-w.left;for(let o=0;o<y;++o){let l=Number.MIN_SAFE_INTEGER;for(let t=0;t<I;++t){const a=n+t*$;if(a>=0&&a<m)for(let n=0;n<C;++n){const p=i+n*S;if(p>=0&&p<g){const i=V([e,a,p,o],c,O(s.shape)),f=V([t,n,o],d,O(r.shape)),m=u[i]+h[f];m>l&&(l=m)}}}R[V([e,t,a,o],A,O(T))]=l}}}return{dataId:l.write(rs(R,s.dtype),T,s.dtype),shape:T,dtype:s.dtype}}},rC={kernelName:Ge,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:r,dy:a}=e,{strides:i,pad:o,dilations:u}=n,c=t,h=L(s.shape,c.data.get(s.dataId).values),p=L(r.shape,c.data.get(r.dataId).values),{batchSize:d,inHeight:f,inWidth:m,inChannels:g,outHeight:y,outWidth:b,padInfo:x,strideHeight:w,strideWidth:k,filterHeight:v,filterWidth:N,dilationHeight:I,dilationWidth:C,outShape:$}=Si(s.shape,r.shape,i,o,"NHWC",u);l(a.rank===$.length,(()=>`Error in Dilation2DBackpropFilter, dy must have the same rank as output ${$.length}, but got ${a.rank}`));const S=L($,c.data.get(a.dataId).values),T=P(r.shape,r.dtype);for(let e=0;e<d;++e)for(let t=0;t<y;++t){const n=t*w-x.top;for(let s=0;s<b;++s){const r=s*k-x.left;for(let a=0;a<g;++a){let i=Number.MIN_SAFE_INTEGER,o=0,l=0;for(let t=0;t<v;++t){const s=n+t*I;if(s>=0&&s<f)for(let n=0;n<N;++n){const u=r+n*C;if(u>=0&&u<m){const r=h[e][s][u][a]+p[t][n][a];r>i&&(i=r,o=t,l=n)}}}T[o][l][a]+=S[e][t][s][a]}}}return{dataId:c.write(rs(T,s.dtype),r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},aC={kernelName:Ue,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:r,dy:a}=e,{strides:i,pad:o,dilations:u}=n,c=t,h=L(s.shape,c.data.get(s.dataId).values),p=L(r.shape,c.data.get(r.dataId).values),{batchSize:d,inHeight:f,inWidth:m,inChannels:g,outHeight:y,outWidth:b,padInfo:x,strideHeight:w,strideWidth:k,filterHeight:v,filterWidth:N,dilationHeight:I,dilationWidth:C,outShape:$}=Si(s.shape,r.shape,i,o,"NHWC",u);l(a.rank===$.length,(()=>`Error in Dilation2DBackpropInput, dy must have the same rank as output ${$.length}, but got ${a.rank}`));const S=L($,c.data.get(a.dataId).values),T=P(s.shape,s.dtype);for(let e=0;e<d;++e)for(let t=0;t<y;++t){const n=t*w-x.top;for(let s=0;s<b;++s){const r=s*k-x.left;for(let a=0;a<g;++a){let i=Number.MIN_SAFE_INTEGER,o=n<0?0:n,l=r<0?0:r;for(let t=0;t<v;++t){const s=n+t*I;if(s>=0&&s<f)for(let n=0;n<N;++n){const u=r+n*C;if(u>=0&&u<m){const r=h[e][s][u][a]+p[t][n][a];r>i&&(i=r,o=s,l=u)}}}T[e][o][l][a]+=S[e][t][s][a]}}}return{dataId:c.write(rs(T,s.dtype),s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}};function iC(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;let o;tv(r,"sum"),o="bool"===r.dtype?fv({inputs:{x:r},backend:n,attrs:{dtype:"int32"}}):cv({inputs:{x:r},backend:n});const l=o.shape.length,u=x(a,o.shape),c=gl(u,l);let h=u,d=o;null!=c&&(d=fN({inputs:{x:o},backend:n,attrs:{perm:c}}),h=bl(h.length,l)),ml("sum",h,d.shape.length);const[f,m]=dl(d.shape,h);let g=uv(n,f,Rs(d.dtype,"int32"));const y=p(m),b=n.data.get(g.dataId).values,w=n.data.get(d.dataId).values;for(let e=0;e<b.length;++e){const t=e*y;let n=0;for(let e=0;e<y;++e)n+=w[t+e];b[e]=n}if(i){const e=g;g=XN({inputs:{x:g},backend:n,attrs:{shape:fl(g.shape,u)}}),n.disposeIntermediateTensorInfo(e)}return n.disposeIntermediateTensorInfo(o),null!=c&&n.disposeIntermediateTensorInfo(d),g}const oC={kernelName:In,backendName:"cpu",kernelFunc:iC};const lC={kernelName:je,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{equation:r}=s,a=t,{allDims:i,summedDims:o,idDims:l}=ap(r,a.length);op(i.length,l,a);const{path:u,steps:c}=lp(o,l),h=c.length;let p=null,f=i.length;const m=[];for(let e=0;e<h;++e){for(const t of c[e]){const{permutationIndices:e,expandDims:s}=ip(f,l[t]);let r;up(e)?r=a[t]:(r=fN({inputs:{x:a[t]},backend:n,attrs:{perm:e}}),m.push(r));const i=r.shape.slice();for(let e=0;e<s.length;++e)i.splice(s[e],0,1);d(r.shape,i)||(r=XN({inputs:{x:r},backend:n,attrs:{shape:i}}),m.push(r)),null===p?p=r:(p=iN({inputs:{a:r,b:p},backend:n}),m.push(p))}e<h-1&&(u[e]>=0&&(p=iC({inputs:{x:p},backend:n,attrs:{axis:u[e]-(i.length-f),keepDims:!1}}),m.push(p)),f--)}for(const e of m)e!==p&&n.disposeIntermediateTensorInfo(e);return p}};const uC={kernelName:Ke,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{dy:s,y:r}=t;tv([s,r],"eluGrad");const a=new Float32Array(p(r.shape)),i=n.data.get(r.dataId).values,o=n.data.get(s.dataId).values;for(let e=0;e<i.length;++e){const t=i[e];a[e]=t>=1?o[e]:o[e]*(t+1)}return n.makeTensorInfo(r.shape,"float32",a)}},cC=iv(((e,t)=>e===t?1:0)),hC=gv(Ye,cC,null,"bool"),pC={kernelName:Ye,backendName:"cpu",kernelFunc:hC},dC=Cv(Xe,(e=>{const t=Math.sign(e),n=Math.abs(e),s=1/(1+.3275911*n);return t*(1-((((1.061405429*s-1.453152027)*s+1.421413741)*s-.284496736)*s+.254829592)*s*Math.exp(-n*n))})),fC={kernelName:Xe,backendName:"cpu",kernelFunc:dC};function mC(e){const{inputs:t,backend:n,attrs:s}=e,{input:r}=t,{dim:a}=s,i=r.shape.length,o=r.shape.slice();let u=a;return a<0&&(l(-(i+1)<=a,(()=>`Axis must be in the interval [${-(i+1)}, ${i}]`)),u=i+a+1),o.splice(u,0,1),XN({inputs:{x:r},backend:n,attrs:{shape:o}})}const gC={kernelName:Ze,backendName:"cpu",kernelFunc:mC},yC=iv(((e,t)=>e/t)),bC=gv(He,yC),xC={kernelName:He,backendName:"cpu",kernelFunc:bC};function wC(e,t,n){const s=e.shape,r=s[0],a=s[1],i=n.data.get(e.dataId),o=i.complexTensorInfos.real,l=i.complexTensorInfos.imag,u=[r,a],c=p(u),h=k("float32",c),d=k("float32",c);for(let e=0;e<r;e++){const s=NN({inputs:{x:o},backend:n,attrs:{begin:[e,0],size:[1,a]}}),r=NN({inputs:{x:l},backend:n,attrs:{begin:[e,0],size:[1,a]}}),i=ov({inputs:{real:s,imag:r},backend:n}),{real:u,imag:c}=kC(i,t,n),p=Xh(u,c);for(let t=0;t<a;t++){const n=Qh(p,t);h[e*a+t]=n.real,d[e*a+t]=n.imag}n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(i)}const f=n.makeTensorInfo(u,"float32",h),m=n.makeTensorInfo(u,"float32",d),g=ov({inputs:{real:f,imag:m},backend:n});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}function kC(e,t,n){const s=p(e.shape),r=n.data.get(e.dataId),a=n.data.get(r.complexTensorInfos.real.dataId).values,i=n.data.get(r.complexTensorInfos.imag.dataId).values;if(0==((o=s)&o-1)){const r=vC(a,i,s,t,n),o=[e.shape[0],e.shape[1]];if(t){const e=n.makeTensorInfo(o,"float32",r.real),t=n.makeTensorInfo(o,"float32",r.imag),a=n.makeTensorInfo([],"float32",ss(s,"float32")),i=cv({inputs:{x:a},backend:n}),l=xC.kernelFunc({inputs:{a:e,b:a},backend:n}),u=xC.kernelFunc({inputs:{a:t,b:i},backend:n}),c=n.data.get(l.dataId).values,h=n.data.get(u.dataId).values;return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),{real:c,imag:h}}return r}return Yh(function(e,t,n){const s=new Float32Array(2*t);for(let r=0;r<t;r++){let a=0,i=0;for(let s=0;s<t;s++){const o=np(r*s,t,n),l=Qh(e,s);a+=l.real*o.real-l.imag*o.imag,i+=l.real*o.imag+l.imag*o.real}n&&(a/=t,i/=t),ep(s,a,i,r)}return s}(Xh(a,i),s,t));var o}function vC(e,t,n,s,r){if(1===n)return{real:e,imag:t};const a=Xh(e,t),i=n/2,o=Jh(a),l=o.real,u=o.imag,c=[l.length],h=r.makeTensorInfo(c,"float32",l),p=r.makeTensorInfo(c,"float32",u),d=ov({inputs:{real:h,imag:p},backend:r}),f=Zh(a),m=f.real,g=f.imag,y=[m.length],b=r.makeTensorInfo(y,"float32",m),x=r.makeTensorInfo(y,"float32",g),w=ov({inputs:{real:b,imag:x},backend:r}),k=vC(l,u,i,s,r),v=k.real,N=k.imag,I=[v.length],C=r.makeTensorInfo(I,"float32",v),$=r.makeTensorInfo(I,"float32",N),S=ov({inputs:{real:C,imag:$},backend:r}),T=vC(m,g,i,s,r),E=T.real,A=T.imag,R=[E.length],F=r.makeTensorInfo(R,"float32",E),D=r.makeTensorInfo(R,"float32",A),_=ov({inputs:{real:F,imag:D},backend:r}),O=tp(n,s),M=[O.real.length],L=r.makeTensorInfo(M,"float32",O.real),z=r.makeTensorInfo(M,"float32",O.imag),B=ov({inputs:{real:L,imag:z},backend:r}),P=iN({inputs:{a:B,b:_},backend:r}),W=wv({inputs:{a:S,b:P},backend:r}),V=RN({inputs:{a:S,b:P},backend:r}),U=pv({inputs:{input:W},backend:r}),G=pv({inputs:{input:V},backend:r}),H=DI({inputs:{input:W},backend:r}),j=DI({inputs:{input:V},backend:r}),q=OI({inputs:[U,G],backend:r,attrs:{axis:0}}),K=OI({inputs:[H,j],backend:r,attrs:{axis:0}}),X=r.data.get(q.dataId).values,Y=r.data.get(K.dataId).values;return r.disposeIntermediateTensorInfo(h),r.disposeIntermediateTensorInfo(p),r.disposeIntermediateTensorInfo(d),r.disposeIntermediateTensorInfo(b),r.disposeIntermediateTensorInfo(x),r.disposeIntermediateTensorInfo(w),r.disposeIntermediateTensorInfo(C),r.disposeIntermediateTensorInfo($),r.disposeIntermediateTensorInfo(S),r.disposeIntermediateTensorInfo(F),r.disposeIntermediateTensorInfo(D),r.disposeIntermediateTensorInfo(_),r.disposeIntermediateTensorInfo(L),r.disposeIntermediateTensorInfo(z),r.disposeIntermediateTensorInfo(B),r.disposeIntermediateTensorInfo(P),r.disposeIntermediateTensorInfo(W),r.disposeIntermediateTensorInfo(V),r.disposeIntermediateTensorInfo(U),r.disposeIntermediateTensorInfo(H),r.disposeIntermediateTensorInfo(G),r.disposeIntermediateTensorInfo(j),r.disposeIntermediateTensorInfo(q),r.disposeIntermediateTensorInfo(K),{real:X,imag:Y}}const NC={kernelName:et,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t,r=p(s.shape),a=s.shape[s.shape.length-1],i=XN({inputs:{x:s},backend:n,attrs:{shape:[r/a,a]}}),o=wC(i,!1,n),l=XN({inputs:{x:o},backend:n,attrs:{shape:s.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(o),l}};function IC(e){const{backend:t,attrs:n}=e,{shape:s,value:r,dtype:a}=n,i=a||F(r),o=v(i,p(s));return function(e,t,n){e.fill(t)}(o,r),t.makeTensorInfo(s,i,o)}const CC={kernelName:tt,backendName:"cpu",kernelFunc:IC};const $C={kernelName:nt,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,r=n,a=k(s.dtype,p(s.shape)),[i,o,l,u]=s.shape,c=r.data.get(s.dataId).values;for(let e=0;e<i;e++){const t=e*l*o*u;for(let e=0;e<o;e++){const n=e*(l*u);for(let s=0;s<l;s++){const r=s*u;for(let o=0;o<u;o++){const h=[i,e,s,o][2],p=Math.round(l-h),d=t+n+r+o;let f=c[d];if(p>=0&&p<l){f=c[t+n+p*u+o]}a[d]=f}}}}return{dataId:r.write(a,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},SC=iv(((e,t)=>Math.floor(e/t))),TC=gv(rt,SC,null,"int32"),EC={kernelName:rt,backendName:"cpu",kernelFunc:TC};const AC={kernelName:qn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=s;let m=LI({inputs:{x:r,filter:a},backend:n,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p}});if(i){const e=m;m=wv({inputs:{a:m,b:i},backend:n}),n.disposeIntermediateTensorInfo(e)}if(d){const e=m;m=KN(n,m,d,o,f),n.disposeIntermediateTensorInfo(e)}return m}};const RC={kernelName:Kn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=s;let m=ZI({inputs:{x:r,filter:a},backend:n,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p}});if(i){const e=m;m=wv({inputs:{a:m,b:i},backend:n}),n.disposeIntermediateTensorInfo(e)}if(d){const e=m;m=KN(n,m,d,o,f),n.disposeIntermediateTensorInfo(e)}return m}};const FC={kernelName:ot,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:s,indices:r}=t,a=p(s.shape),i=r.shape,o=i[i.length-1],[l,u,c,h]=va(s,r);if(0===u)return n.makeTensorInfo(l,s.dtype,[]);const d=jr([u,c],s.dtype),f=n.data.get(r.dataId).values,m=n.data.get(s.dataId).values;for(let e=0;e<u;e++){const t=[];let n=0;for(let s=0;s<o;s++){const r=f[e*o+s];n+=r*h[s],t.push(r)}if(n<0||n>=a/c)throw new Error(`Invalid indices: ${t} does not index into ${s.shape}`);for(let t=0;t<c;t++)d.values[e*c+t]=m[n*c+t]}return n.makeTensorInfo(l,d.dtype,d.values)}};const DC={kernelName:it,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,indices:a}=t,{axis:i,batchDims:o}=s;tv([r,a],"gatherV2");let l=o;null==o&&(l=0);const u=p(a.shape),c=fp(r,a,x(i,r.shape)[0],l),h=XN({inputs:{x:r},backend:n,attrs:{shape:[c.batchSize,c.outerSize,c.dimSize,c.sliceSize]}}),d=XN({inputs:{x:a},backend:n,attrs:{shape:[c.batchSize,u/c.batchSize]}}),f=[c.batchSize,c.outerSize,u/c.batchSize,c.sliceSize],m=n.bufferSync(d),g=Pv(n.bufferSync(h),m,f);return n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(d),n.makeTensorInfo(c.outputShape,g.dtype,g.values)}},_C=iv(((e,t)=>e>=t?1:0)),OC=gv(ut,_C,null,"bool"),MC={kernelName:ut,backendName:"cpu",kernelFunc:OC};const LC={kernelName:ht,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t,r=p(s.shape),a=s.shape[s.shape.length-1],i=XN({inputs:{x:s},backend:n,attrs:{shape:[r/a,a]}}),o=wC(i,!0,n),l=XN({inputs:{x:o},backend:n,attrs:{shape:s.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(o),l}},zC=Cv(dt,(e=>Number.isFinite(e)?1:0),"bool"),BC={kernelName:dt,backendName:"cpu",kernelFunc:zC},PC=Cv(ft,(e=>Math.abs(e)===1/0?1:0),"bool"),WC={kernelName:ft,backendName:"cpu",kernelFunc:PC},VC=Cv(mt,(e=>Number.isNaN(e)?1:0),"bool"),UC={kernelName:mt,backendName:"cpu",kernelFunc:VC},GC=iv(((e,t)=>e<=t?1:0)),HC=gv(bt,GC,null,"bool"),jC={kernelName:bt,backendName:"cpu",kernelFunc:HC};const qC={kernelName:xt,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:r,num:a}=n,i=qv(s,r,a);return t.makeTensorInfo([i.length],"float32",i)}},KC=Cv(kt,(e=>Math.log1p(e))),XC={kernelName:kt,backendName:"cpu",kernelFunc:KC},YC=iv(((e,t)=>e&&t)),JC=gv(vt,YC,null,"bool"),ZC={kernelName:vt,backendName:"cpu",kernelFunc:JC},QC=Cv(Nt,(e=>e?0:1),"bool"),e$={kernelName:Nt,backendName:"cpu",kernelFunc:QC},t$=iv(((e,t)=>e||t)),n$=gv(It,t$,null,"bool"),s$={kernelName:It,backendName:"cpu",kernelFunc:n$};const r$={kernelName:$t,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{depthRadius:a,bias:i,alpha:o,beta:l}=s;tv(r,"LRN");const u=r.shape[3],c=u-1,h=n.data.get(r.dataId).values,d=p(r.shape),f=new Float32Array(d);function m(e){const t=e%u;let n=e-t+Math.max(0,t-a);const s=e-t+Math.min(t+a,c);let r=0;for(;n<=s;n++){const e=h[n];r+=e*e}return r}for(let e=0;e<d;e++){const t=m(e),n=h[e]*Math.pow(i+o*t,-l);f[e]=n}return n.makeTensorInfo(r.shape,r.dtype,f)}};const a$={kernelName:St,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,y:a,dy:i}=t,{depthRadius:o,bias:l,alpha:u,beta:c}=s;tv(i,"LRNGrad");const h=p(i.shape),d=i.shape[3],f=n.data.get(i.dataId).values,m=n.data.get(r.dataId).values,g=n.data.get(a.dataId).values,y=new Float32Array(h),b=h;for(let e=0;e<b;e++){const t=e%d,n=e-t+Math.max(0,t-o),s=e-t+Math.min(d,t+o+1);let r=0;for(let e=n;e<s;e++)r+=Math.pow(m[e],2);r=u*r+l;for(let t=n;t<s;t++){let n=-2*u*c*m[t]*g[e]/r;e===t&&(n+=Math.pow(r,-c)),n*=f[e],y[t]+=n}}return n.makeTensorInfo(i.shape,r.dtype,y)}};function i$(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reductionIndices:a,keepDims:i}=s,o=n;let l=r.shape;const u=l.length,c=x(a,l);let h=c;const d=gl(h,u);let f=o.data.get(r.dataId).values;if(null!=d){const e=new Array(u);for(let t=0;t<e.length;t++)e[t]=l[d[t]];f=dN(f,l,r.dtype,d,e),h=bl(h.length,u),l=e}tv(r,"max"),ml("max",h,u);const[m,g]=dl(l,h),y=Jv(f,p(g),m,r.dtype),b=o.write(y,m,r.dtype);let w=m;if(i){w=fl(m,c)}return{dataId:b,shape:w,dtype:r.dtype}}const o$={kernelName:Tt,backendName:"cpu",kernelFunc:i$};const l$={kernelName:At,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;tv(r,"maxPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:u}=s;l(zi(i,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const c=Ti(r.shape,a,i,1,o,u);let h;if(1===c.filterWidth&&1===c.filterHeight&&d(c.inShape,c.outShape))h=cv({inputs:{x:r},backend:n});else{const e=n.data.get(r.dataId).values,t=O(r.shape),s=wI(e,r.shape,r.dtype,t,c,"max");h=n.makeTensorInfo(c.outShape,r.dtype,s.values)}return h}};const u$={kernelName:Ft,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:l,dataFormat:u}=s;tv(r,"maxPool3d");const c=Ei(r.shape,a,i,1,o,l,u),h=vI(n.data.get(r.dataId).values,r.shape,r.dtype,O(r.shape),c,"max");return n.makeTensorInfo(h.shape,"float32",h.values)}};const c$={kernelName:Dt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,{filterSize:i,strides:o,pad:l,dimRoundingMode:u}=s;tv([r,a],"maxPool3DGrad");const c=Ei(a.shape,i,o,1,l,u),h=function(e,t){const n=jr(t.outShape,"int32"),s=t.strideDepth,r=t.strideHeight,a=t.strideWidth,i=t.dilationDepth,o=t.dilationHeight,l=t.dilationWidth,u=t.effectiveFilterDepth,c=t.effectiveFilterHeight,h=t.effectiveFilterWidth,p=t.padInfo.front,d=t.padInfo.top,f=t.padInfo.left;for(let m=0;m<t.batchSize;++m)for(let g=0;g<t.inChannels;++g)for(let y=0;y<t.outDepth;++y){const b=y*s-p;let x=b;for(;x<0;)x+=i;const w=Math.min(t.inDepth,u+b);for(let s=0;s<t.outHeight;++s){const u=s*r-d;let p=u;for(;p<0;)p+=o;const k=Math.min(t.inHeight,c+u);for(let r=0;r<t.outWidth;++r){const d=r*a-f;let v=d;for(;v<0;)v+=l;const N=Math.min(t.inWidth,h+d);let I=Number.NEGATIVE_INFINITY,C=-1;for(let t=x;t<w;t+=i){const n=t-b;for(let s=p;s<k;s+=o){const r=s-u;for(let a=v;a<N;a+=l){const i=a-d,o=e.get(m,t,s,a,g);o>=I&&(I=o,C=n*c*h+r*c+i)}}}n.set(C,m,y,s,r,g)}}}return n}(n.bufferSync(a),c),p=c.strideDepth,d=c.strideHeight,f=c.strideWidth,m=c.dilationDepth,g=c.dilationHeight,y=c.dilationWidth,b=c.effectiveFilterDepth,x=c.effectiveFilterHeight,w=c.effectiveFilterWidth,k=b-1-c.padInfo.front,v=w-1-c.padInfo.left,N=x-1-c.padInfo.top,I=jr(a.shape,"float32"),C=n.bufferSync(r);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inDepth;++n)for(let s=0;s<c.inHeight;++s)for(let r=0;r<c.inWidth;++r){const a=n-k,i=s-N,o=r-v;let l=0;for(let n=0;n<b;n+=m){const s=(a+n)/p;if(!(s<0||s>=c.outDepth||Math.floor(s)!==s))for(let r=0;r<x;r+=g){const a=(i+r)/d;if(!(a<0||a>=c.outHeight||Math.floor(a)!==a))for(let i=0;i<w;i+=y){const u=(o+i)/f;if(u<0||u>=c.outWidth||Math.floor(u)!==u)continue;const p=b*x*w-1-h.get(e,s,a,u,t)===n*x*w+r*w+i?1:0;if(0===p)continue;l+=C.get(e,s,a,u,t)*p}}}I.set(l,e,n,s,r,t)}return n.makeTensorInfo(I.shape,I.dtype,I.values)}};const h$={kernelName:Rt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a,output:i}=t,o=a;tv([a,i],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,p=Ti(o.shape,l,u,1,c,h),d=n.data.get(o.dataId).values,f=jr(p.outShape,o.dtype,kI(d,o.shape,o.dtype,p).values),m=p.strideHeight,g=p.strideWidth,y=p.dilationHeight,b=p.dilationWidth,x=p.effectiveFilterHeight,w=p.effectiveFilterWidth,k=w-1-p.padInfo.left,v=x-1-p.padInfo.top,N=jr(o.shape,"float32"),I=n.data.get(r.dataId).values,C=jr(r.shape,"float32",I);for(let e=0;e<p.batchSize;++e)for(let t=0;t<p.inChannels;++t)for(let n=0;n<p.inHeight;++n)for(let s=0;s<p.inWidth;++s){const r=n-v,a=s-k;let i=0;for(let n=0;n<x;n+=y){const s=(r+n)/m;if(!(s<0||s>=p.outHeight||Math.floor(s)!==s))for(let r=0;r<w;r+=b){const o=(a+r)/g;if(o<0||o>=p.outWidth||Math.floor(o)!==o)continue;const l=x*w-1-f.get(e,s,o,t)===n*w+r?1:0;if(0===l)continue;i+=C.get(e,s,o,t)*l}}N.set(i,e,n,s,t)}return n.makeTensorInfo(N.shape,N.dtype,N.values)}};const p$={kernelName:_t,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{filterSize:r,strides:a,pad:i,includeBatchInIndex:o}=t,l=n;tv(s,"MaxPoolWithArgmax");const u=l.data.get(s.dataId).values,c=Ti(s.shape,r,a,[1,1],i),[h,p]=function(e,t,n,s,r){const a=wI(e,0,n,O(t),r,"max"),i=kI(e,t,n,r,!0,s);return[a.values,i.values]}(u,s.shape,s.dtype,o,c),d=l.write(h,c.outShape,s.dtype),f=l.write(p,c.outShape,s.dtype);return[{dataId:d,shape:c.outShape,dtype:s.dtype},{dataId:f,shape:c.outShape,dtype:"int32"}]}};const d$={kernelName:Ot,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=x(a,r.shape),l=p(dl(r.shape,o)[1]),u=[],c=n.makeTensorInfo([],"float32",new Float32Array([l]));u.push(c);const h=fv({inputs:{x:r},backend:n,attrs:{dtype:"float32"}});u.push(h);const d=bC({inputs:{a:h,b:c},backend:n});u.push(d);const f=iC({inputs:{x:d},backend:n,attrs:{axis:a,keepDims:i}});return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}};const f$={kernelName:Mt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;tv(r,"min");const o=x(a,r.shape);let l=o;const u=gl(l,r.shape.length);let c=r;null!=u&&(c=fN({inputs:{x:r},backend:n,attrs:{perm:u}}),l=bl(l.length,r.shape.length)),ml("min",l,c.shape.length);const[h,d]=dl(c.shape,l),f=p(d),m=B(p(h),c.dtype),g=n.data.get(c.dataId).values;for(let e=0;e<m.length;++e){const t=e*f;let n=g[t];for(let e=0;e<f;++e){const s=g[t+e];s<n&&(n=s)}m[e]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const y=n.makeTensorInfo(h,c.dtype,m);if(i){const e=XN({inputs:{x:y},backend:n,attrs:{shape:fl(h,o)}});return n.disposeIntermediateTensorInfo(y),e}return y}};const m$={kernelName:zt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{paddings:a,mode:i}=s;tv(r,"mirrorPad");const o=a.map(((e,t)=>e[0]+r.shape[t]+e[1])),l=a.map((e=>e[0])),u=a.map(((e,t)=>e[0]+r.shape[t])),c="reflect"===i?0:1,h=n.data.get(r.dataId).values,d=r.shape.length,f=O(r.shape),m=p(o),g=o.length,y=O(o),b=k(r.dtype,m);for(let e=0;e<m;e++){let t=U(e,g,y);for(let e=0;e<g;e++)t[e]<l[e]?t[e]=2*l[e]-t[e]-c:t[e]>=u[e]&&(t[e]=2*(u[e]-1)-t[e]+c);t=t.map(((e,t)=>e-l[t]));const n=V(t,d,f);b[e]=h[n]}return{dataId:n.write(b,o,r.dtype),shape:o,dtype:r.dtype}}},g$=iv(((e,t)=>{const n=e%t;return e<0&&t<0||e>=0&&t>=0?n:(n+t)%t})),y$=gv(Bt,g$),b$={kernelName:Bt,backendName:"cpu",kernelFunc:y$};function x$(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{dim:a}=s,i=r.shape.length;let o=a;if(-1===o&&(o=i-1),o!==i-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${i} and dim was ${o}`);const l=x([o],r.shape),u=i$({inputs:{x:r},backend:n,attrs:{reductionIndices:l,keepDims:!1}}),c=fl(u.shape,l),h=XN({inputs:{x:u},backend:n,attrs:{shape:c}}),p=RN({inputs:{a:r,b:h},backend:n}),d=Fv({inputs:{x:p},backend:n}),f=iC({inputs:{x:d},backend:n,attrs:{axis:l,keepDims:!1}}),m=XN({inputs:{x:f},backend:n,attrs:{shape:c}}),g=bC({inputs:{a:d,b:m},backend:n});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}const w$={kernelName:Sn,backendName:"cpu",kernelFunc:x$};const k$={kernelName:Pt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{numSamples:a,seed:i,normalized:o}=s;tv(r,"multinomial");const l=o?r:x$({inputs:{logits:r},backend:n,attrs:{dim:-1}}),u=l.shape[0],c=l.shape[1],h=n.data.get(l.dataId).values,d=[u,a],f=B(p(d),"int32");for(let e=0;e<u;++e){const t=e*c,n=new Float32Array(c-1);n[0]=h[t];for(let e=1;e<n.length;++e)n[e]=n[e-1]+h[t+e];const s=ou(i.toString()),r=e*a;for(let e=0;e<a;++e){const t=s();f[r+e]=n.length;for(let s=0;s<n.length;s++)if(t<n[s]){f[r+e]=s;break}}}return o||n.disposeIntermediateTensorInfo(l),n.makeTensorInfo(d,"int32",f)}},v$=Bc;const N$={kernelName:Gt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l}=s;tv(r,"NonMaxSuppression");const u=n.data.get(r.dataId).values,c=n.data.get(a.dataId).values,{selectedIndices:h}=v$(u,c,i,o,l);return n.makeTensorInfo([h.length],"int32",new Int32Array(h))}},I$=Pc;const C$={kernelName:Ht,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,padToMaxOutputSize:u}=s;tv(r,"NonMaxSuppressionPadded");const c=n.data.get(r.dataId).values,h=n.data.get(a.dataId).values,{selectedIndices:p,validOutputs:d}=I$(c,h,i,o,l,u);return[n.makeTensorInfo([p.length],"int32",new Int32Array(p)),n.makeTensorInfo([],"int32",new Int32Array([d]))]}},$$=Wc;const S$={kernelName:jt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,softNmsSigma:u}=s;tv(r,"NonMaxSuppressionWithScore");const c=n.data.get(r.dataId).values,h=n.data.get(a.dataId).values,p=i,d=o,f=l,m=u,{selectedIndices:g,selectedScores:y}=$$(c,h,p,d,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([y.length],"float32",new Float32Array(y))]}};const T$={kernelName:Kt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:r}=t,{depth:a,onValue:i,offValue:o}=s;tv(r,"oneHot");const l=p(r.shape),u=new Float32Array(l*a);u.fill(o);const c=n.data.get(r.dataId).values;for(let e=0;e<l;++e)c[e]>=0&&c[e]<a&&(u[e*a+c[e]]=i);return n.makeTensorInfo([...r.shape,a],"int32",u)}};function E$(e){const{inputs:t,backend:n}=e,{x:s}=t;if("string"===s.dtype)throw new Error("zerosLike is not supported for string tensors");if("complex64"===s.dtype){const e=pv({inputs:{input:s},backend:n}),t=E$({inputs:{x:e},backend:n}),r=DI({inputs:{input:s},backend:n}),a=E$({inputs:{x:r},backend:n}),i=ov({inputs:{real:t,imag:a},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(a),i}return IC({backend:n,attrs:{shape:s.shape,value:0,dtype:s.dtype}})}const A$={kernelName:Vn,backendName:"cpu",kernelFunc:E$};const R$={kernelName:qt,backendName:"cpu",kernelFunc:function e(t){const{inputs:n,backend:s}=t,{x:r}=n;if("string"===r.dtype)throw new Error("onesLike is not supported for string tensors");if("complex64"===r.dtype){const t=pv({inputs:{input:r},backend:s}),n=e({inputs:{x:t},backend:s}),a=DI({inputs:{input:r},backend:s}),i=E$({inputs:{x:a},backend:s}),o=ov({inputs:{real:n,imag:i},backend:s});return s.disposeIntermediateTensorInfo(t),s.disposeIntermediateTensorInfo(n),s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}return IC({backend:s,attrs:{shape:r.shape,value:1,dtype:r.dtype}})}};function F$(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s;if(1===t.length)return mC({inputs:{input:t[0]},backend:n,attrs:{dim:r}});const a=t[0].shape,i=t[0].dtype;t.forEach((e=>{u(a,e.shape,"All tensors passed to stack must have matching shapes"),l(i===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const o=[],c=OI({inputs:t.map((e=>{const t=mC({inputs:{input:e},backend:n,attrs:{dim:r}});return o.push(t),t})),backend:n,attrs:{axis:r}});return o.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}const D$={kernelName:Xt,backendName:"cpu",kernelFunc:F$};const _$={kernelName:Yt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{paddings:a,constantValue:i}=s;tv(r,"pad");const o=a.map(((e,t)=>e[0]+r.shape[t]+e[1])),l=a.map((e=>e[0])),u=n.data.get(r.dataId).values,c=p(r.shape),h=r.shape.length,d=O(r.shape),f=p(o),m=o.length,g=O(o),y=k(r.dtype,f);0!==i&&y.fill(i);for(let e=0;e<c;e++){y[V(U(e,h,d).map(((e,t)=>e+l[t])),m,g)]=u[e]}return{dataId:n.write(y,o,r.dtype),shape:o,dtype:r.dtype}}},O$=iv(((e,t)=>Math.pow(e,t))),M$=gv(Jt,O$),L$={kernelName:Jt,backendName:"cpu",kernelFunc:M$};const z$={kernelName:en,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:r,dtype:a,step:i}=n,o=bN(s,r,i,a);return t.makeTensorInfo([o.length],a,o)}},B$=Cv(nn,(e=>1/e)),P$={kernelName:nn,backendName:"cpu",kernelFunc:B$};const W$={kernelName:ln,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:i,size:o}=s;tv(r,"resizeBilinear");const l=O(r.shape),[u,c]=o,[h,d,f,m]=r.shape,g=n.data.get(r.dataId).values,y=new Float32Array(p([h,u,c,m])),b=[a&&u>1?d-1:d,a&&c>1?f-1:f],x=[a&&u>1?u-1:u,a&&c>1?c-1:c];let w=0;const k=b[0]/x[0],v=b[1]/x[1];for(let e=0;e<h;e++)for(let t=0;t<u;t++){let n;n=i?k*(t+.5)-.5:k*t;const s=Math.max(0,Math.floor(n)),r=n-s,a=Math.min(d-1,Math.ceil(n)),o=e*l[0]+s*l[1],u=e*l[0]+a*l[1];for(let e=0;e<c;e++){let t;t=i?v*(e+.5)-.5:v*e;const n=Math.max(0,Math.floor(t)),s=t-n,a=Math.min(f-1,Math.ceil(t)),c=o+n*l[2],h=u+n*l[2],p=o+a*l[2],d=u+a*l[2];for(let e=0;e<m;e++){const t=g[c+e],n=g[h+e],a=t+(g[p+e]-t)*s,i=a+(n+(g[d+e]-n)*s-a)*r;y[w++]=i}}}return n.makeTensorInfo([h,u,c,m],"float32",y)}};const V$={kernelName:un,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:i}=s;tv([a,r],"resizeBilinearGrad");const o=O(r.shape),[l,u,c,h]=r.shape,[,p,d]=a.shape,f=new Float32Array(l*u*c*h),m=[i&&p>1?u-1:u,i&&d>1?c-1:c],g=[i&&p>1?p-1:p,i&&d>1?d-1:d],y=m[0]/g[0],b=m[1]/g[1],x=n.data.get(a.dataId).values;let w=0;for(let e=0;e<l;e++){const t=e*o[0];for(let e=0;e<p;e++){const n=e*y,s=Math.floor(n),r=Math.min(Math.ceil(n),u-1),a=t+s*o[1],i=t+r*o[1],l=n-s,p=1-l;for(let e=0;e<d;e++){const t=e*b,n=Math.floor(t),s=Math.min(Math.ceil(t),c-1),r=t-n,u=1-r,d=a+n*o[2],m=a+s*o[2],g=i+n*o[2],y=i+s*o[2],k=p*u,v=p*r,N=l*u,I=l*r;for(let e=0;e<h;e++){const t=x[w++];f[d+e]+=t*k,f[m+e]+=t*v,f[g+e]+=t*N,f[y+e]+=t*I}}}}return n.makeTensorInfo([l,c,u,h],"float32",f)}};const U$={kernelName:an,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:i,size:o}=s;tv(r,"resizeNearestNeighbor");const l=O(r.shape),[u,c]=o,[h,p,d,f]=r.shape,m=n.data.get(r.dataId).values,g=new Float32Array(h*u*c*f),y=[a&&u>1?p-1:p,a&&c>1?d-1:d],b=[a&&u>1?u-1:u,a&&c>1?c-1:c],x=y[0]/b[0],w=y[1]/b[1];let k=0;for(let e=0;e<h;e++){const t=e*l[0];for(let e=0;e<u;e++){const n=i?x*(e+.5):x*e;let s=Math.min(p-1,a?Math.round(n):Math.floor(n));i&&(s=Math.max(0,s));const r=t+s*l[1];for(let e=0;e<c;e++){const t=i?w*(e+.5):w*e;let n=Math.min(d-1,a?Math.round(t):Math.floor(t));i&&(n=Math.max(0,n));const s=r+n*l[2];for(let e=0;e<f;e++){const t=m[s+e];g[k++]=t}}}}return n.makeTensorInfo([h,u,c,f],r.dtype,g)}};const G$={kernelName:on,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:i}=s;tv([a,r],"resizeNearestNeighborGrad");const o=O(r.shape),l=O(a.shape),[u,c,h,p]=r.shape,[,d,f]=a.shape,m=new Float32Array(u*c*h*p),g=n.data.get(a.dataId).values,y=[i&&d>1?c-1:c,i&&f>1?h-1:h],b=[i&&d>1?d-1:d,i&&f>1?f-1:f],x=y[0]/b[0],w=y[1]/b[1],k=1/x,v=1/w,N=2*Math.ceil(k)+2,I=2*Math.ceil(v)+2;for(let e=0;e<u;e++){const t=e*o[0];for(let e=0;e<c;e++){const n=t+e*o[1],s=Math.floor(e*k),r=Math.floor(s-N/2);for(let s=0;s<h;s++){const a=n+s*o[2],u=Math.floor(s*v),y=Math.floor(u-I/2);for(let n=0;n<p;n++){let o=0;for(let a=0;a<N;a++){const u=a+r;if(u<0||u>=d)continue;const p=t+u*l[1],m=u*x;if(e===Math.min(c-1,i?Math.round(m):Math.floor(m)))for(let e=0;e<I;e++){const t=e+y;if(t<0||t>=f)continue;const r=p+t*l[2],a=t*w;s===Math.min(h-1,i?Math.round(a):Math.floor(a))&&(o+=g[r+n])}}m[a+n]=o}}}}return n.makeTensorInfo(r.shape,r.dtype,m)}};const H$={kernelName:hn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{dims:a}=s;tv(r,"reverse");const i=r.shape.length,o=x(a,r.shape);if(0===i)return cv({inputs:{x:r},backend:n});const l=new bs(r.shape,r.dtype),u=n.bufferSync(r);for(let e=0;e<l.size;e++){const t=l.indexToLoc(e),n=t.slice();o.forEach((e=>n[e]=r.shape[e]-1-n[e])),l.set(u.get(...n),...t)}return n.makeTensorInfo(l.shape,l.dtype,l.values)}},j$={kernelName:Hn,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,{radians:r,fillValue:a,center:i}=t,o=n,l=k(s.dtype,p(s.shape)),[u,c,h,d]=s.shape,[f,m]=_h(i,c,h),g=Math.sin(r),y=Math.cos(r),b=o.data.get(s.dataId).values;for(let e=0;e<u;e++){const t=e*h*c*d;for(let e=0;e<c;e++){const n=e*(h*d);for(let s=0;s<h;s++){const r=s*d;for(let i=0;i<d;i++){const o=[u,e,s,i],p=o[2],x=o[1];let w=(p-f)*y-(x-m)*g,k=(p-f)*g+(x-m)*y;w=Math.round(w+f),k=Math.round(k+m);let v=a;if("number"!=typeof a&&(v=3===i?255:a[i]),w>=0&&w<h&&k>=0&&k<c){v=b[t+k*(h*d)+w*d+i]}l[t+n+r+i]=v}}}}return{dataId:o.write(l,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},q$=Cv(pn,(e=>{const t=Math.floor(e);return e-t<.5?Math.floor(e):e-t>.5?Math.ceil(e):t%2==0?t:t+1})),K$={kernelName:pn,backendName:"cpu",kernelFunc:q$};function X$(e,t,n,s,r,a,i,o,l,u){const c=[s/r,r],h=e.values,p=t.values;if(0===s)return jr(n,t.dtype);const d=jr(c,t.dtype);d.values.fill(l);for(let e=0;e<a;e++){const a=[];let l=0;for(let t=0;t<i;t++){const n=h[e*i+t];a.push(n),l+=n*o[t]}if(l<0||l>=s/r)throw new Error(`Invalid indices: ${a} does not index into ${n}`);for(let n=0;n<r;n++)u?d.values[l*r+n]+=p[e*r+n]:d.values[l*r+n]=0===t.rank?p[0]:p[e*r+n]}return d}const Y$={kernelName:fn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:r,updates:a}=t,{shape:i}=s,{sliceRank:o,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=$a(0,r,i),p=X$(n.bufferSync(r),n.bufferSync(a),i,h,u,l,o,c,0,!0);return n.makeTensorInfo(i,p.dtype,p.values)}};const J$={kernelName:mn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:s,t:r,e:a}=t;tv([s,r,a],"select");const i=s.shape.length,o=n.data.get(s.dataId).values,l=n.data.get(r.dataId).values,u=n.data.get(a.dataId).values,c=Rs(r.dtype,a.dtype),h=B(p(r.shape),c);let d=0;const f=0===i||i>1||1===r.shape.length?1:p(r.shape.slice(1));for(let e=0;e<o.length;e++)for(let t=0;t<f;t++)1===o[e]?h[d++]=l[e]:h[d++]=u[e];return n.makeTensorInfo(r.shape,c,h)}},Z$=Cv(gn,(e=>e>=0?1.0507009873554805*e:1.7580993408473768*(Math.exp(e)-1))),Q$={kernelName:gn,backendName:"cpu",kernelFunc:Z$},eS=Cv(kn,(e=>1/(1+Math.exp(-e)))),tS={kernelName:kn,backendName:"cpu",kernelFunc:eS},nS=Cv(wn,(e=>e<0?-1:e>0?1:0)),sS={kernelName:wn,backendName:"cpu",kernelFunc:nS},rS=Cv(bn,(e=>Math.sin(e))),aS={kernelName:bn,backendName:"cpu",kernelFunc:rS},iS=Cv(xn,(e=>Math.sinh(e))),oS={kernelName:xn,backendName:"cpu",kernelFunc:iS},lS=Math.log(1.1920928955078125e-7)+2,uS=Cv(vn,(e=>{const t=e>-lS,n=e<lS,s=Math.exp(e);let r;return r=n?s:t?e:Math.log(1+s),r})),cS={kernelName:vn,backendName:"cpu",kernelFunc:uS};const hS={kernelName:Cn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,paddings:i}=s;tv([r],"spaceToBatchND");const o=p(a),l=[[0,0]];l.push(...i);for(let e=1+a.length;e<r.shape.length;++e)l.push([0,0]);const u=_$.kernelFunc({inputs:{x:r},backend:n,attrs:{paddings:l,constantValue:0}}),c=Oh(u.shape,a,o,!1),h=Mh(c.length,a.length,!1),d=Lh(u.shape,a,o,!1),f=XN({inputs:{x:u},backend:n,attrs:{shape:c}}),m=fN({inputs:{x:f},backend:n,attrs:{perm:h}}),g=XN({inputs:{x:m},backend:n,attrs:{shape:d}});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}};const pS={kernelName:Rn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sparseIndices:r,sparseValues:a,defaultValue:i}=t,{outputShape:o}=s,{sliceRank:l,numUpdates:u,sliceSize:c,strides:h,outputSize:p}=$a(0,r,o),d=X$(n.bufferSync(r),n.bufferSync(a),o,p,c,u,l,h,n.data.get(i.dataId).values[0],!1);return n.makeTensorInfo(o,d.dtype,d.values)}};const dS={kernelName:$n,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{numOrSizeSplits:a,axis:i}=s,o=x(i,r.shape)[0],l=hp(r,a,o),u=new Array(r.shape.length).fill(0),c=r.shape.slice();return l.map((e=>{const t=[...c];t[o]=e;const s=NN({inputs:{x:r},backend:n,attrs:{begin:u,size:t}});return u[o]+=e,s}))}},fS=Cv(Nn,(e=>Math.sqrt(e))),mS={kernelName:Nn,backendName:"cpu",kernelFunc:fS},gS={kernelName:En,backendName:"cpu",kernelFunc:({inputs:e,backend:t})=>{const{x:n}=e,s=t;tv(n,"square");const r=s.data.get(n.dataId).values,a=new Float32Array(r.length);for(let e=0;e<r.length;++e){const t=r[e];a[e]=t*t}return{dataId:s.write(a,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},yS=Cv(Un,((e,t)=>{const n=t;return isNaN(e)?NaN:e>0?1:n.alpha})),bS={kernelName:Un,backendName:"cpu",kernelFunc:yS};const xS={kernelName:Fn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,end:i,strides:o,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:h,shrinkAxisMask:p}=s;tv(r,"stridedSlice");const{nonStrided:d,$begin:f,$strides:m,size:g,newShape:y,outShape:b}=Ua(r.shape,a,i,o,l,u,c,h,p),x=XN({inputs:{x:r},backend:n,attrs:{shape:y}});let w;if(d){const e=NN({inputs:{x:x},backend:n,attrs:{begin:f,size:g}});w=XN({inputs:{x:e},backend:n,attrs:{shape:b}}),n.disposeIntermediateTensorInfo(e)}else if(b.some((e=>0===e)))w=n.makeTensorInfo(b,r.dtype,[]);else{const e=TN(b,n.bufferSync(x),m,f);w=n.makeTensorInfo(e.shape,e.dtype,e.values)}const k=XN({inputs:{x:w},backend:n,attrs:{shape:b}});return n.disposeIntermediateTensorInfo(x),n.disposeIntermediateTensorInfo(w),k}},wS=Cv(Dn,(e=>Math.tan(e))),kS={kernelName:Dn,backendName:"cpu",kernelFunc:wS},vS=Cv(_n,(e=>Math.tanh(e)));function NS(e,t,n){switch(n){case"reflect":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=2*t;n<e&&(n=e*Math.trunc(-n/e)+n),n=n<-t?n+e:-n-1}else if(n>t-1)if(t<=1)n=0;else{const e=2*t;n-=e*Math.trunc(n/e),n>=t&&(n=e-n-1)}return a(0,n,t-1)}(e,t);case"wrap":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=t-1;n+=t*(Math.trunc(-n/e)+1)}else if(n>t-1)if(t<=1)n=0;else{const e=t-1;n-=t*Math.trunc(n/e)}return a(0,n,t-1)}(e,t);case"nearest":return function(e,t){return a(0,e,t-1)}(e,t);case"constant":default:return function(e,t){return e}(e)}}function IS(e,t,n,s,r,a,i,o,l,u,c){return 0<=o&&o<t&&0<=l&&l<n?e[i*s+o*r+l*a+u]:c}function CS(e,t,n,s,r,a,i,o,l,u,c){return IS(e,t,n,s,r,a,i,Math.round(o),Math.round(l),u,c)}function $S(e,t,n,s,r,a,i,o,l,u,c){const h=Math.floor(o),p=Math.floor(l),d=h+1,f=p+1;return(d-o)*((f-l)*IS(e,t,n,s,r,a,i,h,p,u,c)+(l-p)*IS(e,t,n,s,r,a,i,h,f,u,c))+(o-h)*((f-l)*IS(e,t,n,s,r,a,i,d,p,u,c)+(l-p)*IS(e,t,n,s,r,a,i,d,f,u,c))}const SS=[QN,av,tI,sI,kv,rI,aI,iI,oI,lI,cI,pI,fI,yI,xI,NI,II,CI,$I,ZN,SI,TI,EI,mv,Ev,RI,lv,FI,MI,BI,PI,zI,VI,UI,WI,HI,qI,KI,XI,YI,JI,QI,eC,tC,nC,sC,aC,rC,xC,lC,zN,uC,pC,fC,Dv,gC,Mv,NC,CC,$C,Bv,EC,AC,RC,FC,DC,Uv,MC,hv,LC,_I,BC,WC,UC,PN,jv,jC,qC,Yv,XC,ZC,e$,s$,r$,a$,eN,l$,u$,c$,h$,p$,o$,d$,f$,sN,m$,b$,k$,oN,uN,N$,C$,S$,pN,T$,R$,D$,_$,L$,UN,yN,z$,dv,P$,HN,qN,YN,W$,V$,U$,G$,H$,j$,K$,kN,Y$,J$,Q$,tS,sS,aS,oS,IN,w$,cS,hS,pS,dS,mS,gS,SN,bS,xS,FN,oC,kS,{kernelName:_n,backendName:"cpu",kernelFunc:vS},{kernelName:On,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reps:a}=s;tv(r,"tile");const i=DN(n.bufferSync(r),a);return n.makeTensorInfo(i.shape,i.dtype,i.values)}},{kernelName:Mn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{k:a,sorted:i}=s;tv(r,"topk");const o=n.data.get(r.dataId).values,[l,u]=_N(o,r.shape,r.dtype,a);return[n.makeTensorInfo(l.shape,l.dtype,l.values),n.makeTensorInfo(u.shape,u.dtype,u.values)]}},mN,{kernelName:Ln,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{image:r,transforms:a}=t,{interpolation:i,fillMode:o,fillValue:l,outputShape:u}=n,[c,h,d,f]=r.shape,[m,g]=null!=u?u:[h,d],y=[c,m,g,f],b=O(r.shape),x=b[0],w=b[1],v=b[2],N=k(r.dtype,p(y));N.fill(l);const I=s.data.get(r.dataId).values,C=s.data.get(a.dataId).values;for(let e=0;e<c;++e){const t=1===a.shape[0]?C:C.subarray(8*e,8*e+8);for(let n=0;n<m;++n)for(let s=0;s<g;++s)for(let r=0;r<f;++r){let a;const u=t[6]*s+t[7]*n+1;if(0===u)continue;const c=(t[0]*s+t[1]*n+t[2])/u,p=(t[3]*s+t[4]*n+t[5])/u,f=NS(c,d,o),m=NS(p,h,o);switch(i){case"nearest":a=CS(I,h,d,x,w,v,e,m,f,r,l);break;case"bilinear":a=$S(I,h,d,x,w,v,e,m,f,r,l);break;default:throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${i}`)}N[e*x+n*w+s*v+r]=a}return s.makeTensorInfo(y,r.dtype,N)}return{dataId:s.write(N,y,r.dtype),shape:r.shape,dtype:r.dtype}}},{kernelName:Bn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{axis:r}=n,{x:a}=t;tv(a,"unique");const i=s.data.get(a.dataId).values,{outputValues:o,outputShape:l,indices:u}=ON(i,r,a.shape,a.dtype);return[s.makeTensorInfo(l,a.dtype,o),s.makeTensorInfo([u.length],"int32",u)]}},{kernelName:Pn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{value:r}=t;let{axis:a}=s;a<0&&(a+=r.shape.length);const i=r.shape.length,o=r.shape[a],l=new Array(i-1);let u=0;for(let e=0;e<i;e++)e!==a&&(l[u++]=r.shape[e]);const c=new Array(i).fill(0),h=r.shape.slice();h[a]=1;const p=new Array(o);for(let e=0;e<p.length;e++){c[a]=e;const t=NN({inputs:{x:r},backend:n,attrs:{begin:c,size:h}});p[e]=XN({inputs:{x:t},backend:n,attrs:{shape:l}}),n.disposeIntermediateTensorInfo(t)}return p}},{kernelName:Wn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,segmentIds:a}=t,{numSegments:i}=s;tv(r,"unsortedSegmentSum");const o=[],l=[],u=r.shape.length-a.shape.length;let c=a;for(let e=0;e<u;++e){const t=mC({inputs:{input:c},backend:n,attrs:{dim:e+1}});c=t,l.push(t)}for(let e=0;e<i;++e){const t=ss(e,"int32"),s=n.makeTensorInfo([],"int32",t),a=hC({inputs:{a:s,b:c},backend:n}),i=fv({inputs:{x:a},backend:n,attrs:{dtype:"float32"}}),u=iN({inputs:{a:i,b:r},backend:n}),h=iC({inputs:{x:u},backend:n,attrs:{axis:0,keepDims:!1}});o.push(h),l.push(s),l.push(a),l.push(i),l.push(u),l.push(h)}const h=F$({inputs:o,backend:n,attrs:{axis:0}});return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),h}},A$];for(const e of SS)es(e);const TS={},ES={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function AS(e){if(!(e in TS)){const t=function(e){if(1!==e&&2!==e)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const t=function(e){if("undefined"!=typeof OffscreenCanvas&&2===e)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(e);if(t.addEventListener("webglcontextlost",(t=>{t.preventDefault(),delete TS[e]}),!1),1===e)return t.getContext("webgl",ES)||t.getContext("experimental-webgl",ES);return t.getContext("webgl2",ES)}(e);if(null===t)return console.log("Could not get context for WebGL version",e),null;TS[e]=t}const t=TS[e];return t.isContextLost()?(delete TS[e],AS(e)):(t.disable(t.DEPTH_TEST),t.disable(t.STENCIL_TEST),t.disable(t.BLEND),t.disable(t.DITHER),t.disable(t.POLYGON_OFFSET_FILL),t.disable(t.SAMPLE_COVERAGE),t.enable(t.SCISSOR_TEST),t.enable(t.CULL_FACE),t.cullFace(t.BACK),TS[e])}var RS,FS,DS;function _S(e,t){return[t,e]}function OS(e){const t=p(e);return m(Math.ceil(t/4))}function MS(e,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(e/2))]}function LS(e,t){const n=e;let s,r,a,i,o,l,u,c,h,p;return 2===K().getNumber("WEBGL_VERSION")?(s=n.R32F,r=n.R16F,a=n.RGBA16F,i=n.RGBA32F,o=n.RED,u=4,c=1,h=n.HALF_FLOAT,p=n.FLOAT):(s=e.RGBA,r=e.RGBA,a=e.RGBA,i=n.RGBA,o=e.RGBA,u=4,c=4,h=null!=t?t.HALF_FLOAT_OES:null,p=e.FLOAT),l=e.RGBA,{internalFormatFloat:s,internalFormatHalfFloat:r,internalFormatPackedHalfFloat:a,internalFormatPackedFloat:i,textureFormatFloat:o,downloadTextureFormat:l,downloadUnpackNumChannels:u,defaultNumChannels:c,textureTypeHalfFloat:h,textureTypeFloat:p}}function zS(e,t){const n=t();return K().getBool("DEBUG")&&function(e){const t=e.getError();if(t!==e.NO_ERROR)throw new Error("WebGL Error: "+function(e,t){switch(t){case e.NO_ERROR:return"NO_ERROR";case e.INVALID_ENUM:return"INVALID_ENUM";case e.INVALID_VALUE:return"INVALID_VALUE";case e.INVALID_OPERATION:return"INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}(e,t))}(e),n}!function(e){e[e.DENSE=0]="DENSE",e[e.SHARED_BATCH=1]="SHARED_BATCH"}(RS||(RS={})),function(e){e[e.RENDER=0]="RENDER",e[e.UPLOAD=1]="UPLOAD",e[e.PIXELS=2]="PIXELS",e[e.DOWNLOAD=3]="DOWNLOAD"}(FS||(FS={})),function(e){e[e.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",e[e.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",e[e.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",e[e.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",e[e.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(DS||(DS={}));function BS(e){return!!(K().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===e||5.96e-8<Math.abs(e)&&Math.abs(e)<65504)}function PS(e,t){return XS(e,(()=>e.getExtension(t)),'Extension "'+t+'" not supported on this browser.')}function WS(e,t){const n=XS(e,(()=>e.createShader(e.FRAGMENT_SHADER)),"Unable to create fragment WebGLShader.");if(zS(e,(()=>e.shaderSource(n,t))),zS(e,(()=>e.compileShader(n))),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw function(e,t){const n=VS.exec(t);if(null==n)return console.log(`Couldn't parse line number in error: ${t}`),void console.log(e);const s=+n[1],r=e.split("\n"),a=r.length.toString().length+2,i=r.map(((e,t)=>g((t+1).toString(),a)+e));let o=0;for(let e=0;e<i.length;e++)o=Math.max(i[e].length,o);const l=i.slice(0,s-1),u=i.slice(s-1,s),c=i.slice(s);console.log(l.join("\n")),console.log(t.split("\n")[0]),console.log(`%c ${g(u[0],o)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join("\n"))}(t,e.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}const VS=/ERROR: [0-9]+:([0-9]+):/g;function US(e,t){if(zS(e,(()=>e.validateProgram(t))),!1===e.getProgramParameter(t,e.VALIDATE_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function GS(e,t,n,s,r,a,i){const o=e.getAttribLocation(t,n);return-1!==o&&(zS(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,s))),zS(e,(()=>e.vertexAttribPointer(o,r,e.FLOAT,!1,a,i))),zS(e,(()=>e.enableVertexAttribArray(o))),!0)}function HS(e,t,n,s){zS(e,(()=>function(e,t,n){YS(e,n),zS(e,(()=>e.activeTexture(e.TEXTURE0+n))),zS(e,(()=>e.bindTexture(e.TEXTURE_2D,t)))}(e,t,s))),zS(e,(()=>e.uniform1i(n,s)))}function jS(e,t,n){zS(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,n))),zS(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0)))}function qS(e,t){zS(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,t))),zS(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,null,0)))}function KS(e){const t=e.checkFramebufferStatus(e.FRAMEBUFFER);if(t!==e.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function(e,t){switch(t){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}(e,t))}function XS(e,t,n){const s=zS(e,(()=>t()));if(null==s)throw new Error(n);return s}function YS(e,t){const n=e.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,s=t+e.TEXTURE0;if(s<e.TEXTURE0||s>n){throw new Error(`textureUnit must be in ${`[gl.TEXTURE0, gl.TEXTURE${n}]`}.`)}}function JS(e,t=2){return p(e.slice(0,e.length-t))}function ZS(e){if(0===e.length)throw Error("Cannot get rows and columns of an empty shape array.");return[e.length>1?e[e.length-2]:1,e[e.length-1]]}function QS(e){let t=[1,1,1];return 0===e.length||1===e.length&&1===e[0]||(t=[JS(e),...ZS(e)]),t}function eT(e){return e%2==0}function tT(e,t){if(d(e=e.slice(-2),t=t.slice(-2)))return!0;if(!e.length||!t.length)return!0;if(0===e[0]||0===e[1]||0===t[0]||0===t[1])return!0;if(e.length!==t.length){const n=e.slice(-1)[0],s=t.slice(-1)[0];if(n===s)return!0;if(eT(n)&&eT(s)&&(1===e[0]||1===t[0]))return!0}return e[1]===t[1]&&eT(e[0])&&eT(t[0])}let nT,sT;function rT(e,t){return null!=e.getExtension(t)}function aT(e){try{if(null!=AS(e))return!0}catch(e){return console.log("Error when getting WebGL context: ",e),!1}return!1}function iT(e){if(0===e)return!1;const t=AS(e);if(1!==e){if(rT(t,"EXT_color_buffer_float"))return oT(t);const e="EXT_color_buffer_half_float";if(rT(t,e)){const n=t.getExtension(e);return function(e,t){const n=LS(e,t),s=e.createTexture();e.bindTexture(e.TEXTURE_2D,s);const r=1,a=1;e.texImage2D(e.TEXTURE_2D,0,n.internalFormatHalfFloat,r,a,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const i=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,i),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,s,0);const o=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(s),e.deleteFramebuffer(i),o}(t,n)}return!1}if(!rT(t,"OES_texture_float"))return!1;if(!rT(t,"WEBGL_color_buffer_float"))return!1;return oT(t)}function oT(e){const t=LS(e),n=e.createTexture();e.bindTexture(e.TEXTURE_2D,n);e.texImage2D(e.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);const s=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,s),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0);const r=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(n),e.deleteFramebuffer(s),r}function lT(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&l("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the WebGL backend.`))}))}const uT=K();function cT(){let e,t,n,s,r,a,i,o,l,u;return 2===K().getNumber("WEBGL_VERSION")?(e="#version 300 es",t="in",n="out",s="in",r="texture",a="outputColor",i="out vec4 outputColor;",o="\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ",l="",u="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(e="",t="attribute",n="varying",s="varying",r="texture2D",a="gl_FragColor",i="",o="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",l="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",u="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:e,attribute:t,varyingVs:n,varyingFs:s,texture2D:r,output:a,defineOutput:i,defineSpecialNaN:o,defineSpecialInf:l,defineRound:u}}function hT(e,t,n="index"){const s=O(t);return s.map(((t,r)=>`${`int ${e[r]} = ${n} / ${t}`}; ${r===s.length-1?`int ${e[r+1]} = ${n} - ${e[r]} * ${t}`:`index -= ${e[r]} * ${t}`};`)).join("")}function pT(e){const t=O(e).map((e=>e.toString()));return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;\n  }\n`}uT.registerFlag("HAS_WEBGL",(()=>uT.getNumber("WEBGL_VERSION")>0)),uT.registerFlag("WEBGL_VERSION",(()=>aT(2)?2:aT(1)?1:0)),uT.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",(()=>!1)),uT.registerFlag("WEBGL_BUFFER_SUPPORTED",(()=>2===uT.get("WEBGL_VERSION"))),uT.registerFlag("WEBGL_CPU_FORWARD",(()=>!0)),uT.registerFlag("WEBGL_FORCE_F16_TEXTURES",(()=>!1)),uT.registerFlag("WEBGL_PACK",(()=>uT.getBool("HAS_WEBGL"))),uT.registerFlag("WEBGL_PACK_NORMALIZATION",(()=>uT.getBool("WEBGL_PACK"))),uT.registerFlag("WEBGL_PACK_CLIP",(()=>uT.getBool("WEBGL_PACK"))),uT.registerFlag("WEBGL_PACK_DEPTHWISECONV",(()=>!0)),uT.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",(()=>uT.getBool("WEBGL_PACK"))),uT.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",(()=>uT.getBool("WEBGL_PACK"))),uT.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",(()=>uT.getBool("WEBGL_PACK"))),uT.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",(()=>uT.getBool("WEBGL_PACK"))),uT.registerFlag("WEBGL_PACK_REDUCE",(()=>uT.getBool("WEBGL_PACK"))),uT.registerFlag("WEBGL_LAZILY_UNPACK",(()=>uT.getBool("WEBGL_PACK"))),uT.registerFlag("WEBGL_CONV_IM2COL",(()=>uT.getBool("WEBGL_PACK"))),uT.registerFlag("WEBGL_MAX_TEXTURE_SIZE",(()=>function(e){if(null==nT){const t=AS(e);nT=t.getParameter(t.MAX_TEXTURE_SIZE)}return nT}(uT.getNumber("WEBGL_VERSION")))),uT.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",(()=>function(e){if(null==sT){const t=AS(e);sT=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,sT)}(uT.getNumber("WEBGL_VERSION")))),uT.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",(()=>{const e=uT.getNumber("WEBGL_VERSION");return 0===e?0:function(e){if(0===e)return 0;let t;const n=AS(e);return t=rT(n,"EXT_disjoint_timer_query_webgl2")&&2===e?2:rT(n,"EXT_disjoint_timer_query")?1:0,t}(e)})),uT.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",(()=>uT.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!Hs())),uT.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",(()=>function(e){if(0===e)return!1;const t=AS(e);if(1===e){if(!rT(t,"OES_texture_float"))return!1}else if(!rT(t,"EXT_color_buffer_float"))return!1;return oT(t)}(uT.getNumber("WEBGL_VERSION")))),uT.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",(()=>!uT.getBool("WEBGL_FORCE_F16_TEXTURES")&&uT.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))),uT.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",(()=>iT(uT.getNumber("WEBGL_VERSION")))),uT.registerFlag("WEBGL_FENCE_API_ENABLED",(()=>{return 2===(e=uT.getNumber("WEBGL_VERSION"))&&null!=AS(e).fenceSync;var e})),uT.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",(()=>uT.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0)),uT.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",(()=>-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${e}.`)})),uT.registerFlag("WEBGL_FLUSH_THRESHOLD",(()=>Hs()&&uT.getBool("IS_CHROME")?1:-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${e}.`)}));const dT="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n";class fT{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=RS.DENSE;const t=OS(e),n=cT();this.outputShape=e,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${hT(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${t[0]}, ${t[1]}));\n        int index = 4 * (resTexRC.x * ${t[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${n.output} = result;\n      }\n    `}}class mT{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=RS.DENSE;const t=OS(e),n=cT();this.outputShape=e,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${hT(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${t[0]}, ${t[1]}));\n        int index = 4 * (resTexRC.x * ${t[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${n.output} = result;\n      }\n    `}}class gT{constructor(e){this.variableNames=["A"],this.outTexUsage=FS.DOWNLOAD;const t=cT();this.outputShape=e,this.userCode=`\n      ${dT}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${t.output} = encode_float(x);\n      }\n    `}}class yT{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=FS.DOWNLOAD;const t=cT();this.outputShape=e,this.userCode=`\n      ${dT}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${t.output} = encode_float(x);\n      }\n    `}}class bT{constructor(e,t,n=!1){this.variableNames=["A"];const s=cT(),[r,a]=t;this.outputShape=e;let i="result";n&&(i="floor(result * 255. + 0.5)"),this.userCode=`\n      ${pT(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / ${a};\n        int c = imod(flatIndex, ${a});\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(${a}.0, ${r}.0);\n        vec4 values = ${s.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${s.output} = vec4(${i}, 0., 0., 0.);\n      }\n    `}}class xT{constructor(e,t,n=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const s=cT(),[r,a]=t;this.outputShape=e;let i="",o="result";n&&(o="floor(result * 255. + 0.5)");for(let t=0;t<=1;t++)for(let n=0;n<=1;n++){const o=2*t+n;i+=`\n          localCoords = coords;\n          if(localCoords[2] + ${n} < ${e[2]}) {\n            localCoords[2] += ${n};\n            if(localCoords[1] + ${t} < ${e[1]}) {\n              localCoords[1] += ${t};\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n\n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / ${a};\n              c = imod(flatIndex, ${a});\n              uv = (vec2(c, r) + halfCR) / vec2(${a}.0, ${r}.0);\n              values = ${s.texture2D}(A, uv);\n\n              if(offset == 0) {\n                result[${o}] = values[0];\n              } else if(offset == 1) {\n                result[${o}] = values[1];\n              } else if(offset == 2) {\n                result[${o}] = values[2];\n              } else {\n                result[${o}] = values[3];\n              }\n            }\n          }\n        `}this.userCode=`\n      ${pT(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n\n        ${i}\n\n        ${s.output} = ${o};\n      }\n    `}}function wT(e){const t=cT();return function(e,t){const n=XS(e,(()=>e.createShader(e.VERTEX_SHADER)),"Unable to create vertex WebGLShader.");if(zS(e,(()=>e.shaderSource(n,t))),zS(e,(()=>e.compileShader(n))),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw console.log(e.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}(e,`${t.version}\n    precision highp float;\n    ${t.attribute} vec3 clipSpacePos;\n    ${t.attribute} vec2 uv;\n    ${t.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}function kT(e){return function(e,t){const n=XS(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return zS(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),zS(e,(()=>e.bufferData(e.ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}function vT(e){return function(e,t){const n=XS(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return zS(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n))),zS(e,(()=>e.bufferData(e.ELEMENT_ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Uint16Array([0,1,2,2,1,3]))}function NT(e,t,n,s,r,a){!function(e,t){const n=K().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e<=0||t<=0)throw new Error(`Requested texture size [${e}x${t}] is invalid.`);if(e>n||t>n)throw new Error(`Requested texture size [${e}x${t}] greater than WebGL maximum on this browser / GPU [${n}x${n}].`)}(t,n);const i=function(e){return XS(e,(()=>e.createTexture()),"Unable to create WebGLTexture.")}(e),o=e.TEXTURE_2D;return zS(e,(()=>e.bindTexture(o,i))),zS(e,(()=>e.texParameteri(o,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE))),zS(e,(()=>e.texParameteri(o,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE))),zS(e,(()=>e.texParameteri(o,e.TEXTURE_MIN_FILTER,e.NEAREST))),zS(e,(()=>e.texParameteri(o,e.TEXTURE_MAG_FILTER,e.NEAREST))),zS(e,(()=>e.texImage2D(o,0,s,t,n,0,r,a,null))),zS(e,(()=>e.bindTexture(e.TEXTURE_2D,null))),i}function IT(e){return e.internalFormatFloat}function CT(e){return e.internalFormatHalfFloat}function $T(e){return e.downloadTextureFormat}function ST(e){return e.internalFormatPackedFloat}function TT(e){return e.internalFormatPackedHalfFloat}function ET(e,t,n,s,r,a,i,o){const l=e,u=new Float32Array(function(e,t){const[n,s]=MS(e,t);return n*s*4}(a,i));return l.bindBuffer(l.PIXEL_PACK_BUFFER,t),l.getBufferSubData(l.PIXEL_PACK_BUFFER,0,u),l.bindBuffer(l.PIXEL_PACK_BUFFER,null),u}class AT{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];const t=K().getNumber("WEBGL_VERSION");null!=e?(this.gl=e,function(e,t){TS[e]=t}(t,e)):this.gl=AS(t);let n="WEBGL_color_buffer_float";const s="EXT_color_buffer_half_float";if(1===K().getNumber("WEBGL_VERSION")){const e="OES_texture_float",t="OES_texture_half_float";if(this.textureFloatExtension=PS(this.gl,e),rT(this.gl,t))this.textureHalfFloatExtension=PS(this.gl,t);else if(K().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),rT(this.gl,s))this.colorBufferHalfFloatExtension=PS(this.gl,s);else if(K().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",rT(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!rT(this.gl,s))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(s)}this.vertexBuffer=kT(this.gl),this.indexBuffer=vT(this.gl),this.framebuffer=function(e){return XS(e,(()=>e.createFramebuffer()),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=LS(this.gl,this.textureHalfFloatExtension)}get debug(){return K().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const e=this.gl;zS(e,(()=>e.finish())),zS(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,null))),zS(e,(()=>e.deleteFramebuffer(this.framebuffer))),zS(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,null))),zS(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null))),zS(e,(()=>e.deleteBuffer(this.indexBuffer))),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=_S(t,n);return NT(e,r,a,IT(s),s.textureFormatFloat,e.FLOAT)}(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=_S(t,n);return NT(e,r,a,CT(s),s.textureFormatFloat,s.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=_S(t,n);return NT(e,r,a,$T(s),e.RGBA,e.UNSIGNED_BYTE)}(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,t){this.throwIfDisposed(),function(e,t,n){zS(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),n.data instanceof Uint8Array?zS(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,n.width,n.height,0,e.RGBA,e.UNSIGNED_BYTE,n.data))):zS(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,n))),zS(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t)}uploadDenseMatrixToTexture(e,t,n,s){this.throwIfDisposed(),function(e,t,n,s,r,a){let i,o,l;zS(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),r instanceof Uint8Array?(i=new Uint8Array(n*s*4),o=e.UNSIGNED_BYTE,l=e.RGBA):(i=new Float32Array(n*s*4),o=e.FLOAT,l=a.internalFormatPackedFloat),i.set(r),zS(e,(()=>e.texImage2D(e.TEXTURE_2D,0,l,n,s,0,e.RGBA,o,i))),zS(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t,n,s,this.textureConfig)}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=MS(t,n);return NT(e,r,a,TT(s),e.RGBA,s.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=MS(t,n);return NT(e,r,a,ST(s),e.RGBA,e.FLOAT)}(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(qS(this.gl,this.framebuffer),this.outputTexture=null),zS(this.gl,(()=>this.gl.deleteTexture(e)))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n,s){const[r,a]=_S(t,n),i=new Uint8Array(t*n*4);return zS(e,(()=>e.readPixels(0,0,r,a,s.downloadTextureFormat,e.UNSIGNED_BYTE,i))),new Float32Array(i.buffer)}(this.gl,t,n,this.textureConfig)))}downloadPackedMatrixFromBuffer(e,t,n,s,r,a){return ET(this.gl,e,0,0,0,r,a,this.textureConfig)}downloadFloat32MatrixFromBuffer(e,t){return function(e,t,n){const s=e,r=new Float32Array(n);return s.bindBuffer(s.PIXEL_PACK_BUFFER,t),s.getBufferSubData(s.PIXEL_PACK_BUFFER,0,r),s.bindBuffer(s.PIXEL_PACK_BUFFER,null),r}(this.gl,e,t)}createBufferFromTexture(e,t,n){this.bindTextureToFrameBuffer(e);const s=function(e,t,n,s){const r=e.createBuffer();zS(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,r)));const a=16*t*n;return zS(e,(()=>e.bufferData(e.PIXEL_PACK_BUFFER,a,e.STREAM_READ))),zS(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,0))),zS(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,null))),r}(this.gl,t,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),s}createAndWaitForFence(){const e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let t,n;if(K().getBool("WEBGL_FENCE_API_ENABLED")){const s=e,r=s.fenceSync(s.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),n=()=>{const e=s.clientWaitSync(r,0,0);return e===s.ALREADY_SIGNALED||e===s.CONDITION_SATISFIED},t=r}else K().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(t,K().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:t,isFencePassed:n}}downloadMatrixFromPackedTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n){const s=new Float32Array(t*n*4);return zS(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,s))),s}(this.gl,t,n)))}createProgram(e){this.throwIfDisposed();const t=this.gl,n=WS(t,e),s=wT(t),r=function(e){return XS(e,(()=>e.createProgram()),"Unable to create WebGLProgram.")}(t);return zS(t,(()=>t.attachShader(r,s))),zS(t,(()=>t.attachShader(r,n))),function(e,t){if(zS(e,(()=>e.linkProgram(t))),!1===e.getProgramParameter(t,e.LINK_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}(t,r),this.debug&&US(t,r),this.vertexAttrsAreBound||(this.setProgram(r),this.vertexAttrsAreBound=function(e,t,n){return zS(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),GS(e,t,"clipSpacePos",n,3,20,0)&&GS(e,t,"uv",n,2,20,12)}(t,this.program,this.vertexBuffer)),r}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),null!=e&&zS(this.gl,(()=>this.gl.deleteProgram(e)))}setProgram(e){this.throwIfDisposed(),this.program=e,null!=this.program&&this.debug&&US(this.gl,this.program),zS(this.gl,(()=>this.gl.useProgram(e)))}getUniformLocation(e,t,n=!0){return this.throwIfDisposed(),n?function(e,t,n){return XS(e,(()=>e.getUniformLocation(t,n)),'uniform "'+n+'" not present in program.')}(this.gl,e,t):function(e,t,n){return e.getUniformLocation(t,n)}(this.gl,e,t)}getAttributeLocation(e,t){return this.throwIfDisposed(),zS(this.gl,(()=>this.gl.getAttribLocation(e,t)))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,n){this.throwIfDisposed(),this.throwIfNoProgram(),HS(this.gl,e,t,n)}setOutputMatrixTexture(e,t,n){this.setOutputMatrixTextureDriver(e,n,t)}setOutputPackedMatrixTexture(e,t,n){this.throwIfDisposed();const[s,r]=MS(t,n);this.setOutputMatrixTextureDriver(e,s,r)}setOutputMatrixWriteRegion(e,t,n,s){this.setOutputMatrixWriteRegionDriver(n,e,s,t)}setOutputPackedMatrixWriteRegion(e,t,n,s){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&US(this.gl,this.program),KS(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const e=this.gl;this.debug&&this.debugValidate(),zS(e,(()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0)))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),zS(this.gl,(()=>this.gl.finish()))}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=PS(this.gl,2===K().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===K().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2(),n=e.createQuery();return e.beginQuery(t.TIME_ELAPSED_EXT,n),n}const e=this.getQueryTimerExtensionWebGL1(),t=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,t),t}endQuery(){if(2===K().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2();return void e.endQuery(t.TIME_ELAPSED_EXT)}const e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await y((()=>this.disposed||this.isQueryAvailable(e,K().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")))),this.getQueryTime(e,K().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,t){if(0===t)return null;if(2===t){const t=this.gl;return t.getQueryParameter(e,t.QUERY_RESULT)/1e6}{const t=this.getQueryTimerExtensionWebGL1();return t.getQueryObjectEXT(e,t.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,t){if(0===t)return!0;if(2===t){const t=this.gl,n=this.getQueryTimerExtensionWebGL2(),s=t.getQueryParameter(e,t.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),s&&!this.disjoint}{const t=this.getQueryTimerExtensionWebGL1(),n=t.getQueryObjectEXT(e,t.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(t.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(e){return new Promise((t=>{this.addItemToPoll((()=>e.isFencePassed()),(()=>t()))}))}pollItems(){const e=function(e){let t=0;for(;t<e.length;++t){if(!e[t]())break}return t-1}(this.itemsToPoll.map((e=>e.isDoneFn)));for(let t=0;t<=e;++t){const{resolveFn:e}=this.itemsToPoll[t];e()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,t){this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),this.itemsToPoll.length>1||y((()=>(this.pollItems(),0===this.itemsToPoll.length)))}bindTextureToFrameBuffer(e){this.throwIfDisposed(),jS(this.gl,e,this.framebuffer),this.debug&&KS(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(jS(this.gl,this.outputTexture,this.framebuffer),this.debug&&KS(this.gl)):qS(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);const n=t();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(e,t,n){this.throwIfDisposed();const s=this.gl;jS(s,e,this.framebuffer),this.debug&&KS(s),this.outputTexture=e,zS(s,(()=>s.viewport(0,0,t,n))),zS(s,(()=>s.scissor(0,0,t,n)))}setOutputMatrixWriteRegionDriver(e,t,n,s){this.throwIfDisposed(),zS(this.gl,(()=>this.gl.scissor(e,t,n,s)))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}const{getBroadcastDims:RT}=bp;function FT(e,t,n,s){const r=[];e.forEach((e=>{const t=p(e.shapeInfo.logicalShape);e.shapeInfo.isUniform?r.push(`uniform float ${e.name}${t>1?`[${t}]`:""};`):(r.push(`uniform sampler2D ${e.name};`),r.push(`uniform int offset${e.name};`))}));const a=r.join("\n"),i=e.map((e=>function(e,t,n=!1){let s="";s+=n?_T(e):DT(e);const r=e.shapeInfo.logicalShape,a=t.logicalShape;r.length<=a.length&&(s+=n?function(e,t){const n=e.name,s=n.charAt(0).toUpperCase()+n.slice(1),r="get"+s+"AtOutCoords",a=e.shapeInfo.logicalShape.length,i=t.logicalShape.length,o=RT(e.shapeInfo.logicalShape,t.logicalShape),l=VT(i),u=i-a;let c;const h=["x","y","z","w","u","v"];c=0===a?"":i<2&&o.length>=1?"coords = 0;":o.map((e=>`coords.${h[e+u]} = 0;`)).join("\n");let d="";d=i<2&&a>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${h[t+u]}`)).join(", ");let f="return outputValue;";const m=1===p(e.shapeInfo.logicalShape),g=1===p(t.logicalShape);if(1!==a||m||g){if(m&&!g)f=1===i?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(o.length){const e=a-2,t=a-1;o.indexOf(e)>-1&&o.indexOf(t)>-1?f="return vec4(outputValue.x);":o.indexOf(e)>-1?f="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":o.indexOf(t)>-1&&(f="return vec4(outputValue.xx, outputValue.zz);")}}else f="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${r}() {\n      ${l} coords = getOutputCoords();\n      ${c}\n      vec4 outputValue = get${s}(${d});\n      ${f}\n    }\n  `}(e,t):function(e,t){const n=e.name,s=n.charAt(0).toUpperCase()+n.slice(1),r="get"+s+"AtOutCoords",a=t.texShape,i=e.shapeInfo.texShape,o=e.shapeInfo.logicalShape.length,l=t.logicalShape.length;if(!e.shapeInfo.isUniform&&o===l&&null==e.shapeInfo.flatOffset&&d(i,a))return`\n      float ${r}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const u=VT(l),c=RT(e.shapeInfo.logicalShape,t.logicalShape),h=l-o;let p;const f=["x","y","z","w","u","v"];p=0===o?"":l<2&&c.length>=1?"coords = 0;":c.map((e=>`coords.${f[e+h]} = 0;`)).join("\n");let m="";m=l<2&&o>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${f[t+h]}`)).join(", ");return`\n    float ${r}() {\n      ${u} coords = getOutputCoords();\n      ${p}\n      return get${s}(${m});\n    }\n  `}(e,t));return s}(e,t,s))).join("\n"),o=t.texShape,l=cT(),u=function(e){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${e.texture2D}(textureSampler, uv).r;\n    }\n  `}(l);let c,h,f=function(e){return`${e.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${e.varyingFs} vec2 resultUV;\n    ${e.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${e.defineSpecialNaN}\n    ${e.defineSpecialInf}\n    ${e.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${OT}\n    ${MT}\n    ${LT}\n  `}(l);t.isPacked?(c=function(e,t){switch(e.length){case 0:return BT();case 1:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(1===n[0])return`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${n[1]}.0);\n      }\n    `;if(1===n[1])return`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${n[0]}.0);\n      }\n    `;return`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      return 2 * (resTexRC.x * ${n[1]} + resTexRC.y);\n    }\n  `}(0,t);case 2:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(d(e,t))return`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${n[0]}, ${n[1]}));\n      }\n    `;const s=Math.ceil(e[1]/2);return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(e,t);case 3:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],s=Math.ceil(e[2]/2),r=s*Math.ceil(e[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      int b = index / ${r};\n      index -= b * ${r};\n\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(e,t);default:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],s=Math.ceil(e[e.length-1]/2),r=s*Math.ceil(e[e.length-2]/2);let a=r,i="",o="b, r, c";for(let t=2;t<e.length-1;t++)a*=e[e.length-t-1],i=`\n      int b${t} = index / ${a};\n      index -= b${t} * ${a};\n    `+i,o=`b${t}, `+o;return`\n    ivec${e.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      ${i}\n\n      int b = index / ${r};\n      index -= b * ${r};\n\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec${e.length}(${o});\n    }\n  `}(e,t)}}(t.logicalShape,o),h=function(e){return`\n    void setOutput(vec4 val) {\n      ${e.output} = val;\n    }\n  `}(l)):(c=function(e,t){switch(e.length){case 0:return BT();case 1:return function(e,t){if(1===t[0])return`\n      int getOutputCoords() {\n        return int(resultUV.x * ${t[1]}.0);\n      }\n    `;if(1===t[1])return`\n      int getOutputCoords() {\n        return int(resultUV.y * ${t[0]}.0);\n      }\n    `;return`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      return resTexRC.x * ${t[1]} + resTexRC.y;\n    }\n  `}(0,t);case 2:return function(e,t){if(d(e,t))return`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));\n      }\n    `;if(1===e[1])return`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;if(1===e[0])return`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      int r = index / ${e[1]};\n      int c = index - r * ${e[1]};\n      return ivec2(r, c);\n    }\n  `}(e,t);case 3:return function(e,t){const n=hT(["r","c","d"],e);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${n}\n      return ivec3(r, c, d);\n    }\n  `}(e,t);case 4:return function(e,t){const n=hT(["r","c","d","d2"],e);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${n}\n      return ivec4(r, c, d, d2);\n    }\n  `}(e,t);case 5:return function(e,t){const n=hT(["r","c","d","d2","d3"],e);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},\n                             ${t[1]}));\n\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(e,t);case 6:return function(e,t){const n=hT(["r","c","d","d2","d3","d4"],e);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(e,t);default:throw new Error(`${e.length}-D output sampling is not yet supported`)}}(t.logicalShape,o),h=function(e){return`\n    void setOutput(float val) {\n      ${e.output} = vec4(val, 0, 0, 0);\n    }\n  `}(l)),s&&(f+=zT);return[f,u,h,a,c,i,n].join("\n")}function DT(e){const t=e.shapeInfo.logicalShape;switch(t.length){case 0:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1);if(e.shapeInfo.isUniform)return`float ${n}() {return ${t};}`;const[s,r]=e.shapeInfo.texShape;if(1===s&&1===r)return`\n      float ${n}() {\n        return sampleTexture(${t}, halfCR);\n      }\n    `;const[a,i]=e.shapeInfo.texShape,o=PT(t);return`\n    float ${n}() {\n      vec2 uv = uvFromFlat(${a}, ${i}, ${o});\n      return sampleTexture(${t}, uv);\n    }\n  `}(e);case 1:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1);if(e.shapeInfo.isUniform)return`\n      float ${n}(int index) {\n        ${WT(e)}\n      }\n    `;const s=e.shapeInfo.texShape,r=s[0],a=s[1];if(1===a&&1===r)return`\n      float ${n}(int index) {\n        return sampleTexture(${t}, halfCR);\n      }\n    `;const i=PT(t);if(1===a)return`\n      float ${n}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / ${r}.0);\n        return sampleTexture(${t}, uv);\n      }\n    `;if(1===r)return`\n      float ${n}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / ${a}.0, 0.5);\n        return sampleTexture(${t}, uv);\n      }\n    `;return`\n    float ${n}(int index) {\n      vec2 uv = uvFromFlat(${r}, ${a}, index + ${i});\n      return sampleTexture(${t}, uv);\n    }\n  `}(e);case 2:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=e.shapeInfo.texShape;if(null!=r&&d(t,r)){const e=r[0];return`\n    float ${s}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${r[1]}.0, ${e}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `}const{newShape:a,keptDims:i}=w(t),o=a;if(o.length<t.length){const t=["row","col"];return`\n      ${DT(UT(e,o))}\n      float ${s}(int row, int col) {\n        return ${s}(${GT(t,i)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${t[1]}, 1)));\n        ${WT(e)}\n      }\n    `;const l=r[0],u=r[1],c=PT(n);if(1===u)return`\n    float ${s}(int row, int col) {\n      float index = dot(vec3(row, col, ${c}), vec3(${t[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${l}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `;if(1===l)return`\n    float ${s}(int row, int col) {\n      float index = dot(vec3(row, col, ${c}), vec3(${t[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${u}.0, 0.5);\n      return sampleTexture(${n}, uv);\n    }\n  `;return`\n  float ${s}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${t[1]} + col + ${c};\n    vec2 uv = uvFromFlat(${l}, ${u}, index);\n    return sampleTexture(${n}, uv);\n  }\n`}(e);case 3:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=t[1]*t[2],a=t[2],{newShape:i,keptDims:o}=w(t),l=i;if(l.length<t.length){const t=["row","col","depth"];return`\n        ${DT(UT(e,l))}\n        float ${s}(int row, int col, int depth) {\n          return ${s}(${GT(t,o)});\n        }\n      `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${r}, ${a}, 1)));\n        ${WT(e)}\n      }\n    `;const u=e.shapeInfo.texShape,c=u[0],h=u[1],p=e.shapeInfo.flatOffset;if(h===r&&null==p)return`\n        float ${s}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${a}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${h}.0, ${c}.0);\n          return sampleTexture(${n}, uv);\n        }\n      `;if(h===a&&null==p)return`\n    float ${s}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${t[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${h}.0, ${c}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `;const d=PT(n);return`\n      float ${s}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${r} + col * ${a} + depth + ${d};\n        vec2 uv = uvFromFlat(${c}, ${h}, index);\n        return sampleTexture(${n}, uv);\n      }\n  `}(e);case 4:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=t[3],a=t[2]*r,i=t[1]*a,{newShape:o,keptDims:l}=w(t);if(o.length<t.length){const t=["row","col","depth","depth2"];return`\n      ${DT(UT(e,o))}\n      float ${s}(int row, int col, int depth, int depth2) {\n        return ${s}(${GT(t,l)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${i}, ${a}, ${r}, 1)));\n        ${WT(e)}\n      }\n    `;const u=e.shapeInfo.flatOffset,c=e.shapeInfo.texShape,h=c[0],p=c[1];if(p===i&&null==u)return`\n      float ${s}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${a}, ${r}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${p}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(p===r&&null==u)return`\n      float ${s}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${t[1]*t[2]}, ${t[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${p}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const d=PT(n);return`\n    float ${s}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${i} + col * ${a} +\n          depth * ${r} + depth2;\n      vec2 uv = uvFromFlat(${h}, ${p}, index + ${d});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 5:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=t[4],a=t[3]*r,i=t[2]*a,o=t[1]*i,{newShape:l,keptDims:u}=w(t);if(l.length<t.length){const t=["row","col","depth","depth2","depth3"];return`\n      ${DT(UT(e,l))}\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        return ${s}(${GT(t,u)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${o}, ${i}, ${a}, ${r})) +\n          depth3;\n        ${WT(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,h=e.shapeInfo.texShape,p=h[0],d=h[1];if(d===o&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${i}, ${a}, ${r}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${d}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(d===r&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]},\n               ${t[2]*t[3]}, ${t[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${d}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const f=PT(n);return`\n    float ${s}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${o} + col * ${i} + depth * ${a} +\n          depth2 * ${r} + depth3 + ${f};\n      vec2 uv = uvFromFlat(${p}, ${d}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 6:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:r,keptDims:a}=w(t);if(r.length<t.length){const t=["row","col","depth","depth2","depth3","depth4"];return`\n      ${DT(UT(e,r))}\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${s}(${GT(t,a)});\n      }\n    `}const i=t[5],o=t[4]*i,l=t[3]*o,u=t[2]*l,c=t[1]*u;if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${c}, ${u}, ${l}, ${o})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${i}, 1)));\n        ${WT(e)}\n      }\n    `;const h=e.shapeInfo.flatOffset,p=e.shapeInfo.texShape,d=p[0],f=p[1];if(f===c&&null==h)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${u}, ${l}, ${o}, ${i})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(f===i&&null==h)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]*t[4]},\n               ${t[2]*t[3]*t[4]},\n               ${t[3]*t[4]},\n               ${t[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const m=PT(n);return`\n    float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${c} + col * ${u} + depth * ${l} +\n          depth2 * ${o} + depth3 * ${i} + depth4 + ${m};\n      vec2 uv = uvFromFlat(${d}, ${f}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);default:throw new Error(`${t.length}-D input sampling is not yet supported`)}}function _T(e){switch(e.shapeInfo.logicalShape.length){case 0:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1),s=cT();return`\n    vec4 ${n}() {\n      return ${s.texture2D}(${t}, halfCR);\n    }\n  `}(e);case 1:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1),s=e.shapeInfo.texShape,r=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)],a=cT();return`\n    vec4 ${n}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${r[0]}, ${r[1]}, index);\n      return ${a.texture2D}(${t}, uv);\n    }\n  `}(e);case 2:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=e.shapeInfo.texShape,a=r[0],i=r[1],o=cT();if(null!=r&&d(t,r))return`\n      vec4 ${s}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${i}.0, ${a}.0);\n\n        return ${o.texture2D}(${n}, uv);\n      }\n    `;const l=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)],u=Math.ceil(t[1]/2);return`\n    vec4 ${s}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${u}, ${l[0]}, ${l[1]}, row, col);\n      return ${o.texture2D}(${n}, uv);\n    }\n  `}(e);case 3:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=e.shapeInfo.texShape,a=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)];if(1===t[0]){const n=[1,2],r=["b","row","col"];return`\n        ${_T(UT(e,t.slice(1)))}\n        vec4 ${s}(int b, int row, int col) {\n          return ${s}(${GT(r,n)});\n        }\n      `}const i=a[0],o=a[1],l=Math.ceil(t[2]/2),u=l*Math.ceil(t[1]/2),c=cT();return`\n    vec4 ${s}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${i}, ${o}, ${u}, ${l}, b, row, col);\n      return ${c.texture2D}(${n}, uv);\n    }\n  `}(e);default:return function(e){const t=e.shapeInfo.logicalShape,n=t.length,s=e.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=e.shapeInfo.texShape,i=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)],o=i[0],l=i[1],u=Math.ceil(t[n-1]/2);let c=u*Math.ceil(t[n-2]/2),h="int b, int row, int col",p=`b * ${c} + (row / 2) * ${u} + (col / 2)`;for(let e=2;e<n-1;e++)h=`int b${e}, `+h,c*=t[n-e-1],p=`b${e} * ${c} + `+p;const d=cT();return`\n    vec4 ${r}(${h}) {\n      int index = ${p};\n      int texR = index / ${l};\n      int texC = index - texR * ${l};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${l}, ${o});\n      return ${d.texture2D}(${s}, uv);\n    }\n  `}(e)}}const OT="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",MT="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",LT="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",zT="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function BT(){return"\n    int getOutputCoords() {\n      return 0;\n    }\n  "}function PT(e){return`offset${e}`}function WT(e){const t=e.name,n=p(e.shapeInfo.logicalShape);return n<2?`return ${t};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${t}[i];\n      }\n    }\n  `}function VT(e){if(e<=1)return"int";if(2===e)return"ivec2";if(3===e)return"ivec3";if(4===e)return"ivec4";if(5===e)return"ivec5";if(6===e)return"ivec6";throw Error(`GPU for rank ${e} is not yet supported`)}function UT(e,t){const n=JSON.parse(JSON.stringify(e));return n.shapeInfo.logicalShape=t,n}function GT(e,t){return t.map((t=>e[t])).join(", ")}function HT(e,t){if(e.length!==t.length)throw Error(`Binary was compiled with ${e.length} inputs, but was executed with ${t.length} inputs`);e.forEach(((e,n)=>{const s=e.logicalShape,r=t[n],a=r.shape;if(!d(s,a))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${s} and ${a} must match`);if(e.isUniform&&r.isUniform)return;const i=e.texShape,o=r.isUniform?null:r.texData.texShape;if(!d(i,o))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${i} and ${o} must match`)}))}const{addImpl:jT,bincountImpl:qT,bincountReduceImpl:KT,ceilImpl:XT,concatImpl:YT,expImpl:JT,expm1Impl:ZT,floorImpl:QT,gatherV2Impl:eE,greaterImpl:tE,lessImpl:nE,linSpaceImpl:sE,logImpl:rE,maxImpl:aE,maximumImpl:iE,minimumImpl:oE,multiplyImpl:lE,negImpl:uE,prodImpl:cE,rangeImpl:hE,rsqrtImpl:pE,simpleAbsImpl:dE,sliceImpl:fE,stridedSliceImpl:mE,subImpl:gE,tileImpl:yE,topKImpl:bE,transposeImpl:xE,uniqueImpl:wE}=MN;function kE(e,t){return["x","y","z","w","u","v"].slice(0,t).map((t=>`${e}.${t}`))}function vE(e,t){return 1===t?[e]:kE(e,t)}class NE{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e;const t=e.length;if(0===t)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const n=vE("rc",t),s=VT(t),r=function(e,t,n){if(1===e)return`rc > ${t[0]}`;let s="";for(let r=e-2;r<e;r++)s+=`${n[r]} >= ${t[r]}`,r<e-1&&(s+="||");return s}(t,e,n),a=function(e,t,n,s){if(1===e)return"";const r=s.slice(-2);return`\n    int r = ${r[0]};\n    int c = ${r[1]};\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= ${t};\n    bool rEdge = rp1 >= ${n};\n  `}(t,e[e.length-1],e[e.length-2],n),i=function(e,t){const n=e.length,s=function(e,t){const n=[];for(let s=0;s<=1;s++)for(let r=0;r<=1;r++){let a=`${0===s?"r":"rp1"}, ${0===r?"c":"cp1"}`;for(let n=2;n<e;n++)a=`${t[t.length-1-n]},`+a;n.push(a)}return n}(n,t);if(1===n)return`getA(rc),\n            rc + 1 >= ${e[0]} ? 0. : getA(rc + 1),\n            0, 0`;return`getA(${s[0]}),\n          cEdge ? 0. : getA(${s[1]}),\n          rEdge ? 0. : getA(${s[2]}),\n          rEdge || cEdge ? 0. : getA(${s[3]})`}(e,n);this.userCode=`\n        void main() {\n          ${s} rc = getOutputCoords();\n\n          if(${r}) {\n            setOutput(vec4(0));\n          } else {\n            ${a}\n\n            setOutput(vec4(${i}));\n          }\n        }\n      `}}}class IE{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e;let n="";for(let e=0;e<4;e++){let t="thisRC = rc;";e%2==1&&(t+="thisRC.z += 1;"),e>1&&(t+="thisRC.y += 1;"),n+=`\n        ${t}\n        ${e>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${e}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${e>0?"}":""}\n      `}var s;this.userCode=`\n      ${s=t,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${hT(["r","c","d"],s)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${pT(e)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${e[1]};\n        int cols = ${e[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}class CE{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(e,t,n){const s=SE(t,n),r=TE(e,s,n);r in this.freeTextures||(this.freeTextures[r]=[]),r in this.usedTextures||(this.usedTextures[r]=[]);const a=$E(e,s,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[r].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=a,this.log();const e=this.freeTextures[r].shift();return this.usedTextures[r].push(e),e}let i;return s===DS.PACKED_2X2_FLOAT32?i=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):s===DS.PACKED_2X2_FLOAT16?i=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):s===DS.UNPACKED_FLOAT32?i=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):s===DS.UNPACKED_FLOAT16?i=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):s===DS.PACKED_4X1_UNSIGNED_BYTE&&(i=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[r].push(i),this.numUsedTextures++,this._numBytesAllocated+=a,this.log(),i}releaseTexture(e,t,n,s){if(null==this.freeTextures)return;const r=SE(n,s),a=TE(t,r,s);a in this.freeTextures||(this.freeTextures[a]=[]);const i=$E(t,r,this.gpgpu.gl,this.gpgpu.textureConfig,s),o=K().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==o&&this._numBytesAllocated>o?(this.gpgpu.deleteMatrixTexture(e),this._numBytesAllocated-=i):(this.freeTextures[a].push(e),this.numFreeTextures++,this._numBytesFree+=i),this.numUsedTextures--;const l=this.usedTextures[a],u=l.indexOf(e);if(u<0)throw new Error("Cannot release a texture that was never provided by this texture manager");l.splice(u,1),this.log()}log(){if(!this.logEnabled)return;const e=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${e})`);const t=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*t)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const e in this.freeTextures)this.freeTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e)}));for(const e in this.usedTextures)this.usedTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e)}));this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function $E(e,t,n,s,r){const a=function(e,t){switch(e){case DS.PACKED_2X2_FLOAT32:return ST(t);case DS.PACKED_2X2_FLOAT16:return TT(t);case DS.UNPACKED_FLOAT32:return IT(t);case DS.UNPACKED_FLOAT16:return CT(t);case DS.PACKED_4X1_UNSIGNED_BYTE:return $T(t);default:throw new Error(`Unknown physical texture type ${e}`)}}(t,s);let i;if(r){const[t,n]=MS(e[0],e[1]);i=t*n}else{const[t,n]=_S(e[0],e[1]);i=t*n}return i*function(e,t){const n=e;if(t===n.R32F)return 4;if(t===n.R16F)return 2;if(t===n.RGBA32F)return 16;if(t===e.RGBA)return 16;if(t===n.RGBA16F)return 8;throw new Error(`Unknown internal format ${t}`)}(n,a)}function SE(e,t){if(e===FS.UPLOAD)return DS.PACKED_2X2_FLOAT32;if(e===FS.RENDER||null==e)return function(e){return K().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?e?DS.PACKED_2X2_FLOAT32:DS.UNPACKED_FLOAT32:e?DS.PACKED_2X2_FLOAT16:DS.UNPACKED_FLOAT16}(t);if(e===FS.DOWNLOAD||e===FS.PIXELS)return DS.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${e}`)}function TE(e,t,n){return`${e[0]}_${e[1]}_${t}_${n}`}class EE{constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.userCode=`\n      float unaryOperation(float x) {\n        ${t}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const AE="return abs(x);";const RE="return x;";class FE{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${t}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class DE{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e;const t=e.length,n=vE("rc",t),s=VT(t),r=function(e,t){if(1===e)return"rc";let n="";for(let s=0;s<e;s++)n+=t[s],s<e-1&&(n+=",");return n}(t,n),a=n.slice(-2),i=t<=1?"rc":`vec2(${a.join(",")})`;this.userCode=`\n      void main() {\n        ${s} rc = getOutputCoords();\n        vec4 packedInput = getA(${r});\n\n        setOutput(getChannel(packedInput, ${i}));\n      }\n    `}}const _E=rc,OE={};class ME extends n{constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!K().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");if(null==e){const e=AS(K().getNumber("WEBGL_VERSION"));this.binaryCache=((n=K().getNumber("WEBGL_VERSION"))in OE||(OE[n]={}),OE[n]),this.gpgpu=new AT(e),this.canvas=e.canvas,this.gpgpuCreatedLocally=!0}else this.gpgpu=e,this.binaryCache={},this.gpgpuCreatedLocally=!1,this.canvas=e.gl.canvas;var n;this.textureManager=new CE(this.gpgpu),this.numMBBeforeWarning=null==K().global.screen?1024:K().global.screen.height*K().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new t(this,ni())}nextDataId(){return ME.nextDataId++}numDataIds(){return this.texData.numDataIds()+(this.cpuBackend?this.cpuBackend.numDataIds():0)-this.pendingDeletes}write(e,t,n){if((K().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||K().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===n&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const s={id:this.nextDataId()};return this.texData.set(s,{shape:t,dtype:n,values:e,usage:FS.UPLOAD,refCount:1}),s}refCount(e){if(this.texData.has(e)){return this.texData.get(e).refCount}return 0}incRef(e){this.texData.get(e).refCount++}decRef(e){if(this.texData.has(e)){this.texData.get(e).refCount--}}move(e,t,n,s,r){if(K().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===s)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:n,dtype:s,values:t,usage:FS.UPLOAD,refCount:r})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){const t=this.texData.get(e),{values:n,dtype:s,complexTensorInfos:r,slice:a,shape:i,isPacked:o}=t;if(null!=a){let t;t=o?new FE(i,RE):new EE(i,RE);const n=this.runWebGLProgram(t,[{dataId:e,shape:i,dtype:s}],s),r=this.readSync(n.dataId);return this.disposeIntermediateTensorInfo(n),r}if(null!=n)return this.convertAndCacheOnCPU(e);if("string"===s)return n;const l=null!=this.activeTimers;let u,c;if(l&&(u=as()),"complex64"===s){c=Xh(this.readSync(r.real.dataId),this.readSync(r.imag.dataId))}else c=this.getValuesFromTexture(e);return l&&(this.downloadWaitMs+=as()-u),this.convertAndCacheOnCPU(e,c)}async read(e){if(this.pendingRead.has(e)){const t=this.pendingRead.get(e);return new Promise((e=>t.push(e)))}const t=this.texData.get(e),{values:n,shape:s,slice:r,dtype:a,complexTensorInfos:i,isPacked:o}=t;if(null!=r){let t;t=o?new FE(s,RE):new EE(s,RE);const n=this.runWebGLProgram(t,[{dataId:e,shape:s,dtype:a}],a),r=this.read(n.dataId);return this.disposeIntermediateTensorInfo(n),r}if(null!=n)return this.convertAndCacheOnCPU(e);if(!K().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===K().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let l,u,c=null;if("complex64"!==a&&K().get("WEBGL_BUFFER_SUPPORTED")){l=this.decode(e);const t=this.texData.get(l.dataId);c=this.gpgpu.createBufferFromTexture(t.texture,...OS(s))}if(this.pendingRead.set(e,[]),"complex64"!==a&&await this.gpgpu.createAndWaitForFence(),"complex64"===a){const e=await Promise.all([this.read(i.real.dataId),this.read(i.imag.dataId)]);u=Xh(e[0],e[1])}else if(null==c)u=this.getValuesFromTexture(e);else{const e=p(s);u=this.gpgpu.downloadFloat32MatrixFromBuffer(c,e)}null!=l&&this.disposeIntermediateTensorInfo(l);const h=this.convertAndCacheOnCPU(e,u),d=this.pendingRead.get(e);return this.pendingRead.delete(e),d.forEach((e=>e(h))),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e)&&ni().removeDataId(e,this),this.pendingDeletes--),h}bufferSync(e){const t=this.readSync(e.dataId);let n=t;if("string"===e.dtype)try{n=t.map((e=>ls(e)))}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return jr(e.shape,e.dtype,n)}checkNumericalProblems(e){if(null!=e)for(let t=0;t<e.length;t++){const n=e[t];if(!BS(n)){if(K().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${n} cannot be represented on this device.`)}}}getValuesFromTexture(e){const{shape:t,dtype:n,isPacked:s}=this.texData.get(e),r=p(t);if(K().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(e),s=this.texData.get(n.dataId),a=this.gpgpu.downloadMatrixFromPackedTexture(s.texture,...OS(t)).subarray(0,r);return this.disposeIntermediateTensorInfo(n),a}const a=K().getBool("WEBGL_PACK")&&!0===s,i=a?QS(t):t,o=a?new yT(i):new gT(i),l=this.runWebGLProgram(o,[{shape:i,dtype:n,dataId:e}],"float32"),u=this.texData.get(l.dataId),c=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(u.texture,u.texShape[0],u.texShape[1]).subarray(0,r);return this.disposeIntermediateTensorInfo(l),c}timerAvailable(){return K().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}async time(e){const t=this.activeTimers,n=[];let s=!1;null==this.programTimersStack?(this.programTimersStack=n,s=!0):this.activeTimers.push(n),this.activeTimers=n,e();const r=h(this.activeTimers.map((e=>e.query))).filter((e=>null!=e)),a=h(this.activeTimers.map((e=>e.name))).filter((e=>null!=e));this.activeTimers=t,s&&(this.programTimersStack=null);const i={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};if(K().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const e=await Promise.all(r);i.kernelMs=o(e),i.getExtraProfileInfo=()=>e.map(((e,t)=>({name:a[t],ms:e}))).map((e=>`${e.name}: ${e.ms}`)).join(", ")}else i.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,i}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return K().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:as(),endMs:null}}endTimer(e){return K().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=as(),e)}async getQueryTime(e){if(K().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(e);const t=e;return t.endMs-t.startMs}disposeData(e,t=!1){if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(t?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!t&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);const{complexTensorInfos:n}=this.texData.get(e);return null!=n&&(this.disposeData(n.real.dataId,t),this.disposeData(n.imag.dataId,t)),this.texData.delete(e),!0}releaseGPUData(e){const{texture:t,dtype:n,texShape:s,usage:r,isPacked:a,slice:i}=this.texData.get(e),o=i&&i.origDataId||e,l=this.dataRefCount.get(o);l>1?this.dataRefCount.set(o,l-1):(this.dataRefCount.delete(o),null!=t&&(this.numBytesInGPU-=this.computeBytes(s,n),this.textureManager.releaseTexture(t,s,r,a)));const u=this.texData.get(e);u.texture=null,u.texShape=null,u.isPacked=!1,u.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture}getDataInfo(e){return this.texData.get(e)}shouldExecuteOnCPU(e,t=128){return K().getBool("WEBGL_CPU_FORWARD")&&e.every((e=>null==this.texData.get(e.dataId).texture&&p(e.shape)<t))}getGPGPUContext(){return this.gpgpu}where(e){Kh("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const t=e.dataSync();return _E(e.shape,t)}packedUnaryOp(e,t,n){const s=new FE(e.shape,t),r=this.compileAndRun(s,[e],n);return ni().makeTensorFromDataId(r.dataId,r.shape,r.dtype)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){const t=dE(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,t)}if(K().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,AE,e.dtype);const t=new EE(e.shape,AE),n=this.compileAndRun(t,[e]);return ni().makeTensorFromDataId(n.dataId,n.shape,n.dtype)}makeTensorInfo(e,t,n){let s;if("string"===t&&null!=n&&n.length>0&&E(n[0])){const r=n.map((e=>os(e)));s=this.write(r,e,t)}else s=this.write(n,e,t);return this.texData.get(s).usage=null,{dataId:s,shape:e,dtype:t}}makeOutput(e,t,n){const{dataId:s}=this.makeTensorInfo(e,t,n);return ni().makeTensorFromDataId(s,e,t,this)}unpackTensor(e){const t=new DE(e.shape);return this.runWebGLProgram(t,[e],e.dtype)}packTensor(e){const t=new NE(e.shape);return this.runWebGLProgram(t,[e],e.dtype,null,!0)}packedReshape(e,t){const n=[JS(e.shape),...ZS(e.shape)],s={dtype:e.dtype,shape:n,dataId:e.dataId},r=[JS(t),...ZS(t)],a=new IE(r,n),i=this.runWebGLProgram(a,[s],e.dtype,null,!0);return{dataId:i.dataId,shape:t,dtype:i.dtype}}decode(e){const t=this.texData.get(e),{isPacked:n,shape:s,dtype:r}=t,a=QS(s);let i;i=n?new mT(a):new fT(a);return{dtype:r,shape:s,dataId:this.runWebGLProgram(i,[{shape:a,dtype:r,dataId:e}],r,null,!0).dataId}}runWebGLProgram(e,t,n,s,r=!1){const a=this.makeTensorInfo(e.outputShape,n),i=this.texData.get(a.dataId);if(e.packedOutput&&(i.isPacked=!0),e.outPackingScheme===RS.DENSE){const t=OS(e.outputShape);i.texShape=t.map((e=>2*e))}if(null!=e.outTexUsage&&(i.usage=e.outTexUsage),0===p(a.shape))return i.values=k(a.dtype,0),a;const o=[],l=t.map((t=>{if("complex64"===t.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let n=this.texData.get(t.dataId);if(null==n.texture){if(!e.packedInputs&&p(t.shape)<=K().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:t.shape,texData:null,isUniform:!0,uniformValues:n.values};e.packedInputs&&(n.isPacked=!0,n.shape=t.shape)}else if(!!n.isPacked!=!!e.packedInputs)t=n.isPacked?this.unpackTensor(t):this.packTensor(t),o.push(t),n=this.texData.get(t.dataId);else if(n.isPacked&&!tT(n.shape,t.shape)){const e=t,s=t.shape;t.shape=n.shape,t=this.packedReshape(t,s),o.push(t),n=this.texData.get(t.dataId),e.shape=s}return this.uploadToGPU(t.dataId),{shape:t.shape,texData:n,isUniform:!1}}));this.uploadToGPU(a.dataId);const u={shape:a.shape,texData:i,isUniform:!1},c=function(e,t,n){let s="";t.concat(n).forEach((e=>{const t=null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0,n=e.isUniform?"uniform":e.texData.texShape;s+=`${e.shape}_${n}_${t}`}));const r=e.userCode;let a=e.constructor.name;return a+="_"+s+"_"+r,a}(e,l,u),h=this.getAndSaveBinary(c,(()=>function(e,t,n,s){const r=t.userCode,a=n.map(((e,n)=>{const s={logicalShape:e.shape,texShape:e.isUniform?null:e.texData.texShape,isUniform:e.isUniform,isPacked:!e.isUniform&&e.texData.isPacked,flatOffset:null};return null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0&&(s.flatOffset=e.texData.slice.flatOffset),{name:t.variableNames[n],shapeInfo:s}})),i=a.map((e=>e.shapeInfo)),o={logicalShape:s.shape,texShape:s.texData.texShape,isUniform:!1,isPacked:s.texData.isPacked,flatOffset:null},l=FT(a,o,r,t.packedInputs),u=e.createProgram(l);let c=null;const h=e.getUniformLocation(u,"NAN",!1);1===K().getNumber("WEBGL_VERSION")&&(c=e.getUniformLocation(u,"INFINITY",!1));const p={};for(let n=0;n<t.variableNames.length;n++){const s=t.variableNames[n],r=!1;p[s]=e.getUniformLocation(u,s,r),p[`offset${s}`]=e.getUniformLocation(u,`offset${s}`,r)}return{program:t,source:l,webGLProgram:u,uniformLocations:p,inShapeInfos:i,outShapeInfo:o,infLoc:c,nanLoc:h}}(this.gpgpu,e,l,u))),d=null!=this.activeTimers;let f;d&&(f=this.startTimer()),function(e,t,n,s,r){HT(t.inShapeInfos,n),HT([t.outShapeInfo],[s]);const a=s.texData.texture,i=s.texData.texShape;s.texData.isPacked?e.setOutputPackedMatrixTexture(a,i[0],i[1]):e.setOutputMatrixTexture(a,i[0],i[1]),e.setProgram(t.webGLProgram),1===K().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&e.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&e.gl.uniform1f(t.nanLoc,NaN),n.forEach(((n,s)=>{const r=t.program.variableNames[s],a=t.uniformLocations[r],i=t.uniformLocations[`offset${r}`];if(null!=a)if(n.isUniform)if(p(n.shape)<2)e.gl.uniform1f(a,n.uniformValues[0]);else{let t=n.uniformValues;t instanceof Float32Array||(t=new Float32Array(t)),e.gl.uniform1fv(a,t)}else null!=n.texData.slice&&null!=i&&e.gl.uniform1i(i,n.texData.slice.flatOffset),e.setInputMatrixTexture(n.texData.texture,a,s)})),null!=r&&r(e,t.webGLProgram),e.executeProgram()}(this.gpgpu,h,l,u,s),o.forEach((e=>this.disposeIntermediateTensorInfo(e))),d&&(f=this.endTimer(f),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(f)}));const m=K().get("WEBGL_FLUSH_THRESHOLD");if(m>0){const e=as();e-this.lastGlFlushTime>m&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=e)}if(!K().getBool("WEBGL_LAZILY_UNPACK")&&i.isPacked&&!1===r){const e=this.unpackTensor(a);return this.disposeIntermediateTensorInfo(a),e}return a}compileAndRun(e,t,n,s,r=!1){n=n||t[0].dtype;return this.runWebGLProgram(e,t,n,s,r)}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){if(!this.disposed){if(!K().getBool("IS_TEST")){Object.keys(this.binaryCache).forEach((e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]}))}this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0}}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=ri((()=>{if(!K().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=K().getBool("DEBUG");K().set("DEBUG",!1);const t=this.abs($u(1e-8)).dataSync()[0];if(K().set("DEBUG",e),t>0)return 32}return 16}))),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){const t=this.texData.get(e),{shape:n,dtype:s,values:r,texture:a,usage:o,isPacked:l}=t;if(null!=a)return;const u=null!=this.activeTimers;let c;u&&(c=as());let h=t.texShape;if(null==h&&(h=function(e,t=!1){let n=K().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(t&&(n*=2,1===(e=e.map(((t,n)=>n>=e.length-2?i(e[n]):e[n]))).length&&(e=[2,e[0]])),2!==e.length){const t=w(e);e=t.newShape}let s=p(e);if(e.length<=1&&s<=n)return[1,s];if(2===e.length&&e[0]<=n&&e[1]<=n)return e;if(3===e.length&&e[0]*e[1]<=n&&e[2]<=n)return[e[0]*e[1],e[2]];if(3===e.length&&e[0]<=n&&e[1]*e[2]<=n)return[e[0],e[1]*e[2]];if(4===e.length&&e[0]*e[1]*e[2]<=n&&e[3]<=n)return[e[0]*e[1]*e[2],e[3]];if(4===e.length&&e[0]<=n&&e[1]*e[2]*e[3]<=n)return[e[0],e[1]*e[2]*e[3]];if(t){const t=JS(e);let n=2,r=2;return e.length&&([n,r]=ZS(e)),s=t*(n/2)*(r/2),m(s).map((e=>2*e))}return m(s)}(n,l),t.texShape=h),null!=r){const e=QS(n);let a,i=h[1],o=h[0];const p=r instanceof Uint8Array;l?([i,o]=MS(h[0],h[1]),a=new xT(e,[o,i],p)):a=new bT(e,[o,i],p);const d=this.makeTensorInfo([o,i],s);this.texData.get(d.dataId).usage=p?FS.PIXELS:FS.UPLOAD,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(d.dataId),i,o,r);const f=!0,m=this.runWebGLProgram(a,[d],s,null,f),g=this.texData.get(m.dataId);t.texture=g.texture,t.texShape=g.texShape,t.isPacked=g.isPacked,t.usage=g.usage,this.disposeIntermediateTensorInfo(d),this.texData.delete(m.dataId),t.values=null,u&&(this.uploadWaitMs+=as()-c)}else{const e=this.acquireTexture(h,o,s,l);t.texture=e}}convertAndCacheOnCPU(e,t){const n=this.texData.get(e),{dtype:s}=n;return this.releaseGPUData(e),null!=t&&(n.values=function(e,t){if("float32"===t||"complex64"===t)return e;if("int32"===t||"bool"===t){const n="int32"===t?new Int32Array(e.length):new Uint8Array(e.length);for(let t=0;t<n.length;++t)n[t]=Math.round(e[t]);return n}throw new Error(`Unknown dtype ${t}`)}(t,s)),n.values}acquireTexture(e,t,n,s){if(this.numBytesInGPU+=this.computeBytes(e,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const e=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${e} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,t,s)}computeBytes(e,t){return e[0]*e[1]*S(t)}}ME.nextDataId=0;js()&&li("webgl",(()=>new ME),2);class LE{constructor(e,t,n){this.variableNames=["A","B"],this.outputShape=Co(t,n),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${e}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}class zE{constructor(e,t,n,s=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=Co(t,n);const r=this.outputShape.length;let a="";if(s)if(0===r||1===p(this.outputShape))a="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else{if(a=`\n          ${VT(r)} coords = getOutputCoords();\n        `,1===r)a+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const e=vE("coords",r);a+=`\n            bool nextRowOutOfBounds =\n              (${e[r-2]} + 1) >= ${this.outputShape[r-2]};\n            bool nextColOutOfBounds =\n              (${e[r-1]} + 1) >= ${this.outputShape[r-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${e}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${a}\n\n        setOutput(result);\n      }\n    `}}function BE(e){const{inputs:t,backend:n}=e,{x:s}=t;return n.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const PE={kernelName:ct,backendName:"webgl",kernelFunc:BE};function WE(e){const{inputs:t,backend:n}=e,{real:s,imag:r}=t,a=n.makeTensorInfo(s.shape,"complex64"),i=n.texData.get(a.dataId),o=BE({inputs:{x:s},backend:n}),l=BE({inputs:{x:r},backend:n});return i.complexTensorInfos={real:o,imag:l},a}const VE={kernelName:Ne,backendName:"webgl",kernelFunc:WE},UE="return (a < 0.) ? b * a : a;",GE="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";const HE={kernelName:gt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{alpha:a}=s,i=n.makeTensorInfo([],"float32",ss(a,"float32")),o=K().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new zE(GE,r.shape,i.shape):new LE(UE,r.shape,i.shape),l=n.runWebGLProgram(o,[r,i],r.dtype);return n.disposeIntermediateTensorInfo(i),l}},jE="return (a < 0.) ? b * a : a;",qE="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";const KE={kernelName:Zt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s,alpha:r}=t,a=K().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new zE(qE,s.shape,r.shape):new LE(jE,s.shape,r.shape);return n.runWebGLProgram(a,[s,r],s.dtype)}};function XE({opSnippet:e,packedOpSnippet:t,cpuKernelImpl:n,dtype:s}){return({inputs:r,backend:a})=>{const{x:i}=r,o=a,l=s||i.dtype;if(o.shouldExecuteOnCPU([i])&&null!=n){const e=o.texData.get(i.dataId),t=n(e.values,l);return o.makeTensorInfo(i.shape,l,t)}let u;return u=K().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=t?new FE(i.shape,t):new EE(i.shape,e),o.runWebGLProgram(u,[i],l)}}function YE({opSnippet:e,packedOpSnippet:t,checkOutOfBounds:n=!1,supportsComplex:s=!1,cpuKernelImpl:r,dtype:a}){return({inputs:i,backend:o})=>{const{a:l,b:u}=i,c=o;if(s&&"complex64"===l.dtype){const t=c.texData.get(l.dataId),n=c.texData.get(u.dataId),[s,r]=[[t.complexTensorInfos.real,n.complexTensorInfos.real],[t.complexTensorInfos.imag,n.complexTensorInfos.imag]].map((t=>{const[n,s]=t,r={dataId:n.dataId,dtype:n.dtype,shape:l.shape},a={dataId:s.dataId,dtype:s.dtype,shape:u.shape},i=new LE(e,l.shape,u.shape);return c.runWebGLProgram(i,[r,a],Rs(n.dtype,s.dtype))})),a=WE({inputs:{real:s,imag:r},backend:c});return c.disposeIntermediateTensorInfo(s),c.disposeIntermediateTensorInfo(r),a}const h=a||Rs(l.dtype,u.dtype);if(c.shouldExecuteOnCPU([l,u])&&null!=r){const e=c.texData.get(l.dataId),t=c.texData.get(u.dataId),[n,s]=r(l.shape,u.shape,e.values,t.values,h),a=c.makeTensorInfo(s,h);return c.texData.get(a.dataId).values=n,a}let p;return p=K().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=t?new zE(t,l.shape,u.shape,n):new LE(e,l.shape,u.shape),c.runWebGLProgram(p,[l,u],h)}}function JE(e,t=!1){if("linear"===e)return"return x;";if("relu"===e)return t?"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n";if("elu"===e)return t?"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n":"return (x >= 0.0) ? x : (exp(x) - 1.0);";if("relu6"===e)return t?"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n";if("prelu"===e)return t?qE:jE;if("leakyrelu"===e)return t?GE:UE;throw new Error(`Activation ${e} has not been implemented for the WebGL backend.`)}class ZE{constructor(e,t,n,s=!1,r=!1,a=!1,i=null,o=!1,l=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n;const u=s?e[1]:e[2],c=Math.ceil(u/2),h=s?"i * 2, rc.y":"rc.y, i * 2",p=r?"rc.z, i * 2":"i * 2, rc.z",d=s?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],f=r?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let m="",g="";i&&(m=o?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${i}\n        }`:l?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${i}\n        }`:`vec4 activation(vec4 x) {\n          ${i}\n        }`,g="result = activation(result);");const y=a?"result += getBiasAtOutCoords();":"";a&&this.variableNames.push("bias"),o&&this.variableNames.push("preluActivationWeights"),l&&this.variableNames.push("leakyreluAlpha");let b="rc.x",x="rc.x";e[0]<t[0]?b=`int(min(float(rc.x), ${e[0]-1}.))`:t[0]<e[0]&&(x=`int(min(float(rc.x), ${t[0]-1}.))`),this.userCode=`\n      ${m}\n\n      const float sharedDimension = ${c}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${c}; i++) {\n          int batchA = ${b};\n          int batchB = ${x};\n          vec4 a = getMatrixA(batchA, ${h});\n          vec4 b = getMatrixB(batchB, ${p});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${d[0]} * ${f[0]});\n          result += (${d[1]} * ${f[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${y}\n\n        ${g}\n\n        setOutput(result);\n      }\n    `}}const QE="return areal * breal - aimag * bimag;",eA="return areal * bimag + aimag * breal;";class tA{constructor(e,t,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=Co(t,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${e}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const nA="return a * b;";function sA(e){const{inputs:t,backend:n}=e,{a:s,b:r}=t,a=Rs(s.dtype,r.dtype);if("complex64"===s.dtype){const e=n.texData.get(s.dataId),t=n.texData.get(r.dataId),a=new tA(QE,s.shape,r.shape),i=new tA(eA,s.shape,r.shape),o=[{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:s.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:s.shape},{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:r.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:r.shape}],l=n.runWebGLProgram(a,o,"float32"),u=n.runWebGLProgram(i,o,"float32"),c=WE({inputs:{real:l,imag:u},backend:n});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),c}if(n.shouldExecuteOnCPU([s,r])){const e=n.texData.get(s.dataId),t=n.texData.get(r.dataId),[i,o]=lE(s.shape,r.shape,e.values,t.values,a),l=n.makeTensorInfo(o,a);return n.texData.get(l.dataId).values=i,l}let i;return i=K().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new zE(nA,s.shape,r.shape):new LE(nA,s.shape,r.shape),n.runWebGLProgram(i,[s,r],a)}const rA={kernelName:Wt,backendName:"webgl",kernelFunc:sA};function aA(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{shape:a}=s,i=n,o=p(r.shape),u=b(a,o),c=p(u);l(o===c,(()=>`The new shape (${u}) has ${c} elements and the old shape (${r.shape}) has ${o} elements. The new shape and old shape must have the same number of elements.`));const h=i.texData.get(r.dataId);return!h.isPacked||tT(r.shape,u)||null!==h.texture&&tT(h.shape,u)?(i.incRef(r.dataId),{dataId:r.dataId,shape:u,dtype:r.dtype}):function(e,t,n){const s=[JS(e.shape),...ZS(e.shape)],r={dtype:e.dtype,shape:s,dataId:e.dataId},a=[JS(t),...ZS(t)],i=new IE(a,s),o=n.runWebGLProgram(i,[r],e.dtype,null,!0);return{dataId:o.dataId,shape:t,dtype:o.dtype}}(r,u,i)}const iA={kernelName:rn,backendName:"webgl",kernelFunc:aA};class oA{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:s,inSize:r,outSize:a}=e;this.outputShape=[s,a];const i=4*Math.floor(n/4),o=n%4;let l="sumValue += dot(values, ones);";if(null!=t){const e=1/t;l=`sumValue += dot(values * ${f(e)?e.toPrecision(2):e}, ones);`}let u="";r%n>0&&(u=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${u}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${i}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${l}\n        }\n\n        int inIdx = inOffset + ${i};\n        if (${1===o}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${l}\n        } else if (${2===o}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${l}\n        } else if (${3===o}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${l}\n        }\n        setOutput(sumValue);\n      }\n    `}}class lA{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:s,inSize:r,outSize:a}=e;this.outputShape=[s,a];let i="0.0",o="";"prod"===t?i="1.0":"min"===t?(i="1.0 / 1e-20",o="min"):"max"===t&&(i="-1.0 / 1e-20",o="max");let l=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===t?l="sumValue":"prod"===t?l="prodValue":"all"===t?l="allValue":"any"===t&&(l="anyValue");const u=4*Math.floor(n/4),c=n%4;let h=`\n      if (${"sum"===t}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===t}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${o}(values, minMaxValue);\n      }\n    `,p="vec4";"all"===t?(i="1.0",h="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",p="bvec4"):"any"===t&&(i="0.0",h="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",p="bvec4");let d="";r%n>0&&(d=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${i};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${d}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${i});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${u}; i += 4) {\n          int inIdx = inOffset + i;\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${h}\n        }\n\n        int inIdx = inOffset + ${u};\n        if (${1===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${2===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${3===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${h}\n        }\n        setOutput(${l});\n      }\n    `}}function uA(e,t,n,s){const r=function(e){const t=[];for(;0===t.length||1!==t[t.length-1].outSize;){const n=t.length?t[t.length-1].outSize:e[1],s=Dh(n);t.push({inSize:n,windowSize:s,outSize:Math.ceil(n/s)})}return t}(e.shape);let a=e;for(let i=0;i<r.length;i++){const{inSize:o,windowSize:l,outSize:u}=r[i];let c,h;c="mean"===n?0===i?new oA({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u},o):new oA({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u}):new lA({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u},n),h=a,a=s.runWebGLProgram(c,[a],t),h.dataId!==e.dataId&&s.disposeIntermediateTensorInfo(h)}return a}class cA{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[t[s]];this.outputShape=n,this.rank=n.length;const s=VT(this.rank),r=function(e){const t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],s=new Array(t);for(let t=0;t<e.length;t++)s[e[t]]=n[t];return s.join()}(t);this.userCode=`\n    void main() {\n      ${s} resRC = getOutputCoords();\n      setOutput(getA(${r}));\n    }\n    `}}class hA{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[t[s]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const s=VT(this.rank),r=kE("rc",this.rank),a=new Array(this.rank);for(let e=0;e<t.length;e++)a[t[e]]=r[e];const i=`vec2(${a.slice(-2).join()})`,o=`++${r[this.rank-1]} < ${n[this.rank-1]}`,l=`getChannel(getA(${a.join()}), ${i})`;this.userCode=`\n    void main() {\n      ${s} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${l};\n      if(${o}) {\n        result[1] = ${l};\n      }\n      --${r[this.rank-1]};\n      if(++${r[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${l};\n        if(${o}) {\n          result[3] = ${l};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function pA(e,t,n){const s=K().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new hA(e.shape,t):new cA(e.shape,t);return n.runWebGLProgram(s,[e],e.dtype)}function dA(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;return function(e,t,n,s){const r=t,a=e.shape.length,i=x(r,e.shape);let o=i;const l=gl(o,a),u=null!=l;let c=e;u&&(c=pA(e,l,s),o=bl(o.length,a)),ml("sum",o,a);const[h,d]=dl(c.shape,o);let f=h;n&&(f=fl(h,i));const m=p(d),g=aA({inputs:{x:c},attrs:{shape:[p(e.shape)/m,m]},backend:s}),y=uA(g,Fs(e.dtype),"sum",s),b=aA({inputs:{x:y},attrs:{shape:f},backend:s});return s.disposeIntermediateTensorInfo(g),s.disposeIntermediateTensorInfo(y),u&&s.disposeIntermediateTensorInfo(c),b}(r,a,i,n)}const fA={kernelName:In,backendName:"webgl",kernelFunc:dA};function mA(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{perm:a}=s,i=n,o=r.shape.length,l=new Array(o);for(let e=0;e<l.length;e++)l[e]=r.shape[a[e]];let u;if(i.shouldExecuteOnCPU([r])){const e=i.texData.get(r.dataId).values,t=xE(e,r.shape,r.dtype,a,l);u=i.makeTensorInfo(l,r.dtype);i.texData.get(u.dataId).values=t}else u=pA(r,a,i);return u}const gA={kernelName:zn,backendName:"webgl",kernelFunc:mA};function yA({a:e,b:t,transposeA:n,transposeB:s,backend:r,bias:a=null,preluActivationWeights:i=null,leakyreluAlpha:o=0,activation:u=null}){const c=e.shape.length,h=t.shape.length,d=n?e.shape[c-2]:e.shape[c-1],f=s?t.shape[h-1]:t.shape[h-2],m=n?e.shape[c-1]:e.shape[c-2],g=s?t.shape[h-2]:t.shape[h-1],y=e.shape.slice(0,-2),b=t.shape.slice(0,-2),x=p(y),w=p(b);l(c>=2&&h>=2&&(x===w||1===x||1===w),(()=>`Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input batch dimensions of (${y}) and (${b}).`));const k=(x>w?e.shape.slice(0,-2):t.shape.slice(0,-2)).concat([m,g]);l(d===f,(()=>`Error in matMul: inner shapes (${d}) and (${f}) of Tensors with shapes ${e.shape} and ${t.shape} and transposeA=${n} and transposeB=${s} must match.`));const v=n?[x,d,m]:[x,m,d],N=s?[w,g,f]:[w,f,g],I=aA({inputs:{x:e},backend:r,attrs:{shape:v}}),C=aA({inputs:{x:t},backend:r,attrs:{shape:N}}),$=[I,C],S=Math.max(x,w),T=n?I.shape[1]:I.shape[2],E=null!=a,A=null!=i,R="leakyrelu"===u,F=null!=u?JE(u,!0):null;let D;if((1===m||1===g)&&T>1e3&&!1===(E||A||R||null!=F)){let e=I,t=C;n&&(e=mA({inputs:{x:I},backend:r,attrs:{perm:[0,2,1]}}),$.push(e)),s&&(t=mA({inputs:{x:C},backend:r,attrs:{perm:[0,2,1]}}),$.push(t));const a=1===g;let i=e;1!==g&&(i=aA({inputs:{x:e},backend:r,attrs:{shape:[S,T,1]}}),$.push(i));const o=1===g?2:1;let l=t;a&&(l=aA({inputs:{x:t},backend:r,attrs:{shape:[S,1,T]}}),$.push(l));const u=sA({inputs:{a:i,b:l},backend:r});D=dA({inputs:{x:u},backend:r,attrs:{axis:o,keepDims:!0}}),$.push(u)}else{const l=Rs(e.dtype,t.dtype),u=new ZE(v,N,[S,m,g],n,s,E,F,A,R),c=[I,C];if(null!=a&&c.push(a),A&&c.push(i),R){const e=r.makeTensorInfo([],"float32",ss(o,"float32"));c.push(e),$.push(e)}D=r.runWebGLProgram(u,c,l)}const _=aA({inputs:{x:D},backend:r,attrs:{shape:k}});$.push(D);for(const e of $)r.disposeIntermediateTensorInfo(e);return _}const bA={kernelName:jn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a,bias:i,preluActivationWeights:o}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=s;return yA({a:r,b:a,transposeA:l,transposeB:u,backend:n,bias:i,preluActivationWeights:o,leakyreluAlpha:h,activation:c})}},xA="return abs(x);";const wA={kernelName:Z,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;if(n.shouldExecuteOnCPU([s])&&"complex64"!==s.dtype){const e=n.texData.get(s.dataId),t=dE(e.values);return n.makeTensorInfo(s.shape,s.dtype,t)}let r;return r=K().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new FE(s.shape,xA):new EE(s.shape,xA),n.runWebGLProgram(r,[s],s.dtype)}},kA=XE({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"}),vA={kernelName:Q,backendName:"webgl",kernelFunc:kA},NA=XE({opSnippet:"if (isnan(x)) return x;\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));"}),IA={kernelName:ee,backendName:"webgl",kernelFunc:NA},CA="return a + b;",$A=YE({opSnippet:CA,packedOpSnippet:CA,supportsComplex:!0,cpuKernelImpl:jT}),SA={kernelName:te,backendName:"webgl",kernelFunc:$A};class TA{constructor(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`float v${e} = get${e}AtOutCoords();`)}));const s=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${s};\n        setOutput(result);\n      }\n    `}}class EA{constructor(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`vec4 v${e} = get${e}AtOutCoords();`)}));const s=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${s};\n        setOutput(result);\n      }\n    `}}const AA={kernelName:ne,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s}=t,r=n;if(1===r.length)return BE({inputs:{x:r[0]},backend:s});if(r.length>K().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const t=Math.floor(r.length/2),n=e({inputs:r.slice(0,t),backend:s}),a=e({inputs:r.slice(t),backend:s});return e({inputs:[n,a],backend:s})}const a=r.map((e=>e.dtype)).reduce(((e,t)=>Rs(e,t))),i=r.map((e=>e.shape)),o=K().getBool("WEBGL_PACK")?new EA(r[0].shape,i):new TA(r[0].shape,i);return s.runWebGLProgram(o,r,a)}};const RA={kernelName:se,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=r.shape.length,l=x(a,r.shape);let u=l;const c=gl(u,o);let h=r;null!=c&&(h=mA({inputs:{x:r},backend:n,attrs:{perm:c}}),u=bl(u.length,o)),ml("all",u,o);const[d,f]=dl(h.shape,u),m=aA({inputs:{x:h},backend:n,attrs:{shape:[-1,p(f)]}}),g=uA(m,m.dtype,"all",n);let y;if(i){y=aA({inputs:{x:g},backend:n,attrs:{shape:fl(d,l)}})}else y=aA({inputs:{x:g},backend:n,attrs:{shape:d}});return n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),null!=c&&n.disposeIntermediateTensorInfo(h),y}};const FA={kernelName:re,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=r.shape.length,l=x(a,r.shape);let u=l;const c=gl(u,o);let h=r;null!=c&&(h=mA({inputs:{x:r},backend:n,attrs:{perm:c}}),u=bl(u.length,o)),ml("any",u,o);const[d,f]=dl(h.shape,u),m=aA({inputs:{x:h},backend:n,attrs:{shape:[-1,p(f)]}}),g=uA(m,m.dtype,"any",n);let y;if(i){y=aA({inputs:{x:g},backend:n,attrs:{shape:fl(d,l)}})}else y=aA({inputs:{x:g},backend:n,attrs:{shape:d}});return n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),null!=c&&n.disposeIntermediateTensorInfo(h),y}};class DA{constructor(e,t,n){this.variableNames=["A"];const{windowSize:s,batchSize:r,outSize:a}=e;n||this.variableNames.push("bestIndicesA"),this.outputShape=[r,a];const i="max"===t?">":"<",o=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${s};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${s}; i++) {\n          int inIdx = ${o};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${i} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}class _A{constructor(e,t,n,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,l(e.length>2,(()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`));const r=e[e.length-1],a=Math.ceil(r/t);this.outputShape=e.slice(0,-1),a>1&&this.outputShape.push(a),s||this.variableNames.push("bestIndicesA");const i=this.outputShape,o=i.length,u=VT(o),c=vE("coords",o);let h,p;if(1===a){p=o+1;const e=VT(p);h=`\n        ${e} sourceLocR = ${e}(${c.join()}, 0);\n        ++${c[o-1]};\n        ${e} sourceLocG = ${e}(${c.join()}, 0);\n        ++${c[o-2]};\n        ${e} sourceLocA = ${e}(${c.join()}, 0);\n        --${c[o-1]};\n        ${e} sourceLocB = ${e}(${c.join()}, 0);\n        --${c[o-2]};`}else p=o,h=`\n        ${u} sourceLocR = coords;\n        ++${c[o-1]};\n        ${u} sourceLocG = coords;\n        ++${c[o-2]};\n        ${u} sourceLocA = coords;\n        --${c[o-1]};\n        ${u} sourceLocB = coords;\n        --${c[o-2]};`;const d=["x","y","z","w","u","v"].slice(0,p),f="."+d[p-1],m=d.map((e=>"int "+e)),g=vE("sourceLocR",p-1).concat("inIdx.r"),y=vE("sourceLocG",p-1).concat("inIdx.g"),b=vE("sourceLocB",p-1).concat("inIdx.b"),x=vE("sourceLocA",p-1).concat("inIdx.a"),w="max"===n?"greaterThan":"lessThan",k=s?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${y.join()}),\n                             getBestIndicesAChannel(${b.join()}),\n                             getBestIndicesAChannel(${x.join()})));`,v=`vec4(\n            getAChannel(${g.join()}),\n            hasNextCol ? getAChannel(${y.join()}) : 0.,\n            hasNextRow ? getAChannel(${b.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${x.join()}) : 0.)`,N=s?"":`\n      float getBestIndicesAChannel(${m.join()}) {\n        return getChannel(getBestIndicesA(${d.join()}),\n                                          vec2(${d.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${m.join()}) {\n        return getChannel(getA(${d.join()}),\n                               vec2(${d.slice(-2).join()}));\n      }\n      ${N}\n      void main() {\n        ${u} coords = getOutputCoords();\n        bool hasNextCol = ${c[o-1]} < ${i[o-1]-1};\n        bool hasNextRow = ${c[o-2]} < ${i[o-2]-1};\n        ${h}\n        ivec4 srcIdx = ivec4(sourceLocR${f}, sourceLocG${f},\n          sourceLocB${f}, sourceLocA${f}) * ${t};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${v};\n\n        for (int i = 0; i < ${t}; i++) {\n          inIdx = srcIdx;\n          ${k}\n          vec4 candidate = ${v};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${w}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}function OA(e,t,n,s=null){let r=t.shape[0],a=t.shape[1];null!=s&&(r=s.shape[0],a=s.shape[1]);const i=Dh(a),o={windowSize:i,inSize:a,batchSize:r,outSize:Math.ceil(a/i)},l=new DA(o,n,null==s),u=[t];null!=s&&u.push(s);const c=e.runWebGLProgram(l,u,"int32");if(1===c.shape[1])return c;const h=OA(e,t,n,c);return e.disposeIntermediateTensorInfo(c),h}function MA(e,t,n,s=null){const r=null!=s?s.shape:t.shape,a=Dh(r[r.length-1]),i=new _A(r,a,n,null==s),o=null==s?[t]:[t,s],l=e.runWebGLProgram(i,o,"int32");if(l.shape.length===t.shape.length){const s=MA(e,t,n,l);return e.disposeIntermediateTensorInfo(l),s}return l}function LA(e,t,n,s){const r=[n];if(ml("arg"+s.charAt(0).toUpperCase()+s.slice(1),r,t.shape.length),!K().getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){const n=[],[a,i]=dl(t.shape,r),o=p(i),l=aA({inputs:{x:t},backend:e,attrs:{shape:[-1,o]}});n.push(l);const u=OA(e,l,s);n.push(u);const c=aA({inputs:{x:u},backend:e,attrs:{shape:a}});return n.forEach((t=>e.disposeIntermediateTensorInfo(t))),c}return MA(e,t,s)}const zA={kernelName:ae,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;let i=x(a,r.shape);const o=gl(i,r.shape.length);let l=r;const u=[];null!=o&&(l=mA({inputs:{x:r},backend:n,attrs:{perm:o}}),u.push(l),i=bl(i.length,l.shape.length)),ml("argMax",[i[0]],l.shape.length);const c=LA(n,l,i[0],"max");return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}};const BA={kernelName:ie,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;let i=x(a,r.shape);const o=gl(i,r.shape.length);let l=r;const u=[];null!=o&&(l=mA({inputs:{x:r},backend:n,attrs:{perm:o}}),u.push(l),i=bl(i.length,l.shape.length)),ml("argMin",[i[0]],l.shape.length);const c=LA(n,l,i[0],"min");return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}},PA=XE({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"}),WA={kernelName:oe,backendName:"webgl",kernelFunc:PA},VA=XE({opSnippet:"if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));"}),UA={kernelName:le,backendName:"webgl",kernelFunc:VA},GA=XE({opSnippet:"if (isnan(x)) return x;\n  return atan(x);\n"}),HA={kernelName:ue,backendName:"webgl",kernelFunc:GA},jA=YE({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),qA={kernelName:he,backendName:"webgl",kernelFunc:jA},KA=XE({opSnippet:"if (isnan(x)) return x;\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;"}),XA={kernelName:ce,backendName:"webgl",kernelFunc:KA};class YA{constructor(e,t,n,s=!1,r=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,i=e.strideHeight,o=e.strideWidth,l=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterHeight,h=e.effectiveFilterWidth,p=e.padInfo.top,d=e.padInfo.left;this.outputShape=e.outShape;const f="avg"===t,m=`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`,g=`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`;let y="0.0";if(f||(y="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec2 strides = ivec2(${i}, ${o});\n        const ivec2 pads = ivec2(${p}, ${d});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${c};\n              wR += ${l}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${h};\n                wC += ${u}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${t} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${s?r?m:g:`wR * ${h} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let b=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(b="avgValue / count");const x=4*Math.floor(a/4),w=a%4,k=`\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${i}, ${o});\n      const ivec2 pads = ivec2(${p}, ${d});\n      const float initializationValue = ${y};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${y});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${c};\n            wR += ${l}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${x}; wC += 4) {\n            int xC = xCCorner + wC * ${u};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              getValue(batch, xR, xC + 3 * ${u}, d)\n            );\n\n            ${k}\n          }\n\n          int xC = xCCorner + ${x};\n          if (${1===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${k}\n          } else if (${2===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${k}\n          } else if (${3===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              initializationValue\n            );\n\n            ${k}\n          }\n        }\n        setOutput(${b});\n      }\n    `}}class JA{constructor(e,t,n,s=!1,r=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,i=e.strideDepth,o=e.strideHeight,l=e.strideWidth,u=e.dilationDepth,c=e.dilationHeight,h=e.dilationWidth,p=e.effectiveFilterDepth,d=e.effectiveFilterHeight,f=e.effectiveFilterWidth,m=e.padInfo.front,g=e.padInfo.top,y=e.padInfo.left;this.outputShape=e.outShape;const b="avg"===t;let x="0.0";if(b||(x="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${i}, ${o}, ${l});\n        const ivec3 pads = ivec3(${m}, ${g}, ${y});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${p};\n              wD += ${u}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${d};\n                wR += ${c}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${h}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${t} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${s?r?`(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`wD * ${d} * ${f} +\n                      wR * ${f} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let w=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(w="avgValue / count");const k=4*Math.floor(a/4),v=a%4,N=`\n      if (${b}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${i}, ${o}, ${l});\n      const ivec3 pads = ivec3(${m}, ${g}, ${y});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${p};\n            wD += ${u}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${d};\n            wR += ${c}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${k}; wC += 4) {\n              int xC = xCCorner + wC * ${h};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${h}, ch)\n              );\n\n              ${N}\n            }\n\n            int xC = xCCorner + ${k};\n            if (${1===v}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${N}\n            } else if (${2===v}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${N}\n            } else if (${3===v}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                initializationValue\n              );\n\n              ${N}\n            }\n          }\n          setOutput(${w});\n        }\n      }\n    `}}const ZA={kernelName:pe,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;lT(r,"avgPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:u}=s;l(zi(i,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const c=Ti(r.shape,a,i,1,o,u);if(1===c.filterWidth&&1===c.filterHeight&&d(c.inShape,c.outShape))return BE({inputs:{x:r},backend:n});const h=new YA(c,"avg",!1);return n.runWebGLProgram(h,[r],"float32")}};const QA={kernelName:fe,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:l,dataFormat:u}=s,c=Ei(r.shape,a,i,[1,1,1],o,l,u),h=new JA(c,"avg",!1);return n.runWebGLProgram(h,[r],"float32")}};class eR{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,r=e.strideWidth,a=e.dilationHeight,i=e.dilationWidth,o=e.effectiveFilterHeight,l=e.effectiveFilterWidth,u=o-1-e.padInfo.top,c=l-1-e.padInfo.left,h=1/(t*n);this.userCode=`\n      const ivec2 pads = ivec2(${u}, ${c});\n      const float avgMultiplier = float(${h});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${o};\n            wR += ${a}) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${l};\n            wC+= ${i}) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class tR{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,s=e.filterWidth,r=e.strideDepth,a=e.strideHeight,i=e.strideWidth,o=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterDepth,h=e.effectiveFilterHeight,p=e.effectiveFilterWidth,d=c-1-e.padInfo.front,f=h-1-e.padInfo.top,m=p-1-e.padInfo.left,g=1/(t*n*s);this.userCode=`\n      const ivec3 pads = ivec3(${d}, ${f}, ${m});\n      const float avgMultiplier = float(${g});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${c};\n            wD += ${o}) {\n          float dyD = float(dyDCorner + wD) / ${r}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${h};\n              wR += ${l}) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${p};\n                wC += ${u}) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const nR={kernelName:me,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,i=a,{filterSize:o,strides:l,pad:u,dimRoundingMode:c}=s,h=Ei(i.shape,o,l,[1,1,1],u,c),p=new tR(h);return n.runWebGLProgram(p,[r],i.dtype)}};const sR={kernelName:de,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,i=a;lT([r,a],"avgPoolGrad");const{filterSize:o,strides:l,pad:u}=s,c=Ti(i.shape,o,l,1,u),h=new eR(c);return n.runWebGLProgram(h,[r],i.dtype)}};const rR={kernelName:ge,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a}=t,{transposeA:i,transposeB:o}=s;return yA({a:r,b:a,transposeA:i,transposeB:o,backend:n})}};class aR{constructor(e,t,n,s,r,a){this.outputShape=[],this.variableNames=["x","mean","variance"],Co(e,t),Co(e,n);let i="0.0";null!=s&&(Co(e,s),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="1.0";null!=r&&(Co(e,r),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${i};\n        float scale = ${o};\n        float inv = scale * inversesqrt(variance + float(${a}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class iR{constructor(e,t,n,s,r,a){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],Co(e,t),Co(e,n);let i="vec4(0.0)";null!=s&&(Co(e,s),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="vec4(1.0)";null!=r&&(Co(e,r),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        vec4 offset = ${i};\n        vec4 scale = ${o};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${a}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const oR={kernelName:at,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,mean:r,variance:a,offset:i,scale:o}=e;l(r.shape.length===a.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),l(null==i||r.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),l(null==o||r.shape.length===o.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));let{varianceEpsilon:u}=n;null==u&&(u=.001);const c=[s,r,a];let h=null;null!=i&&(h=i.shape,c.push(i));let p=null;null!=o&&(p=o.shape,c.push(o));const d=K().getBool("WEBGL_PACK_NORMALIZATION")?new iR(s.shape,r.shape,a.shape,h,p,u):new aR(s.shape,r.shape,a.shape,h,p,u);return t.runWebGLProgram(d,c,c[0].dtype)}};class lR{constructor(e){this.variableNames=["source"],this.outputShape=e,this.rank=e.length;const t=VT(this.rank),n=`uniform int start[${this.rank}];`,s=function(e){if(1===e)return"sourceLoc";if(e<=6)return uR.slice(0,e).map((e=>"sourceLoc."+e)).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank);let r;r=`\n        ${t} sourceLoc;\n        ${t} coords = getOutputCoords();\n        ${e.map(((e,t)=>`sourceLoc.${uR[t]} = start[${t}] + coords.${uR[t]};`)).join("\n")}\n      `,this.userCode=`\n      ${n}\n      void main() {\n        ${r}\n        setOutput(getSource(${s}));\n      }\n    `}getCustomSetupFunc(e){if(e.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${e.length})`);return(t,n)=>{null==this.startLoc&&(this.startLoc=t.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||t.gl.uniform1iv(this.startLoc,e)}}}const uR=["x","y","z","w","u","v"];class cR{constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length;const t=VT(this.rank),n=vE("coords",this.rank),s=vE("sourceLoc",this.rank),r=1===this.rank?"sourceLoc":`vec2(${s.slice(-2).join()})`,a=`getChannel(getSource(${s.join()}), ${r})`,i=`\n      result.x = ${a};\n      if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n        ++${s[this.rank-1]};\n        result.y = ${a};\n        --${s[this.rank-1]};\n      }\n    `,o=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${e[this.rank-2]}) {\n        ++${s[this.rank-2]};\n        result.z = ${a};\n        if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n          ++${s[this.rank-1]};\n          result.w = ${a};\n        }\n      }\n    `,l=this.rank<=4?`sourceLoc = coords +\n            ${t}(${e.map(((e,t)=>`start[${t}]`)).join()});`:e.map(((e,t)=>`${s[t]} = ${n[t]} + start[${t}];`)).join("\n");this.userCode=`\n      uniform int start[${this.rank}];\n      void main() {\n        ${t} coords = getOutputCoords();\n        ${t} sourceLoc;\n        ${l}\n        vec4 result = vec4(0.);\n        ${i}\n        ${o}\n        setOutput(result);\n      }\n    `}getCustomSetupFunc(e){if(e.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${e.length})`);return(t,n)=>{null==this.startLoc&&(this.startLoc=t.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||t.gl.uniform1iv(this.startLoc,e)}}}function hR(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,size:i}=s,[o,l]=Va(r,a,i);if(Ta(r,o,l),0===p(l))return n.makeTensorInfo(l,r.dtype,[]);if(n.shouldExecuteOnCPU([r])||"string"===r.dtype){const e=n.texData.get(r.dataId),t=fE(e.values,o,l,r.shape,r.dtype);return n.makeTensorInfo(l,r.dtype,t)}const{isPacked:u}=n.texData.get(r.dataId),c=Pa(r.shape,o,l);if(u||!c){const e=K().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new cR(l):new lR(l),t=e.getCustomSetupFunc(o);return n.runWebGLProgram(e,[r],r.dtype,t)}return n.uploadToGPU(r.dataId),function(e,t,n,s){const r=s.texData.get(e.dataId),a=s.makeTensorInfo(n,e.dtype),i=s.texData.get(a.dataId);Object.assign(i,r),i.refCount=1,i.shape=n,i.dtype=e.dtype;let o=Wa(t,O(e.shape));r.slice&&(o+=r.slice.flatOffset),i.slice={flatOffset:o,origDataId:r.slice&&r.slice.origDataId||e.dataId};const l=s.dataRefCount.get(i.slice.origDataId)||1;return s.dataRefCount.set(i.slice.origDataId,l+1),a}(r,o,l,n)}const pR={kernelName:yn,backendName:"webgl",kernelFunc:hR},dR={kernelName:ye,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,crops:i}=s;l(r.shape.length<=4,(()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet"));const o=a.reduce(((e,t)=>e*t)),u=Oh(r.shape,a,o),c=Mh(u.length,a.length),h=Lh(r.shape,a,o),p=zh(i,a.length),d=Bh(h,i,a.length),f=[],m=aA({inputs:{x:r},backend:n,attrs:{shape:u}}),g=mA({inputs:{x:m},backend:n,attrs:{perm:c}}),y=aA({inputs:{x:g},backend:n,attrs:{shape:h}}),b=hR({inputs:{x:y},backend:n,attrs:{begin:p,size:d}});return f.push(m),f.push(g),f.push(y),f.forEach((e=>n.disposeIntermediateTensorInfo(e))),b}};const fR={kernelName:be,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i}=s,o=n.readSync(r.dataId),l=n.readSync(a.dataId),u=qT(o,l,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,u)}},mR=YE({opSnippet:"return float(a != b);",dtype:"bool"}),gR={kernelName:Ut,backendName:"webgl",kernelFunc:mR};function yR(e){const{inputs:t,backend:n}=e,{input:s}=t;return BE({inputs:{x:n.texData.get(s.dataId).complexTensorInfos.real},backend:n})}const bR={kernelName:tn,backendName:"webgl",kernelFunc:yR};const xR={kernelName:we,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s,attrs:r}=t,{x:a}=n,{dtype:i}=r;if("complex64"===i){if("complex64"===a.dtype)return BE({inputs:{x:a},backend:s});const t=El(a.shape),n=e({inputs:{x:a},backend:s,attrs:{dtype:"float32"}}),r=WE({inputs:{real:n,imag:t},backend:s});return t.dispose(),s.disposeIntermediateTensorInfo(n),r}if("complex64"===a.dtype){const t=yR({inputs:{input:a},backend:s}),n=e({inputs:{x:t},backend:s,attrs:{dtype:i}});return s.disposeIntermediateTensorInfo(t),n}if(!C(a.dtype,i)){const e=BE({inputs:{x:a},backend:s});return{dataId:e.dataId,shape:e.shape,dtype:i}}if("int32"===i)return function(e,t){const n=new EE(e.shape,"return float(int(x));"),s=t.runWebGLProgram(n,[e],"int32");return{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}(a,s);if("bool"===i){const e=s.makeTensorInfo([],"bool",k("bool",1)),t=mR({inputs:{a:a,b:e},backend:s});return s.disposeIntermediateTensorInfo(e),t}throw new Error(`Error in Cast: failed to cast ${a.dtype} to ${i}`)}},wR="return ceil(x);",kR=XE({opSnippet:wR,packedOpSnippet:wR,cpuKernelImpl:XT}),vR={kernelName:ke,backendName:"webgl",kernelFunc:kR};class NR{constructor(e){this.variableNames=["A"],this.outputShape=e,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}getCustomSetupFunc(e,t){return(n,s)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(s,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(s,"maxVal")),n.gl.uniform1f(this.minLoc,e),n.gl.uniform1f(this.maxLoc,t)}}}class IR{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}getCustomSetupFunc(e,t){return(n,s)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(s,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(s,"maxVal")),n.gl.uniform1f(this.minLoc,e),n.gl.uniform1f(this.maxLoc,t)}}}const CR={kernelName:ve,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{clipValueMin:a,clipValueMax:i}=s;let o;o=K().getBool("WEBGL_PACK_CLIP")?new IR(r.shape):new NR(r.shape);const l=o.getCustomSetupFunc(a,i);return n.runWebGLProgram(o,[r],r.dtype,l)}};class $R{constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}function SR(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}}const TR={kernelName:Ie,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,r=n.texData.get(s.dataId),a=new $R(s.shape),i=[SR(s,r.complexTensorInfos.real),SR(s,r.complexTensorInfos.imag)];return n.runWebGLProgram(a,i,i[0].dtype)}};class ER{constructor(e){this.outputShape=[],this.outputShape=Fh(e,1),this.variableNames=e.map(((e,t)=>`T${t}`));const t=new Array(e.length-1);t[0]=e[0][1];for(let n=1;n<t.length;n++)t[n]=t[n-1]+e[n][1];const n=[`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];for(let e=1;e<t.length;e++){const s=t[e-1];n.push(`else if (yC < ${t[e]}) setOutput(getT${e}(yR, yC-${s}));`)}const s=t.length,r=t[t.length-1];n.push(`else setOutput(getT${s}(yR, yC-${r}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class AR{constructor(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=Fh(e,t);const n=this.outputShape,s=n.length,r=VT(s),a=vE("coords",s),i=["x","y","z","w","u","v"].slice(0,s);this.variableNames=e.map(((e,t)=>`T${t}`));const o=new Array(e.length-1);o[0]=e[0][t];for(let n=1;n<o.length;n++)o[n]=o[n-1]+e[n][t];const l=i[t],u=i.slice(-2),c=i.join();let h=`if (${l} < ${o[0]}) {\n        return getChannel(\n            getT0(${c}), vec2(${u.join()}));\n        }`;for(let e=1;e<o.length;e++){const t=o[e-1];h+=`\n        if (${l} < ${o[e]}  && ${l} >= ${o[e-1]}) {\n          return getChannel(\n            getT${e}(${RR(i,l,t)}),\n            vec2(${RR(u,l,t)}));\n        }`}const p=o.length,d=o[o.length-1];h+=`\n        return getChannel(\n          getT${p}(${RR(i,l,d)}),\n          vec2(${RR(u,l,d)}));`,this.userCode=`\n      float getValue(${i.map((e=>"int "+e))}) {\n        ${h}\n      }\n\n      void main() {\n        ${r} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${a}), 0., 0., 0.);\n\n        ${a[s-1]} = ${a[s-1]} + 1;\n        if (${a[s-1]} < ${n[s-1]}) {\n          result.g = getValue(${a});\n        }\n\n        ${a[s-2]} = ${a[s-2]} + 1;\n        if (${a[s-2]} < ${n[s-2]}) {\n          result.a = getValue(${a});\n        }\n\n        ${a[s-1]} = ${a[s-1]} - 1;\n        if (${a[s-2]} < ${n[s-2]} &&\n            ${a[s-1]} < ${n[s-1]}) {\n          result.b = getValue(${a});\n        }\n        setOutput(result);\n      }\n    `}}function RR(e,t,n){const s=e.indexOf(t);return e.map(((e,t)=>t===s?`${e} - ${n}`:e)).join()}function FR(e){const{inputs:t,backend:n}=e,{input:s}=t;return BE({inputs:{x:n.texData.get(s.dataId).complexTensorInfos.imag},backend:n})}const DR={kernelName:pt,backendName:"webgl",kernelFunc:FR};function _R(e,t,n){const s=e[0].dtype;if("complex64"===s){const s=e.map((e=>yR({inputs:{input:e},backend:n}))),r=e.map((e=>FR({inputs:{input:e},backend:n}))),a=_R(s,t,n),i=_R(r,t,n),o=WE({inputs:{real:a,imag:i},backend:n});return s.forEach((e=>n.disposeIntermediateTensorInfo(e))),r.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(i),o}if("string"===s){const{tensors2D:r,outShape:a}=OR(e,t,n),i=r.map((e=>({vals:n.readSync(e.dataId),shape:e.shape}))),o=1===r[0].shape[0],l=YT(i,a,s,o),u=Fh(e.map((e=>e.shape)),t),c=n.makeTensorInfo(u,s,l);return r.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}if(e.length>K().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const s=Math.floor(e.length/2),r=_R(e.slice(0,s),t,n),a=_R(e.slice(s),t,n),i=_R([r,a],t,n);return n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(a),i}if(K().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&e[0].shape.length>1){const r=new AR(e.map((e=>e.shape)),t);return n.runWebGLProgram(r,e,s)}const{tensors2D:r,outShape:a}=OR(e,t,n),i=new ER(r.map((e=>e.shape))),o=n.runWebGLProgram(i,r,s);r.forEach((e=>n.disposeIntermediateTensorInfo(e)));const l=aA({inputs:{x:o},attrs:{shape:a},backend:n});return n.disposeIntermediateTensorInfo(o),l}function OR(e,t,n){const s=Fh(e.map((e=>e.shape)),t);return{tensors2D:e.map((e=>aA({inputs:{x:e},attrs:{shape:[-1,p(e.shape.slice(t))]},backend:n}))),outShape:s}}function MR(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s,a=x(r,t[0].shape)[0],i=Fh(t.map((e=>e.shape)),a);if(0===p(i))return n.makeTensorInfo(i,t[0].dtype,[]);const o=t.filter((e=>p(e.shape)>0));if(1===o.length)return BE({inputs:{x:o[0]},backend:n});return Rh(o.map((e=>e.shape)),a),_R(o,a,n)}const LR={kernelName:Ce,backendName:"webgl",kernelFunc:MR};class zR{constructor(e,t=!1,n=null,s=!1,r=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const a=e.padInfo.top,i=e.padInfo.left,o=e.strideHeight,l=e.strideWidth,u=e.dilationHeight,c=e.dilationWidth,h=e.filterHeight,p=e.filterWidth,d=4*Math.floor(e.inChannels/4),f=e.inChannels%4,m="channelsLast"===e.dataFormat,g=m?1:2,y=m?2:3,b=m?3:1;let x="",w="";n&&(x=s?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:r?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,w="result = activation(result);");const k=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${x}\n\n      const ivec2 strides = ivec2(${o}, ${l});\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${b}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${g}], coords[${y}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${h}; wR++) {\n          int xR = xRCorner + wR * ${u};\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${p}; wC++) {\n            int xC = xCCorner + wC * ${c};\n\n            if (xC < 0 || xC >= ${e.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${d}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${m}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===f}) {\n\n              if (${m}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${d}) *\n                    getW(wR, wC, ${d}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${d}, xR, xC) *\n                    getW(wR, wC, ${d}, d2);\n              }\n\n            } else if (${2===f}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2)\n              );\n\n              if (${m}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===f}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2),\n                getW(wR, wC, ${d} + 2, d2)\n              );\n\n              if (${m}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1),\n                  getX(batch, xR, xC, ${d} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC),\n                  getX(batch, ${d} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${k}\n        ${w}\n        setOutput(result);\n      }\n    `}}class BR{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const t=e.padInfo.front,n=e.padInfo.top,s=e.padInfo.left,r=e.strideDepth,a=e.strideHeight,i=e.strideWidth,o=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,c=e.filterDepth,h=e.filterHeight,p=e.filterWidth,d=4*Math.floor(e.inChannels/4),f=e.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${r}, ${a}, ${i});\n      const ivec3 pads = ivec3(${t}, ${n}, ${s});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${c}; wF++) {\n          int xF = xFCorner + wF * ${o};\n\n          if (xF < 0 || xF >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${h}; wR++) {\n            int xR = xRCorner + wR * ${l};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${p}; wC++) {\n              int xC = xCCorner + wC * ${u};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${d}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${d}) *\n                  getW(wF, wR, wC, ${d}, d2);\n              } else if (${2===f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1),\n                  getX(batch, xF, xR, xC, ${d} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2),\n                  getW(wF, wR, wC, ${d} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class PR{constructor(e,t,n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e;const{filterWidth:s,inChannels:r,strideWidth:a,strideHeight:i,padInfo:o,outWidth:l,dilationWidth:u,dilationHeight:c,dataFormat:h}=n,{left:p,top:d}=o,f=r*s,m=cT(),g="channelsLast"===h,y=g?0:1,b=g?1:2;let x="";for(let n=0;n<=1;n++)for(let s=0;s<=1;s++)x+=`\n          blockIndex = rc.y + ${s};\n          pos = rc.x + ${n};\n\n          if(blockIndex < ${e[1]} && pos < ${e[0]}) {\n            offsetY = int(blockIndex / (${l})) * ${i} - ${d};\n            d0 = offsetY + ${c} * (pos / ${f});\n\n            if(d0 < ${t[y]} && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), ${l}.) * ${a}. - ${p}.);\n              d1 = offsetX + ${u} * (int(mod(float(pos), ${f}.) / ${r}.));\n\n              if(d1 < ${t[b]} && d1 >= 0) {\n\n                ch = int(mod(float(pos), ${r}.));\n\n                if (${g}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*n+s}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*n+s}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${x}\n\n        ${m.output} = result;\n      }\n    `}}function WR({x:e,filter:t,convInfo:n,backend:s,bias:r=null,preluActivationWeights:a=null,leakyreluAlpha:i=0,activation:o=null}){const u=e.shape,c=s.texData.get(e.dataId),h=n.inChannels,p=u[0]*u[1]*u[2],d=n.outChannels,f="channelsLast"===n.dataFormat;let m;const g=[],y=(1===p||1===d)&&h>1e3,b=u[2]%2!=0&&!!c.isPacked;if(!y&&K().getBool("WEBGL_LAZILY_UNPACK")&&K().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&b){const h=f?u[0]*u[1]*(u[2]+1):u[0]*u[2]*(u[3]+1),p={dataId:e.dataId,shape:[1,h,n.inChannels],dtype:e.dtype},d=c.shape;c.shape=c.shape.slice(),c.shape[c.shape.length-2]++,l(tT(c.shape,p.shape),(()=>`packed reshape ${c.shape} to ${p.shape} isn't free`));const y=aA({inputs:{x:t},backend:s,attrs:{shape:[1,n.inChannels,n.outChannels]}});g.push(y);const b=yA({a:p,b:y,backend:s,transposeA:false,transposeB:false,bias:r,activation:o,preluActivationWeights:a,leakyreluAlpha:i}),x=s.texData.get(b.dataId);l(x.isPacked,(()=>"batchMatMul result is expected to be packed")),c.shape=d,x.shape=n.outShape,m=BE({inputs:{x:b},backend:s}),m.shape=n.outShape,g.push(b)}else{const l=aA({inputs:{x:e},backend:s,attrs:{shape:[1,f?u[0]*u[1]*u[2]:u[0]*u[2]*u[3],n.inChannels]}}),c=aA({inputs:{x:t},backend:s,attrs:{shape:[1,n.inChannels,n.outChannels]}}),h=yA({a:l,b:c,transposeA:false,transposeB:false,backend:s,bias:r,activation:o,preluActivationWeights:a,leakyreluAlpha:i});m=aA({inputs:{x:h},backend:s,attrs:{shape:n.outShape}}),g.push(l),g.push(c),g.push(h)}for(const e of g)s.disposeIntermediateTensorInfo(e);return m}function VR({x:e,filter:t,convInfo:n,backend:s,bias:r=null,preluActivationWeights:a=null,leakyreluAlpha:i=0,activation:o=null}){const{filterWidth:l,filterHeight:u,inChannels:c,outWidth:h,outHeight:d,dataFormat:f}=n,m="channelsLast"===f,g=l*u*c,y=d*h,b=[g,y],x=[],w=aA({inputs:{x:e},backend:s,attrs:{shape:e.shape.slice(1)}}),k=aA({inputs:{x:t},backend:s,attrs:{shape:[1,g,p(t.shape)/g]}});x.push(w),x.push(k);const v=new PR(b,w.shape,n),N=s.runWebGLProgram(v,[w],"float32"),I=aA({inputs:{x:N},backend:s,attrs:{shape:[1,b[0],b[1]]}});x.push(N),x.push(I);const C=null!=r,$=null!=a,S="leakyrelu"===o,T=o?JE(o,!0):null,E=new ZE(I.shape,k.shape,[1,y,n.outChannels],!0,!1,C,T,$,S),A=[I,k];if(r&&A.push(r),$&&A.push(a),S){const e=s.makeTensorInfo([],"float32",ss(i,"float32"));A.push(e),x.push(e)}const R=s.runWebGLProgram(E,A,"float32"),F=aA({inputs:{x:R},backend:s,attrs:{shape:m?[1,d,h,n.outChannels]:[1,n.outChannels,d,h]}});x.push(R);for(const e of x)s.disposeIntermediateTensorInfo(e);return F}const UR={kernelName:$e,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dataFormat:l,dilations:u,dimRoundingMode:c}=s,h=Bi(l),p=Ai(r.shape,a.shape,i,u,o,c,!1,h);let d;if(1!==p.filterHeight||1!==p.filterWidth||1!==p.dilationHeight||1!==p.dilationWidth||1!==p.strideHeight||1!==p.strideWidth||"SAME"!==p.padInfo.type&&"VALID"!==p.padInfo.type)if(K().getBool("WEBGL_CONV_IM2COL")&&1===r.shape[0])d=VR({x:r,filter:a,convInfo:p,backend:n});else{const e=new zR(p);d=n.runWebGLProgram(e,[r,a],"float32")}else d=WR({x:r,filter:a,convInfo:p,backend:n});const f=aA({inputs:{x:d},backend:n,attrs:{shape:p.outShape}});return n.disposeIntermediateTensorInfo(d),f}};class GR{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,s=e.padInfo.top,r=e.padInfo.left,a="channelsLast"===e.dataFormat;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${s};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${r};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              if (${a}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class HR{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,r=e.strideWidth,a="channelsLast"===e.dataFormat,i=t-1-e.padInfo.top,o=n-1-e.padInfo.left,l=a?1:2,u=a?2:3,c=a?3:1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${c}];\n\n        ivec2 dyCorner = ivec2(coords[${l}], coords[${u}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n\n              if (${a}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class jR{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideDepth,n=e.strideHeight,s=e.strideWidth,r=e.padInfo.front,a=e.padInfo.top,i=e.padInfo.left;this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yF = 0; yF < ${e.outDepth}; yF++) {\n            int xF = wF + yF * ${t} - ${r};\n\n            if (xF < 0 || xF >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${e.outHeight}; yR++) {\n              int xR = wR + yR * ${n} - ${a};\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${e.outWidth}; yC++) {\n                int xC = wC + yC * ${s} - ${i};\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class qR{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,s=e.filterWidth,r=e.strideDepth,a=e.strideHeight,i=e.strideWidth,o=t-1-e.padInfo.front,l=n-1-e.padInfo.top,u=s-1-e.padInfo.left;this.userCode=`\n      const ivec3 pads = ivec3(${o}, ${l}, ${u});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${t}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${r}.0;\n\n          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${t} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${s}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${s} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const KR={kernelName:Se,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,pad:o,dataFormat:l,dimRoundingMode:u,filterShape:c}=s,h=Bi(l),p=Ai(r.shape,c,i,1,o,u,!1,h),d=new GR(p);return n.runWebGLProgram(d,[r,a],"float32")}};const XR={kernelName:Te,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{inputShape:i,strides:o,pad:l,dataFormat:u,dimRoundingMode:c}=s,h=Bi(u),p=Ai(i,a.shape,o,1,l,c,!1,h),d=new HR(p);return n.runWebGLProgram(d,[r,a],"float32")}};const YR={kernelName:Ee,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l}=s,u=Ri(r.shape,a.shape,i,l,o),c=new BR(u);return n.runWebGLProgram(c,[r,a],"float32")}};const JR={kernelName:Ae,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,pad:o,filterShape:l}=s,u=Ri(r.shape,l,i,1,o),c=new jR(u);return n.runWebGLProgram(c,[r,a],"float32")}};const ZR={kernelName:Re,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{pad:i,strides:o,inputShape:l}=s,u=Ri(l,a.shape,o,1,i),c=new qR(u);return n.runWebGLProgram(c,[r,a],"float32")}},QR=XE({opSnippet:"if (isnan(x)) return x;\n  return cos(x);\n"}),eF={kernelName:Fe,backendName:"webgl",kernelFunc:QR},tF=XE({opSnippet:"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"}),nF={kernelName:De,backendName:"webgl",kernelFunc:tF};class sF{constructor(e,t,n,s,r){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[a,i,o,l]=e,[u]=t,[c,h]=n;this.outputShape=[u,c,h,l];const p="bilinear"===s?1:0,[d,f]=[i-1+".0",o-1+".0"],[m,g,y]=c>1?[""+(i-1)/(c-1),"(y2-y1) * height_ratio",`y1*${d} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${d}`],[b,x,w]=h>1?[""+(o-1)/(h-1),"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${f}`];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${b});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${a}) {\n          return;\n        }\n\n        float height_scale = ${g};\n        float width_scale = ${x};\n\n        float in_y = ${y};\n        if( in_y < 0.0 || in_y > ${d} ) {\n          setOutput(float(${r}));\n          return;\n        }\n        float in_x = ${w};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${r}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${p} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}const rF={kernelName:Oe,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{image:r,boxes:a,boxInd:i}=t,{cropSize:o,method:l,extrapolationValue:u}=s,c=new sF(r.shape,a.shape,o,l,u);return n.runWebGLProgram(c,[r,a,i],"float32")}};class aF{constructor(e,t,n){this.variableNames=["x"],this.outputShape=e;const s=e.length,r=t?"0.0":`getX(${iF(s,"coords")})`,a=e[e.length-1];let i="",o="";t?(i=n?"end != "+(a-1):"end != 0",o=n?"end + 1":"end - 1"):(i=n?`end + pow2 < ${a}`:"end >= pow2",o=n?"end + pow2":"end - pow2"),this.userCode=`\n      uniform float index;\n      void main() {\n        ${VT(s)} coords = getOutputCoords();\n        int end = ${oF(s,"coords")};\n        float val = ${r};\n        int pow2 = int(pow(2.0, index));\n        if (${i}) {\n          int idx = ${o};\n          ${oF(s,"coords")} = idx;\n          val += getX(${iF(s,"coords")});\n        }\n        setOutput(val);\n      }\n    `}getCustomSetupFunc(e){return(t,n)=>{null==this.index&&(this.index=t.getUniformLocation(n,"index")),t.gl.uniform1f(this.index,e)}}}function iF(e,t){if(1===e)return`${t}`;if(2===e)return`${t}.x, ${t}.y`;if(3===e)return`${t}.x, ${t}.y, ${t}.z`;if(4===e)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw Error(`Cumulative sum for rank ${e} is not yet supported`)}function oF(e,t){if(1===e)return`${t}`;if(2===e)return`${t}.y`;if(3===e)return`${t}.z`;if(4===e)return`${t}.w`;throw Error(`Cumulative sum for rank ${e} is not yet supported`)}const lF={kernelName:_e,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,exclusive:i,reverse:o}=s,l=r.shape.length,u=gl([a],l);let c=r;null!=u&&(c=mA({inputs:{x:r},backend:n,attrs:{perm:u}}));const h=bl(1,l)[0];if(h!==l-1)throw new Error(`WebGL cumsum shader expects an inner-most axis=${r.shape.length-1} but got axis=${a}`);const p=c.shape[h];let d=BE({inputs:{x:c},backend:n});for(let e=0;e<=Math.ceil(Math.log2(p))-1;e++){const t=new aF(c.shape,!1,o),s=t.getCustomSetupFunc(e),r=d;d=n.runWebGLProgram(t,[d],d.dtype,s),n.disposeIntermediateTensorInfo(r)}if(i){const e=new aF(c.shape,i,o),t=d;d=n.runWebGLProgram(e,[d],d.dtype),n.disposeIntermediateTensorInfo(t)}if(null!=u){const e=mA({inputs:{x:d},backend:n,attrs:{perm:yl(u)}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(c),e}return d}};const uF={kernelName:Me,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i,binaryOutput:o}=s;if(1===r.shape.length){const e=n.readSync(r.dataId),t=n.readSync(a.dataId),s=qT(e,t,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,s)}if(2===r.shape.length){const e=n.bufferSync(r),t=n.bufferSync(a),s=KT(e,t,i,o);return n.makeTensorInfo(s.shape,a.dtype,s.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`)}};class cF{constructor(e,t,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=t,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${t};\n      int offset_h = imod(h, ${t});\n      int in_w = w / ${t};\n      int offset_w = imod(w, ${t});\n      int offset_d = (offset_h * ${t} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const hF={kernelName:Le,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockSize:a,dataFormat:i}=s;l(a>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${a}`));const o=r.shape[0],u="NHWC"===i?r.shape[1]:r.shape[2],c="NHWC"===i?r.shape[2]:r.shape[3],h="NHWC"===i?r.shape[3]:r.shape[1],p=u*a,d=c*a,f=h/(a*a),m=new cF("NHWC"===i?[o,p,d,f]:[o,f,p,d],a,i);return n.runWebGLProgram(m,[r],r.dtype)}};class pF{constructor(e,t=!1,n=null,s=!1,r=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const a=e.inHeight,i=e.inWidth,o=e.padInfo.top,l=e.padInfo.left,u=e.strideHeight,c=e.strideWidth,h=e.dilationHeight,p=e.dilationWidth,d=e.filterHeight,f=e.filterWidth,m=e.outChannels/e.inChannels;let g="",y="";n&&(g=s?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:r?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,y="result = activation(result);");const b=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${g}\n\n      const ivec2 strides = ivec2(${u}, ${c});\n      const ivec2 pads = ivec2(${o}, ${l});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${m};\n        int q = d2 - d1 * ${m};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${d}; wR++) {\n          int xR = xRCorner + wR * ${h};\n\n          if (xR < 0 || xR >= ${a}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${f}; wC++) {\n            int xC = xCCorner + wC * ${p};\n\n            if (xC < 0 || xC >= ${i}) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${b}\n        ${y}\n        setOutput(result);\n      }\n    `}}class dF{constructor(e,t=!1,n=null,s=!1,r=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.outShape;const a=e.outChannels/e.inChannels,o=e.inHeight,l=e.inWidth,u=e.padInfo.top,c=e.padInfo.left,h=e.strideHeight,p=e.strideWidth,d=e.dilationHeight,f=e.dilationWidth,m=e.filterHeight,g=e.filterWidth,y=g;let b="\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;";for(let e=0;e<g;e++)b+=`\n          vec4 xTexelC${2*e};\n          vec4 xC${e};`;for(let e=0;e<m;e++){for(let e=0;e<g;e++)b+=`\n          xTexelC${2*e} = vec4(0.0);\n          xC${e} = vec4(0.0);`;b+=`\n        xR = xRCorner + ${e*d};\n        if (xR >=0 && xR < ${o}) {\n      `;for(let t=0;t<y/2+1;t++){const n=2*t;if(b+=`\n          xC = xCCorner + ${n*f};\n          `,1===p){if(n<g&&(c%2==1?(b+=`\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < ${l}) {\n                  xTexelC${n} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= ${l}) {\n                    xTexelC${n}.zw = vec2(0.0);\n                  }\n                }\n              `,b+=1===f&&n>0?`\n                xC${n} = vec4(xTexelC${n-2}.zw, xTexelC${n}.xy);\n                `:`\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < ${l}) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= ${l}) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${n} = vec4(previous.zw, xTexelC${n}.xy);\n                  } else {\n                    xC${n} = vec4(0.0, 0.0, xTexelC${n}.xy);\n                  }\n                  `):b+=`\n                if (xC >= 0 && xC < ${l}) {\n                  xTexelC${n} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= ${l}) {\n                    xTexelC${n}.zw = vec2(0.0);\n                  }\n                }\n\n                xC${n} = xTexelC${n};\n                `,n+1<g)){const e=c%2==0?i(f):f;f%2==0&&c%2==1||f%2!=0&&c%2!=1?(b+=`\n                  xCOffset = xC + ${c%2} + ${e};\n\n                  if (xCOffset >= 0 && xCOffset < ${l}) {\n                    xTexelC${n+2} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= ${l}) {\n                      xTexelC${n+2}.zw = vec2(0.0);\n                    }\n                  }\n                  `,f>1&&(b+=`\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < ${l}) {\n                      xTexelC${n} = getX(batch, xR, xCOffset, d1);\n                    }\n                    `),b+=`\n                  xC${n+1} = vec4(xTexelC${n}.zw, xTexelC${n+2}.xy);\n                  `):b+=1===e?`\n                    xC${n+1} = xTexelC${n};\n                    `:`\n                    xCOffset = xC + ${e};\n\n                    if (xCOffset >= 0 && xCOffset < ${l}) {\n                      xTexelC${n+2} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= ${l}) {\n                        xTexelC${n+2}.zw = vec2(0.0);\n                      }\n                    }\n\n                    xC${n+1} = xTexelC${n+2};\n                    `}}else n<g&&(c%2==1?(b+=`\n                xCOffset = xC + 1 - ${p};\n                if(xCOffset >= 0 && xCOffset < ${l}) {\n                  xTexelC${n} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= ${l}) {\n                    xTexelC${n}.zw = vec2(0.0);\n                  }\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < ${l}) {\n                  xTexelC${n+2} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= ${l}) {\n                    xTexelC${n+2}.zw = vec2(0.0);\n                  }\n                }\n\n                xC${n} = vec4(xTexelC${n}.zw, xTexelC${n+2}.zw);\n              `,n+1<g&&(b+=`\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + ${p};\n                  if(xCOffset >= 0 && xCOffset < ${l}) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${n+1} = vec4(xTexelC${n+2}.xy, final.xy);\n                `)):(b+=`\n                if(xC >= 0 && xC < ${l}) {\n                  xTexelC${n} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= ${l}) {\n                    xTexelC${n}.zw = vec2(0.0);\n                  }\n                }\n\n                xCOffset = xC + ${p};\n                if(xCOffset >= 0 && xCOffset < ${l}) {\n                  xTexelC${n+2} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= ${l}) {\n                    xTexelC${n+2}.zw = vec2(0.);\n                  }\n                }\n\n                xC${n} = vec4(\n                  xTexelC${n}.xy, xTexelC${n+2}.xy);\n              `,n+1<g&&(b+=`\n                  xC${n+1} = vec4(xTexelC${n}.zw, xTexelC${n+2}.zw);\n                `)));n<g&&(b+=`\n            wTexel = getW(${e}, ${n}, d1, q);\n            dotProd += xC${n} * vec4(wTexel.xz, wTexel.xz);\n          `,n+1<g&&(b+=`\n              wTexel = getW(${e}, ${n+1}, d1, q);\n              dotProd += xC${n+1} * vec4(wTexel.xz, wTexel.xz);\n            `))}b+="\n        }\n      "}let x="",w="";n&&(x=s?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:r?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,w="result = activation(result);");const k=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${x}\n\n      const ivec2 strides = ivec2(${h}, ${p});\n      const ivec2 pads = ivec2(${u}, ${c});\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${a};\n        int q = d2 - d1 * ${a};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${b}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${k}\n        ${w}\n        setOutput(result);\n      }\n    `}}const fF={kernelName:ze,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:u,dimRoundingMode:c}=s;let h=u;null==h&&(h=[1,1]),l(zi(i,h),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${h}'`));const p=Ai(r.shape,a.shape,i,h,o,c,!0);let d;return d=K().getBool("WEBGL_PACK_DEPTHWISECONV")&&p.strideWidth<=2&&p.outChannels/p.inChannels==1?new dF(p):new pF(p),n.runWebGLProgram(d,[r,a],"float32")}};class mF{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,s=e.padInfo.top,r=e.padInfo.left,a=e.outChannels/e.inChannels;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${a} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${s};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${r};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class gF{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,r=e.strideWidth,a=t-1-e.padInfo.top,i=n-1-e.padInfo.left,o=e.outChannels/e.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${o}; dm++) {\n              int d2 = d1 * ${o} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const yF={kernelName:Be,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,filterShape:c}=s,h=Ai(r.shape,c,i,o,l,u,!0),p=new mF(h);return n.runWebGLProgram(p,[r,a],"float32")}};const bF={kernelName:Pe,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,inputShape:c}=s,h=Ai(c,a.shape,i,o,l,u,!0),p=new gF(h);return n.runWebGLProgram(p,[r,a],"float32")}};class xF{constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}const wF={kernelName:We,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,r=[...s.shape,...s.shape],a=p(s.shape),i=aA({inputs:{x:s},backend:n,attrs:{shape:[a]}}),o=new xF(a),l=n.runWebGLProgram(o,[i],i.dtype),u=aA({inputs:{x:l},backend:n,attrs:{shape:r}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(l),u}};class kF{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const{inHeight:t,inWidth:n,padInfo:s,strideHeight:r,strideWidth:a,filterHeight:i,filterWidth:o,dilationHeight:l,dilationWidth:u}=e,{top:c,left:h}=s;this.userCode=`\n      const ivec2 strides = ivec2(${r}, ${a});\n      const ivec2 pads = ivec2(${c}, ${h});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${i}; h++) {\n          int hIn = hBeg + h * ${l};\n\n          if (hIn >= 0 && hIn < ${t}) {\n            for (int w = 0; w < ${o}; w++) {\n              int wIn = wBeg + w * ${u};\n\n              if (wIn >= 0 && wIn < ${n}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `}}const vF={kernelName:Ve,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l}=s,u=Si(r.shape,a.shape,i,o,"NHWC",l);let c;const h=new kF(u);c=n.runWebGLProgram(h,[r,a],"float32");const p=aA({inputs:{x:c},backend:n,attrs:{shape:u.outShape}});return n.disposeIntermediateTensorInfo(c),p}};const NF={kernelName:je,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{equation:r}=s,a=t,{allDims:i,summedDims:o,idDims:l}=ap(r,a.length);op(i.length,l,a);const{path:u,steps:c}=lp(o,l),h=c.length;let p=null,f=i.length;const m=[];for(let e=0;e<h;++e){for(const t of c[e]){const{permutationIndices:e,expandDims:s}=ip(f,l[t]);let r;up(e)?r=a[t]:(r=mA({inputs:{x:a[t]},backend:n,attrs:{perm:e}}),m.push(r));const i=r.shape.slice();for(let e=0;e<s.length;++e)i.splice(s[e],0,1);d(r.shape,i)||(r=aA({inputs:{x:r},backend:n,attrs:{shape:i}}),m.push(r)),null===p?p=r:(p=sA({inputs:{a:r,b:p},backend:n}),m.push(p))}e<h-1&&(u[e]>=0&&(p=dA({inputs:{x:p},backend:n,attrs:{axis:u[e]-(i.length-f),keepDims:!1}}),m.push(p)),f--)}for(const e of m)e!==p&&n.disposeIntermediateTensorInfo(e);return p}},IF=XE({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n"}),CF={kernelName:qe,backendName:"webgl",kernelFunc:IF},$F={kernelName:Ke,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n}=e,{dy:s,y:r}=t,a=K().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new zE("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",s.shape,r.shape):new LE("return (b >= 1.0) ? a : a * (b + 1.0);",s.shape,r.shape);return n.runWebGLProgram(a,[s,r],s.dtype)}},SF=YE({opSnippet:"return float(a == b);",packedOpSnippet:"\n  return vec4(equal(a, b));\n",dtype:"bool"}),TF={kernelName:Ye,backendName:"webgl",kernelFunc:SF},EF=XE({opSnippet:`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${Vh};\n  float a1 = ${Uh};\n  float a2 = ${Gh};\n  float a3 = ${Hh};\n  float a4 = ${jh};\n  float a5 = ${qh};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`}),AF={kernelName:Xe,backendName:"webgl",kernelFunc:EF},RF="return exp(x);",FF=XE({opSnippet:RF,packedOpSnippet:RF,cpuKernelImpl:JT}),DF={kernelName:Je,backendName:"webgl",kernelFunc:FF};function _F(e){const{inputs:t,attrs:n,backend:s}=e,{dim:r}=n,{input:a}=t,i=a.shape.length,o=a.shape.slice();let u=r;return r<0&&(l(-(i+1)<=r,(()=>`Axis must be in the interval [${-(i+1)}, ${i}]`)),u=i+r+1),o.splice(u,0,1),aA({inputs:{x:a},backend:s,attrs:{shape:o}})}const OF={kernelName:Ze,backendName:"webgl",kernelFunc:_F},MF="return exp(x) - 1.0;",LF=XE({opSnippet:MF,packedOpSnippet:MF,cpuKernelImpl:ZT}),zF={kernelName:Qe,backendName:"webgl",kernelFunc:LF};class BF{constructor(e,t,n){this.variableNames=["real","imag"];const s=t[1];this.outputShape=t;const r=n?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,a=n?`${s}.0`:"1.0";let i;if("real"===e)i="return real * expR - imag * expI;";else{if("imag"!==e)throw new Error(`FFT component must be either "real" or "imag", got ${e}.`);i="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${r};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${i}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${s});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${s}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${a};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function PF(e,t,n){const s=n.texData.get(e.dataId),r=p(e.shape),a=e.shape[e.shape.length-1],i=aA({inputs:{x:e},backend:n,attrs:{shape:[r/a,a]}}),o=i.shape,l=new BF("real",o,t),u=new BF("imag",o,t),c=[{dataId:s.complexTensorInfos.real.dataId,dtype:s.complexTensorInfos.real.dtype,shape:o},{dataId:s.complexTensorInfos.imag.dataId,dtype:s.complexTensorInfos.imag.dtype,shape:o}],h=n.runWebGLProgram(l,c,"float32"),d=n.runWebGLProgram(u,c,"float32"),f=WE({inputs:{real:h,imag:d},backend:n});n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(d);const m=aA({inputs:{x:f},backend:n,attrs:{shape:e.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(f),m}const WF={kernelName:et,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t;return PF(s,!1,n)}};class VF{constructor(e,t){this.outputShape=[],this.variableNames=["x"],this.outputShape=e,this.userCode="\n      uniform float value;\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}getCustomSetupFunc(e){return(t,n)=>{null==this.valueLoc&&(this.valueLoc=t.getUniformLocationNoThrow(n,"value")),t.gl.uniform1f(this.valueLoc,e)}}}function UF(e){const{backend:t,attrs:n}=e,{shape:s,value:r}=n;let{dtype:a}=n;if(a=a||F(r),"string"===a){const e=v(a,p(s));return e.fill(r),t.makeTensorInfo(s,a,e)}{const e=new VF(s,r),n=e.getCustomSetupFunc(r);return t.runWebGLProgram(e,[],a,n)}}const GF={kernelName:tt,backendName:"webgl",kernelFunc:UF};class HF{constructor(e){this.variableNames=["Image"],this.outputShape=[];const t=e[2];this.outputShape=e,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${t} - x;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${t}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const jF={kernelName:nt,backendName:"webgl",kernelFunc:({inputs:e,backend:t})=>{const{image:n}=e,s=t,r=new HF(n.shape);return s.runWebGLProgram(r,[n],n.dtype)}},qF="return floor(x);",KF=XE({opSnippet:qF,packedOpSnippet:qF,cpuKernelImpl:QT}),XF={kernelName:st,backendName:"webgl",kernelFunc:KF},YF=YE({opSnippet:"\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",packedOpSnippet:"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",dtype:"int32"}),JF={kernelName:rt,backendName:"webgl",kernelFunc:YF};class ZF{constructor(e){this.variableNames=["A"];const t=cT(),[n,s]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}.0, ${n}.0);\n\n        vec4 values = ${t.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class QF{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const t=cT(),[n,s]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${s}.0, ${n}.0);\n            vec4 values = ${t.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${t.output} = result;\n      }\n    `}}const eD={kernelName:Gn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e;let{pixels:r}=t;const{numChannels:a}=s,i="undefined"!=typeof HTMLVideoElement&&r instanceof HTMLVideoElement,o="undefined"!=typeof HTMLImageElement&&r instanceof HTMLImageElement,[l,u]=i?[r.videoWidth,r.videoHeight]:[r.width,r.height],c=[u,l],h=[u,l,a];(o||i)&&(null==tD&&(tD=document.createElement("canvas").getContext("2d")),tD.canvas.width=l,tD.canvas.height=u,tD.drawImage(r,0,0,l,u),r=tD.canvas);const p=n.makeTensorInfo(c,"int32");n.texData.get(p.dataId).usage=FS.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(p.dataId),r);const d=K().getBool("WEBGL_PACK")?new QF(h):new ZF(h),f=n.runWebGLProgram(d,[p],"int32");return n.disposeData(p.dataId),f}};let tD;const nD={kernelName:qn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=s,m=Bi(c),g=Ai(r.shape,a.shape,l,h,u,p,!1,m);let y;const b=[];if(1!==g.filterHeight||1!==g.filterWidth||1!==g.dilationHeight||1!==g.dilationWidth||1!==g.strideHeight||1!==g.strideWidth||"SAME"!==g.padInfo.type&&"VALID"!==g.padInfo.type)if(K().getBool("WEBGL_CONV_IM2COL")&&1===r.shape[0])y=VR({x:r,filter:a,convInfo:g,backend:n,bias:i,activation:d,preluActivationWeights:o,leakyreluAlpha:f});else{const e=null!=i,t=null!=o,s="leakyrelu"===d,l=d?JE(d,!1):null,u=new zR(g,e,l,t,s),c=[r,a];if(i&&c.push(i),o&&c.push(o),s){const e=n.makeTensorInfo([],"float32",ss(f,"float32"));c.push(e),b.push(e)}y=n.runWebGLProgram(u,c,"float32")}else y=WR({x:r,filter:a,convInfo:g,backend:n,bias:i,activation:d,preluActivationWeights:o,leakyreluAlpha:f});const x=aA({inputs:{x:y},backend:n,attrs:{shape:g.outShape}});return b.push(y),b.forEach((e=>n.disposeIntermediateTensorInfo(e))),x}};const sD={kernelName:Kn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:i,preluActivationWeights:o}=t,{strides:u,pad:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=s,m=[];let g=h;null==g&&(g=[1,1]),l(zi(u,g),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${u} and dilations '${g}'`));const y=Ai(r.shape,a.shape,u,g,c,p,!0),b=K().getBool("WEBGL_PACK_DEPTHWISECONV")&&y.strideWidth<=2&&y.outChannels/y.inChannels==1,x=d?JE(d,b):null,w=[r,a],k=null!=i,v=null!=o,N="leakyrelu"===d;if(k&&w.push(i),v&&w.push(o),N){const e=n.makeTensorInfo([],"float32",ss(f,"float32"));w.push(e),m.push(e)}let I;I=b?new dF(y,k,x,v,N):new pF(y,k,x,v,N);const C=n.runWebGLProgram(I,w,"float32");return m.forEach((e=>n.disposeIntermediateTensorInfo(e))),C}};class rD{constructor(e,t,n){this.sliceDim=e,this.strides=t,this.variableNames=["x","indices"],this.outputShape=n;const s=VT(t.length),r=VT(n.length),a=this.sliceDim>1?"strides[j]":"strides";this.userCode=`\n        ${s} strides = ${s}(${this.strides});\n         void main() {\n          ${r} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${a};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `}}const aD={kernelName:ot,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:s,indices:r}=t,a=r.shape,i=a[a.length-1],[o,l,u,c]=va(s,r),h=aA({inputs:{x:r},backend:n,attrs:{shape:[l,i]}}),d=aA({inputs:{x:s},backend:n,attrs:{shape:[p(s.shape)/u,u]}}),f=new rD(i,c,[l,u]),m=n.runWebGLProgram(f,[d,h],d.dtype),g=aA({inputs:{x:m},backend:n,attrs:{shape:o}});return n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(m),g}};class iD{constructor(e,t){this.variableNames=["A","indices"],this.outputShape=t,this.rank=t.length;const n=VT(this.rank),s=function(e,t){const n=["resRC.x","resRC.y","resRC.z","resRC.w"],s=[];for(let t=0;t<e.length;t++)2===t?s.push("int(getIndices(resRC.x, resRC.z))"):s.push(`${n[t]}`);return s.join()}(e);this.userCode=`\n      void main() {\n        ${n} resRC = getOutputCoords();\n        setOutput(getA(${s}));\n      }\n    `}}const oD={kernelName:it,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,indices:a}=t,{axis:i,batchDims:o}=s,l=fp(r,a,x(i,r.shape)[0],o),u=p(a.shape),c=[],h=aA({inputs:{x:r},backend:n,attrs:{shape:[l.batchSize,l.outerSize,l.dimSize,l.sliceSize]}}),d=aA({inputs:{x:a},backend:n,attrs:{shape:[l.batchSize,u/l.batchSize]}});c.push(h),c.push(d);const f=[l.batchSize,l.outerSize,u/l.batchSize,l.sliceSize];if(n.shouldExecuteOnCPU([r,a])||"string"===r.dtype){const e=n.bufferSync(d),t=n.bufferSync(h),s=eE(t,e,f);return c.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(l.outputShape,s.dtype,s.values)}const m=new iD(h.shape,f),g=n.runWebGLProgram(m,[h,d],h.dtype);c.push(g);const y=aA({inputs:{x:g},backend:n,attrs:{shape:l.outputShape}});return c.forEach((e=>n.disposeIntermediateTensorInfo(e))),y}},lD=YE({opSnippet:"return float(a > b);",packedOpSnippet:"\n  return vec4(greaterThan(a, b));\n",cpuKernelImpl:tE,dtype:"bool"}),uD={kernelName:lt,backendName:"webgl",kernelFunc:lD},cD=YE({opSnippet:"return float(a >= b);",packedOpSnippet:"\n  return vec4(greaterThanEqual(a, b));\n",dtype:"bool"}),hD={kernelName:ut,backendName:"webgl",kernelFunc:cD};const pD={kernelName:ht,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t;return PF(s,!0,n)}},dD=XE({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"}),fD={kernelName:dt,backendName:"webgl",kernelFunc:dD},mD=XE({opSnippet:"return float(isinf(x));",dtype:"bool"}),gD={kernelName:ft,backendName:"webgl",kernelFunc:mD},yD=XE({opSnippet:"return float(isnan(x));",dtype:"bool"}),bD={kernelName:mt,backendName:"webgl",kernelFunc:yD},xD=YE({opSnippet:"return float(a < b);",packedOpSnippet:"\n  return vec4(lessThan(a, b));\n",cpuKernelImpl:nE,dtype:"bool"}),wD={kernelName:yt,backendName:"webgl",kernelFunc:xD},kD=YE({opSnippet:"return float(a <= b);",packedOpSnippet:"\n  return vec4(lessThanEqual(a, b));\n",dtype:"bool"}),vD={kernelName:bt,backendName:"webgl",kernelFunc:kD};const ND={kernelName:xt,backendName:"webgl",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:r,num:a}=n,i=sE(s,r,a);return t.makeTensorInfo([i.length],"float32",i)}},ID=XE({opSnippet:"if (x < 0.0) return NAN;\n  return log(x);",packedOpSnippet:"\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:rE}),CD={kernelName:wt,backendName:"webgl",kernelFunc:ID},$D=XE({opSnippet:"return log(1.0 + x);"}),SD={kernelName:kt,backendName:"webgl",kernelFunc:$D},TD=YE({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",dtype:"bool"}),ED={kernelName:vt,backendName:"webgl",kernelFunc:TD},AD=XE({opSnippet:"return float(!(x >= 1.0));"}),RD={kernelName:Nt,backendName:"webgl",kernelFunc:AD},FD=YE({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",dtype:"bool"}),DD={kernelName:It,backendName:"webgl",kernelFunc:FD};class _D{constructor(e,t,n,s,r){this.variableNames=["x"],this.outputShape=[];const a=t,i=e[3]-1;let o;this.outputShape=e;const l=`float(${n}) + float(${s}) * sum`;o=.5===r?`inversesqrt(${l})`:1===r?`1.0/(${l})`:`exp(log(${l}) * float(-${r}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${a}; j <= ${a}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${i}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${o};\n        setOutput(val);\n      }\n    `}}class OD{constructor(e,t,n,s,r){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const a=t,i=e[3]-1;let o;this.outputShape=e;const l=`float(${n}) + float(${s}) * sum`;o=.5===r?`inversesqrt(${l})`:1===r?`1.0/(${l})`:`exp(log(${l}) * float(-${r}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${a};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${a}; j <= ${a}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${i}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${o};\n        setOutput(result);\n      }\n    `}}const MD={kernelName:$t,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{depthRadius:a,bias:i,alpha:o,beta:l}=s,u=K().getBool("WEBGL_PACK_NORMALIZATION")?new OD(r.shape,a,i,o,l):new _D(r.shape,a,i,o,l);return n.runWebGLProgram(u,[r],r.dtype)}};class LD{constructor(e,t,n,s,r){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=t,this.bias=n,this.alpha=s,this.beta=r,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${t})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${t} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${s}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${s})\n                * float(${r})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${r});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}const zD={kernelName:St,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r,y:a,dy:i}=t,{depthRadius:o,bias:l,alpha:u,beta:c}=s,h=new LD(r.shape,o,l,u,c);return n.runWebGLProgram(h,[r,a,i],r.dtype)}};function BD(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reductionIndices:a,keepDims:i}=s,o=r.shape.length,l=x(a,r.shape);let u=l;const c=gl(u,o),h=null!=c,d=n.shouldExecuteOnCPU([r]);let f=r;if(h){if(d){const e=n.texData.get(f.dataId).values,t=new Array(o);for(let e=0;e<t.length;e++)t[e]=r.shape[c[e]];const s=xE(e,r.shape,r.dtype,c,t);f=n.makeTensorInfo(t,r.dtype);n.texData.get(f.dataId).values=s}else f=pA(r,c,n);u=bl(u.length,o)}ml("max",u,o);const[m,g]=dl(f.shape,u);let y,b=m;if(i&&(b=fl(m,l)),d){const e=n.texData.get(f.dataId).values,t=aE(e,p(g),b,r.dtype);y=n.makeTensorInfo(b,r.dtype);n.texData.get(y.dataId).values=t}else y=function(e,t,n,s){const r=p(t),a=aA({inputs:{x:e},attrs:{shape:[p(e.shape)/r,r]},backend:s}),i=uA(a,e.dtype,"max",s),o=aA({inputs:{x:i},attrs:{shape:n},backend:s});return s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}(f,g,b,n);return h&&n.disposeIntermediateTensorInfo(f),y}const PD={kernelName:Tt,backendName:"webgl",kernelFunc:BD},WD=YE({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:iE}),VD={kernelName:Et,backendName:"webgl",kernelFunc:WD};const UD={kernelName:At,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;lT(r,"maxPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:u}=s;l(zi(i,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const c=Ti(r.shape,a,i,1,o,u);if(1===c.filterWidth&&1===c.filterHeight&&d(c.inShape,c.outShape))return BE({inputs:{x:r},backend:n});const h=new YA(c,"max",!1);return n.runWebGLProgram(h,[r],r.dtype)}};const GD={kernelName:Ft,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:i,pad:o,dataFormat:l,dimRoundingMode:u}=s,c=Ei(r.shape,a,i,[1,1,1],o,u,l),h=new JA(c,"max",!1);return n.runWebGLProgram(h,[r],r.dtype)}};class HD{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideHeight,n=e.strideWidth,s=e.dilationHeight,r=e.effectiveFilterHeight,a=e.effectiveFilterWidth,i=r-1-e.padInfo.top,o=a-1-e.padInfo.left,l=r*a-1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${r};\n          wR += ${s}) {\n          float dyR = float(dyRCorner + wR) / ${t}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${a}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${l} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${a} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class jD{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideDepth,n=e.strideHeight,s=e.strideWidth,r=e.dilationDepth,a=e.dilationHeight,i=e.dilationWidth,o=e.effectiveFilterDepth,l=e.effectiveFilterHeight,u=e.effectiveFilterWidth,c=o-1-e.padInfo.front,h=l-1-e.padInfo.top,p=u-1-e.padInfo.left,d=o*l*u-1;this.userCode=`\n      const ivec3 pads = ivec3(${c}, ${h}, ${p});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${o};\n           wD += ${r}) {\n          float dyD = float(dyDCorner + wD) / ${t}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${l};\n              wR += ${a}) {\n            float dyR = float(dyRCorner + wR) / ${n}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${u};\n                wC += ${i}) {\n              float dyC = float(dyCCorner + wC) / ${s}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${d} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${l} * ${u} +\n                  wR * ${u} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const qD={kernelName:Dt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,i=a,{filterSize:o,strides:l,pad:u,dimRoundingMode:c}=s,h=Ei(i.shape,o,l,[1,1,1],u,c),p=new JA(h,"max",!0),d=n.runWebGLProgram(p,[i],i.dtype),f=new jD(h),m=n.runWebGLProgram(f,[r,d],i.dtype);return n.disposeIntermediateTensorInfo(d),m}};const KD={kernelName:Rt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a,output:i}=t,o=a;lT([a,i],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,p=Ti(o.shape,l,u,1,c,h),d=new YA(p,"max",!0),f=n.runWebGLProgram(d,[o],o.dtype),m=new HD(p),g=n.runWebGLProgram(m,[r,f],o.dtype);return n.disposeIntermediateTensorInfo(f),g}};const XD={kernelName:_t,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{filterSize:r,strides:a,pad:i,includeBatchInIndex:o}=t,u=n;l(4===s.shape.length,(()=>`Error in maxPool: input must be rank 4 but got rank ${s.shape.length}.`));const c=[1,1];l(zi(a,c),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${c}'`));const h=Ti(s.shape,r,a,c,i),[p,d]=function(e,t,n,s){let r=new YA(n,"max",!1);const a=s.runWebGLProgram(r,[e],"float32");return r=new YA(n,"max",!0,!0,t),[a,s.runWebGLProgram(r,[e],"float32")]}(s,o,h,u);return[p,d]}};const YD={kernelName:Ot,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{keepDims:r,axis:a}=t,i=n,o=s.shape.length,l=x(a,s.shape);let u=l;const c=gl(u,o),h=null!=c,d=i.shouldExecuteOnCPU([s]),f=[];let m=s;if(h){if(d){const e=i.texData.get(m.dataId).values,t=new Array(o);for(let e=0;e<t.length;e++)t[e]=s.shape[c[e]];const n=xE(e,s.shape,s.dtype,c,t);m=i.makeTensorInfo(t,s.dtype);i.texData.get(m.dataId).values=n}else m=pA(s,c,i);f.push(m),u=bl(u.length,o)}ml("sum",u,o);const[g,y]=dl(m.shape,u);let b=g;r&&(b=fl(g,l));const w=function(e,t,n,s){const r=p(t),a=aA({inputs:{x:e},attrs:{shape:[p(e.shape)/r,r]},backend:s}),i=uA(a,"float32","mean",s),o=aA({inputs:{x:i},attrs:{shape:n},backend:s});return s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}(m,y,b,i);for(const e of f)i.disposeIntermediateTensorInfo(e);return w}};const JD={kernelName:Mt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=r.shape.length,l=x(a,r.shape);let u=l;const c=gl(u,o);let h=r;null!=c&&(h=mA({inputs:{x:r},backend:n,attrs:{perm:c}}),u=bl(u.length,r.shape.length)),ml("min",u,o);const[d,f]=dl(h.shape,u),m=aA({inputs:{x:h},backend:n,attrs:{shape:[-1,p(f)]}}),g=uA(m,m.dtype,"min",n);let y;if(i){y=aA({inputs:{x:g},backend:n,attrs:{shape:fl(d,l)}})}else y=aA({inputs:{x:g},backend:n,attrs:{shape:d}});return n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),null!=c&&n.disposeIntermediateTensorInfo(h),y}},ZD=YE({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:oE}),QD={kernelName:Lt,backendName:"webgl",kernelFunc:ZD};class e_{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,r=VT(s),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,s),l="reflect"===n?0:1;this.userCode=1!==s?`\n      ${r} start = ${r}(${a});\n      ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outC = getOutputCoords();\n        for (int i = 0; i < ${s}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${l};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${l};\n          }\n        }\n        ${r} coords = outC - start;\n        setOutput(getX(${o}));\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${l};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${l};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class t_{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,r=VT(s),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=vE("rc",s),l=vE("source",s),u=`${o[s-1]} < ${this.outputShape[s-1]}`,c=1===s?"source":`vec2(${l.slice(-2).join()})`,h="reflect"===n?0:1;let p="";if(1===s){const e=`\n        ${r} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${h};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${h};\n        }\n        source -= start;\n      `;p=`\n        ${r} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${l.join()}), ${c});\n        ${o[s-1]} += 1;\n        if(${u}) {\n          ${e}\n          result[1] = getChannel(getX(${l.join()}), ${c});\n        }\n      `}else{const e=`\n        ${r} source = rc;\n        ${r} lt = ${r}(lessThan(source, start));\n        ${r} gte = ${r}(greaterThanEqual(source, end));\n        ${r} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${h}) +\n                gte * ((end - 1) * 2 - source + ${h});\n        source -= start;\n      `;p=`\n        ${r} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${l.join()}), ${c});\n        ${o[s-1]} += 1;\n        if(${u}) {\n          ${e}\n          result[1] = getChannel(getX(${l.join()}), ${c});\n        }\n        rc = outputLoc;\n        ${o[s-2]} += 1;\n        if(${o[s-2]} < ${this.outputShape[s-2]}) {\n          ${e}\n          result[2] = getChannel(getX(${l.join()}), ${c});\n          ${o[s-1]} += 1;\n          if(${u}) {\n            ${e}\n            result[3] = getChannel(getX(${l.join()}), ${c});\n          }\n        }\n      `}this.userCode=`\n      const ${r} start = ${r}(${a});\n      const ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${p}\n        setOutput(result);\n      }\n    `}}const n_={kernelName:zt,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s}=e,{paddings:r,mode:a}=n,i=K().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new t_(s.shape,r,a):new e_(s.shape,r,a);return t.runWebGLProgram(i,[s],s.dtype)}},s_=YE({opSnippet:"if (b == 0.0) return NAN;\n  return mod(a, b);",packedOpSnippet:"\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),r_={kernelName:Bt,backendName:"webgl",kernelFunc:s_};class a_{constructor(e,t,n){this.variableNames=["probs"],this.outputShape=[e,n],this.userCode=`\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${t-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${t-1}));\n      }\n    `}getCustomSetupFunc(e){return(t,n)=>{null==this.seedLoc&&(this.seedLoc=t.getUniformLocation(n,"seed")),t.gl.uniform1f(this.seedLoc,e)}}}const i_=YE({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),o_={kernelName:He,backendName:"webgl",kernelFunc:i_},l_="return a - b;",u_=YE({opSnippet:l_,packedOpSnippet:l_,supportsComplex:!0,cpuKernelImpl:gE}),c_={kernelName:An,backendName:"webgl",kernelFunc:u_};function h_(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{dim:a}=s,i=x([a],r.shape),o=BD({inputs:{x:r},backend:n,attrs:{reductionIndices:i,keepDims:!1}}),l=fl(o.shape,i),u=aA({inputs:{x:o},backend:n,attrs:{shape:l}}),c=u_({inputs:{a:r,b:u},backend:n}),h=FF({inputs:{x:c},backend:n}),p=dA({inputs:{x:h},backend:n,attrs:{axis:i,keepDims:!1}}),d=aA({inputs:{x:p},backend:n,attrs:{shape:l}}),f=i_({inputs:{a:h,b:d},backend:n});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(d),f}const p_={kernelName:Sn,backendName:"webgl",kernelFunc:h_};const d_={kernelName:Pt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{numSamples:a,seed:i,normalized:o}=s,l=o?r:h_({inputs:{logits:r},backend:n,attrs:{dim:r.shape.length-1}}),u=l.shape[0],c=l.shape[1],h=new a_(u,c,a),p=h.getCustomSetupFunc(i),d=n.runWebGLProgram(h,[l],"int32",p);return o||n.disposeIntermediateTensorInfo(l),d}},f_="return -x;";const m_={kernelName:Vt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;if(n.shouldExecuteOnCPU([s])){const e=n.texData.get(s.dataId),[t,r]=uE(e.values,s.shape,s.dtype);return n.makeTensorInfo(r,s.dtype,t)}let r;return r=K().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new FE(s.shape,f_):new EE(s.shape,f_),n.runWebGLProgram(r,[s],s.dtype)}},g_=Bc;const y_={kernelName:Gt,backendName:"webgl",kernelFunc:function(e){Kh("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l}=s,u=n.readSync(r.dataId),c=n.readSync(a.dataId),{selectedIndices:h}=g_(u,c,i,o,l);return n.makeTensorInfo([h.length],"int32",new Int32Array(h))}},b_=Pc;const x_={kernelName:Ht,backendName:"webgl",kernelFunc:function(e){Kh("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,padToMaxOutputSize:u}=s,c=n.readSync(r.dataId),h=n.readSync(a.dataId),{selectedIndices:p,validOutputs:d}=b_(c,h,i,o,l,u);return[n.makeTensorInfo([p.length],"int32",new Int32Array(p)),n.makeTensorInfo([],"int32",new Int32Array([d]))]}},w_=Wc;const k_={kernelName:jt,backendName:"webgl",kernelFunc:function(e){Kh("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,softNmsSigma:u}=s,c=n.readSync(r.dataId),h=n.readSync(a.dataId),p=i,d=o,f=l,m=u,{selectedIndices:g,selectedScores:y}=w_(c,h,p,d,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([y.length],"float32",new Float32Array(y))]}};class v_{constructor(e,t,n,s){this.variableNames=["indices"],this.outputShape=[e,t],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${s}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}const N_={kernelName:Kt,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{indices:r}=t,{depth:a,onValue:i,offValue:o}=s,l=p(r.shape),u=new v_(l,a,i,o),c=aA({inputs:{x:r},backend:n,attrs:{shape:[l]}}),h=n.runWebGLProgram(u,[c],r.dtype);n.disposeIntermediateTensorInfo(c);const d=aA({inputs:{x:h},backend:n,attrs:{shape:[...r.shape,a]}});return n.disposeIntermediateTensorInfo(h),d}};function I_(e){const{inputs:t,backend:n}=e,{x:s}=t;if("complex64"===s.dtype){const e=yR({inputs:{input:s},backend:n}),t=I_({inputs:{x:e},backend:n}),r=FR({inputs:{input:s},backend:n}),a=I_({inputs:{x:r},backend:n}),i=WE({inputs:{real:t,imag:a},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(a),i}return UF({attrs:{shape:s.shape,dtype:s.dtype,value:"string"===s.dtype?"":0},backend:n})}const C_={kernelName:Vn,backendName:"webgl",kernelFunc:I_};const $_={kernelName:qt,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s}=t,{x:r}=n;if("string"===r.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===r.dtype){const t=yR({inputs:{input:r},backend:s}),n=e({inputs:{x:t},backend:s}),a=FR({inputs:{input:r},backend:s}),i=I_({inputs:{x:a},backend:s}),o=WE({inputs:{real:n,imag:i},backend:s});return s.disposeIntermediateTensorInfo(t),s.disposeIntermediateTensorInfo(n),s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}return UF({attrs:{shape:r.shape,dtype:r.dtype,value:1},backend:s})}};const S_={kernelName:Xt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s;if(1===t.length)return _F({inputs:{input:t[0]},backend:n,attrs:{dim:r}});const a=t[0].shape,i=t[0].dtype;t.forEach((e=>{u(a,e.shape,"All tensors passed to stack must have matching shapes"),l(i===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const o=[],c=MR({inputs:t.map((e=>{const t=_F({inputs:{input:e},backend:n,attrs:{dim:r}});return o.push(t),t})),backend:n,attrs:{axis:r}});return o.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}};class T_{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,r=VT(s),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,s);this.userCode=1!==s?`\n      ${r} start = ${r}(${a});\n      ${r} end = ${r}(${i});\n      uniform float value;\n\n      void main() {\n        ${r} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${r} coords = outC - start;\n          setOutput(getX(${o}));\n        }\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n        uniform float value;\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}getCustomSetupFunc(e){return(t,n)=>{null==this.valueLoc&&(this.valueLoc=t.getUniformLocationNoThrow(n,"value")),t.gl.uniform1f(this.valueLoc,e)}}}class E_{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,r=VT(s),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=vE("rc",s),l=vE("source",s),u=`${o[s-1]} < ${this.outputShape[s-1]}`,c=1===s?"source":`vec2(${l.slice(-2).join()})`,h=[`${r} rc = outputLoc;`,`${o[s-1]} += 1;\n       if(${u}) {\n      `,1===s?"":`}\n       rc = outputLoc;\n       ${o[s-2]} += 1;\n       if(${o[s-2]} < ${this.outputShape[s-2]}) {`,1===s?"":`  ${o[s-1]} += 1;\n         if(${u}) {`],p=1===s?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let d="";for(let e=0,t=1===s?2:4;e<t;e++)d+=`\n        ${h[e]}\n        if (${p}) {\n          result[${e}] = float(value);\n        } else {\n          ${r} source = rc - start;\n          result[${e}] = getChannel(getX(${l.join()}), ${c});\n        }\n      `;d+=1===s?"} ":"}}",this.userCode=`\n      const ${r} start = ${r}(${a});\n      const ${r} end = ${r}(${i});\n      uniform float value;\n\n      void main() {\n        ${r} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${d}\n        setOutput(result);\n      }\n    `}getCustomSetupFunc(e){return(t,n)=>{null==this.valueLoc&&(this.valueLoc=t.getUniformLocationNoThrow(n,"value")),t.gl.uniform1f(this.valueLoc,e)}}}const A_=e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{paddings:a,constantValue:i}=s,o=K().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new E_(r.shape,a,i):new T_(r.shape,a,i),l=o.getCustomSetupFunc(i);return n.runWebGLProgram(o,[r],r.dtype,l)},R_={kernelName:Yt,backendName:"webgl",kernelFunc:A_},F_=YE({opSnippet:"\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",packedOpSnippet:"\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),D_={kernelName:Jt,backendName:"webgl",kernelFunc:F_};const __={kernelName:Qt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=r.shape.length,l=[],u=x(a,r.shape);let c=u;const h=gl(c,o);let d,f=r;if(null!=h&&(f=mA({inputs:{x:r},backend:n,attrs:{perm:h}}),c=bl(c.length,o),l.push(f)),ml("prod",c,o),n.shouldExecuteOnCPU([f])){const e=n.texData.get(f.dataId).values,{outVals:t,outShape:s,outDtype:r}=cE(f.shape,f.dtype,e,c);d=n.makeTensorInfo(s,r,t)}else{const[e,t]=dl(f.shape,c),s=p(t),a=aA({inputs:{x:f},backend:n,attrs:{shape:[-1,s]}}),i=uA(a,Fs(r.dtype),"prod",n);d=aA({inputs:{x:i},backend:n,attrs:{shape:e}}),l.push(a),l.push(i)}if(i){l.push(d);const e=fl(d.shape,u);d=aA({inputs:{x:d},backend:n,attrs:{shape:e}})}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),d}},O_=e=>{const{backend:t,attrs:n}=e,{start:s,stop:r,step:a,dtype:i}=n,o=hE(s,r,a,i);return t.makeTensorInfo([o.length],i,o)},M_={kernelName:en,backendName:"webgl",kernelFunc:O_},L_=XE({opSnippet:"return 1.0 / x;"}),z_={kernelName:nn,backendName:"webgl",kernelFunc:L_},B_=XE({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n",packedOpSnippet:"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),P_={kernelName:sn,backendName:"webgl",kernelFunc:B_},W_=XE({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",packedOpSnippet:"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),V_={kernelName:cn,backendName:"webgl",kernelFunc:W_};class U_{constructor(e,t,n,s,r){this.variableNames=["A"],this.outputShape=[];const[a,i,o,l]=e;this.outputShape=[a,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n];let h;h=r?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class G_{constructor(e,t,n,s,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[a,i,o,l]=e;this.outputShape=[a,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n];let h;h=r?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]},\n          ${u[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${o}.0,\n                                     ${o}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${l-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}const H_={kernelName:ln,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:i,size:o}=s,[l,u]=o,c=K().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new G_(r.shape,l,u,a,i):new U_(r.shape,l,u,a,i);return n.runWebGLProgram(c,[r],"float32")}};class j_{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,s,r]=t,[,a,i]=e,o=[n&&a>1?s-1:s,n&&i>1?r-1:r],l=[n&&a>1?a-1:a,n&&i>1?i-1:i],u=o[0]/l[0],c=o[1]/l[1],h=1/u,p=1/c,d=2*Math.ceil(h)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${s-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${r-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const q_={kernelName:un,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:i}=s,o=new j_(a.shape,r.shape,i);return n.runWebGLProgram(o,[a],a.dtype)}};class K_{constructor(e,t,n,s,r){this.variableNames=["A"],this.outputShape=[];const[a,i,o,l]=e;this.outputShape=[a,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n],h=s?"0.5":"0.0";let p;p=r?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${p};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${h})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}const X_={kernelName:an,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:i,size:o}=s,[l,u]=o,c=new K_(r.shape,l,u,a,i);return n.runWebGLProgram(c,[r],r.dtype)}};class Y_{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,s,r]=t,[,a,i]=e,o=[n&&a>1?s-1:s,n&&i>1?r-1:r],l=[n&&a>1?a-1:a,n&&i>1?i-1:i],u=o[0]/l[0],c=o[1]/l[1],h=1/u,p=1/c,d=2*Math.ceil(h)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${o[0]}) *\n                (float(dyR) / float(${l[0]}));\n\n            float sourceFracCol =\n                float(${o[1]}) *\n                  (float(dyC) / float(${l[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${s}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${r}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const J_={kernelName:on,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:i}=s,o=new Y_(a.shape,r.shape,i);return n.runWebGLProgram(o,[a],a.dtype)}};class Z_{constructor(e,t){this.variableNames=["x"];const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=e,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${e[0]} - coord - 1));\n        }\n      `);const s=e.map(((n,s)=>(n=>-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - coords[${n}] - 1`:`coords[${n}]`)(s))).join(","),r=VT(n);this.userCode=`\n      void main() {\n        ${r} coords = getOutputCoords();\n        setOutput(getX(${s}));\n      }\n    `}}class Q_{constructor(e,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=e;const s=vE("rc",n),r=`${s[n-1]} + 1 < ${this.outputShape[n-1]}`,a=`${s[n-2]} + 1 < ${this.outputShape[n-2]}`,i=VT(n);function o(n){const s=e.map(((s,r)=>function(n,s){return-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - ${s[n]} - 1`:`${s[n]}`}(r,n)));return`getChannel(getX(${s.join(",")}), vec2(${s.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${e[0]} - rc - 1),\n            ${e[0]} - rc - 1);\n          if(${r}){\n              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),\n                ${e[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${i} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function(e){return o(e)}(s.slice())};\n          if(${r}){\n            result.g = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",o(e)}(s.slice())};\n          }\n          if(${a}) {\n            result.b = ${function(e){return e[n-2]="("+e[n-2]+" + 1)",o(e)}(s.slice())};\n            if(${r}) {\n              result.a = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",e[n-2]="("+e[n-2]+" + 1)",o(e)}(s.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}const eO={kernelName:hn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{dims:a}=s,i=r.shape.length,o=x(a,r.shape);if(0===i)return BE({inputs:{x:r},backend:n});const l=K().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Q_(r.shape,o):new Z_(r.shape,o);return n.runWebGLProgram(l,[r],r.dtype)}};class tO{constructor(e,t){this.variableNames=["Image"],this.outputShape=[];const n=e[1],s=e[2];this.outputShape=e;let r="";r="number"==typeof t?`float outputValue = ${t.toFixed(2)};`:`\n        vec3 fill = vec3(${t.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        uniform vec4 params;\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${r}\n          if(coordX >= 0 && coordX < ${s} && coordY >= 0 && coordY < ${n}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}getCustomSetupFunc(e,t,n,s){return(r,a)=>{null==this.paramsLoc&&(this.paramsLoc=r.getUniformLocationNoThrow(a,"params")),r.gl.uniform4f(this.paramsLoc,e,t,n,s)}}}const nO={kernelName:Hn,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,{radians:r,fillValue:a,center:i}=t,o=n,l=new tO(s.shape,a),[u,c]=_h(i,s.shape[1],s.shape[2]),h=l.getCustomSetupFunc(u,c,Math.sin(r),Math.cos(r));return o.runWebGLProgram(l,[s],s.dtype,h)}},sO=XE({opSnippet:"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"}),rO={kernelName:pn,backendName:"webgl",kernelFunc:sO},aO=XE({opSnippet:"return inversesqrt(x);",cpuKernelImpl:pE}),iO={kernelName:dn,backendName:"webgl",kernelFunc:aO};class oO{constructor(e,t,n,s,r,a,i=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=a;const o=VT(r.length),l=VT(a.length);let u="";1===n?u="i":2===n&&(u="i, j");const c=`getIndices(${u})`;let h="";1===s?h="i":2===s&&(h="i, coords[1]");const p=`getUpdates(${h})`,d=t>1?"strides[j]":"strides";this.userCode=`\n        ${o} strides = ${o}(${r});\n\n        void main() {\n          ${l} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${e}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${t}; j++) {\n              int index = round(${c});\n              flattenedIndex += index * ${d};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${p};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `}}const lO={kernelName:fn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:r,updates:a}=t,{shape:i}=s,{sliceRank:o,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=$a(0,r,i),p=[h/u,u];if(0===h)return n.makeTensorInfo(i,r.dtype);const d=aA({inputs:{x:r},backend:n,attrs:{shape:[l,o]}}),f=aA({inputs:{x:a},backend:n,attrs:{shape:[l,u]}}),m=n.makeTensorInfo([],"float32",new Float32Array([0])),g=new oO(l,o,d.shape.length,f.shape.length,c,p),y=n.runWebGLProgram(g,[f,d,m],f.dtype),b=aA({inputs:{x:y},backend:n,attrs:{shape:i}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(y),n.disposeIntermediateTensorInfo(m),b}};class uO{constructor(e,t,n){let s,r;if(this.variableNames=["c","a","b"],this.outputShape=t,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)r="resRC",s="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],a=[],i=[];for(let s=0;s<t.length;s++)i.push(`${n[s]}`),s<e&&a.push(`${n[s]}`);s=a.join(),r=i.join()}const a=VT(n);this.userCode=`\n      void main() {\n        ${a} resRC = getOutputCoords();\n        float cVal = getC(${s});\n        if (cVal >= 1.0) {\n          setOutput(getA(${r}));\n        } else {\n          setOutput(getB(${r}));\n        }\n      }\n    `}}const cO={kernelName:mn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:s,t:r,e:a}=t,i=new uO(s.shape.length,r.shape,r.shape.length);return n.runWebGLProgram(i,[s,r,a],Rs(r.dtype,a.dtype))}},hO=XE({opSnippet:`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = 1.7580993408473768;\n  float scale = ${Wh};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`}),pO={kernelName:gn,backendName:"webgl",kernelFunc:hO},dO=XE({opSnippet:"return 1.0 / (1.0 + exp(-1.0 * x));"}),fO={kernelName:kn,backendName:"webgl",kernelFunc:dO},mO=XE({opSnippet:"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"}),gO={kernelName:wn,backendName:"webgl",kernelFunc:mO},yO=XE({opSnippet:"if (isnan(x)) return x;\n  return sin(x);\n"}),bO={kernelName:bn,backendName:"webgl",kernelFunc:yO},xO=XE({opSnippet:"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"}),wO={kernelName:xn,backendName:"webgl",kernelFunc:xO},kO=XE({opSnippet:"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"}),vO={kernelName:vn,backendName:"webgl",kernelFunc:kO},NO={kernelName:Cn,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,paddings:i}=s;l(r.shape.length<=4,(()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet"));const o=a.reduce(((e,t)=>e*t)),u=[[0,0]];u.push(...i);for(let e=1+a.length;e<r.shape.length;++e)u.push([0,0]);const c=[],h=A_({inputs:{x:r},backend:n,attrs:{paddings:u,constantValue:0}}),p=Oh(h.shape,a,o,!1),d=Mh(p.length,a.length,!1),f=Lh(h.shape,a,o,!1),m=aA({inputs:{x:h},backend:n,attrs:{shape:p}}),g=mA({inputs:{x:m},backend:n,attrs:{perm:d}}),y=aA({inputs:{x:g},backend:n,attrs:{shape:f}});return c.push(h),c.push(m),c.push(g),c.forEach((e=>n.disposeIntermediateTensorInfo(e))),y}};const IO={kernelName:Rn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sparseIndices:r,sparseValues:a,defaultValue:i}=t,{outputShape:o}=s,{sliceRank:l,numUpdates:u,strides:c,outputSize:h}=$a(0,r,o),p=new oO(u,l,r.shape.length,a.shape.length,c,[h,1],!1),d=n.runWebGLProgram(p,[a,r,i],a.dtype),f=aA({inputs:{x:d},backend:n,attrs:{shape:o}});return n.disposeIntermediateTensorInfo(d),f}};const CO={kernelName:$n,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{numOrSizeSplits:a,axis:i}=s,o=x(i,r.shape)[0],l=hp(r,a,o),u=r.shape.length,c=new Array(u).fill(0),h=r.shape.slice();return l.map((e=>{const t=[...h];t[o]=e;const s=hR({inputs:{x:r},backend:n,attrs:{begin:c,size:t}});return c[o]+=e,s}))}},$O=XE({opSnippet:"return sqrt(x);"}),SO={kernelName:Nn,backendName:"webgl",kernelFunc:$O},TO={kernelName:En,backendName:"webgl",kernelFunc:XE({opSnippet:"return x * x;"})},EO="return (a - b) * (a - b);",AO=YE({opSnippet:EO,packedOpSnippet:EO}),RO={kernelName:Tn,backendName:"webgl",kernelFunc:AO};const FO={kernelName:Un,backendName:"webgl",kernelFunc:function({inputs:e,attrs:t,backend:n}){const{x:s}=e,r=`if (isnan(x)) return x;\n    return x > 0.0 ? 1.0 : float(${t.alpha});\n  `,a=new EE(s.shape,r);return n.runWebGLProgram(a,[s],s.dtype)}};class DO{constructor(e,t,n){this.variableNames=["x"],this.outputShape=n;const s=n.length,r=VT(n.length),a=VT(n.length);let i="";if(1===s)i="coords * strides + begin";else{let e=0;i=n.map(((t,s)=>(e++,1===n.length?`coords * strides[${s}] + begin[${s}]`:`coords[${e-1}] * strides[${s}] + begin[${s}]`))).join(",")}this.userCode=`\n      ${r} begin = ${r}(${e});\n      ${r} strides = ${r}(${t});\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${i}));\n      }\n    `}}const _O={kernelName:Fn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,end:i,strides:o,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:h,shrinkAxisMask:p}=s,{nonStrided:d,$begin:f,$strides:m,size:g,newShape:y,outShape:b}=Ua(r.shape,a,i,o,l,u,c,h,p),x=aA({inputs:{x:r},backend:n,attrs:{shape:y}});let w;if(d){const e=hR({inputs:{x:x},backend:n,attrs:{begin:f,size:g}});w=aA({inputs:{x:e},backend:n,attrs:{shape:b}}),n.disposeIntermediateTensorInfo(e)}else if(b.some((e=>0===e)))w=n.makeTensorInfo(b,r.dtype,[]);else{if(n.shouldExecuteOnCPU([x])){const e=n.texData.get(x.dataId).values,t=jr(x.shape,x.dtype,e),s=mE(b,t,m,f);w=n.makeTensorInfo(b,x.dtype,s.values)}else{const e=new DO(f,m,b);w=n.runWebGLProgram(e,[x],x.dtype)}}const k=aA({inputs:{x:w},backend:n,attrs:{shape:b}});return n.disposeIntermediateTensorInfo(x),n.disposeIntermediateTensorInfo(w),k}},OO=XE({opSnippet:"return tan(x);"}),MO={kernelName:Dn,backendName:"webgl",kernelFunc:OO},LO=XE({opSnippet:"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"}),zO={kernelName:_n,backendName:"webgl",kernelFunc:LO};class BO{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[s]*t[s];this.outputShape=n,this.rank=n.length;const s=VT(this.rank),r=function(e){const t=e.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${e[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],s=[];for(let t=0;t<e.length;t++)s.push(`imod(${n[t]}, ${e[t]})`);return s.join()}(e);this.userCode=`\n      void main() {\n        ${s} resRC = getOutputCoords();\n        setOutput(getA(${r}));\n      }\n    `}}function PO(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reps:a}=s;if("string"===r.dtype){const e=n.readSync(r.dataId).map((e=>ls(e))),t=jr(r.shape,r.dtype,e),s=yE(t,a);return n.makeTensorInfo(s.shape,s.dtype,s.values)}const i=new BO(r.shape,a);return n.runWebGLProgram(i,[r],r.dtype)}const WO={kernelName:On,backendName:"webgl",kernelFunc:PO};const VO={kernelName:Mn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{k:a,sorted:i}=s,o=n.readSync(r.dataId),[l,u]=bE(o,r.shape,r.dtype,a,i);return[n.makeTensorInfo(l.shape,l.dtype,l.values),n.makeTensorInfo(u.shape,u.dtype,u.values)]}};class UO{constructor(e,t,n,s,r,a){this.variableNames=["Image","Transforms"],this.outputShape=a;const i="nearest"===n?1:2;let o;switch(s){case"constant":o=1;break;case"reflect":o=2;break;case"wrap":o=3;break;case"nearest":o=4;break;default:o=1}this.userCode=`\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${o} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${o} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${o} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${e} && 0 <= coordX && coordX < ${t}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${r});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${r});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${t}));\n                float mapY = mapCoord(inY, float(${e}));\n\n                if (${i} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `}}const GO={kernelName:Ln,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{image:r,transforms:a}=t,{interpolation:i,fillMode:o,fillValue:l,outputShape:u}=s,[c,h,p,d]=r.shape,[f,m]=null!=u?u:[h,p],g=new UO(h,p,i,o,l,[c,f,m,d]);return n.runWebGLProgram(g,[r,a],"float32")}};const HO={kernelName:Bn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{axis:r}=n,{x:a}=t;lT(a,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const i=s.readSync(a.dataId),{outputValues:o,outputShape:l,indices:u}=wE(i,r,a.shape,a.dtype);return[s.makeTensorInfo(l,a.dtype,o),s.makeTensorInfo([u.length],"int32",u)]}};const jO={kernelName:Pn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{value:r}=t;let{axis:a}=s;a<0&&(a+=r.shape.length);const i=r,o=i.shape.length,l=r.shape[a],u=new Array(o-1);let c=0;for(let e=0;e<o;e++)e!==a&&(u[c++]=i.shape[e]);const h=[],p=new Array(o).fill(0),d=i.shape.slice();d[a]=1;const f=new Array(l);for(let e=0;e<f.length;e++){p[a]=e;const t=hR({inputs:{x:i},backend:n,attrs:{begin:p,size:d}}),s=aA({inputs:{x:t},backend:n,attrs:{shape:u}});f[e]=s,h.push(t)}return h.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}};class qO{constructor(e,t){this.variableNames=["x","segmentIds"];const n=e.windowSize,s=e.batchSize,r=e.inSize,a=e.numSegments,i=a*Math.ceil(r/n);this.outputShape=[s,i];const o=4*Math.floor(n/4),l=n%4,u="\n        sumValue += dot(values, segFilter);\n    ";let c="";r%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return initializationValue;\n        }\n      `);let h="";r%n>0&&(h=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${h}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${a})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${a})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${u}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${u}\n        } else if (${2===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${u}\n        } else if (${3===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${u}\n        }\n        setOutput(sumValue);\n      }\n    `}}const KO=[MD,zD,bA,wA,vA,IA,SA,AA,RA,FA,zA,BA,WA,UA,qA,HA,XA,QA,ZA,nR,sR,rR,oR,dR,fR,xR,vR,CR,TR,VE,LR,KR,XR,UR,JR,ZR,YR,eF,nF,rF,lF,uF,hF,yF,bF,fF,wF,vF,NF,CF,$F,TF,AF,DF,OF,zF,WF,GF,jF,XF,JF,eD,nD,sD,aD,oD,uD,hD,PE,pD,DR,fD,gD,bD,HE,wD,vD,ND,SD,CD,ED,RD,DD,PD,GD,UD,qD,KD,XD,VD,YD,JD,QD,n_,r_,d_,rA,m_,y_,x_,k_,gR,N_,$_,S_,R_,D_,KE,__,M_,bR,o_,z_,V_,P_,iA,H_,q_,X_,J_,eO,nO,rO,iO,lO,cO,pO,fO,gO,bO,wO,pR,p_,vO,NO,IO,CO,SO,TO,RO,FO,_O,c_,fA,MO,zO,WO,VO,GO,gA,HO,jO,{kernelName:Wn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,segmentIds:a}=t,{numSegments:i}=s,o=r.shape.length,l=[];let u=0;const c=gl([u],o);let h=r;null!=c&&(h=mA({inputs:{x:r},backend:n,attrs:{perm:c}}),l.push(h),u=bl(1,o)[0]);const d=dp(h.shape,u,i),f=p([h.shape[u]]),m=aA({inputs:{x:h},backend:n,attrs:{shape:[-1,f]}});l.push(m);const g=Fs(r.dtype),y=(e,t,s,r,a)=>{const i=e.shape[0],o=e.shape[1],u=pp(o,a),c=new qO({windowSize:u,inSize:o,batchSize:i,numSegments:a},t),h=n.compileAndRun(c,[e,s],r);if(l.push(h),h.shape[1]===a)return h;const p=O_({backend:n,attrs:{start:0,stop:a,step:1,dtype:"float32"}}),d=PO({inputs:{x:p},backend:n,attrs:{reps:[o/u]}});l.push(p),l.push(d);return y(h,t,d,r,a)},b=aA({inputs:{x:y(m,"unsortedSegmentSum",a,g,i)},backend:n,attrs:{shape:d}});let x=b;if(null!=c){l.push(b);const e=yl(c);x=mA({inputs:{x:x},backend:n,attrs:{perm:e}})}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),x}},C_];for(const e of KO)es(e);const XO={"tfjs-core":ei,"tfjs-backend-cpu":"3.4.0","tfjs-backend-webgl":"3.4.0","tfjs-data":Qk,"tfjs-layers":_g,"tfjs-converter":Yw,tfjs:"3.4.0"};e.Abs=Z,e.Acos=Q,e.Acosh=ee,e.AdadeltaOptimizer=wh,e.AdagradOptimizer=kh,e.AdamOptimizer=vh,e.AdamaxOptimizer=Nh,e.Add=te,e.AddN=ne,e.All=se,e.Any=re,e.ArgMax=ae,e.ArgMin=ie,e.Asin=oe,e.Asinh=le,e.Atan=ue,e.Atan2=he,e.Atanh=ce,e.AvgPool=pe,e.AvgPool3D=fe,e.AvgPool3DGrad=me,e.AvgPoolGrad=de,e.BatchMatMul=ge,e.BatchToSpaceND=ye,e.Bincount=be,e.BroadcastTo=xe,e.Callback=Dx,e.CallbackList=jm,e.Cast=we,e.Ceil=ke,e.ClipByValue=ve,e.Complex=Ne,e.ComplexAbs=Ie,e.Concat=Ce,e.Conv2D=$e,e.Conv2DBackpropFilter=Se,e.Conv2DBackpropInput=Te,e.Conv3D=Ee,e.Conv3DBackpropFilterV2=Ae,e.Conv3DBackpropInputV2=Re,e.Cos=Fe,e.Cosh=De,e.CropAndResize=Oe,e.Cumsum=_e,e.CustomCallback=Xm,e.DataStorage=t,e.DenseBincount=Me,e.DepthToSpace=Le,e.DepthwiseConv2dNative=ze,e.DepthwiseConv2dNativeBackpropFilter=Be,e.DepthwiseConv2dNativeBackpropInput=Pe,e.Diag=We,e.Dilation2D=Ve,e.Dilation2DBackpropFilter=Ge,e.Dilation2DBackpropInput=Ue,e.EarlyStopping=Mx,e.Einsum=je,e.Elu=qe,e.EluGrad=Ke,e.Environment=j,e.Equal=Ye,e.Erf=Xe,e.Exp=Je,e.ExpandDims=Ze,e.Expm1=Qe,e.FFT=et,e.Fill=tt,e.FlipLeftRight=nt,e.Floor=st,e.FloorDiv=rt,e.FromPixels=Gn,e.FusedBatchNorm=at,e.FusedConv2D=qn,e.FusedDepthwiseConv2D=Kn,e.GatherNd=ot,e.GatherV2=it,e.GraphModel=Xw,e.Greater=lt,e.GreaterEqual=ut,e.History=Km,e.IFFT=ht,e.Identity=ct,e.Imag=pt,e.InputSpec=Dm,e.IsFinite=dt,e.IsInf=ft,e.IsNan=mt,e.KernelBackend=n,e.LRN=$t,e.LRNGrad=St,e.LayerVariable=Am,e.LayersModel=ly,e.LeakyRelu=gt,e.Less=yt,e.LessEqual=bt,e.LinSpace=xt,e.Log=wt,e.Log1p=kt,e.LogSoftmax=Ct,e.LogicalAnd=vt,e.LogicalNot=Nt,e.LogicalOr=It,e.Max=Tt,e.MaxPool=At,e.MaxPool3D=Ft,e.MaxPool3DGrad=Dt,e.MaxPoolGrad=Rt,e.MaxPoolWithArgmax=_t,e.Maximum=Et,e.Mean=Ot,e.Min=Mt,e.Minimum=Lt,e.MirrorPad=zt,e.Mod=Bt,e.MomentumOptimizer=Ch,e.Multinomial=Pt,e.Multiply=Wt,e.Neg=Vt,e.NonMaxSuppressionV3=Gt,e.NonMaxSuppressionV4=Ht,e.NonMaxSuppressionV5=jt,e.NotEqual=Ut,e.OP_SCOPE_SUFFIX=er,e.OneHot=Kt,e.OnesLike=qt,e.Optimizer=xh,e.Pack=Xt,e.PadV2=Yt,e.Pool="Pool",e.Pow=Jt,e.Prelu=Zt,e.Prod=Qt,e.RMSPropOptimizer=$h,e.RNN=hb,e.Range=en,e.Real=tn,e.RealDiv=He,e.Reciprocal=nn,e.Relu=sn,e.Relu6=cn,e.Reshape=rn,e.ResizeBilinear=ln,e.ResizeBilinearGrad=un,e.ResizeNearestNeighbor=an,e.ResizeNearestNeighborGrad=on,e.Reverse=hn,e.RotateWithOffset=Hn,e.Round=pn,e.Rsqrt=dn,e.SGDOptimizer=Ih,e.ScatterNd=fn,e.Select=mn,e.Selu=gn,e.Sequential=hy,e.Sigmoid=kn,e.Sign=wn,e.Sin=bn,e.Sinh=xn,e.Slice=yn,e.Softmax=Sn,e.Softplus=vn,e.SpaceToBatchND=Cn,e.SparseToDense=Rn,e.SplitV=$n,e.Sqrt=Nn,e.Square=En,e.SquaredDifference=Tn,e.Step=Un,e.StridedSlice=Fn,e.Sub=An,e.Sum=In,e.SymbolicTensor=_m,e.Tan=Dn,e.Tanh=_n,e.Tensor=vs,e.TensorBuffer=bs,e.Tile=On,e.TopK=Mn,e.Transform=Ln,e.Transpose=zn,e.Unique=Bn,e.Unpack=Pn,e.UnsortedSegmentSum=Wn,e.Variable=Is,e.ZerosLike=Vn,e._FusedMatMul=jn,e.abs=fi,e.acos=mi,e.acosh=gi,e.add=ci,e.addN=yi,e.all=bi,e.any=xi,e.argMax=wi,e.argMin=ki,e.asin=vi,e.asinh=Ni,e.atan=Ii,e.atan2=Ci,e.atanh=$i,e.avgPool=Wi,e.avgPool3d=Vi,e.backend=ui,e.backend_util=bp,e.basicLSTMCell=qi,e.batchNorm=Xi,e.batchNorm2d=Yi,e.batchNorm3d=Ji,e.batchNorm4d=Zi,e.batchToSpaceND=Ki,e.bincount=Qi,e.booleanMaskAsync=ic,e.broadcastTo=eo,e.browser=ka,e.buffer=jr,e.callbacks=Lx,e.cast=qr,e.ceil=to,e.clipByValue=no,e.clone=Kr,e.complex=nr,e.concat=Ui,e.concat1d=so,e.concat2d=ro,e.concat3d=ao,e.concat4d=io,e.constraints=ff,e.conv1d=lo,e.conv2d=oo,e.conv2dTranspose=co,e.conv3d=ho,e.conv3dTranspose=fo,e.copyRegisteredKernels=function(e,t){Qn(e).forEach((e=>{es(Object.assign({},e,{backendName:t}))}))},e.cos=mo,e.cosh=go,e.cosineWindow=mc,e.cumsum=yo,e.customGrad=nl,e.data=ev,e.denseBincount=bo,e.deprecationWarn=ti,e.depthToSpace=xo,e.depthwiseConv2d=wo,e.deregisterOp=function(e){delete Px[e]},e.device_util=qs,e.diag=ko,e.dilation2d=vo,e.disableDeprecationWarnings=function(){K().set("DEPRECATION_WARNINGS_ENABLED",!1),console.warn("TensorFlow.js deprecation warnings have been disabled.")},e.dispose=ai,e.disposeVariables=function(){Us.disposeVariables()},e.div=pi,e.divNoNan=Eo,e.dot=Ao,e.dropout=dc,e.einsum=Ro,e.elu=Fo,e.enableDebugMode=function(){K().set("DEBUG",!0)},e.enableProdMode=function(){K().set("PROD",!0)},e.enclosingPowerOfTwo=fc,e.engine=ni,e.env=K,e.equal=$o,e.erf=Do,e.exp=_o,e.expandDims=Oo,e.expm1=Mo,e.eye=zo,e.fft=zu,e.fill=Bo,e.findBackend=function(e){return Us.findBackend(e)},e.findBackendFactory=function(e){return Us.findBackendFactory(e)},e.floor=Po,e.floorDiv=hi,e.fused=Sc,e.gather=Wo,e.gatherND=pc,e.gather_util=Na,e.getBackend=function(){return Us.backendName},e.getGradient=Zn,e.getKernel=Jn,e.getKernelsForBackend=Qn,e.grad=function(e){return l(D(e),(()=>"The f passed in grad(f) must be a function")),(t,n)=>{const s=Zs(t,"x","tf.grad","string_or_numeric"),r=null!=n?Zs(n,"dy","tf.grad"):null;return Us.tidy((()=>{const{value:t,grads:n}=Us.gradients((()=>e(s)),[s],r);return null!=r&&u(t.shape,r.shape,"The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"),sl(n),n[0]}))}},e.grads=function(e){return l(D(e),(()=>"The f passed in grads(f) must be a function")),(t,n)=>{l(Array.isArray(t),(()=>"The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s"));const s=Qs(t,"args","tf.grads","string_or_numeric"),r=null!=n?Zs(n,"dy","tf.grads"):null;return Us.tidy((()=>{const{value:t,grads:n}=Us.gradients((()=>e(...s)),s,r);return null!=r&&u(t.shape,r.shape,"The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),sl(n),n}))}},e.greater=Vo,e.greaterEqual=Uo,e.ifft=Bu,e.imag=Go,e.image=gh,e.inTopKAsync=gc,e.initializers=xm,e.input=py,e.io=ca,e.irfft=Pu,e.isFinite=Ho,e.isInf=jo,e.isNaN=qo,e.keep=ii,e.kernel_impls=xp,e.layers=Ex,e.leakyRelu=Ko,e.less=Xo,e.lessEqual=Yo,e.linalg=yh,e.linspace=Jo,e.loadGraphModel=async function(e,t={}){if(null==e)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==t&&(t={}),t.fromTFHub&&null==e.load&&(e.endsWith("/")||(e+="/"),e=`${e}model.json?tfjs-format=file`);const n=new Xw(e,t);return await n.load(),n},e.loadLayersModel=function(e,t){return null==t&&(t={}),cy(e,t)},e.localResponseNormalization=Zo,e.log=Qo,e.log1p=el,e.logSigmoid=il,e.logSoftmax=cl,e.logSumExp=xl,e.logicalAnd=wl,e.logicalNot=kl,e.logicalOr=vl,e.logicalXor=Nl,e.losses=bh,e.matMul=ha,e.math=ma,e.max=ol,e.maxPool=Il,e.maxPool3d=Cl,e.maxPoolWithArgmax=$l,e.maximum=Sl,e.mean=Tl,e.memory=si,e.meshgrid=function(e,t,{indexing:n="xy"}={}){if("xy"!==n&&"ij"!==n)throw new TypeError(`${n} is not a valid third argument to meshgrid`);if(void 0===e)return[];let s=Zs(e,"x","meshgrid",e instanceof vs?e.dtype:"float32");if(void 0===t)return[s];let r=Zs(t,"y","meshgrid",t instanceof vs?t.dtype:"float32");const a=p(s.shape),i=p(r.shape);return"xy"===n?(s=Pi(s,[1,-1]),r=Pi(r,[-1,1]),[ha(Al([i,1],s.dtype),s),ha(r,Al([1,a],r.dtype))]):(s=Pi(s,[-1,1]),r=Pi(r,[1,-1]),[ha(s,Al([1,i],s.dtype)),ha(Al([a,1],r.dtype),r)])},e.metrics=Ax,e.min=Rl,e.minimum=Fl,e.mirrorPad=Dl,e.mod=_l,e.model=function(e){return new ly(e)},e.models=Rx,e.moments=Ml,e.movingAverage=uc,e.mul=di,e.multiRNNCell=Ll,e.multinomial=zl,e.neg=rl,e.nextFrame=Ah,e.norm=lc,e.notEqual=Bl,e.oneHot=pa,e.ones=Al,e.onesLike=Pl,e.op=tr,e.outerProduct=Wl,e.pad=Vl,e.pad1d=Ul,e.pad2d=Gl,e.pad3d=Hl,e.pad4d=jl,e.pool=Kl,e.pow=Xl,e.prelu=Yl,e.print=Xr,e.prod=Jl,e.profile=function(e){return Us.profile(e)},e.rand=Zl,e.randomGamma=hu,e.randomNormal=pu,e.randomUniform=du,e.range=fu,e.ready=function(){return Us.ready()},e.real=mu,e.reciprocal=gu,e.registerBackend=li,e.registerCallbackConstructor=function(e,t){Jm.registerCallbackConstructor(e,t)},e.registerGradient=ts,e.registerKernel=es,e.registerOp=function(e,t){const n={tfOpName:e,category:"custom",inputs:[],attrs:[],customExecutor:t};Px[e]=n},e.regularizers=Fx,e.relu=yu,e.relu6=bu,e.removeBackend=function(e){Us.removeBackend(e)},e.reshape=Pi,e.reverse=xu,e.reverse1d=wu,e.reverse2d=ku,e.reverse3d=vu,e.reverse4d=Nu,e.rfft=Vu,e.round=Iu,e.rsqrt=Cu,e.scalar=$u,e.scatterND=cc,e.scatter_util=Sa,e.selu=Su,e.separableConv2d=Tu,e.sequential=function(e){return new hy(e)},e.serialization=Ka,e.setBackend=oi,e.setPlatform=function(e,t){K().setPlatform(e,t)},e.setdiff1dAsync=Eu,e.sigmoid=Gi,e.sign=Au,e.signal=mh,e.sin=Ru,e.sinh=Fu,e.slice=Hi,e.slice1d=Du,e.slice2d=_u,e.slice3d=Ou,e.slice4d=Mu,e.slice_util=Ga,e.softmax=Lu,e.softplus=al,e.spaceToBatchND=ql,e.sparseToDense=hc,e.spectral=fh,e.split=Wu,e.sqrt=Uu,e.square=Ol,e.squaredDifference=Gu,e.squeeze=Hu,e.stack=ju,e.step=qu,e.stridedSlice=Ku,e.sub=ll,e.sum=ul,e.sumOutType=Fs,e.tan=Xu,e.tanh=ji,e.tensor=rr,e.tensor1d=Yu,e.tensor2d=Ju,e.tensor3d=ga,e.tensor4d=function(e,t,n){if(c(e),null!=t&&4!==t.length)throw new Error("tensor4d() requires shape to have four numbers");const s=Xs(e,n);if(4!==s.length&&1!==s.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return sr(e,t,s,n)},e.tensor5d=function(e,t,n){if(c(e),null!=t&&5!==t.length)throw new Error("tensor5d() requires shape to have five numbers");const s=Xs(e,n);if(5!==s.length&&1!==s.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return sr(e,t,s,n)},e.tensor6d=function(e,t,n){if(c(e),null!=t&&6!==t.length)throw new Error("tensor6d() requires shape to have six numbers");const s=Xs(e,n);if(6!==s.length&&1!==s.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return sr(e,t=t||s,s,n)},e.tensor_util=zs,e.test_util=Qa,e.tidy=ri,e.tile=Lo,e.time=function(e){return Us.time(e)},e.topk=Zu,e.train=Th,e.transpose=da,e.truncatedNormal=Qu,e.unique=ec,e.unregisterGradient=function(e){if(!Yn.has(e))throw new Error(`The gradient '${e}' for backend is not registered`);Yn.delete(e)},e.unregisterKernel=function(e,t){const n=ns(e,t);if(!Xn.has(n))throw new Error(`The kernel '${e}' for backend '${t}' is not registered`);Xn.delete(n)},e.unsortedSegmentSum=tc,e.unstack=nc,e.upcastType=Rs,e.util=us,e.valueAndGrad=function(e){return l(D(e),(()=>"The f passed in valueAndGrad(f) must be a function")),(t,n)=>{l(t instanceof vs,(()=>"The x passed in valueAndGrad(f)(x) must be a tensor")),l(null==n||n instanceof vs,(()=>"The dy passed in valueAndGrad(f)(x, dy) must be a tensor"));const{grads:s,value:r}=Us.gradients((()=>e(t)),[t],n);return sl(s),{grad:s[0],value:r}}},e.valueAndGrads=function(e){return l(D(e),(()=>"The f passed in valueAndGrads(f) must be a function")),(t,n)=>{l(Array.isArray(t)&&t.every((e=>e instanceof vs)),(()=>"The args passed in valueAndGrads(f)(args) must be array of tensors")),l(null==n||n instanceof vs,(()=>"The dy passed in valueAndGrads(f)(args, dy) must be a tensor"));const s=Us.gradients((()=>e(...t)),t,n);return null!=n&&u(s.value.shape,n.shape,"The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),sl(s.grads),s}},e.variable=sc,e.variableGrads=tl,e.version=XO,e.version_converter=Yw,e.version_core=ei,e.version_layers=_g,e.where=So,e.whereAsync=ac,e.zeros=El,e.zerosLike=To,Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=tf.es2017.min.js.map
