{"version":3,"file":"ExponentCameraManager.web.js","sourceRoot":"","sources":["../src/ExponentCameraManager.web.ts"],"names":[],"mappings":"AAAA,OAAO,EAA+C,UAAU,EAAE,MAAM,gBAAgB,CAAC;AAEzF,OAAO,EACL,eAAe,EACf,0BAA0B,EAC1B,2BAA2B,GAC5B,MAAM,uBAAuB,CAAC;AAE/B,eAAe;IACb,IAAI,IAAI;QACN,OAAO,uBAAuB,CAAC;IACjC,CAAC;IACD,IAAI,IAAI;QACN,OAAO;YACL,IAAI,EAAE,MAAM;YACZ,KAAK,EAAE,OAAO;SACf,CAAC;IACJ,CAAC;IACD,IAAI,SAAS;QACX,OAAO;YACL,EAAE,EAAE,IAAI;YACR,GAAG,EAAE,KAAK;YACV,IAAI,EAAE,MAAM;YACZ,KAAK,EAAE,OAAO;SACf,CAAC;IACJ,CAAC;IACD,IAAI,SAAS;QACX,OAAO;YACL,EAAE,EAAE,IAAI;YACR,GAAG,EAAE,KAAK;YACV,IAAI,EAAE,MAAM;YACZ,UAAU,EAAE,YAAY;SACzB,CAAC;IACJ,CAAC;IACD,IAAI,YAAY;QACd,OAAO;YACL,IAAI,EAAE,MAAM;YACZ,UAAU,EAAE,YAAY;YACxB,MAAM,EAAE,QAAQ;SACjB,CAAC;IACJ,CAAC;IACD,IAAI,YAAY;QACd,OAAO,EAAE,CAAC;IACZ,CAAC;IACD,KAAK,CAAC,gBAAgB;QACpB,OAAO,eAAe,EAAE,CAAC;IAC3B,CAAC;IACD,KAAK,CAAC,WAAW,CACf,OAA6B,EAC7B,MAAyB;QAEzB,OAAO,MAAM,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;IAC3C,CAAC;IACD,KAAK,CAAC,YAAY,CAAC,MAAyB;QAC1C,MAAM,MAAM,CAAC,YAAY,EAAE,CAAC;IAC9B,CAAC;IACD,KAAK,CAAC,aAAa,CAAC,MAAyB;QAC3C,OAAO,MAAM,MAAM,CAAC,aAAa,EAAE,CAAC;IACtC,CAAC;IACD,KAAK,CAAC,4BAA4B;QAChC,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,gBAAgB;YAAE,OAAO,EAAE,CAAC;QAE9E,MAAM,OAAO,GAAG,MAAM,SAAS,CAAC,YAAY,CAAC,gBAAgB,EAAE,CAAC;QAEhE,MAAM,KAAK,GAAsB,MAAM,OAAO,CAAC,GAAG,CAAC;YACjD,CAAC,MAAM,2BAA2B,CAAC,OAAO,CAAC,CAAC,IAAI,UAAU,CAAC,KAAK;YAChE,CAAC,MAAM,0BAA0B,EAAE,CAAC,IAAI,UAAU,CAAC,IAAI;SACxD,CAAC,CAAC;QAEH,OAAO,KAAK,CAAC,MAAM,CAAC,OAAO,CAAa,CAAC;IAC3C,CAAC;IACD,KAAK,CAAC,wBAAwB,CAAC,KAAa,EAAE,MAAyB;QACrE,OAAO,MAAM,MAAM,CAAC,wBAAwB,CAAC,KAAK,CAAC,CAAC;IACtD,CAAC;CAKF,CAAC","sourcesContent":["import { CameraCapturedPicture, CameraPictureOptions, CameraType } from './Camera.types';\nimport { ExponentCameraRef } from './ExponentCamera.web';\nimport {\n  canGetUserMedia,\n  isBackCameraAvailableAsync,\n  isFrontCameraAvailableAsync,\n} from './WebUserMediaManager';\n\nexport default {\n  get name(): string {\n    return 'ExponentCameraManager';\n  },\n  get Type() {\n    return {\n      back: 'back',\n      front: 'front',\n    };\n  },\n  get FlashMode() {\n    return {\n      on: 'on',\n      off: 'off',\n      auto: 'auto',\n      torch: 'torch',\n    };\n  },\n  get AutoFocus() {\n    return {\n      on: 'on',\n      off: 'off',\n      auto: 'auto',\n      singleShot: 'singleShot',\n    };\n  },\n  get WhiteBalance() {\n    return {\n      auto: 'auto',\n      continuous: 'continuous',\n      manual: 'manual',\n    };\n  },\n  get VideoQuality() {\n    return {};\n  },\n  async isAvailableAsync(): Promise<boolean> {\n    return canGetUserMedia();\n  },\n  async takePicture(\n    options: CameraPictureOptions,\n    camera: ExponentCameraRef\n  ): Promise<CameraCapturedPicture> {\n    return await camera.takePicture(options);\n  },\n  async pausePreview(camera: ExponentCameraRef): Promise<void> {\n    await camera.pausePreview();\n  },\n  async resumePreview(camera: ExponentCameraRef): Promise<void> {\n    return await camera.resumePreview();\n  },\n  async getAvailableCameraTypesAsync(): Promise<string[]> {\n    if (!canGetUserMedia() || !navigator.mediaDevices.enumerateDevices) return [];\n\n    const devices = await navigator.mediaDevices.enumerateDevices();\n\n    const types: (string | null)[] = await Promise.all([\n      (await isFrontCameraAvailableAsync(devices)) && CameraType.front,\n      (await isBackCameraAvailableAsync()) && CameraType.back,\n    ]);\n\n    return types.filter(Boolean) as string[];\n  },\n  async getAvailablePictureSizes(ratio: string, camera: ExponentCameraRef): Promise<string[]> {\n    return await camera.getAvailablePictureSizes(ratio);\n  },\n\n  // TODO(Bacon): Is video possible?\n  // record(options): Promise\n  // stopRecording(): Promise<void>\n};\n"]}