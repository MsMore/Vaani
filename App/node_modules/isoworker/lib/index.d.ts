import { WorkerTransfer } from './node-worker';
export declare type Registry = Record<string, boolean>;
export declare type Context = [
    string,
    Record<string, unknown>,
    WorkerTransfer[],
    Registry
];
export declare type DepList = () => unknown[];
/**
 * Creates a context for a worker execution environment
 * @param depList The dependencies in the worker environment
 * @returns An environment that can be built to a Worker. Note the fourth
 * element of the tuple, the global element registry, is currently not useful.
 */
export declare function createContext(depList: DepList): Context;
/**
 * A workerized function (from arguments and return type)
 */
export declare type Workerized<A extends unknown[], R> = ((...args: [...A, (err: Error, res: R) => unknown]) => void) & {
    /**
     * Kills the worker associated with this workerized function.
     * Subsequent calls will fail.
     */
    close(): void;
};
/**
 * Converts a function with dependencies into a worker
 * @param fn The function to workerize
 * @param deps The dependencies to add. This should include sub-dependencies.
 *             For example, if you are workerizing a function that calls
 *             another function, put any dependencies of the other function
 *             here as well.
 * @returns A function that accepts parameters and, as the last argument, a
 *          callback to use when the worker returns.
 */
export declare function workerize<TA extends unknown[], TR>(fn: (...args: TA) => TR, deps: DepList): Workerized<TA, TR>;
