!function(e,n){"object"==typeof exports&&"undefined"!=typeof module?n(exports,require("react"),require("isoworker"),require("dequal")):"function"==typeof define&&define.amd?define(["exports","react","isoworker","dequal"],n):n((e=e||self).useworker={},e.react,e.isoworker,e.dequal)}(this,function(e,n,r,t){n=n&&Object.prototype.hasOwnProperty.call(n,"default")?n.default:n,r=r&&Object.prototype.hasOwnProperty.call(r,"default")?r.default:r,t=t&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t;var a=function(e){return function(n){return Promise.resolve(e.fn.apply(e,n.data[0])).then(function(n){var r,t="auto"===e.transferable&&(r=n,"ArrayBuffer"in self&&r instanceof ArrayBuffer||"MessagePort"in self&&r instanceof MessagePort||"ImageBitmap"in self&&r instanceof ImageBitmap||"OffscreenCanvas"in self&&r instanceof OffscreenCanvas)?[n]:[];postMessage(["SUCCESS",n],t)}).catch(function(e){postMessage(["ERROR",e])})}},o=function(e,n,t,o){var u=r.createContext(o)[0],i="\n    "+function(e){return 0===e.length?"":"importScripts('"+e.map(function(e){return""+e}).toString()+"')"}(n)+";\n    "+u+"\n    onmessage=("+a+")({\n      fn: ("+e+"),\n      transferable: '"+t+"'\n    })\n  ",c=new Blob([i],{type:"text/javascript"});return URL.createObjectURL(c)};!function(e){e.PENDING="PENDING",e.SUCCESS="SUCCESS",e.RUNNING="RUNNING",e.ERROR="ERROR",e.TIMEOUT_EXPIRED="TIMEOUT_EXPIRED"}(e.WORKER_STATUS||(e.WORKER_STATUS={}));var u,i=e.WORKER_STATUS;!function(e){e.AUTO="auto",e.NONE="none"}(u||(u={}));var c={timeout:void 0,remoteDependencies:[],autoTerminate:!0,transferable:u.AUTO,localDependencies:function(){return[]}};e.useWorker=function(e,r){void 0===r&&(r=c);var a,s,l,f=n.useState(i.PENDING),d=f[0],m=f[1],p=n.useRef(),v=n.useRef(!1),R=n.useRef({}),w=n.useRef(),E=n.useCallback(function(e){v.current=e===i.RUNNING,m(e)},[]),O=n.useCallback(function(){var e;(null===(e=p.current)||void 0===e?void 0:e._url)&&(p.current.terminate(),URL.revokeObjectURL(p.current._url),R.current={},p.current=void 0,window.clearTimeout(w.current))},[]),T=n.useCallback(function(e){(null!=r.autoTerminate?r.autoTerminate:c.autoTerminate)&&O(),E(e)},[r.autoTerminate,O,E]),S=(a=function(){var n=r.remoteDependencies,t=r.timeout,a=void 0===t?c.timeout:t,u=r.transferable,s=r.localDependencies,l=o(e,void 0===n?c.remoteDependencies:n,void 0===u?c.transferable:u,void 0===s?c.localDependencies:s),f=new Worker(l);return f._url=l,f.onmessage=function(e){var n,r,t,a,o=e.data,u=o[1];switch(o[0]){case i.SUCCESS:null===(n=(r=R.current).resolve)||void 0===n||n.call(r,u),T(i.SUCCESS);break;default:null===(t=(a=R.current).reject)||void 0===t||t.call(a,u),T(i.ERROR)}},f.onerror=function(e){var n,r;null===(n=(r=R.current).reject)||void 0===n||n.call(r,e),T(i.ERROR)},a&&(w.current=window.setTimeout(function(){O(),E(i.TIMEOUT_EXPIRED)},a)),f},l=n.useRef(s=[e,r,O]),t(l.current,s)||(l.current=s),n.useCallback(a,l.current)),b=n.useCallback(function(){var e=[].slice.call(arguments),n=r,t=n.transferable,a=void 0===t?c.transferable:t;return new Promise(function(n,r){var t,o;R.current=((t={}).resolve=n,t.reject=r,t);var c=a===u.AUTO?e.filter(function(e){return"ArrayBuffer"in window&&e instanceof ArrayBuffer||"MessagePort"in window&&e instanceof MessagePort||"ImageBitmap"in window&&e instanceof ImageBitmap||"OffscreenCanvas"in window&&e instanceof OffscreenCanvas}):[];null===(o=p.current)||void 0===o||o.postMessage([[].concat(e)],c),E(i.RUNNING)})},[E]),U=n.useCallback(function(){var e=null!=r.autoTerminate?r.autoTerminate:c.autoTerminate;return v.current?(console.error("[useWorker] You can only run one instance of the worker at a time, if you want to run more than one in parallel, create another instance with the hook useWorker(). Read more: https://github.com/alewin/useWorker"),Promise.reject()):(!e&&p.current||(p.current=S()),b.apply(void 0,[].slice.call(arguments)))},[r.autoTerminate,S,b]),C={status:d,kill:O};return n.useEffect(function(){return function(){O()}},[O]),[U,C]}});
//# sourceMappingURL=index.umd.js.map
