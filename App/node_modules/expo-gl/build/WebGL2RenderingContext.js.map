{"version":3,"file":"WebGL2RenderingContext.js","sourceRoot":"","sources":["../src/WebGL2RenderingContext.ts"],"names":[],"mappings":"","sourcesContent":["// TODO: copy-paste from https://github.com/DefinitelyTyped/DefinitelyTyped/blob/5344bfc80508c53a23dae37b860fb0c905ff7b24/types/webgl2/index.d.ts\nexport default interface WebGL2RenderingCOntext extends WebGLRenderingContext {\n  readonly READ_BUFFER: number; // 0x0C02\n  readonly UNPACK_ROW_LENGTH: number; // 0x0CF2\n  readonly UNPACK_SKIP_ROWS: number; // 0x0CF3\n  readonly UNPACK_SKIP_PIXELS: number; // 0x0CF4\n  readonly PACK_ROW_LENGTH: number; // 0x0D02\n  readonly PACK_SKIP_ROWS: number; // 0x0D03\n  readonly PACK_SKIP_PIXELS: number; // 0x0D04\n  readonly COLOR: number; // 0x1800\n  readonly DEPTH: number; // 0x1801\n  readonly STENCIL: number; // 0x1802\n  readonly RED: number; // 0x1903\n  readonly RGB8: number; // 0x8051\n  readonly RGBA8: number; // 0x8058\n  readonly RGB10_A2: number; // 0x8059\n  readonly TEXTURE_BINDING_3D: number; // 0x806A\n  readonly UNPACK_SKIP_IMAGES: number; // 0x806D\n  readonly UNPACK_IMAGE_HEIGHT: number; // 0x806E\n  readonly TEXTURE_3D: number; // 0x806F\n  readonly TEXTURE_WRAP_R: number; // 0x8072\n  readonly MAX_3D_TEXTURE_SIZE: number; // 0x8073\n  readonly UNSIGNED_INT_2_10_10_10_REV: number; // 0x8368\n  readonly MAX_ELEMENTS_VERTICES: number; // 0x80E8\n  readonly MAX_ELEMENTS_INDICES: number; // 0x80E9\n  readonly TEXTURE_MIN_LOD: number; // 0x813A\n  readonly TEXTURE_MAX_LOD: number; // 0x813B\n  readonly TEXTURE_BASE_LEVEL: number; // 0x813C\n  readonly TEXTURE_MAX_LEVEL: number; // 0x813D\n  readonly MIN: number; // 0x8007\n  readonly MAX: number; // 0x8008\n  readonly DEPTH_COMPONENT24: number; // 0x81A6\n  readonly MAX_TEXTURE_LOD_BIAS: number; // 0x84FD\n  readonly TEXTURE_COMPARE_MODE: number; // 0x884C\n  readonly TEXTURE_COMPARE_FUNC: number; // 0x884D\n  readonly CURRENT_QUERY: number; // 0x8865\n  readonly QUERY_RESULT: number; // 0x8866\n  readonly QUERY_RESULT_AVAILABLE: number; // 0x8867\n  readonly STREAM_READ: number; // 0x88E1\n  readonly STREAM_COPY: number; // 0x88E2\n  readonly STATIC_READ: number; // 0x88E5\n  readonly STATIC_COPY: number; // 0x88E6\n  readonly DYNAMIC_READ: number; // 0x88E9\n  readonly DYNAMIC_COPY: number; // 0x88EA\n  readonly MAX_DRAW_BUFFERS: number; // 0x8824\n  readonly DRAW_BUFFER0: number; // 0x8825\n  readonly DRAW_BUFFER1: number; // 0x8826\n  readonly DRAW_BUFFER2: number; // 0x8827\n  readonly DRAW_BUFFER3: number; // 0x8828\n  readonly DRAW_BUFFER4: number; // 0x8829\n  readonly DRAW_BUFFER5: number; // 0x882A\n  readonly DRAW_BUFFER6: number; // 0x882B\n  readonly DRAW_BUFFER7: number; // 0x882C\n  readonly DRAW_BUFFER8: number; // 0x882D\n  readonly DRAW_BUFFER9: number; // 0x882E\n  readonly DRAW_BUFFER10: number; // 0x882F\n  readonly DRAW_BUFFER11: number; // 0x8830\n  readonly DRAW_BUFFER12: number; // 0x8831\n  readonly DRAW_BUFFER13: number; // 0x8832\n  readonly DRAW_BUFFER14: number; // 0x8833\n  readonly DRAW_BUFFER15: number; // 0x8834\n  readonly MAX_FRAGMENT_UNIFORM_COMPONENTS: number; // 0x8B49\n  readonly MAX_VERTEX_UNIFORM_COMPONENTS: number; // 0x8B4A\n  readonly SAMPLER_3D: number; // 0x8B5F\n  readonly SAMPLER_2D_SHADOW: number; // 0x8B62\n  readonly FRAGMENT_SHADER_DERIVATIVE_HINT: number; // 0x8B8B\n  readonly PIXEL_PACK_BUFFER: number; // 0x88EB\n  readonly PIXEL_UNPACK_BUFFER: number; // 0x88EC\n  readonly PIXEL_PACK_BUFFER_BINDING: number; // 0x88ED\n  readonly PIXEL_UNPACK_BUFFER_BINDING: number; // 0x88EF\n  readonly FLOAT_MAT2x3: number; // 0x8B65\n  readonly FLOAT_MAT2x4: number; // 0x8B66\n  readonly FLOAT_MAT3x2: number; // 0x8B67\n  readonly FLOAT_MAT3x4: number; // 0x8B68\n  readonly FLOAT_MAT4x2: number; // 0x8B69\n  readonly FLOAT_MAT4x3: number; // 0x8B6A\n  readonly SRGB: number; // 0x8C40\n  readonly SRGB8: number; // 0x8C41\n  readonly SRGB8_ALPHA8: number; // 0x8C43\n  readonly COMPARE_REF_TO_TEXTURE: number; // 0x884E\n  readonly RGBA32F: number; // 0x8814\n  readonly RGB32F: number; // 0x8815\n  readonly RGBA16F: number; // 0x881A\n  readonly RGB16F: number; // 0x881B\n  readonly VERTEX_ATTRIB_ARRAY_INTEGER: number; // 0x88FD\n  readonly MAX_ARRAY_TEXTURE_LAYERS: number; // 0x88FF\n  readonly MIN_PROGRAM_TEXEL_OFFSET: number; // 0x8904\n  readonly MAX_PROGRAM_TEXEL_OFFSET: number; // 0x8905\n  readonly MAX_VARYING_COMPONENTS: number; // 0x8B4B\n  readonly TEXTURE_2D_ARRAY: number; // 0x8C1A\n  readonly TEXTURE_BINDING_2D_ARRAY: number; // 0x8C1D\n  readonly R11F_G11F_B10F: number; // 0x8C3A\n  readonly UNSIGNED_INT_10F_11F_11F_REV: number; // 0x8C3B\n  readonly RGB9_E5: number; // 0x8C3D\n  readonly UNSIGNED_INT_5_9_9_9_REV: number; // 0x8C3E\n  readonly TRANSFORM_FEEDBACK_BUFFER_MODE: number; // 0x8C7F\n  readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: number; // 0x8C80\n  readonly TRANSFORM_FEEDBACK_VARYINGS: number; // 0x8C83\n  readonly TRANSFORM_FEEDBACK_BUFFER_START: number; // 0x8C84\n  readonly TRANSFORM_FEEDBACK_BUFFER_SIZE: number; // 0x8C85\n  readonly TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: number; // 0x8C88\n  readonly RASTERIZER_DISCARD: number; // 0x8C89\n  readonly MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: number; // 0x8C8A\n  readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: number; // 0x8C8B\n  readonly INTERLEAVED_ATTRIBS: number; // 0x8C8C\n  readonly SEPARATE_ATTRIBS: number; // 0x8C8D\n  readonly TRANSFORM_FEEDBACK_BUFFER: number; // 0x8C8E\n  readonly TRANSFORM_FEEDBACK_BUFFER_BINDING: number; // 0x8C8F\n  readonly RGBA32UI: number; // 0x8D70\n  readonly RGB32UI: number; // 0x8D71\n  readonly RGBA16UI: number; // 0x8D76\n  readonly RGB16UI: number; // 0x8D77\n  readonly RGBA8UI: number; // 0x8D7C\n  readonly RGB8UI: number; // 0x8D7D\n  readonly RGBA32I: number; // 0x8D82\n  readonly RGB32I: number; // 0x8D83\n  readonly RGBA16I: number; // 0x8D88\n  readonly RGB16I: number; // 0x8D89\n  readonly RGBA8I: number; // 0x8D8E\n  readonly RGB8I: number; // 0x8D8F\n  readonly RED_INTEGER: number; // 0x8D94\n  readonly RGB_INTEGER: number; // 0x8D98\n  readonly RGBA_INTEGER: number; // 0x8D99\n  readonly SAMPLER_2D_ARRAY: number; // 0x8DC1\n  readonly SAMPLER_2D_ARRAY_SHADOW: number; // 0x8DC4\n  readonly SAMPLER_CUBE_SHADOW: number; // 0x8DC5\n  readonly UNSIGNED_INT_VEC2: number; // 0x8DC6\n  readonly UNSIGNED_INT_VEC3: number; // 0x8DC7\n  readonly UNSIGNED_INT_VEC4: number; // 0x8DC8\n  readonly INT_SAMPLER_2D: number; // 0x8DCA\n  readonly INT_SAMPLER_3D: number; // 0x8DCB\n  readonly INT_SAMPLER_CUBE: number; // 0x8DCC\n  readonly INT_SAMPLER_2D_ARRAY: number; // 0x8DCF\n  readonly UNSIGNED_INT_SAMPLER_2D: number; // 0x8DD2\n  readonly UNSIGNED_INT_SAMPLER_3D: number; // 0x8DD3\n  readonly UNSIGNED_INT_SAMPLER_CUBE: number; // 0x8DD4\n  readonly UNSIGNED_INT_SAMPLER_2D_ARRAY: number; // 0x8DD7\n  readonly DEPTH_COMPONENT32F: number; // 0x8CAC\n  readonly DEPTH32F_STENCIL8: number; // 0x8CAD\n  readonly FLOAT_32_UNSIGNED_INT_24_8_REV: number; // 0x8DAD\n  readonly FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: number; // 0x8210\n  readonly FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: number; // 0x8211\n  readonly FRAMEBUFFER_ATTACHMENT_RED_SIZE: number; // 0x8212\n  readonly FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: number; // 0x8213\n  readonly FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: number; // 0x8214\n  readonly FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: number; // 0x8215\n  readonly FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: number; // 0x8216\n  readonly FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: number; // 0x8217\n  readonly FRAMEBUFFER_DEFAULT: number; // 0x8218\n  //readonly DEPTH_STENCIL_ATTACHMENT: number;                      // 0x821A /* Already defined in WebGL1 constants */\n  //readonly DEPTH_STENCIL: number;                                 // 0x84F9 /* Already defined in WebGL1 constants */\n  readonly UNSIGNED_INT_24_8: number; // 0x84FA\n  readonly DEPTH24_STENCIL8: number; // 0x88F0\n  readonly UNSIGNED_NORMALIZED: number; // 0x8C17\n  readonly DRAW_FRAMEBUFFER_BINDING: number; // 0x8CA6 /* Same as FRAMEBUFFER_BINDING */\n  readonly READ_FRAMEBUFFER: number; // 0x8CA8\n  readonly DRAW_FRAMEBUFFER: number; // 0x8CA9\n  readonly READ_FRAMEBUFFER_BINDING: number; // 0x8CAA\n  readonly RENDERBUFFER_SAMPLES: number; // 0x8CAB\n  readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: number; // 0x8CD4\n  readonly MAX_COLOR_ATTACHMENTS: number; // 0x8CDF\n  readonly COLOR_ATTACHMENT1: number; // 0x8CE1\n  readonly COLOR_ATTACHMENT2: number; // 0x8CE2\n  readonly COLOR_ATTACHMENT3: number; // 0x8CE3\n  readonly COLOR_ATTACHMENT4: number; // 0x8CE4\n  readonly COLOR_ATTACHMENT5: number; // 0x8CE5\n  readonly COLOR_ATTACHMENT6: number; // 0x8CE6\n  readonly COLOR_ATTACHMENT7: number; // 0x8CE7\n  readonly COLOR_ATTACHMENT8: number; // 0x8CE8\n  readonly COLOR_ATTACHMENT9: number; // 0x8CE9\n  readonly COLOR_ATTACHMENT10: number; // 0x8CEA\n  readonly COLOR_ATTACHMENT11: number; // 0x8CEB\n  readonly COLOR_ATTACHMENT12: number; // 0x8CEC\n  readonly COLOR_ATTACHMENT13: number; // 0x8CED\n  readonly COLOR_ATTACHMENT14: number; // 0x8CEE\n  readonly COLOR_ATTACHMENT15: number; // 0x8CEF\n  readonly FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: number; // 0x8D56\n  readonly MAX_SAMPLES: number; // 0x8D57\n  readonly HALF_FLOAT: number; // 0x140B\n  readonly RG: number; // 0x8227\n  readonly RG_INTEGER: number; // 0x8228\n  readonly R8: number; // 0x8229\n  readonly RG8: number; // 0x822B\n  readonly R16F: number; // 0x822D\n  readonly R32F: number; // 0x822E\n  readonly RG16F: number; // 0x822F\n  readonly RG32F: number; // 0x8230\n  readonly R8I: number; // 0x8231\n  readonly R8UI: number; // 0x8232\n  readonly R16I: number; // 0x8233\n  readonly R16UI: number; // 0x8234\n  readonly R32I: number; // 0x8235\n  readonly R32UI: number; // 0x8236\n  readonly RG8I: number; // 0x8237\n  readonly RG8UI: number; // 0x8238\n  readonly RG16I: number; // 0x8239\n  readonly RG16UI: number; // 0x823A\n  readonly RG32I: number; // 0x823B\n  readonly RG32UI: number; // 0x823C\n  readonly VERTEX_ARRAY_BINDING: number; // 0x85B5\n  readonly R8_SNORM: number; // 0x8F94\n  readonly RG8_SNORM: number; // 0x8F95\n  readonly RGB8_SNORM: number; // 0x8F96\n  readonly RGBA8_SNORM: number; // 0x8F97\n  readonly SIGNED_NORMALIZED: number; // 0x8F9C\n  readonly COPY_READ_BUFFER: number; // 0x8F36\n  readonly COPY_WRITE_BUFFER: number; // 0x8F37\n  readonly COPY_READ_BUFFER_BINDING: number; // 0x8F36 /* Same as COPY_READ_BUFFER */\n  readonly COPY_WRITE_BUFFER_BINDING: number; // 0x8F37 /* Same as COPY_WRITE_BUFFER */\n  readonly UNIFORM_BUFFER: number; // 0x8A11\n  readonly UNIFORM_BUFFER_BINDING: number; // 0x8A28\n  readonly UNIFORM_BUFFER_START: number; // 0x8A29\n  readonly UNIFORM_BUFFER_SIZE: number; // 0x8A2A\n  readonly MAX_VERTEX_UNIFORM_BLOCKS: number; // 0x8A2B\n  readonly MAX_FRAGMENT_UNIFORM_BLOCKS: number; // 0x8A2D\n  readonly MAX_COMBINED_UNIFORM_BLOCKS: number; // 0x8A2E\n  readonly MAX_UNIFORM_BUFFER_BINDINGS: number; // 0x8A2F\n  readonly MAX_UNIFORM_BLOCK_SIZE: number; // 0x8A30\n  readonly MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: number; // 0x8A31\n  readonly MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: number; // 0x8A33\n  readonly UNIFORM_BUFFER_OFFSET_ALIGNMENT: number; // 0x8A34\n  readonly ACTIVE_UNIFORM_BLOCKS: number; // 0x8A36\n  readonly UNIFORM_TYPE: number; // 0x8A37\n  readonly UNIFORM_SIZE: number; // 0x8A38\n  readonly UNIFORM_BLOCK_INDEX: number; // 0x8A3A\n  readonly UNIFORM_OFFSET: number; // 0x8A3B\n  readonly UNIFORM_ARRAY_STRIDE: number; // 0x8A3C\n  readonly UNIFORM_MATRIX_STRIDE: number; // 0x8A3D\n  readonly UNIFORM_IS_ROW_MAJOR: number; // 0x8A3E\n  readonly UNIFORM_BLOCK_BINDING: number; // 0x8A3F\n  readonly UNIFORM_BLOCK_DATA_SIZE: number; // 0x8A40\n  readonly UNIFORM_BLOCK_ACTIVE_UNIFORMS: number; // 0x8A42\n  readonly UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: number; // 0x8A43\n  readonly UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: number; // 0x8A44\n  readonly UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: number; // 0x8A46\n  readonly INVALID_INDEX: number; // 0xFFFFFFFF\n  readonly MAX_VERTEX_OUTPUT_COMPONENTS: number; // 0x9122\n  readonly MAX_FRAGMENT_INPUT_COMPONENTS: number; // 0x9125\n  readonly MAX_SERVER_WAIT_TIMEOUT: number; // 0x9111\n  readonly OBJECT_TYPE: number; // 0x9112\n  readonly SYNC_CONDITION: number; // 0x9113\n  readonly SYNC_STATUS: number; // 0x9114\n  readonly SYNC_FLAGS: number; // 0x9115\n  readonly SYNC_FENCE: number; // 0x9116\n  readonly SYNC_GPU_COMMANDS_COMPLETE: number; // 0x9117\n  readonly UNSIGNALED: number; // 0x9118\n  readonly SIGNALED: number; // 0x9119\n  readonly ALREADY_SIGNALED: number; // 0x911A\n  readonly TIMEOUT_EXPIRED: number; // 0x911B\n  readonly CONDITION_SATISFIED: number; // 0x911C\n  readonly WAIT_FAILED: number; // 0x911D\n  readonly SYNC_FLUSH_COMMANDS_BIT: number; // 0x00000001\n  readonly VERTEX_ATTRIB_ARRAY_DIVISOR: number; // 0x88FE\n  readonly ANY_SAMPLES_PASSED: number; // 0x8C2F\n  readonly ANY_SAMPLES_PASSED_CONSERVATIVE: number; // 0x8D6A\n  readonly SAMPLER_BINDING: number; // 0x8919\n  readonly RGB10_A2UI: number; // 0x906F\n  readonly INT_2_10_10_10_REV: number; // 0x8D9F\n  readonly TRANSFORM_FEEDBACK: number; // 0x8E22\n  readonly TRANSFORM_FEEDBACK_PAUSED: number; // 0x8E23\n  readonly TRANSFORM_FEEDBACK_ACTIVE: number; // 0x8E24\n  readonly TRANSFORM_FEEDBACK_BINDING: number; // 0x8E25\n  readonly TEXTURE_IMMUTABLE_FORMAT: number; // 0x912F\n  readonly MAX_ELEMENT_INDEX: number; // 0x8D6B\n  readonly TEXTURE_IMMUTABLE_LEVELS: number; // 0x82DF\n\n  readonly TIMEOUT_IGNORED: number; // -1\n\n  /* WebGL-specific enums */\n  readonly MAX_CLIENT_WAIT_TIMEOUT_WEBGL: number; // 0x9247\n\n  /* Buffer objects */\n  // WebGL1:\n  bufferData(\n    target: number,\n    sizeOrData:\n      | number\n      | Int8Array\n      | Int16Array\n      | Int32Array\n      | Uint8Array\n      | Uint16Array\n      | Uint32Array\n      | Uint8ClampedArray\n      | Float32Array\n      | Float64Array\n      | DataView\n      | ArrayBuffer\n      | null,\n    usage: number\n  ): void;\n  bufferSubData(\n    target: number,\n    dstByteOffset: number,\n    srcData:\n      | Int8Array\n      | Int16Array\n      | Int32Array\n      | Uint8Array\n      | Uint16Array\n      | Uint32Array\n      | Uint8ClampedArray\n      | Float32Array\n      | Float64Array\n      | DataView\n      | ArrayBuffer\n      | null\n  ): void;\n  // For compatibility with WebGL 1 context in older Typescript versions.\n  bufferData(target: number, data: ArrayBufferView, usage: number): void;\n  bufferSubData(target: number, dstByteOffset: number, srcData: ArrayBufferView): void;\n  // WebGL2:\n  bufferData(\n    target: number,\n    srcData:\n      | Int8Array\n      | Int16Array\n      | Int32Array\n      | Uint8Array\n      | Uint16Array\n      | Uint32Array\n      | Uint8ClampedArray\n      | Float32Array\n      | Float64Array\n      | DataView\n      | ArrayBuffer\n      | null,\n    usage: number,\n    srcOffset: number,\n    length?: number\n  ): void;\n  bufferSubData(\n    target: number,\n    dstByteOffset: number,\n    srcData: ArrayBufferView,\n    srcOffset: number,\n    length?: number\n  ): void;\n\n  copyBufferSubData(\n    readTarget: number,\n    writeTarget: number,\n    readOffset: number,\n    writeOffset: number,\n    size: number\n  ): void;\n  // MapBufferRange, in particular its read-only and write-only modes,\n  // can not be exposed safely to JavaScript. GetBufferSubData\n  // replaces it for the purpose of fetching data back from the GPU.\n  getBufferSubData(\n    target: number,\n    srcByteOffset: number,\n    dstBuffer: ArrayBufferView,\n    dstOffset?: number,\n    length?: number\n  ): void;\n\n  /* Framebuffer objects */\n  blitFramebuffer(\n    srcX0: number,\n    srcY0: number,\n    srcX1: number,\n    srcY1: number,\n    dstX0: number,\n    dstY0: number,\n    dstX1: number,\n    dstY1: number,\n    mask: number,\n    filter: number\n  ): void;\n  framebufferTextureLayer(\n    target: number,\n    attachment: number,\n    texture: WebGLTexture | null,\n    level: number,\n    layer: number\n  ): void;\n  invalidateFramebuffer(target: number, attachments: number[]): void;\n  invalidateSubFramebuffer(\n    target: number,\n    attachments: number[],\n    x: number,\n    y: number,\n    width: number,\n    height: number\n  ): void;\n  readBuffer(src: number): void;\n\n  /* Renderbuffer objects */\n  getInternalformatParameter(target: number, internalformat: number, pname: number): any;\n  renderbufferStorageMultisample(\n    target: number,\n    samples: number,\n    internalformat: number,\n    width: number,\n    height: number\n  ): void;\n\n  /* Texture objects */\n  texStorage2D(\n    target: number,\n    levels: number,\n    internalformat: number,\n    width: number,\n    height: number\n  ): void;\n  texStorage3D(\n    target: number,\n    levels: number,\n    internalformat: number,\n    width: number,\n    height: number,\n    depth: number\n  ): void;\n\n  // WebGL1 legacy entrypoints:\n  texImage2D(\n    target: number,\n    level: number,\n    internalformat: number,\n    width: number,\n    height: number,\n    border: number,\n    format: number,\n    type: number,\n    pixels?: ArrayBufferView | null\n  ): void;\n  texImage2D(\n    target: number,\n    level: number,\n    internalformat: number,\n    format: number,\n    type: number,\n    source: ImageData | HTMLImageElement | HTMLCanvasElement | HTMLVideoElement\n  ): void; // May throw DOMException\n  texImage2D(\n    target: number,\n    level: number,\n    internalformat: number,\n    format: number,\n    type: number,\n    source: ImageBitmap | ImageData | HTMLImageElement | HTMLCanvasElement | HTMLVideoElement\n  ): void; // May throw DOMException\n\n  texSubImage2D(\n    target: number,\n    level: number,\n    xoffset: number,\n    yoffset: number,\n    width: number,\n    height: number,\n    format: number,\n    type: number,\n    pixels?: ArrayBufferView | null\n  ): void;\n  texSubImage2D(\n    target: number,\n    level: number,\n    xoffset: number,\n    yoffset: number,\n    format: number,\n    type: number,\n    source: ImageData | HTMLImageElement | HTMLCanvasElement | HTMLVideoElement\n  ): void; // May throw DOMException\n  texSubImage2D(\n    target: number,\n    level: number,\n    xoffset: number,\n    yoffset: number,\n    format: number,\n    type: number,\n    source: ImageBitmap | ImageData | HTMLImageElement | HTMLCanvasElement | HTMLVideoElement\n  ): void; // May throw DOMException\n\n  // WebGL2 entrypoints:\n  texImage2D(\n    target: number,\n    level: number,\n    internalformat: number,\n    width: number,\n    height: number,\n    border: number,\n    format: number,\n    type: number,\n    pboOffset: number\n  ): void;\n  texImage2D(\n    target: number,\n    level: number,\n    internalformat: number,\n    width: number,\n    height: number,\n    border: number,\n    format: number,\n    type: number,\n    source: ImageBitmap | ImageData | HTMLImageElement | HTMLCanvasElement | HTMLVideoElement\n  ): void; // May throw DOMException\n  texImage2D(\n    target: number,\n    level: number,\n    internalformat: number,\n    width: number,\n    height: number,\n    border: number,\n    format: number,\n    type: number,\n    srcData: ArrayBufferView,\n    srcOffset: number\n  ): void;\n\n  texImage3D(\n    target: number,\n    level: number,\n    internalformat: number,\n    width: number,\n    height: number,\n    depth: number,\n    border: number,\n    format: number,\n    type: number,\n    pboOffset: number\n  ): void;\n  texImage3D(\n    target: number,\n    level: number,\n    internalformat: number,\n    width: number,\n    height: number,\n    depth: number,\n    border: number,\n    format: number,\n    type: number,\n    source: ImageBitmap | ImageData | HTMLImageElement | HTMLCanvasElement | HTMLVideoElement\n  ): void; // May throw DOMException\n  texImage3D(\n    target: number,\n    level: number,\n    internalformat: number,\n    width: number,\n    height: number,\n    depth: number,\n    border: number,\n    format: number,\n    type: number,\n    srcData: ArrayBufferView | null\n  ): void;\n  texImage3D(\n    target: number,\n    level: number,\n    internalformat: number,\n    width: number,\n    height: number,\n    depth: number,\n    border: number,\n    format: number,\n    type: number,\n    srcData: ArrayBufferView,\n    srcOffset: number\n  ): void;\n\n  texSubImage2D(\n    target: number,\n    level: number,\n    xoffset: number,\n    yoffset: number,\n    width: number,\n    height: number,\n    format: number,\n    type: number,\n    pboOffset: number\n  ): void;\n  texSubImage2D(\n    target: number,\n    level: number,\n    xoffset: number,\n    yoffset: number,\n    width: number,\n    height: number,\n    format: number,\n    type: number,\n    source: ImageBitmap | ImageData | HTMLImageElement | HTMLCanvasElement | HTMLVideoElement\n  ): void; // May throw DOMException\n  texSubImage2D(\n    target: number,\n    level: number,\n    xoffset: number,\n    yoffset: number,\n    width: number,\n    height: number,\n    format: number,\n    type: number,\n    srcData: ArrayBufferView,\n    srcOffset: number\n  ): void;\n\n  texSubImage3D(\n    target: number,\n    level: number,\n    xoffset: number,\n    yoffset: number,\n    zoffset: number,\n    width: number,\n    height: number,\n    depth: number,\n    format: number,\n    type: number,\n    pboOffset: number\n  ): void;\n  texSubImage3D(\n    target: number,\n    level: number,\n    xoffset: number,\n    yoffset: number,\n    zoffset: number,\n    width: number,\n    height: number,\n    depth: number,\n    format: number,\n    type: number,\n    source: ImageBitmap | ImageData | HTMLImageElement | HTMLCanvasElement | HTMLVideoElement\n  ): void; // May throw DOMException\n  texSubImage3D(\n    target: number,\n    level: number,\n    xoffset: number,\n    yoffset: number,\n    zoffset: number,\n    width: number,\n    height: number,\n    depth: number,\n    format: number,\n    type: number,\n    srcData: ArrayBufferView | null,\n    srcOffset?: number\n  ): void;\n\n  copyTexSubImage3D(\n    target: number,\n    level: number,\n    xoffset: number,\n    yoffset: number,\n    zoffset: number,\n    x: number,\n    y: number,\n    width: number,\n    height: number\n  ): void;\n\n  compressedTexImage2D(\n    target: number,\n    level: number,\n    internalformat: number,\n    width: number,\n    height: number,\n    border: number,\n    imageSize: number,\n    offset: number\n  ): void;\n  compressedTexImage2D(\n    target: number,\n    level: number,\n    internalformat: number,\n    width: number,\n    height: number,\n    border: number,\n    srcData:\n      | Int8Array\n      | Int16Array\n      | Int32Array\n      | Uint8Array\n      | Uint16Array\n      | Uint32Array\n      | Uint8ClampedArray\n      | Float32Array\n      | Float64Array\n      | DataView\n      | null,\n    srcOffset?: number,\n    srcLengthOverride?: number\n  ): void;\n  // For compatibility with WebGL 1 context in older Typescript versions.\n  compressedTexImage2D(\n    target: number,\n    level: number,\n    internalformat: number,\n    width: number,\n    height: number,\n    border: number,\n    srcData: ArrayBufferView,\n    srcOffset?: number,\n    srcLengthOverride?: number\n  ): void;\n\n  compressedTexImage3D(\n    target: number,\n    level: number,\n    internalformat: number,\n    width: number,\n    height: number,\n    depth: number,\n    border: number,\n    imageSize: number,\n    offset: number\n  ): void;\n  compressedTexImage3D(\n    target: number,\n    level: number,\n    internalformat: number,\n    width: number,\n    height: number,\n    depth: number,\n    border: number,\n    srcData: ArrayBufferView,\n    srcOffset?: number,\n    srcLengthOverride?: number\n  ): void;\n\n  compressedTexSubImage2D(\n    target: number,\n    level: number,\n    xoffset: number,\n    yoffset: number,\n    width: number,\n    height: number,\n    format: number,\n    imageSize: number,\n    offset: number\n  ): void;\n  compressedTexSubImage2D(\n    target: number,\n    level: number,\n    xoffset: number,\n    yoffset: number,\n    width: number,\n    height: number,\n    format: number,\n    srcData:\n      | Int8Array\n      | Int16Array\n      | Int32Array\n      | Uint8Array\n      | Uint16Array\n      | Uint32Array\n      | Uint8ClampedArray\n      | Float32Array\n      | Float64Array\n      | DataView\n      | null,\n    srcOffset?: number,\n    srcLengthOverride?: number\n  ): void;\n  // For compatibility with WebGL 1 context in older Typescript versions.\n  compressedTexSubImage2D(\n    target: number,\n    level: number,\n    xoffset: number,\n    yoffset: number,\n    width: number,\n    height: number,\n    format: number,\n    srcData: ArrayBufferView | null,\n    srcOffset?: number,\n    srcLengthOverride?: number\n  ): void;\n\n  compressedTexSubImage3D(\n    target: number,\n    level: number,\n    xoffset: number,\n    yoffset: number,\n    zoffset: number,\n    width: number,\n    height: number,\n    depth: number,\n    format: number,\n    imageSize: number,\n    offset: number\n  ): void;\n  compressedTexSubImage3D(\n    target: number,\n    level: number,\n    xoffset: number,\n    yoffset: number,\n    zoffset: number,\n    width: number,\n    height: number,\n    depth: number,\n    format: number,\n    srcData: ArrayBufferView,\n    srcOffset?: number,\n    srcLengthOverride?: number\n  ): void;\n\n  /* Programs and shaders */\n  getFragDataLocation(program: WebGLProgram, name: string): number;\n\n  /* Uniforms */\n  uniform1ui(location: WebGLUniformLocation | null, v0: number): void;\n  uniform2ui(location: WebGLUniformLocation | null, v0: number, v1: number): void;\n  uniform3ui(location: WebGLUniformLocation | null, v0: number, v1: number, v2: number): void;\n  uniform4ui(\n    location: WebGLUniformLocation | null,\n    v0: number,\n    v1: number,\n    v2: number,\n    v3: number\n  ): void;\n\n  uniform1fv(\n    location: WebGLUniformLocation | null,\n    data: Float32Array | ArrayLike<number>,\n    srcOffset?: number,\n    srcLength?: number\n  ): void;\n  uniform2fv(\n    location: WebGLUniformLocation | null,\n    data: Float32Array | ArrayLike<number>,\n    srcOffset?: number,\n    srcLength?: number\n  ): void;\n  uniform3fv(\n    location: WebGLUniformLocation | null,\n    data: Float32Array | ArrayLike<number>,\n    srcOffset?: number,\n    srcLength?: number\n  ): void;\n  uniform4fv(\n    location: WebGLUniformLocation | null,\n    data: Float32Array | ArrayLike<number>,\n    srcOffset?: number,\n    srcLength?: number\n  ): void;\n\n  uniform1iv(\n    location: WebGLUniformLocation | null,\n    data: Int32Array | ArrayLike<number>,\n    srcOffset?: number,\n    srcLength?: number\n  ): void;\n  uniform2iv(\n    location: WebGLUniformLocation | null,\n    data: Int32Array | ArrayLike<number>,\n    srcOffset?: number,\n    srcLength?: number\n  ): void;\n  uniform3iv(\n    location: WebGLUniformLocation | null,\n    data: Int32Array | ArrayLike<number>,\n    srcOffset?: number,\n    srcLength?: number\n  ): void;\n  uniform4iv(\n    location: WebGLUniformLocation | null,\n    data: Int32Array | ArrayLike<number>,\n    srcOffset?: number,\n    srcLength?: number\n  ): void;\n\n  uniform1uiv(\n    location: WebGLUniformLocation | null,\n    data: Uint32Array | ArrayLike<number>,\n    srcOffset?: number,\n    srcLength?: number\n  ): void;\n  uniform2uiv(\n    location: WebGLUniformLocation | null,\n    data: Uint32Array | ArrayLike<number>,\n    srcOffset?: number,\n    srcLength?: number\n  ): void;\n  uniform3uiv(\n    location: WebGLUniformLocation | null,\n    data: Uint32Array | ArrayLike<number>,\n    srcOffset?: number,\n    srcLength?: number\n  ): void;\n  uniform4uiv(\n    location: WebGLUniformLocation | null,\n    data: Uint32Array | ArrayLike<number>,\n    srcOffset?: number,\n    srcLength?: number\n  ): void;\n\n  uniformMatrix2fv(\n    location: WebGLUniformLocation | null,\n    transpose: boolean,\n    data: Float32Array | ArrayLike<number>,\n    srcOffset?: number,\n    srcLength?: number\n  ): void;\n  uniformMatrix3x2fv(\n    location: WebGLUniformLocation | null,\n    transpose: boolean,\n    data: Float32Array | ArrayLike<number>,\n    srcOffset?: number,\n    srcLength?: number\n  ): void;\n  uniformMatrix4x2fv(\n    location: WebGLUniformLocation | null,\n    transpose: boolean,\n    data: Float32Array | ArrayLike<number>,\n    srcOffset?: number,\n    srcLength?: number\n  ): void;\n\n  uniformMatrix2x3fv(\n    location: WebGLUniformLocation | null,\n    transpose: boolean,\n    data: Float32Array | ArrayLike<number>,\n    srcOffset?: number,\n    srcLength?: number\n  ): void;\n  uniformMatrix3fv(\n    location: WebGLUniformLocation | null,\n    transpose: boolean,\n    data: Float32Array | ArrayLike<number>,\n    srcOffset?: number,\n    srcLength?: number\n  ): void;\n  uniformMatrix4x3fv(\n    location: WebGLUniformLocation | null,\n    transpose: boolean,\n    data: Float32Array | ArrayLike<number>,\n    srcOffset?: number,\n    srcLength?: number\n  ): void;\n\n  uniformMatrix2x4fv(\n    location: WebGLUniformLocation | null,\n    transpose: boolean,\n    data: Float32Array | ArrayLike<number>,\n    srcOffset?: number,\n    srcLength?: number\n  ): void;\n  uniformMatrix3x4fv(\n    location: WebGLUniformLocation | null,\n    transpose: boolean,\n    data: Float32Array | ArrayLike<number>,\n    srcOffset?: number,\n    srcLength?: number\n  ): void;\n  uniformMatrix4fv(\n    location: WebGLUniformLocation | null,\n    transpose: boolean,\n    data: Float32Array | ArrayLike<number>,\n    srcOffset?: number,\n    srcLength?: number\n  ): void;\n\n  /* Vertex attribs */\n  vertexAttribI4i(index: number, x: number, y: number, z: number, w: number): void;\n  vertexAttribI4iv(index: number, values: Int32Array | ArrayLike<number>): void;\n  vertexAttribI4ui(index: number, x: number, y: number, z: number, w: number): void;\n  vertexAttribI4uiv(index: number, values: Uint32Array | ArrayLike<number>): void;\n  vertexAttribIPointer(\n    index: number,\n    size: number,\n    type: number,\n    stride: number,\n    offset: number\n  ): void;\n\n  /* Writing to the drawing buffer */\n  vertexAttribDivisor(index: number, divisor: number): void;\n  drawArraysInstanced(mode: number, first: number, count: number, instanceCount: number): void;\n  drawElementsInstanced(\n    mode: number,\n    count: number,\n    type: number,\n    offset: number,\n    instanceCount: number\n  ): void;\n  drawRangeElements(\n    mode: number,\n    start: number,\n    end: number,\n    count: number,\n    type: number,\n    offset: number\n  ): void;\n\n  /* Reading back pixels */\n  // WebGL1:\n  readPixels(\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    format: number,\n    type: number,\n    dstData:\n      | Int8Array\n      | Int16Array\n      | Int32Array\n      | Uint8Array\n      | Uint16Array\n      | Uint32Array\n      | Uint8ClampedArray\n      | Float32Array\n      | Float64Array\n      | DataView\n      | null\n  ): void;\n  // For compatibility with WebGL 1 context in older Typescript versions.\n  readPixels(\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    format: number,\n    type: number,\n    dstData: ArrayBufferView | null\n  ): void;\n  // WebGL2:\n  readPixels(\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    format: number,\n    type: number,\n    offset: number\n  ): void;\n  readPixels(\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    format: number,\n    type: number,\n    dstData: ArrayBufferView,\n    dstOffset: number\n  ): void;\n\n  /* Multiple Render Targets */\n  drawBuffers(buffers: number[]): void;\n\n  clearBufferfv(\n    buffer: number,\n    drawbuffer: number,\n    values: Float32Array | ArrayLike<number>,\n    srcOffset?: number\n  ): void;\n  clearBufferiv(\n    buffer: number,\n    drawbuffer: number,\n    values: Int32Array | ArrayLike<number>,\n    srcOffset?: number\n  ): void;\n  clearBufferuiv(\n    buffer: number,\n    drawbuffer: number,\n    values: Uint32Array | ArrayLike<number>,\n    srcOffset?: number\n  ): void;\n\n  clearBufferfi(buffer: number, drawbuffer: number, depth: number, stencil: number): void;\n\n  /* Query Objects */\n  createQuery(): WebGLQuery | null;\n  deleteQuery(query: WebGLQuery | null): void;\n  isQuery(query: WebGLQuery | null): boolean; //[WebGLHandlesContextLoss]\n  beginQuery(target: number, query: WebGLQuery): void;\n  endQuery(target: number): void;\n  getQuery(target: number, pname: number): WebGLQuery | null;\n  getQueryParameter(query: WebGLQuery, pname: number): any;\n\n  /* Sampler Objects */\n  createSampler(): WebGLSampler | null;\n  deleteSampler(sampler: WebGLSampler | null): void;\n  isSampler(sampler: WebGLSampler | null): boolean; //[WebGLHandlesContextLoss]\n  bindSampler(unit: number, sampler: WebGLSampler | null): void;\n  samplerParameteri(sampler: WebGLSampler, pname: number, param: number): void;\n  samplerParameterf(sampler: WebGLSampler, pname: number, param: number): void;\n  getSamplerParameter(sampler: WebGLSampler, pname: number): any;\n\n  /* Sync objects */\n  fenceSync(condition: number, flags: number): WebGLSync | null;\n  isSync(sync: WebGLSync | null): boolean; //[WebGLHandlesContextLoss]\n  deleteSync(sync: WebGLSync | null): void;\n  clientWaitSync(sync: WebGLSync, flags: number, timeout: number): number;\n  waitSync(sync: WebGLSync, flags: number, timeout: number): void;\n  getSyncParameter(sync: WebGLSync, pname: number): any;\n\n  /* Transform Feedback */\n  createTransformFeedback(): WebGLTransformFeedback | null;\n  deleteTransformFeedback(tf: WebGLTransformFeedback | null): void;\n  isTransformFeedback(tf: WebGLTransformFeedback | null): boolean; //[WebGLHandlesContextLoss]\n  bindTransformFeedback(target: number, tf: WebGLTransformFeedback | null): void;\n  beginTransformFeedback(primitiveMode: number): void;\n  endTransformFeedback(): void;\n  transformFeedbackVaryings(program: WebGLProgram, varyings: string[], bufferMode: number): void;\n  getTransformFeedbackVarying(program: WebGLProgram, index: number): WebGLActiveInfo | null;\n  pauseTransformFeedback(): void;\n  resumeTransformFeedback(): void;\n\n  /* Uniform Buffer Objects and Transform Feedback Buffers */\n  bindBufferBase(target: number, index: number, buffer: WebGLBuffer | null): void;\n  bindBufferRange(\n    target: number,\n    index: number,\n    buffer: WebGLBuffer | null,\n    offset: number,\n    size: number\n  ): void;\n  getIndexedParameter(target: number, index: number): any;\n  getUniformIndices(program: WebGLProgram, uniformNames: string[]): number[] | null;\n  getActiveUniforms(program: WebGLProgram, uniformIndices: number[], pname: number): any;\n  getUniformBlockIndex(program: WebGLProgram, uniformBlockName: string): number;\n  getActiveUniformBlockParameter(\n    program: WebGLProgram,\n    uniformBlockIndex: number,\n    pname: number\n  ): any;\n  getActiveUniformBlockName(program: WebGLProgram, uniformBlockIndex: number): string | null;\n  uniformBlockBinding(\n    program: WebGLProgram,\n    uniformBlockIndex: number,\n    uniformBlockBinding: number\n  ): void;\n\n  /* Vertex Array Objects */\n  createVertexArray(): WebGLVertexArrayObject | null;\n  deleteVertexArray(vertexArray: WebGLVertexArrayObject | null): void;\n  isVertexArray(vertexArray: WebGLVertexArrayObject | null): boolean; //[WebGLHandlesContextLoss]\n  bindVertexArray(array: WebGLVertexArrayObject | null): void;\n}\n\ninterface WebGLQuery extends WebGLObject {}\ninterface WebGLSampler extends WebGLObject {}\ninterface WebGLSync extends WebGLObject {}\ninterface WebGLTransformFeedback extends WebGLObject {}\ninterface WebGLVertexArrayObject extends WebGLObject {}\n"]}