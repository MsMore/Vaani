{"version":3,"sources":["Provider.tsx"],"names":["React","AccessibilityInfo","Appearance","ThemeProvider","Provider","SettingsProvider","MaterialCommunityIcon","PortalHost","DefaultTheme","DarkTheme","props","colorSchemeName","theme","getColorScheme","reduceMotionEnabled","setReduceMotionEnabled","useState","colorScheme","setColorScheme","handleAppearanceChange","preferences","useEffect","addEventListener","removeEventListener","addChangeListener","removeChangeListener","getTheme","providedTheme","animation","scale","children","settings","icon"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,iBAAT,EAA4BC,UAA5B,QAA+D,cAA/D;AACA,SAASC,aAAT,QAA8B,WAA9B;AACA,SAASC,QAAQ,IAAIC,gBAArB,QAAuD,YAAvD;AACA,OAAOC,qBAAP,MAAkC,qCAAlC;AACA,OAAOC,UAAP,MAAuB,iCAAvB;AACA,OAAOC,YAAP,MAAyB,wBAAzB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;;AAQA,MAAML,QAAQ,GAAG,CAAC,EAAE,GAAGM;AAAL,CAAD,KAAyB;AACxC,QAAMC,eAAe,GAClB,CAACD,KAAK,CAACE,KAAP,KAAgBV,UAAhB,aAAgBA,UAAhB,uBAAgBA,UAAU,CAAEW,cAAZ,EAAhB,CAAD,IAAkD,OADpD;AAGA,QAAM,CAACC,mBAAD,EAAsBC,sBAAtB,IAAgDf,KAAK,CAACgB,QAAN,CACpD,KADoD,CAAtD;AAGA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgClB,KAAK,CAACgB,QAAN,CACpCL,eADoC,CAAtC;;AAIA,QAAMQ,sBAAsB,GAC1BC,WAD6B,IAE1B;AACH,UAAM;AAAEH,MAAAA;AAAF,QAAkBG,WAAxB;AACAF,IAAAA,cAAc,CAACD,WAAD,CAAd;AACD,GALD;;AAOAjB,EAAAA,KAAK,CAACqB,SAAN,CAAgB,MAAM;AACpB,QAAI,CAACX,KAAK,CAACE,KAAX,EAAkB;AAChBX,MAAAA,iBAAiB,CAACqB,gBAAlB,CACE,qBADF,EAEEP,sBAFF;AAID;;AACD,WAAO,MAAM;AACX,UAAI,CAACL,KAAK,CAACE,KAAX,EAAkB;AAChBX,QAAAA,iBAAiB,CAACsB,mBAAlB,CACE,qBADF,EAEER,sBAFF;AAID;AACF,KAPD;AAQD,GAfD,EAeG,CAACL,KAAK,CAACE,KAAP,CAfH;AAiBAZ,EAAAA,KAAK,CAACqB,SAAN,CAAgB,MAAM;AACpB,QAAI,CAACX,KAAK,CAACE,KAAX,EAAkBV,UAAU,SAAV,IAAAA,UAAU,WAAV,YAAAA,UAAU,CAAEsB,iBAAZ,CAA8BL,sBAA9B;AAClB,WAAO,MAAM;AACX,UAAI,CAACT,KAAK,CAACE,KAAX,EACEV,UAAU,SAAV,IAAAA,UAAU,WAAV,YAAAA,UAAU,CAAEuB,oBAAZ,CAAiCN,sBAAjC;AACH,KAHD;AAID,GAND,EAMG,CAACT,KAAK,CAACE,KAAP,CANH;;AAQA,QAAMc,QAAQ,GAAG,MAAM;AACrB,UAAM;AAAEd,MAAAA,KAAK,EAAEe;AAAT,QAA2BjB,KAAjC;;AAEA,QAAIiB,aAAJ,EAAmB;AACjB,aAAOA,aAAP;AACD,KAFD,MAEO;AACL,YAAMf,KAAK,GAAIK,WAAW,KAAK,MAAhB,GACXR,SADW,GAEXD,YAFJ;AAIA,aAAO,EACL,GAAGI,KADE;AAELgB,QAAAA,SAAS,EAAE,EACT,GAAGhB,KAAK,CAACgB,SADA;AAETC,UAAAA,KAAK,EAAEf,mBAAmB,GAAG,CAAH,GAAO;AAFxB;AAFN,OAAP;AAOD;AACF,GAlBD;;AAoBA,QAAM;AAAEgB,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAyBrB,KAA/B;AACA,sBACE,oBAAC,UAAD,qBACE,oBAAC,gBAAD;AAAkB,IAAA,KAAK,EAAEqB,QAAQ,IAAI;AAAEC,MAAAA,IAAI,EAAE1B;AAAR;AAArC,kBACE,oBAAC,aAAD;AAAe,IAAA,KAAK,EAAEoB,QAAQ;AAA9B,KAAmCI,QAAnC,CADF,CADF,CADF;AAOD,CAvED;;AAyEA,eAAe1B,QAAf","sourcesContent":["import * as React from 'react';\nimport { AccessibilityInfo, Appearance, ColorSchemeName } from 'react-native';\nimport { ThemeProvider } from './theming';\nimport { Provider as SettingsProvider, Settings } from './settings';\nimport MaterialCommunityIcon from '../components/MaterialCommunityIcon';\nimport PortalHost from '../components/Portal/PortalHost';\nimport DefaultTheme from '../styles/DefaultTheme';\nimport DarkTheme from '../styles/DarkTheme';\n\ntype Props = {\n  children: React.ReactNode;\n  theme?: ReactNativePaper.Theme;\n  settings?: Settings;\n};\n\nconst Provider = ({ ...props }: Props) => {\n  const colorSchemeName =\n    (!props.theme && Appearance?.getColorScheme()) || 'light';\n\n  const [reduceMotionEnabled, setReduceMotionEnabled] = React.useState<boolean>(\n    false\n  );\n  const [colorScheme, setColorScheme] = React.useState<ColorSchemeName>(\n    colorSchemeName\n  );\n\n  const handleAppearanceChange = (\n    preferences: Appearance.AppearancePreferences\n  ) => {\n    const { colorScheme } = preferences;\n    setColorScheme(colorScheme);\n  };\n\n  React.useEffect(() => {\n    if (!props.theme) {\n      AccessibilityInfo.addEventListener(\n        'reduceMotionChanged',\n        setReduceMotionEnabled\n      );\n    }\n    return () => {\n      if (!props.theme) {\n        AccessibilityInfo.removeEventListener(\n          'reduceMotionChanged',\n          setReduceMotionEnabled\n        );\n      }\n    };\n  }, [props.theme]);\n\n  React.useEffect(() => {\n    if (!props.theme) Appearance?.addChangeListener(handleAppearanceChange);\n    return () => {\n      if (!props.theme)\n        Appearance?.removeChangeListener(handleAppearanceChange);\n    };\n  }, [props.theme]);\n\n  const getTheme = () => {\n    const { theme: providedTheme } = props;\n\n    if (providedTheme) {\n      return providedTheme;\n    } else {\n      const theme = (colorScheme === 'dark'\n        ? DarkTheme\n        : DefaultTheme) as ReactNativePaper.Theme;\n\n      return {\n        ...theme,\n        animation: {\n          ...theme.animation,\n          scale: reduceMotionEnabled ? 0 : 1,\n        },\n      };\n    }\n  };\n\n  const { children, settings } = props;\n  return (\n    <PortalHost>\n      <SettingsProvider value={settings || { icon: MaterialCommunityIcon }}>\n        <ThemeProvider theme={getTheme()}>{children}</ThemeProvider>\n      </SettingsProvider>\n    </PortalHost>\n  );\n};\n\nexport default Provider;\n"]}