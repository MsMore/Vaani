{"version":3,"sources":["ListAccordion.tsx"],"names":["color","React","View","StyleSheet","I18nManager","TouchableRipple","MaterialCommunityIcon","Text","withTheme","ListAccordionGroupContext","ListAccordion","left","title","description","children","theme","titleStyle","descriptionStyle","titleNumberOfLines","descriptionNumberOfLines","style","id","testID","onPress","onLongPress","expanded","expandedProp","setExpanded","useState","handlePressAction","undefined","titleColor","colors","text","alpha","rgb","string","descriptionColor","expandedInternal","groupContext","useContext","Error","isExpanded","expandedId","handlePress","onAccordionPress","styles","container","row","primary","item","content","multiline","isRTL","Children","map","child","isValidElement","props","right","cloneElement","displayName","create","padding","flexDirection","alignItems","height","justifyContent","fontSize","margin","paddingLeft","flex"],"mappings":"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","sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport {\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  I18nManager,\n} from 'react-native';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\n\nimport { ListAccordionGroupContext } from './ListAccordionGroup';\n\ntype Props = {\n  /**\n   * Title text for the list accordion.\n   */\n  title: React.ReactNode;\n  /**\n   * Description text for the list accordion.\n   */\n  description?: React.ReactNode;\n  /**\n   * Callback which returns a React element to display on the left side.\n   */\n  left?: (props: { color: string }) => React.ReactNode;\n  /**\n   * Whether the accordion is expanded\n   * If this prop is provided, the accordion will behave as a \"controlled component\".\n   * You'll need to update this prop when you want to toggle the component or on `onPress`.\n   */\n  expanded?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Content of the section.\n   */\n  children: React.ReactNode;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Style that is passed to the wrapping TouchableRipple element.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Title element.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Style that is passed to Description element.\n   */\n  descriptionStyle?: StyleProp<TextStyle>;\n  /**\n   * Truncate Title text such that the total number of lines does not\n   * exceed this number.\n   */\n  titleNumberOfLines?: number;\n  /**\n   * Truncate Description text such that the total number of lines does not\n   * exceed this number.\n   */\n  descriptionNumberOfLines?: number;\n  /**\n   * Id is used for distinguishing specific accordion when using List.AccordionGroup. Property is required when using List.AccordionGroup and has no impact on behavior when using standalone List.Accordion.\n   */\n  id?: string | number;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n};\n\n/**\n * A component used to display an expandable list item.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-accordion-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-accordion-2.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-accordion-3.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [expanded, setExpanded] = React.useState(true);\n *\n *   const handlePress = () => setExpanded(!expanded);\n *\n *   return (\n *     <List.Section title=\"Accordions\">\n *       <List.Accordion\n *         title=\"Uncontrolled Accordion\"\n *         left={props => <List.Icon {...props} icon=\"folder\" />}>\n *         <List.Item title=\"First item\" />\n *         <List.Item title=\"Second item\" />\n *       </List.Accordion>\n *\n *       <List.Accordion\n *         title=\"Controlled Accordion\"\n *         left={props => <List.Icon {...props} icon=\"folder\" />}\n *         expanded={expanded}\n *         onPress={handlePress}>\n *         <List.Item title=\"First item\" />\n *         <List.Item title=\"Second item\" />\n *       </List.Accordion>\n *     </List.Section>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst ListAccordion = ({\n  left,\n  title,\n  description,\n  children,\n  theme,\n  titleStyle,\n  descriptionStyle,\n  titleNumberOfLines = 1,\n  descriptionNumberOfLines = 2,\n  style,\n  id,\n  testID,\n  onPress,\n  onLongPress,\n  expanded: expandedProp,\n}: Props) => {\n  const [expanded, setExpanded] = React.useState<boolean>(\n    expandedProp || false\n  );\n\n  const handlePressAction = () => {\n    onPress?.();\n\n    if (expandedProp === undefined) {\n      // Only update state of the `expanded` prop was not passed\n      // If it was passed, the component will act as a controlled component\n      setExpanded((expanded) => !expanded);\n    }\n  };\n\n  const titleColor = color(theme.colors.text).alpha(0.87).rgb().string();\n  const descriptionColor = color(theme.colors.text).alpha(0.54).rgb().string();\n\n  const expandedInternal = expandedProp !== undefined ? expandedProp : expanded;\n\n  const groupContext = React.useContext(ListAccordionGroupContext);\n  if (groupContext !== null && !id) {\n    throw new Error(\n      'List.Accordion is used inside a List.AccordionGroup without specifying an id prop.'\n    );\n  }\n  const isExpanded = groupContext\n    ? groupContext.expandedId === id\n    : expandedInternal;\n  const handlePress =\n    groupContext && id !== undefined\n      ? () => groupContext.onAccordionPress(id)\n      : handlePressAction;\n  return (\n    <View>\n      <TouchableRipple\n        style={[styles.container, style]}\n        onPress={handlePress}\n        onLongPress={onLongPress}\n        // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n        accessibilityTraits=\"button\"\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        testID={testID}\n      >\n        <View style={styles.row} pointerEvents=\"none\">\n          {left\n            ? left({\n                color: isExpanded ? theme.colors.primary : descriptionColor,\n              })\n            : null}\n          <View style={[styles.item, styles.content]}>\n            <Text\n              selectable={false}\n              numberOfLines={titleNumberOfLines}\n              style={[\n                styles.title,\n                {\n                  color: isExpanded ? theme.colors.primary : titleColor,\n                },\n                titleStyle,\n              ]}\n            >\n              {title}\n            </Text>\n            {description && (\n              <Text\n                selectable={false}\n                numberOfLines={descriptionNumberOfLines}\n                style={[\n                  styles.description,\n                  {\n                    color: descriptionColor,\n                  },\n                  descriptionStyle,\n                ]}\n              >\n                {description}\n              </Text>\n            )}\n          </View>\n          <View\n            style={[styles.item, description ? styles.multiline : undefined]}\n          >\n            <MaterialCommunityIcon\n              name={isExpanded ? 'chevron-up' : 'chevron-down'}\n              color={titleColor}\n              size={24}\n              direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n            />\n          </View>\n        </View>\n      </TouchableRipple>\n      {isExpanded\n        ? React.Children.map(children, (child) => {\n            if (\n              left &&\n              React.isValidElement(child) &&\n              !child.props.left &&\n              !child.props.right\n            ) {\n              return React.cloneElement(child, {\n                style: [styles.child, child.props.style],\n              });\n            }\n\n            return child;\n          })\n        : null}\n    </View>\n  );\n};\n\nListAccordion.displayName = 'List.Accordion';\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 8,\n  },\n  row: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  multiline: {\n    height: 40,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 16,\n  },\n  description: {\n    fontSize: 14,\n  },\n  item: {\n    margin: 8,\n  },\n  child: {\n    paddingLeft: 64,\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n});\n\nexport default withTheme(ListAccordion);\n"]}