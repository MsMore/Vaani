{"version":3,"sources":["MenuItem.tsx"],"names":["MenuItem","React","Component","render","icon","title","disabled","onPress","theme","style","contentStyle","testID","titleStyle","props","disabledColor","dark","white","black","alpha","rgb","string","titleColor","colors","text","iconColor","styles","container","row","item","content","widthWithIcon","color","minWidth","maxWidth","iconWidth","StyleSheet","create","paddingHorizontal","height","justifyContent","flexDirection","width","fontSize","marginHorizontal"],"mappings":"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","sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport {\n  View,\n  StyleSheet,\n  TextStyle,\n  ViewStyle,\n  StyleProp,\n} from 'react-native';\nimport Icon, { IconSource } from '../Icon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport { black, white } from '../../styles/colors';\n\ntype Props = {\n  /**\n   * Title text for the `MenuItem`.\n   */\n  title: React.ReactNode;\n  /**\n   * Icon to display for the `MenuItem`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether the 'item' is disabled. A disabled 'item' is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  style?: StyleProp<ViewStyle>;\n  contentStyle?: StyleProp<ViewStyle>;\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n};\n\n/**\n * A component to show a single list item inside a Menu.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/menu-item.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Menu } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View style={{ flex: 1 }}>\n *     <Menu.Item icon=\"redo\" onPress={() => {}} title=\"Redo\" />\n *     <Menu.Item icon=\"undo\" onPress={() => {}} title=\"Undo\" />\n *     <Menu.Item icon=\"content-cut\" onPress={() => {}} title=\"Cut\" disabled />\n *     <Menu.Item icon=\"content-copy\" onPress={() => {}} title=\"Copy\" disabled />\n *     <Menu.Item icon=\"content-paste\" onPress={() => {}} title=\"Paste\" />\n *   </View>\n * );\n *\n * export default MyComponent;\n * ```\n */\n\nclass MenuItem extends React.Component<Props> {\n  static displayName = 'Menu.Item';\n\n  render() {\n    const {\n      icon,\n      title,\n      disabled,\n      onPress,\n      theme,\n      style,\n      contentStyle,\n      testID,\n      titleStyle,\n    } = this.props;\n\n    const disabledColor = color(theme.dark ? white : black)\n      .alpha(0.32)\n      .rgb()\n      .string();\n\n    const titleColor = disabled\n      ? disabledColor\n      : color(theme.colors.text).alpha(0.87).rgb().string();\n\n    const iconColor = disabled\n      ? disabledColor\n      : color(theme.colors.text).alpha(0.54).rgb().string();\n\n    return (\n      <TouchableRipple\n        style={[styles.container, style]}\n        onPress={onPress}\n        disabled={disabled}\n        testID={testID}\n        accessibilityRole=\"menuitem\"\n        accessibilityState={{ disabled }}\n      >\n        <View style={styles.row}>\n          {icon ? (\n            <View style={[styles.item, styles.icon]} pointerEvents=\"box-none\">\n              <Icon source={icon} size={24} color={iconColor} />\n            </View>\n          ) : null}\n          <View\n            style={[\n              styles.item,\n              styles.content,\n              icon ? styles.widthWithIcon : null,\n              contentStyle,\n            ]}\n            pointerEvents=\"none\"\n          >\n            <Text\n              selectable={false}\n              numberOfLines={1}\n              style={[styles.title, { color: titleColor }, titleStyle]}\n            >\n              {title}\n            </Text>\n          </View>\n        </View>\n      </TouchableRipple>\n    );\n  }\n}\n\nconst minWidth = 112;\nconst maxWidth = 280;\nconst iconWidth = 40;\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 8,\n    minWidth,\n    maxWidth,\n    height: 48,\n    justifyContent: 'center',\n  },\n  row: {\n    flexDirection: 'row',\n  },\n  icon: {\n    width: iconWidth,\n  },\n  title: {\n    fontSize: 16,\n  },\n  item: {\n    marginHorizontal: 8,\n  },\n  content: {\n    justifyContent: 'center',\n    minWidth: minWidth - 16,\n    maxWidth: maxWidth - 16,\n  },\n  widthWithIcon: {\n    maxWidth: maxWidth - (iconWidth + 48),\n  },\n});\n\nexport default withTheme(MenuItem);\n\n// @component-docs ignore-next-line\nexport { MenuItem };\n"]}