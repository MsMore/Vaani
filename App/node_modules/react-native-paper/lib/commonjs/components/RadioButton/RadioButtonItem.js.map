{"version":3,"sources":["RadioButtonItem.tsx"],"names":["RadioButtonItem","value","label","style","labelStyle","onPress","disabled","color","uncheckedColor","status","theme","colors","accessibilityLabel","testID","mode","radioButtonProps","radioButton","context","undefined","onValueChange","styles","container","text","displayName","RadioButtonItemWithTheme","StyleSheet","create","flexDirection","alignItems","justifyContent","paddingVertical","paddingHorizontal","fontSize","flex"],"mappings":";;;;;;;AAAA;;AACA;;AAOA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AA0DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,eAAe,GAAG,CAAC;AACvBC,EAAAA,KADuB;AAEvBC,EAAAA,KAFuB;AAGvBC,EAAAA,KAHuB;AAIvBC,EAAAA,UAJuB;AAKvBC,EAAAA,OALuB;AAMvBC,EAAAA,QANuB;AAOvBC,EAAAA,KAPuB;AAQvBC,EAAAA,cARuB;AASvBC,EAAAA,MATuB;AAUvBC,EAAAA,KAAK,EAAE;AAAEC,IAAAA;AAAF,GAVgB;AAWvBC,EAAAA,kBAXuB;AAYvBC,EAAAA,MAZuB;AAavBC,EAAAA;AAbuB,CAAD,KAcX;AACX,QAAMC,gBAAgB,GAAG;AAAEd,IAAAA,KAAF;AAASK,IAAAA,QAAT;AAAmBG,IAAAA,MAAnB;AAA2BF,IAAAA,KAA3B;AAAkCC,IAAAA;AAAlC,GAAzB;AACA,MAAIQ,WAAJ;;AAEA,MAAIF,IAAI,KAAK,SAAb,EAAwB;AACtBE,IAAAA,WAAW,gBAAG,oBAAC,2BAAD,EAAwBD,gBAAxB,CAAd;AACD,GAFD,MAEO,IAAID,IAAI,KAAK,KAAb,EAAoB;AACzBE,IAAAA,WAAW,gBAAG,oBAAC,uBAAD,EAAoBD,gBAApB,CAAd;AACD,GAFM,MAEA;AACLC,IAAAA,WAAW,gBAAG,oBAAC,oBAAD,EAAiBD,gBAAjB,CAAd;AACD;;AAED,sBACE,oBAAC,oCAAD,CAAoB,QAApB,QACIE,OAAD,IAAsC;AACrC,wBACE,oBAAC,wBAAD;AACE,MAAA,OAAO,EACLX,QAAQ,GACJY,SADI,GAEJ,MACE,wBAAY;AACVb,QAAAA,OAAO,EAAEA,OADC;AAEVc,QAAAA,aAAa,EAAEF,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAEE,aAFd;AAGVlB,QAAAA;AAHU,OAAZ,CALV;AAWE,MAAA,kBAAkB,EAAEW,kBAXtB;AAYE,MAAA,MAAM,EAAEC;AAZV,oBAcE,oBAAC,iBAAD;AAAM,MAAA,KAAK,EAAE,CAACO,MAAM,CAACC,SAAR,EAAmBlB,KAAnB,CAAb;AAAwC,MAAA,aAAa,EAAC;AAAtD,oBACE,oBAAC,aAAD;AAAM,MAAA,KAAK,EAAE,CAACiB,MAAM,CAAClB,KAAR,EAAe;AAAEK,QAAAA,KAAK,EAAEI,MAAM,CAACW;AAAhB,OAAf,EAAuClB,UAAvC;AAAb,OACGF,KADH,CADF,EAIGc,WAJH,CAdF,CADF;AAuBD,GAzBH,CADF;AA6BD,CAvDD;;AAyDAhB,eAAe,CAACuB,WAAhB,GAA8B,kBAA9B;;eAEe,wBAAUvB,eAAV,C,EAEf;;;;AACA,MAAMwB,wBAAwB,GAAG,wBAAUxB,eAAV,CAAjC,C,CACA;;;;AAGA,MAAMoB,MAAM,GAAGK,wBAAWC,MAAX,CAAkB;AAC/BL,EAAAA,SAAS,EAAE;AACTM,IAAAA,aAAa,EAAE,KADN;AAETC,IAAAA,UAAU,EAAE,QAFH;AAGTC,IAAAA,cAAc,EAAE,eAHP;AAITC,IAAAA,eAAe,EAAE,CAJR;AAKTC,IAAAA,iBAAiB,EAAE;AALV,GADoB;AAQ/B7B,EAAAA,KAAK,EAAE;AACL8B,IAAAA,QAAQ,EAAE,EADL;AAELC,IAAAA,IAAI,EAAE;AAFD;AARwB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  TextStyle,\n} from 'react-native';\nimport { withTheme } from '../../core/theming';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport { handlePress } from './utils';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport RadioButton from './RadioButton';\nimport Text from '../Typography/Text';\nimport RadioButtonAndroid from './RadioButtonAndroid';\nimport RadioButtonIOS from './RadioButtonIOS';\n\nexport type Props = {\n  /**\n   * Value of the radio button.\n   */\n  value: string;\n  /**\n   * Label to be displayed on the item.\n   */\n  label: string;\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Accessibility label for the touchable. This is read by the screen reader when the user taps the touchable.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Custom color for unchecked radio.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Additional styles for container View.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n  /**\n   * Whether `<RadioButton.Android />` or `<RadioButton.IOS />` should be used.\n   * Left undefined `<RadioButton />` will be used.\n   */\n  mode?: 'android' | 'ios';\n};\n\n/**\n * RadioButton.Item allows you to press the whole row (item) instead of only the RadioButton.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/radio-item.ios.png\" />\n *     <figcaption>Pressed</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { RadioButton } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('first');\n *\n *   return (\n *     <RadioButton.Group onValueChange={value => setValue(value)} value={value}>\n *       <RadioButton.Item label=\"First item\" value=\"first\" />\n *       <RadioButton.Item label=\"Second item\" value=\"second\" />\n *     </RadioButton.Group>\n *   );\n * };\n *\n * export default MyComponent;\n *```\n */\nconst RadioButtonItem = ({\n  value,\n  label,\n  style,\n  labelStyle,\n  onPress,\n  disabled,\n  color,\n  uncheckedColor,\n  status,\n  theme: { colors },\n  accessibilityLabel,\n  testID,\n  mode,\n}: Props) => {\n  const radioButtonProps = { value, disabled, status, color, uncheckedColor };\n  let radioButton: any;\n\n  if (mode === 'android') {\n    radioButton = <RadioButtonAndroid {...radioButtonProps} />;\n  } else if (mode === 'ios') {\n    radioButton = <RadioButtonIOS {...radioButtonProps} />;\n  } else {\n    radioButton = <RadioButton {...radioButtonProps} />;\n  }\n\n  return (\n    <RadioButtonContext.Consumer>\n      {(context?: RadioButtonContextType) => {\n        return (\n          <TouchableRipple\n            onPress={\n              disabled\n                ? undefined\n                : () =>\n                    handlePress({\n                      onPress: onPress,\n                      onValueChange: context?.onValueChange,\n                      value,\n                    })\n            }\n            accessibilityLabel={accessibilityLabel}\n            testID={testID}\n          >\n            <View style={[styles.container, style]} pointerEvents=\"none\">\n              <Text style={[styles.label, { color: colors.text }, labelStyle]}>\n                {label}\n              </Text>\n              {radioButton}\n            </View>\n          </TouchableRipple>\n        );\n      }}\n    </RadioButtonContext.Consumer>\n  );\n};\n\nRadioButtonItem.displayName = 'RadioButton.Item';\n\nexport default withTheme(RadioButtonItem);\n\n// @component-docs ignore-next-line\nconst RadioButtonItemWithTheme = withTheme(RadioButtonItem);\n// @component-docs ignore-next-line\nexport { RadioButtonItemWithTheme as RadioButtonItem };\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n  },\n  label: {\n    fontSize: 16,\n    flex: 1,\n  },\n});\n"]}