{"version":3,"sources":["CheckboxItem.tsx"],"names":["CheckboxItem","style","status","label","onPress","labelStyle","theme","testID","mode","props","checkboxProps","checkbox","styles","container","color","colors","text","displayName","CheckboxItemWithTheme","StyleSheet","create","flexDirection","alignItems","justifyContent","paddingVertical","paddingHorizontal","fontSize","flex"],"mappings":";;;;;;;AAAA;;AAEA;;AAQA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAkDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMA,YAAY,GAAG,CAAC;AACpBC,EAAAA,KADoB;AAEpBC,EAAAA,MAFoB;AAGpBC,EAAAA,KAHoB;AAIpBC,EAAAA,OAJoB;AAKpBC,EAAAA,UALoB;AAMpBC,EAAAA,KANoB;AAOpBC,EAAAA,MAPoB;AAQpBC,EAAAA,IARoB;AASpB,KAAGC;AATiB,CAAD,KAUR;AACX,QAAMC,aAAa,GAAG,EAAE,GAAGD,KAAL;AAAYP,IAAAA,MAAZ;AAAoBI,IAAAA;AAApB,GAAtB;AACA,MAAIK,QAAJ;;AAEA,MAAIH,IAAI,KAAK,SAAb,EAAwB;AACtBG,IAAAA,QAAQ,gBAAG,oBAAC,wBAAD,EAAqBD,aAArB,CAAX;AACD,GAFD,MAEO,IAAIF,IAAI,KAAK,KAAb,EAAoB;AACzBG,IAAAA,QAAQ,gBAAG,oBAAC,oBAAD,EAAiBD,aAAjB,CAAX;AACD,GAFM,MAEA;AACLC,IAAAA,QAAQ,gBAAG,oBAAC,iBAAD,EAAcD,aAAd,CAAX;AACD;;AAED,sBACE,oBAAC,wBAAD;AAAiB,IAAA,OAAO,EAAEN,OAA1B;AAAmC,IAAA,MAAM,EAAEG;AAA3C,kBACE,oBAAC,iBAAD;AAAM,IAAA,KAAK,EAAE,CAACK,MAAM,CAACC,SAAR,EAAmBZ,KAAnB,CAAb;AAAwC,IAAA,aAAa,EAAC;AAAtD,kBACE,oBAAC,aAAD;AAAM,IAAA,KAAK,EAAE,CAACW,MAAM,CAACT,KAAR,EAAe;AAAEW,MAAAA,KAAK,EAAER,KAAK,CAACS,MAAN,CAAaC;AAAtB,KAAf,EAA6CX,UAA7C;AAAb,KACGF,KADH,CADF,EAIGQ,QAJH,CADF,CADF;AAUD,CAhCD;;AAkCAX,YAAY,CAACiB,WAAb,GAA2B,eAA3B;;eAEe,wBAAUjB,YAAV,C,EAEf;;;;AACA,MAAMkB,qBAAqB,GAAG,wBAAUlB,YAAV,CAA9B,C,CACA;;;;AAGA,MAAMY,MAAM,GAAGO,wBAAWC,MAAX,CAAkB;AAC/BP,EAAAA,SAAS,EAAE;AACTQ,IAAAA,aAAa,EAAE,KADN;AAETC,IAAAA,UAAU,EAAE,QAFH;AAGTC,IAAAA,cAAc,EAAE,eAHP;AAITC,IAAAA,eAAe,EAAE,CAJR;AAKTC,IAAAA,iBAAiB,EAAE;AALV,GADoB;AAQ/BtB,EAAAA,KAAK,EAAE;AACLuB,IAAAA,QAAQ,EAAE,EADL;AAELC,IAAAA,IAAI,EAAE;AAFD;AARwB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\n\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport Checkbox from './Checkbox';\nimport CheckboxAndroid from './CheckboxAndroid';\nimport CheckboxIOS from './CheckboxIOS';\nimport Text from '../Typography/Text';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\n\ntype Props = {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Label to be displayed on the item.\n   */\n  label: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for unchecked checkbox.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * Additional styles for container View.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n  /**\n   * Whether `<Checkbox.Android />` or `<Checkbox.IOS />` should be used.\n   * Left undefined `<Checkbox />` will be used.\n   */\n  mode?: 'android' | 'ios';\n};\n\n/**\n * Checkbox.Item allows you to press the whole row (item) instead of only the Checkbox.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Checkbox } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View>\n *     <Checkbox.Item label=\"Item\" status=\"checked\" />\n *   </View>\n * );\n *\n * export default MyComponent;\n *```\n */\n\nconst CheckboxItem = ({\n  style,\n  status,\n  label,\n  onPress,\n  labelStyle,\n  theme,\n  testID,\n  mode,\n  ...props\n}: Props) => {\n  const checkboxProps = { ...props, status, theme };\n  let checkbox;\n\n  if (mode === 'android') {\n    checkbox = <CheckboxAndroid {...checkboxProps} />;\n  } else if (mode === 'ios') {\n    checkbox = <CheckboxIOS {...checkboxProps} />;\n  } else {\n    checkbox = <Checkbox {...checkboxProps} />;\n  }\n\n  return (\n    <TouchableRipple onPress={onPress} testID={testID}>\n      <View style={[styles.container, style]} pointerEvents=\"none\">\n        <Text style={[styles.label, { color: theme.colors.text }, labelStyle]}>\n          {label}\n        </Text>\n        {checkbox}\n      </View>\n    </TouchableRipple>\n  );\n};\n\nCheckboxItem.displayName = 'Checkbox.Item';\n\nexport default withTheme(CheckboxItem);\n\n// @component-docs ignore-next-line\nconst CheckboxItemWithTheme = withTheme(CheckboxItem);\n// @component-docs ignore-next-line\nexport { CheckboxItemWithTheme as CheckboxItem };\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n  },\n  label: {\n    fontSize: 16,\n    flex: 1,\n  },\n});\n"]}