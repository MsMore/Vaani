{"version":3,"file":"expo-updates.js","sourceRoot":"","sources":["../../../src/plugins/unversioned/expo-updates.ts"],"names":[],"mappings":";;AACA,mDAA0E;AAC1E,+CAAkE;AAClE,kDAAsD;AACtD,sDAAqD;AAErD,mCAAmC;AAEnC,MAAM,WAAW,GAAG,cAAc,CAAC;AAEtB,QAAA,WAAW,GAA2C,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;IACnF,OAAO,iCAAgB,CAAC,MAAM,EAAE;QAC9B,eAAe,EAAE,IAAI;QACrB,gDAAgD;QAChD,MAAM,EAAE,CAAC,WAAW,EAAE,KAAK,CAAC;QAC5B,6DAA6D;QAC7D,QAAQ,EAAE,MAAM,CAAC,EAAE,CAAC,sBAAsB,CAAC,MAAM,EAAE,KAAK,CAAC;KAC1D,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,MAAM,sBAAsB,GAA2C,kCAAmB,CACxF,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;IAChB,MAAM,GAAG,qBAAkB,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;IAC3C,MAAM,GAAG,qBAAc,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;IACvC,OAAO,MAAM,CAAC;AAChB,CAAC,EACD,WAAW,CACZ,CAAC;AAEF,kBAAe,mBAAW,CAAC","sourcesContent":["import { ConfigPlugin } from '../../Plugin.types';\nimport { withUpdates as withUpdatesAndroid } from '../../android/Updates';\nimport { withUpdates as withUpdatesIOS } from '../../ios/Updates';\nimport { createRunOncePlugin } from '../core-plugins';\nimport { withStaticPlugin } from '../static-plugins';\n\n// Local unversioned updates plugin\n\nconst packageName = 'expo-updates';\n\nexport const withUpdates: ConfigPlugin<{ expoUsername: string }> = (config, props) => {\n  return withStaticPlugin(config, {\n    _isLegacyPlugin: true,\n    // Pass props to the static plugin if it exists.\n    plugin: [packageName, props],\n    // If the static plugin isn't found, use the unversioned one.\n    fallback: config => withUnversionedUpdates(config, props),\n  });\n};\n\nconst withUnversionedUpdates: ConfigPlugin<{ expoUsername: string }> = createRunOncePlugin(\n  (config, props) => {\n    config = withUpdatesAndroid(config, props);\n    config = withUpdatesIOS(config, props);\n    return config;\n  },\n  packageName\n);\n\nexport default withUpdates;\n"]}