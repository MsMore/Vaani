{"version":3,"file":"core-plugins.js","sourceRoot":"","sources":["../../src/plugins/core-plugins.ts"],"names":[],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport { boolish } from 'getenv';\n\nimport {\n  ConfigPlugin,\n  ExportedConfig,\n  ExportedConfigWithProps,\n  Mod,\n  ModPlatform,\n  StaticPlugin,\n} from '../Plugin.types';\nimport { assert } from '../utils/errors';\nimport { addHistoryItem, getHistoryItem, PluginHistoryItem } from '../utils/history';\nimport { withStaticPlugin } from './static-plugins';\n\nconst EXPO_DEBUG = boolish('EXPO_DEBUG', false);\n\n/**\n * Resolves a list of plugins.\n *\n * @param config exported config\n * @param plugins list of config config plugins to apply to the exported config\n */\nexport const withPlugins: ConfigPlugin<(StaticPlugin | ConfigPlugin | string)[]> = (\n  config,\n  plugins\n) => {\n  assert(\n    Array.isArray(plugins),\n    'withPlugins expected a valid array of plugins or plugin module paths'\n  );\n  return plugins.reduce((prev, plugin) => {\n    return withStaticPlugin(prev, { plugin });\n  }, config);\n};\n\n/**\n * Prevents the same plugin from being run twice.\n * Used for migrating from unversioned expo config plugins to versioned plugins.\n *\n * @param config\n * @param name\n */\nexport const withRunOnce: ConfigPlugin<{\n  plugin: ConfigPlugin<void>;\n  name: PluginHistoryItem['name'];\n  version?: PluginHistoryItem['version'];\n}> = (config, { plugin, name, version }) => {\n  // Detect if a plugin has already been run on this config.\n  if (getHistoryItem(config, name)) {\n    return config;\n  }\n\n  // Push the history item so duplicates cannot be run.\n  config = addHistoryItem(config, { name, version });\n\n  return plugin(config);\n};\n\n/**\n * Helper method for creating mods from existing config functions.\n *\n * @param action\n */\nexport function createRunOncePlugin<T>(\n  plugin: ConfigPlugin<T>,\n  name: string,\n  version?: string\n): ConfigPlugin<T> {\n  return (config, props) => {\n    return withRunOnce(config, { plugin: config => plugin(config, props), name, version });\n  };\n}\n\n/**\n * Mods that don't modify any data, all unresolved functionality is performed inside a dangerous mod.\n * All dangerous mods run first before other mods.\n *\n * @param config\n * @param platform\n * @param action\n */\nexport const withDangerousMod: ConfigPlugin<[ModPlatform, Mod<unknown>]> = (\n  config,\n  [platform, action]\n) => {\n  return withExtendedMod(config, {\n    platform,\n    mod: 'dangerous',\n    action,\n  });\n};\n\n/**\n * Plugin to extend a mod function in the plugins config.\n *\n * @param config exported config\n * @param platform platform to target (ios or android)\n * @param mod name of the platform function to extend\n * @param action method to run on the mod when the config is compiled\n */\nexport function withExtendedMod<T>(\n  config: ExportedConfig,\n  {\n    platform,\n    mod,\n    action,\n  }: {\n    platform: ModPlatform;\n    mod: string;\n    action: Mod<T>;\n  }\n): ExportedConfig {\n  return withInterceptedMod(config, {\n    platform,\n    mod,\n    async action({ modRequest: { nextMod, ...modRequest }, modResults, ...config }) {\n      const results = await action({ modRequest, modResults: modResults as T, ...config });\n      return nextMod!(results as any);\n    },\n  });\n}\n\n/**\n * Plugin to intercept execution of a given `mod` with the given `action`.\n * If an action was already set on the given `config` config for `mod`, then it\n * will be provided to the `action` as `nextMod` when it's evaluated, otherwise\n * `nextMod` will be an identity function.\n *\n * @param config exported config\n * @param platform platform to target (ios or android)\n * @param mod name of the platform function to intercept\n * @param skipEmptyMod should skip running the action if there is no existing mod to intercept\n * @param action method to run on the mod when the config is compiled\n */\nexport function withInterceptedMod<T>(\n  config: ExportedConfig,\n  {\n    platform,\n    mod,\n    action,\n    skipEmptyMod,\n  }: {\n    platform: ModPlatform;\n    mod: string;\n    action: Mod<T>;\n    skipEmptyMod?: boolean;\n  }\n): ExportedConfig {\n  if (!config.mods) {\n    config.mods = {};\n  }\n  if (!config.mods[platform]) {\n    config.mods[platform] = {};\n  }\n\n  let interceptedMod: Mod<T> = (config.mods[platform] as Record<string, any>)[mod];\n\n  // No existing mod to intercept\n  if (!interceptedMod) {\n    if (skipEmptyMod) {\n      // Skip running the action\n      return config;\n    }\n    // Use a noop mod and continue\n    const noopMod: Mod<T> = config => config;\n    interceptedMod = noopMod;\n  }\n\n  // Create a stack trace for debugging ahead of time\n  let debugTrace: string = '';\n  // Use the possibly user defined value. Otherwise fallback to the env variable.\n  // We support the env variable because user mods won't have _internal defined in time.\n  const isDebug = config._internal?.isDebug ?? EXPO_DEBUG;\n  if (isDebug) {\n    // Get a stack trace via the Error API\n    const stack = new Error().stack;\n    // Format the stack trace to create the debug log\n    debugTrace = getDebugPluginStackFromStackTrace(stack);\n    const modStack = chalk.bold(`${platform}.${mod}`);\n\n    debugTrace = `${modStack}: ${debugTrace}`;\n  }\n\n  async function interceptingMod({ modRequest, ...config }: ExportedConfigWithProps<T>) {\n    if (isDebug) {\n      // In debug mod, log the plugin stack in the order which they were invoked\n      console.log(debugTrace);\n    }\n    return action({ ...config, modRequest: { ...modRequest, nextMod: interceptedMod } });\n  }\n\n  (config.mods[platform] as any)[mod] = interceptingMod;\n\n  return config;\n}\n\nfunction getDebugPluginStackFromStackTrace(stacktrace?: string): string {\n  if (!stacktrace) {\n    return '';\n  }\n\n  const treeStackLines: string[] = [];\n  for (const line of stacktrace.split('\\n')) {\n    const [first, second] = line.trim().split(' ');\n    if (first === 'at') {\n      treeStackLines.push(second);\n    }\n  }\n\n  const plugins = treeStackLines\n    .map(first => {\n      // Match the first part of the stack trace against the plugin naming convention\n      // \"with\" followed by a capital letter.\n      const match = first?.match(/(\\bwith[A-Z].*?\\b)/g);\n      if (match?.length) {\n        // Return the plugin name\n        return match[0];\n      }\n      return null;\n    })\n    .filter(Boolean);\n\n  // redundant as all debug logs are captured in withInterceptedMod\n  if (plugins[0] === 'withInterceptedMod') {\n    plugins.shift();\n  }\n\n  const commonPlugins = ['withPlugins', 'withExtendedMod'];\n\n  return (\n    (plugins as string[])\n      .reverse()\n      .map((pluginName, index) => {\n        // Base mods indicate a logical section.\n        if (pluginName.includes('BaseMod')) {\n          pluginName = chalk.bold(pluginName);\n        }\n        // highlight dangerous mods\n        if (pluginName.toLowerCase().includes('danger')) {\n          pluginName = chalk.red(pluginName);\n        }\n\n        if (index === 0) {\n          return chalk.blue(pluginName);\n        } else if (commonPlugins.includes(pluginName)) {\n          // Common mod names often clutter up the logs, dim them out\n          return chalk.dim(pluginName);\n        }\n        return pluginName;\n      })\n      // Join the results:\n      // withExpoAndroidPlugins ➜ withPlugins ➜ withIcons ➜ withDangerousMod ➜ withExtendedMod\n      .join(' ➜ ')\n  );\n}\n"]}