{"version":3,"file":"ios-plugins.js","sourceRoot":"","sources":["../../src/plugins/ios-plugins.ts"],"names":[],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport { JSONObject } from '@expo/json-file';\nimport { XcodeProject } from 'xcode';\n\nimport { ConfigPlugin, Mod } from '../Plugin.types';\nimport { ExpoPlist, InfoPlist } from '../ios/IosConfig.types';\nimport { AppDelegateProjectFile } from '../ios/Paths';\nimport { withExtendedMod } from './core-plugins';\n\ntype MutateInfoPlistAction = (expo: ExpoConfig, infoPlist: InfoPlist) => InfoPlist;\n\n/**\n * Helper method for creating mods from existing config functions.\n *\n * @param action\n */\nexport function createInfoPlistPlugin(action: MutateInfoPlistAction, name?: string): ConfigPlugin {\n  const withUnknown: ConfigPlugin = config =>\n    withInfoPlist(config, async config => {\n      config.modResults = await action(config, config.modResults);\n      return config;\n    });\n  if (name) {\n    Object.defineProperty(withUnknown, 'name', {\n      value: name,\n    });\n  }\n  return withUnknown;\n}\n\ntype MutateEntitlementsPlistAction = (expo: ExpoConfig, entitlements: JSONObject) => JSONObject;\n\n/**\n * Helper method for creating mods from existing config functions.\n *\n * @param action\n */\nexport function createEntitlementsPlugin(\n  action: MutateEntitlementsPlistAction,\n  name: string\n): ConfigPlugin {\n  const withUnknown: ConfigPlugin = config =>\n    withEntitlementsPlist(config, async config => {\n      config.modResults = await action(config, config.modResults);\n      return config;\n    });\n  if (name) {\n    Object.defineProperty(withUnknown, 'name', {\n      value: name,\n    });\n  }\n  return withUnknown;\n}\n\n/**\n * Provides the AppDelegate file for modification.\n *\n * @param config\n * @param action\n */\nexport const withAppDelegate: ConfigPlugin<Mod<AppDelegateProjectFile>> = (config, action) => {\n  return withExtendedMod(config, {\n    platform: 'ios',\n    mod: 'appDelegate',\n    action,\n  });\n};\n\n/**\n * Provides the Info.plist file for modification.\n * Keeps the config's expo.ios.infoPlist object in sync with the data.\n *\n * @param config\n * @param action\n */\nexport const withInfoPlist: ConfigPlugin<Mod<InfoPlist>> = (config, action) => {\n  return withExtendedMod<InfoPlist>(config, {\n    platform: 'ios',\n    mod: 'infoPlist',\n    async action(config) {\n      config = await action(config);\n      if (!config.ios) {\n        config.ios = {};\n      }\n      config.ios.infoPlist = config.modResults;\n      return config;\n    },\n  });\n};\n\n/**\n * Provides the main .entitlements file for modification.\n * Keeps the config's expo.ios.entitlements object in sync with the data.\n *\n * @param config\n * @param action\n */\nexport const withEntitlementsPlist: ConfigPlugin<Mod<JSONObject>> = (config, action) => {\n  return withExtendedMod<JSONObject>(config, {\n    platform: 'ios',\n    mod: 'entitlements',\n    async action(config) {\n      config = await action(config);\n      if (!config.ios) {\n        config.ios = {};\n      }\n      config.ios.entitlements = config.modResults;\n      return config;\n    },\n  });\n};\n\n/**\n * Provides the Expo.plist for modification.\n *\n * @param config\n * @param action\n */\nexport const withExpoPlist: ConfigPlugin<Mod<ExpoPlist>> = (config, action) => {\n  return withExtendedMod(config, {\n    platform: 'ios',\n    mod: 'expoPlist',\n    action,\n  });\n};\n\n/**\n * Provides the main .xcodeproj for modification.\n *\n * @param config\n * @param action\n */\nexport const withXcodeProject: ConfigPlugin<Mod<XcodeProject>> = (config, action) => {\n  return withExtendedMod(config, {\n    platform: 'ios',\n    mod: 'xcodeproj',\n    action,\n  });\n};\n"]}